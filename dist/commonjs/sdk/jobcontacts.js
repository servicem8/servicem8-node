"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.JobContacts = void 0;
const jobContactsCreateJobContacts_js_1 = require("../funcs/jobContactsCreateJobContacts.js");
const jobContactsDeleteJobContacts_js_1 = require("../funcs/jobContactsDeleteJobContacts.js");
const jobContactsGetJobContacts_js_1 = require("../funcs/jobContactsGetJobContacts.js");
const jobContactsListJobContacts_js_1 = require("../funcs/jobContactsListJobContacts.js");
const jobContactsUpdateJobContacts_js_1 = require("../funcs/jobContactsUpdateJobContacts.js");
const sdks_js_1 = require("../lib/sdks.js");
const fp_js_1 = require("../types/fp.js");
class JobContacts extends sdks_js_1.ClientSDK {
    /**
     * List all Job Contacts
     *
     * @remarks
     *
     * #### Filtering
     * This endpoint supports result filtering. For more information on how to filter this request, [go here](/docs/filtering).
     *
     * #### OAuth Scope
     * This endpoint requires the following OAuth scope **read_job_contacts**.
     */
    async listJobContacts(options) {
        return (0, fp_js_1.unwrapAsync)((0, jobContactsListJobContacts_js_1.jobContactsListJobContacts)(this, options));
    }
    /**
     * Create a new Job Contact
     *
     * @remarks
     *
     * #### OAuth Scope
     * This endpoint requires the following OAuth scope **manage_job_contacts**.
     *
     * #### Record UUID
     * UUID is optional for record creation. If no UUID is supplied, a UUID will be automatically generated for the new record and returned in the response header as x-record-uuid.
     */
    async createJobContacts(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, jobContactsCreateJobContacts_js_1.jobContactsCreateJobContacts)(this, request, options));
    }
    /**
     * Retrieve a Job Contact
     *
     * @remarks
     *
     * #### OAuth Scope
     * This endpoint requires the following OAuth scope **read_job_contacts**.
     */
    async getJobContacts(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, jobContactsGetJobContacts_js_1.jobContactsGetJobContacts)(this, request, options));
    }
    /**
     * Update a Job Contact
     *
     * @remarks
     *
     * #### OAuth Scope
     * This endpoint requires the following OAuth scope **manage_job_contacts**.
     */
    async updateJobContacts(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, jobContactsUpdateJobContacts_js_1.jobContactsUpdateJobContacts)(this, request, options));
    }
    /**
     * Delete a Job Contact
     *
     * @remarks
     *
     * In ServiceM8, records are never deleted, but are archived. Archived records will remain accessible via the API as (active = 0), however will no longer be visible in UI. Archived records can be restored to active by setting the record active field to 1.
     *
     * #### OAuth Scope
     * This endpoint requires the following OAuth scope **manage_job_contacts**.
     */
    async deleteJobContacts(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, jobContactsDeleteJobContacts_js_1.jobContactsDeleteJobContacts)(this, request, options));
    }
}
exports.JobContacts = JobContacts;
//# sourceMappingURL=jobcontacts.js.map