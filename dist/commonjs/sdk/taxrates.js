"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.TaxRates = void 0;
const taxRatesCreateTaxRates_js_1 = require("../funcs/taxRatesCreateTaxRates.js");
const taxRatesDeleteTaxRates_js_1 = require("../funcs/taxRatesDeleteTaxRates.js");
const taxRatesGetTaxRates_js_1 = require("../funcs/taxRatesGetTaxRates.js");
const taxRatesListTaxRates_js_1 = require("../funcs/taxRatesListTaxRates.js");
const taxRatesUpdateTaxRates_js_1 = require("../funcs/taxRatesUpdateTaxRates.js");
const sdks_js_1 = require("../lib/sdks.js");
const fp_js_1 = require("../types/fp.js");
class TaxRates extends sdks_js_1.ClientSDK {
    /**
     * List all Tax Rates
     *
     * @remarks
     *
     * #### Filtering
     * This endpoint supports result filtering. For more information on how to filter this request, [go here](/docs/filtering).
     */
    async listTaxRates(options) {
        return (0, fp_js_1.unwrapAsync)((0, taxRatesListTaxRates_js_1.taxRatesListTaxRates)(this, options));
    }
    /**
     * Create a new Tax Rate
     *
     * @remarks
     *
     * #### Record UUID
     * UUID is optional for record creation. If no UUID is supplied, a UUID will be automatically generated for the new record and returned in the response header as x-record-uuid.
     */
    async createTaxRates(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, taxRatesCreateTaxRates_js_1.taxRatesCreateTaxRates)(this, request, options));
    }
    /**
     * Retrieve a Tax Rate
     */
    async getTaxRates(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, taxRatesGetTaxRates_js_1.taxRatesGetTaxRates)(this, request, options));
    }
    /**
     * Update a Tax Rate
     */
    async updateTaxRates(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, taxRatesUpdateTaxRates_js_1.taxRatesUpdateTaxRates)(this, request, options));
    }
    /**
     * Delete a Tax Rate
     *
     * @remarks
     *
     * In ServiceM8, records are never deleted, but are archived. Archived records will remain accessible via the API as (active = 0), however will no longer be visible in UI. Archived records can be restored to active by setting the record active field to 1.
     */
    async deleteTaxRates(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, taxRatesDeleteTaxRates_js_1.taxRatesDeleteTaxRates)(this, request, options));
    }
}
exports.TaxRates = TaxRates;
//# sourceMappingURL=taxrates.js.map