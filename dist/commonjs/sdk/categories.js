"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Categories = void 0;
const categoriesCreateCategories_js_1 = require("../funcs/categoriesCreateCategories.js");
const categoriesDeleteCategories_js_1 = require("../funcs/categoriesDeleteCategories.js");
const categoriesGetCategories_js_1 = require("../funcs/categoriesGetCategories.js");
const categoriesListCategories_js_1 = require("../funcs/categoriesListCategories.js");
const categoriesUpdateCategories_js_1 = require("../funcs/categoriesUpdateCategories.js");
const sdks_js_1 = require("../lib/sdks.js");
const fp_js_1 = require("../types/fp.js");
class Categories extends sdks_js_1.ClientSDK {
    /**
     * List all Categories
     *
     * @remarks
     *
     * #### Filtering
     * This endpoint supports result filtering. For more information on how to filter this request, [go here](/docs/filtering).
     *
     * #### OAuth Scope
     * This endpoint requires the following OAuth scope **read_job_categories**.
     */
    async listCategories(options) {
        return (0, fp_js_1.unwrapAsync)((0, categoriesListCategories_js_1.categoriesListCategories)(this, options));
    }
    /**
     * Create a new Category
     *
     * @remarks
     *
     * #### OAuth Scope
     * This endpoint requires the following OAuth scope **manage_job_categories**.
     *
     * #### Record UUID
     * UUID is optional for record creation. If no UUID is supplied, a UUID will be automatically generated for the new record and returned in the response header as x-record-uuid.
     */
    async createCategories(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, categoriesCreateCategories_js_1.categoriesCreateCategories)(this, request, options));
    }
    /**
     * Retrieve a Category
     *
     * @remarks
     *
     * #### OAuth Scope
     * This endpoint requires the following OAuth scope **read_job_categories**.
     */
    async getCategories(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, categoriesGetCategories_js_1.categoriesGetCategories)(this, request, options));
    }
    /**
     * Update a Category
     *
     * @remarks
     *
     * #### OAuth Scope
     * This endpoint requires the following OAuth scope **manage_job_categories**.
     */
    async updateCategories(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, categoriesUpdateCategories_js_1.categoriesUpdateCategories)(this, request, options));
    }
    /**
     * Delete a Category
     *
     * @remarks
     *
     * In ServiceM8, records are never deleted, but are archived. Archived records will remain accessible via the API as (active = 0), however will no longer be visible in UI. Archived records can be restored to active by setting the record active field to 1.
     *
     * #### OAuth Scope
     * This endpoint requires the following OAuth scope **manage_job_categories**.
     */
    async deleteCategories(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, categoriesDeleteCategories_js_1.categoriesDeleteCategories)(this, request, options));
    }
}
exports.Categories = Categories;
//# sourceMappingURL=categories.js.map