"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.JobQueues = void 0;
const jobQueuesCreateJobQueues_js_1 = require("../funcs/jobQueuesCreateJobQueues.js");
const jobQueuesDeleteJobQueues_js_1 = require("../funcs/jobQueuesDeleteJobQueues.js");
const jobQueuesGetJobQueues_js_1 = require("../funcs/jobQueuesGetJobQueues.js");
const jobQueuesListJobQueues_js_1 = require("../funcs/jobQueuesListJobQueues.js");
const jobQueuesUpdateJobQueues_js_1 = require("../funcs/jobQueuesUpdateJobQueues.js");
const sdks_js_1 = require("../lib/sdks.js");
const fp_js_1 = require("../types/fp.js");
class JobQueues extends sdks_js_1.ClientSDK {
    /**
     * List all Job Queues
     *
     * @remarks
     *
     * #### Filtering
     * This endpoint supports result filtering. For more information on how to filter this request, [go here](/docs/filtering).
     *
     * #### OAuth Scope
     * This endpoint requires the following OAuth scope **read_job_queues**.
     */
    async listJobQueues(options) {
        return (0, fp_js_1.unwrapAsync)((0, jobQueuesListJobQueues_js_1.jobQueuesListJobQueues)(this, options));
    }
    /**
     * Create a new Job Queue
     *
     * @remarks
     *
     * #### OAuth Scope
     * This endpoint requires the following OAuth scope **manage_job_queues**.
     *
     * #### Record UUID
     * UUID is optional for record creation. If no UUID is supplied, a UUID will be automatically generated for the new record and returned in the response header as x-record-uuid.
     */
    async createJobQueues(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, jobQueuesCreateJobQueues_js_1.jobQueuesCreateJobQueues)(this, request, options));
    }
    /**
     * Retrieve a Job Queue
     *
     * @remarks
     *
     * #### OAuth Scope
     * This endpoint requires the following OAuth scope **read_job_queues**.
     */
    async getJobQueues(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, jobQueuesGetJobQueues_js_1.jobQueuesGetJobQueues)(this, request, options));
    }
    /**
     * Update a Job Queue
     *
     * @remarks
     *
     * #### OAuth Scope
     * This endpoint requires the following OAuth scope **manage_job_queues**.
     */
    async updateJobQueues(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, jobQueuesUpdateJobQueues_js_1.jobQueuesUpdateJobQueues)(this, request, options));
    }
    /**
     * Delete a Job Queue
     *
     * @remarks
     *
     * In ServiceM8, records are never deleted, but are archived. Archived records will remain accessible via the API as (active = 0), however will no longer be visible in UI. Archived records can be restored to active by setting the record active field to 1.
     *
     * #### OAuth Scope
     * This endpoint requires the following OAuth scope **manage_job_queues**.
     */
    async deleteJobQueues(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, jobQueuesDeleteJobQueues_js_1.jobQueuesDeleteJobQueues)(this, request, options));
    }
}
exports.JobQueues = JobQueues;
//# sourceMappingURL=jobqueues.js.map