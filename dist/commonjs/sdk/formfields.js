"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.FormFields = void 0;
const formFieldsCreateFormFields_js_1 = require("../funcs/formFieldsCreateFormFields.js");
const formFieldsDeleteFormFields_js_1 = require("../funcs/formFieldsDeleteFormFields.js");
const formFieldsGetFormFields_js_1 = require("../funcs/formFieldsGetFormFields.js");
const formFieldsListFormFields_js_1 = require("../funcs/formFieldsListFormFields.js");
const formFieldsUpdateFormFields_js_1 = require("../funcs/formFieldsUpdateFormFields.js");
const sdks_js_1 = require("../lib/sdks.js");
const fp_js_1 = require("../types/fp.js");
class FormFields extends sdks_js_1.ClientSDK {
    /**
     * List all Form Fields
     *
     * @remarks
     *
     * #### Filtering
     * This endpoint supports result filtering. For more information on how to filter this request, [go here](/docs/filtering).
     */
    async listFormFields(options) {
        return (0, fp_js_1.unwrapAsync)((0, formFieldsListFormFields_js_1.formFieldsListFormFields)(this, options));
    }
    /**
     * Create a new Form Field
     *
     * @remarks
     *
     * #### Record UUID
     * UUID is optional for record creation. If no UUID is supplied, a UUID will be automatically generated for the new record and returned in the response header as x-record-uuid.
     */
    async createFormFields(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, formFieldsCreateFormFields_js_1.formFieldsCreateFormFields)(this, request, options));
    }
    /**
     * Retrieve a Form Field
     */
    async getFormFields(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, formFieldsGetFormFields_js_1.formFieldsGetFormFields)(this, request, options));
    }
    /**
     * Update a Form Field
     */
    async updateFormFields(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, formFieldsUpdateFormFields_js_1.formFieldsUpdateFormFields)(this, request, options));
    }
    /**
     * Delete a Form Field
     *
     * @remarks
     *
     * In ServiceM8, records are never deleted, but are archived. Archived records will remain accessible via the API as (active = 0), however will no longer be visible in UI. Archived records can be restored to active by setting the record active field to 1.
     */
    async deleteFormFields(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, formFieldsDeleteFormFields_js_1.formFieldsDeleteFormFields)(this, request, options));
    }
}
exports.FormFields = FormFields;
//# sourceMappingURL=formfields.js.map