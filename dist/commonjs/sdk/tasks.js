"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Tasks = void 0;
const tasksCreateTasks_js_1 = require("../funcs/tasksCreateTasks.js");
const tasksDeleteTasks_js_1 = require("../funcs/tasksDeleteTasks.js");
const tasksGetTasks_js_1 = require("../funcs/tasksGetTasks.js");
const tasksListTasks_js_1 = require("../funcs/tasksListTasks.js");
const tasksUpdateTasks_js_1 = require("../funcs/tasksUpdateTasks.js");
const sdks_js_1 = require("../lib/sdks.js");
const fp_js_1 = require("../types/fp.js");
class Tasks extends sdks_js_1.ClientSDK {
    /**
     * List all Tasks
     *
     * @remarks
     *
     * #### Filtering
     * This endpoint supports result filtering. For more information on how to filter this request, [go here](/docs/filtering).
     *
     * #### OAuth Scope
     * This endpoint requires the following OAuth scope **read_tasks**.
     */
    async listTasks(options) {
        return (0, fp_js_1.unwrapAsync)((0, tasksListTasks_js_1.tasksListTasks)(this, options));
    }
    /**
     * Create a new Task
     *
     * @remarks
     *
     * #### OAuth Scope
     * This endpoint requires the following OAuth scope **manage_tasks**.
     *
     * #### Record UUID
     * UUID is optional for record creation. If no UUID is supplied, a UUID will be automatically generated for the new record and returned in the response header as x-record-uuid.
     */
    async createTasks(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, tasksCreateTasks_js_1.tasksCreateTasks)(this, request, options));
    }
    /**
     * Retrieve a Task
     *
     * @remarks
     *
     * #### OAuth Scope
     * This endpoint requires the following OAuth scope **read_tasks**.
     */
    async getTasks(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, tasksGetTasks_js_1.tasksGetTasks)(this, request, options));
    }
    /**
     * Update a Task
     *
     * @remarks
     *
     * #### OAuth Scope
     * This endpoint requires the following OAuth scope **manage_tasks**.
     */
    async updateTasks(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, tasksUpdateTasks_js_1.tasksUpdateTasks)(this, request, options));
    }
    /**
     * Delete a Task
     *
     * @remarks
     *
     * In ServiceM8, records are never deleted, but are archived. Archived records will remain accessible via the API as (active = 0), however will no longer be visible in UI. Archived records can be restored to active by setting the record active field to 1.
     *
     * #### OAuth Scope
     * This endpoint requires the following OAuth scope **manage_tasks**.
     */
    async deleteTasks(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, tasksDeleteTasks_js_1.tasksDeleteTasks)(this, request, options));
    }
}
exports.Tasks = Tasks;
//# sourceMappingURL=tasks.js.map