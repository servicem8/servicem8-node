"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.JobPayments = void 0;
const jobPaymentsCreateJobPayments_js_1 = require("../funcs/jobPaymentsCreateJobPayments.js");
const jobPaymentsDeleteJobPayments_js_1 = require("../funcs/jobPaymentsDeleteJobPayments.js");
const jobPaymentsGetJobPayments_js_1 = require("../funcs/jobPaymentsGetJobPayments.js");
const jobPaymentsListJobPayments_js_1 = require("../funcs/jobPaymentsListJobPayments.js");
const jobPaymentsUpdateJobPayments_js_1 = require("../funcs/jobPaymentsUpdateJobPayments.js");
const sdks_js_1 = require("../lib/sdks.js");
const fp_js_1 = require("../types/fp.js");
class JobPayments extends sdks_js_1.ClientSDK {
    /**
     * List all Job Payments
     *
     * @remarks
     *
     * #### Filtering
     * This endpoint supports result filtering. For more information on how to filter this request, [go here](/docs/filtering).
     */
    async listJobPayments(options) {
        return (0, fp_js_1.unwrapAsync)((0, jobPaymentsListJobPayments_js_1.jobPaymentsListJobPayments)(this, options));
    }
    /**
     * Create a new Job Payment
     *
     * @remarks
     *
     * #### Record UUID
     * UUID is optional for record creation. If no UUID is supplied, a UUID will be automatically generated for the new record and returned in the response header as x-record-uuid.
     */
    async createJobPayments(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, jobPaymentsCreateJobPayments_js_1.jobPaymentsCreateJobPayments)(this, request, options));
    }
    /**
     * Retrieve a Job Payment
     */
    async getJobPayments(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, jobPaymentsGetJobPayments_js_1.jobPaymentsGetJobPayments)(this, request, options));
    }
    /**
     * Update a Job Payment
     */
    async updateJobPayments(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, jobPaymentsUpdateJobPayments_js_1.jobPaymentsUpdateJobPayments)(this, request, options));
    }
    /**
     * Delete a Job Payment
     *
     * @remarks
     *
     * In ServiceM8, records are never deleted, but are archived. Archived records will remain accessible via the API as (active = 0), however will no longer be visible in UI. Archived records can be restored to active by setting the record active field to 1.
     */
    async deleteJobPayments(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, jobPaymentsDeleteJobPayments_js_1.jobPaymentsDeleteJobPayments)(this, request, options));
    }
}
exports.JobPayments = JobPayments;
//# sourceMappingURL=jobpayments.js.map