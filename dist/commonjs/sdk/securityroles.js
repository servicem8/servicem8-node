"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.SecurityRoles = void 0;
const securityRolesCreateSecurityRoles_js_1 = require("../funcs/securityRolesCreateSecurityRoles.js");
const securityRolesDeleteSecurityRoles_js_1 = require("../funcs/securityRolesDeleteSecurityRoles.js");
const securityRolesGetSecurityRoles_js_1 = require("../funcs/securityRolesGetSecurityRoles.js");
const securityRolesListSecurityRoles_js_1 = require("../funcs/securityRolesListSecurityRoles.js");
const securityRolesUpdateSecurityRoles_js_1 = require("../funcs/securityRolesUpdateSecurityRoles.js");
const sdks_js_1 = require("../lib/sdks.js");
const fp_js_1 = require("../types/fp.js");
class SecurityRoles extends sdks_js_1.ClientSDK {
    /**
     * List all Security Roles
     *
     * @remarks
     *
     * #### Filtering
     * This endpoint supports result filtering. For more information on how to filter this request, [go here](/docs/filtering).
     */
    async listSecurityRoles(options) {
        return (0, fp_js_1.unwrapAsync)((0, securityRolesListSecurityRoles_js_1.securityRolesListSecurityRoles)(this, options));
    }
    /**
     * Create a new Security Role
     *
     * @remarks
     *
     * #### Record UUID
     * UUID is optional for record creation. If no UUID is supplied, a UUID will be automatically generated for the new record and returned in the response header as x-record-uuid.
     */
    async createSecurityRoles(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, securityRolesCreateSecurityRoles_js_1.securityRolesCreateSecurityRoles)(this, request, options));
    }
    /**
     * Retrieve a Security Role
     */
    async getSecurityRoles(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, securityRolesGetSecurityRoles_js_1.securityRolesGetSecurityRoles)(this, request, options));
    }
    /**
     * Update a Security Role
     */
    async updateSecurityRoles(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, securityRolesUpdateSecurityRoles_js_1.securityRolesUpdateSecurityRoles)(this, request, options));
    }
    /**
     * Delete a Security Role
     *
     * @remarks
     *
     * In ServiceM8, records are never deleted, but are archived. Archived records will remain accessible via the API as (active = 0), however will no longer be visible in UI. Archived records can be restored to active by setting the record active field to 1.
     */
    async deleteSecurityRoles(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, securityRolesDeleteSecurityRoles_js_1.securityRolesDeleteSecurityRoles)(this, request, options));
    }
}
exports.SecurityRoles = SecurityRoles;
//# sourceMappingURL=securityroles.js.map