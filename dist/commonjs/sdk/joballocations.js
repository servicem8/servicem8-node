"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.JobAllocations = void 0;
const jobAllocationsCreateJobAllocations_js_1 = require("../funcs/jobAllocationsCreateJobAllocations.js");
const jobAllocationsDeleteJobAllocations_js_1 = require("../funcs/jobAllocationsDeleteJobAllocations.js");
const jobAllocationsGetJobAllocations_js_1 = require("../funcs/jobAllocationsGetJobAllocations.js");
const jobAllocationsListJobAllocations_js_1 = require("../funcs/jobAllocationsListJobAllocations.js");
const jobAllocationsUpdateJobAllocations_js_1 = require("../funcs/jobAllocationsUpdateJobAllocations.js");
const sdks_js_1 = require("../lib/sdks.js");
const fp_js_1 = require("../types/fp.js");
class JobAllocations extends sdks_js_1.ClientSDK {
    /**
     * List all Job Allocations
     *
     * @remarks
     *
     * #### Filtering
     * This endpoint supports result filtering. For more information on how to filter this request, [go here](/docs/filtering).
     *
     * #### OAuth Scope
     * This endpoint requires the following OAuth scope **read_schedule**.
     */
    async listJobAllocations(options) {
        return (0, fp_js_1.unwrapAsync)((0, jobAllocationsListJobAllocations_js_1.jobAllocationsListJobAllocations)(this, options));
    }
    /**
     * Create a new Job Allocation
     *
     * @remarks
     *
     * #### OAuth Scope
     * This endpoint requires the following OAuth scope **manage_schedule**.
     *
     * #### Record UUID
     * UUID is optional for record creation. If no UUID is supplied, a UUID will be automatically generated for the new record and returned in the response header as x-record-uuid.
     */
    async createJobAllocations(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, jobAllocationsCreateJobAllocations_js_1.jobAllocationsCreateJobAllocations)(this, request, options));
    }
    /**
     * Retrieve a Job Allocation
     *
     * @remarks
     *
     * #### OAuth Scope
     * This endpoint requires the following OAuth scope **read_schedule**.
     */
    async getJobAllocations(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, jobAllocationsGetJobAllocations_js_1.jobAllocationsGetJobAllocations)(this, request, options));
    }
    /**
     * Update a Job Allocation
     */
    async updateJobAllocations(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, jobAllocationsUpdateJobAllocations_js_1.jobAllocationsUpdateJobAllocations)(this, request, options));
    }
    /**
     * Delete a Job Allocation
     *
     * @remarks
     *
     * In ServiceM8, records are never deleted, but are archived. Archived records will remain accessible via the API as (active = 0), however will no longer be visible in UI. Archived records can be restored to active by setting the record active field to 1.
     */
    async deleteJobAllocations(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, jobAllocationsDeleteJobAllocations_js_1.jobAllocationsDeleteJobAllocations)(this, request, options));
    }
}
exports.JobAllocations = JobAllocations;
//# sourceMappingURL=joballocations.js.map