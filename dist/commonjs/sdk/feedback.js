"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Feedback = void 0;
const feedbackCreateFeedback_js_1 = require("../funcs/feedbackCreateFeedback.js");
const feedbackDeleteFeedback_js_1 = require("../funcs/feedbackDeleteFeedback.js");
const feedbackGetFeedback_js_1 = require("../funcs/feedbackGetFeedback.js");
const feedbackListFeedback_js_1 = require("../funcs/feedbackListFeedback.js");
const feedbackUpdateFeedback_js_1 = require("../funcs/feedbackUpdateFeedback.js");
const sdks_js_1 = require("../lib/sdks.js");
const fp_js_1 = require("../types/fp.js");
class Feedback extends sdks_js_1.ClientSDK {
    /**
     * List all Feedback
     *
     * @remarks
     *
     * #### Filtering
     * This endpoint supports result filtering. For more information on how to filter this request, [go here](/docs/filtering).
     */
    async listFeedback(options) {
        return (0, fp_js_1.unwrapAsync)((0, feedbackListFeedback_js_1.feedbackListFeedback)(this, options));
    }
    /**
     * Create a new Feedback
     *
     * @remarks
     *
     * #### Record UUID
     * UUID is optional for record creation. If no UUID is supplied, a UUID will be automatically generated for the new record and returned in the response header as x-record-uuid.
     */
    async createFeedback(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, feedbackCreateFeedback_js_1.feedbackCreateFeedback)(this, request, options));
    }
    /**
     * Retrieve a Feedback
     */
    async getFeedback(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, feedbackGetFeedback_js_1.feedbackGetFeedback)(this, request, options));
    }
    /**
     * Update a Feedback
     */
    async updateFeedback(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, feedbackUpdateFeedback_js_1.feedbackUpdateFeedback)(this, request, options));
    }
    /**
     * Delete a Feedback
     *
     * @remarks
     *
     * In ServiceM8, records are never deleted, but are archived. Archived records will remain accessible via the API as (active = 0), however will no longer be visible in UI. Archived records can be restored to active by setting the record active field to 1.
     */
    async deleteFeedback(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, feedbackDeleteFeedback_js_1.feedbackDeleteFeedback)(this, request, options));
    }
}
exports.Feedback = Feedback;
//# sourceMappingURL=feedback.js.map