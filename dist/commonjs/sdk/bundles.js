"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Bundles = void 0;
const bundlesCreateBundles_js_1 = require("../funcs/bundlesCreateBundles.js");
const bundlesDeleteBundles_js_1 = require("../funcs/bundlesDeleteBundles.js");
const bundlesGetBundles_js_1 = require("../funcs/bundlesGetBundles.js");
const bundlesListBundles_js_1 = require("../funcs/bundlesListBundles.js");
const bundlesUpdateBundles_js_1 = require("../funcs/bundlesUpdateBundles.js");
const sdks_js_1 = require("../lib/sdks.js");
const fp_js_1 = require("../types/fp.js");
class Bundles extends sdks_js_1.ClientSDK {
    /**
     * List all Bundles
     *
     * @remarks
     *
     * #### Filtering
     * This endpoint supports result filtering. For more information on how to filter this request, [go here](/docs/filtering).
     */
    async listBundles(options) {
        return (0, fp_js_1.unwrapAsync)((0, bundlesListBundles_js_1.bundlesListBundles)(this, options));
    }
    /**
     * Create a new Bundle
     *
     * @remarks
     *
     * #### Record UUID
     * UUID is optional for record creation. If no UUID is supplied, a UUID will be automatically generated for the new record and returned in the response header as x-record-uuid.
     */
    async createBundles(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, bundlesCreateBundles_js_1.bundlesCreateBundles)(this, request, options));
    }
    /**
     * Retrieve a Bundle
     */
    async getBundles(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, bundlesGetBundles_js_1.bundlesGetBundles)(this, request, options));
    }
    /**
     * Update a Bundle
     */
    async updateBundles(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, bundlesUpdateBundles_js_1.bundlesUpdateBundles)(this, request, options));
    }
    /**
     * Delete a Bundle
     *
     * @remarks
     *
     * In ServiceM8, records are never deleted, but are archived. Archived records will remain accessible via the API as (active = 0), however will no longer be visible in UI. Archived records can be restored to active by setting the record active field to 1.
     */
    async deleteBundles(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, bundlesDeleteBundles_js_1.bundlesDeleteBundles)(this, request, options));
    }
}
exports.Bundles = Bundles;
//# sourceMappingURL=bundles.js.map