"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Attachments = void 0;
const attachmentsCreateAttachments_js_1 = require("../funcs/attachmentsCreateAttachments.js");
const attachmentsDeleteAttachments_js_1 = require("../funcs/attachmentsDeleteAttachments.js");
const attachmentsGetAttachments_js_1 = require("../funcs/attachmentsGetAttachments.js");
const attachmentsListAttachments_js_1 = require("../funcs/attachmentsListAttachments.js");
const attachmentsUpdateAttachments_js_1 = require("../funcs/attachmentsUpdateAttachments.js");
const sdks_js_1 = require("../lib/sdks.js");
const fp_js_1 = require("../types/fp.js");
class Attachments extends sdks_js_1.ClientSDK {
    /**
     * List all Attachments
     *
     * @remarks
     *
     * #### Filtering
     * This endpoint supports result filtering. For more information on how to filter this request, [go here](/docs/filtering).
     */
    async listAttachments(options) {
        return (0, fp_js_1.unwrapAsync)((0, attachmentsListAttachments_js_1.attachmentsListAttachments)(this, options));
    }
    /**
     * Create a new Attachment
     *
     * @remarks
     *
     * #### Record UUID
     * UUID is optional for record creation. If no UUID is supplied, a UUID will be automatically generated for the new record and returned in the response header as x-record-uuid.
     */
    async createAttachments(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, attachmentsCreateAttachments_js_1.attachmentsCreateAttachments)(this, request, options));
    }
    /**
     * Retrieve an Attachment
     */
    async getAttachments(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, attachmentsGetAttachments_js_1.attachmentsGetAttachments)(this, request, options));
    }
    /**
     * Update an Attachment
     */
    async updateAttachments(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, attachmentsUpdateAttachments_js_1.attachmentsUpdateAttachments)(this, request, options));
    }
    /**
     * Delete an Attachment
     *
     * @remarks
     *
     * In ServiceM8, records are never deleted, but are archived. Archived records will remain accessible via the API as (active = 0), however will no longer be visible in UI. Archived records can be restored to active by setting the record active field to 1.
     */
    async deleteAttachments(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, attachmentsDeleteAttachments_js_1.attachmentsDeleteAttachments)(this, request, options));
    }
}
exports.Attachments = Attachments;
//# sourceMappingURL=attachments.js.map