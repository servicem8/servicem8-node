"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.StaffMessages = void 0;
const staffMessagesCreateStaffMessages_js_1 = require("../funcs/staffMessagesCreateStaffMessages.js");
const staffMessagesDeleteStaffMessages_js_1 = require("../funcs/staffMessagesDeleteStaffMessages.js");
const staffMessagesGetStaffMessages_js_1 = require("../funcs/staffMessagesGetStaffMessages.js");
const staffMessagesListStaffMessages_js_1 = require("../funcs/staffMessagesListStaffMessages.js");
const staffMessagesUpdateStaffMessages_js_1 = require("../funcs/staffMessagesUpdateStaffMessages.js");
const sdks_js_1 = require("../lib/sdks.js");
const fp_js_1 = require("../types/fp.js");
class StaffMessages extends sdks_js_1.ClientSDK {
    /**
     * List all Staff Messages
     *
     * @remarks
     *
     * #### Filtering
     * This endpoint supports result filtering. For more information on how to filter this request, [go here](/docs/filtering).
     */
    async listStaffMessages(options) {
        return (0, fp_js_1.unwrapAsync)((0, staffMessagesListStaffMessages_js_1.staffMessagesListStaffMessages)(this, options));
    }
    /**
     * Create a new Staff Message
     *
     * @remarks
     *
     * #### Record UUID
     * UUID is optional for record creation. If no UUID is supplied, a UUID will be automatically generated for the new record and returned in the response header as x-record-uuid.
     */
    async createStaffMessages(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, staffMessagesCreateStaffMessages_js_1.staffMessagesCreateStaffMessages)(this, request, options));
    }
    /**
     * Retrieve a Staff Message
     */
    async getStaffMessages(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, staffMessagesGetStaffMessages_js_1.staffMessagesGetStaffMessages)(this, request, options));
    }
    /**
     * Update a Staff Message
     */
    async updateStaffMessages(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, staffMessagesUpdateStaffMessages_js_1.staffMessagesUpdateStaffMessages)(this, request, options));
    }
    /**
     * Delete a Staff Message
     *
     * @remarks
     *
     * In ServiceM8, records are never deleted, but are archived. Archived records will remain accessible via the API as (active = 0), however will no longer be visible in UI. Archived records can be restored to active by setting the record active field to 1.
     */
    async deleteStaffMessages(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, staffMessagesDeleteStaffMessages_js_1.staffMessagesDeleteStaffMessages)(this, request, options));
    }
}
exports.StaffMessages = StaffMessages;
//# sourceMappingURL=staffmessages.js.map