"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Jobs = void 0;
const jobsCreateJobs_js_1 = require("../funcs/jobsCreateJobs.js");
const jobsDeleteJobs_js_1 = require("../funcs/jobsDeleteJobs.js");
const jobsGetJobs_js_1 = require("../funcs/jobsGetJobs.js");
const jobsListJobs_js_1 = require("../funcs/jobsListJobs.js");
const jobsUpdateJobs_js_1 = require("../funcs/jobsUpdateJobs.js");
const sdks_js_1 = require("../lib/sdks.js");
const fp_js_1 = require("../types/fp.js");
class Jobs extends sdks_js_1.ClientSDK {
    /**
     * List all Jobs
     *
     * @remarks
     *
     * #### Filtering
     * This endpoint supports result filtering. For more information on how to filter this request, [go here](/docs/filtering).
     *
     * #### OAuth Scope
     * This endpoint requires the following OAuth scope **read_jobs**.
     */
    async listJobs(options) {
        return (0, fp_js_1.unwrapAsync)((0, jobsListJobs_js_1.jobsListJobs)(this, options));
    }
    /**
     * Create a new Job
     *
     * @remarks
     *
     * #### OAuth Scope
     * This endpoint requires the following OAuth scope **create_jobs**.
     *
     * #### Record UUID
     * UUID is optional for record creation. If no UUID is supplied, a UUID will be automatically generated for the new record and returned in the response header as x-record-uuid.
     */
    async createJobs(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, jobsCreateJobs_js_1.jobsCreateJobs)(this, request, options));
    }
    /**
     * Retrieve a Job
     *
     * @remarks
     *
     * #### OAuth Scope
     * This endpoint requires the following OAuth scope **read_jobs**.
     */
    async getJobs(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, jobsGetJobs_js_1.jobsGetJobs)(this, request, options));
    }
    /**
     * Update a Job
     *
     * @remarks
     *
     * #### OAuth Scope
     * This endpoint requires the following OAuth scope **manage_jobs**.
     */
    async updateJobs(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, jobsUpdateJobs_js_1.jobsUpdateJobs)(this, request, options));
    }
    /**
     * Delete a Job
     *
     * @remarks
     *
     * In ServiceM8, records are never deleted, but are archived. Archived records will remain accessible via the API as (active = 0), however will no longer be visible in UI. Archived records can be restored to active by setting the record active field to 1.
     *
     * #### OAuth Scope
     * This endpoint requires the following OAuth scope **manage_jobs**.
     */
    async deleteJobs(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, jobsDeleteJobs_js_1.jobsDeleteJobs)(this, request, options));
    }
}
exports.Jobs = Jobs;
//# sourceMappingURL=jobs.js.map