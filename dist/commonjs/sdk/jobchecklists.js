"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.JobChecklists = void 0;
const jobChecklistsCreateJobChecklists_js_1 = require("../funcs/jobChecklistsCreateJobChecklists.js");
const jobChecklistsDeleteJobChecklists_js_1 = require("../funcs/jobChecklistsDeleteJobChecklists.js");
const jobChecklistsGetJobChecklists_js_1 = require("../funcs/jobChecklistsGetJobChecklists.js");
const jobChecklistsListJobChecklists_js_1 = require("../funcs/jobChecklistsListJobChecklists.js");
const jobChecklistsUpdateJobChecklists_js_1 = require("../funcs/jobChecklistsUpdateJobChecklists.js");
const sdks_js_1 = require("../lib/sdks.js");
const fp_js_1 = require("../types/fp.js");
class JobChecklists extends sdks_js_1.ClientSDK {
    /**
     * List all Job Checklists
     *
     * @remarks
     *
     * #### Filtering
     * This endpoint supports result filtering. For more information on how to filter this request, [go here](/docs/filtering).
     */
    async listJobChecklists(options) {
        return (0, fp_js_1.unwrapAsync)((0, jobChecklistsListJobChecklists_js_1.jobChecklistsListJobChecklists)(this, options));
    }
    /**
     * Create a new Job Checklist
     *
     * @remarks
     *
     * #### Record UUID
     * UUID is optional for record creation. If no UUID is supplied, a UUID will be automatically generated for the new record and returned in the response header as x-record-uuid.
     */
    async createJobChecklists(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, jobChecklistsCreateJobChecklists_js_1.jobChecklistsCreateJobChecklists)(this, request, options));
    }
    /**
     * Retrieve a Job Checklist
     */
    async getJobChecklists(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, jobChecklistsGetJobChecklists_js_1.jobChecklistsGetJobChecklists)(this, request, options));
    }
    /**
     * Update a Job Checklist
     */
    async updateJobChecklists(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, jobChecklistsUpdateJobChecklists_js_1.jobChecklistsUpdateJobChecklists)(this, request, options));
    }
    /**
     * Delete a Job Checklist
     *
     * @remarks
     *
     * In ServiceM8, records are never deleted, but are archived. Archived records will remain accessible via the API as (active = 0), however will no longer be visible in UI. Archived records can be restored to active by setting the record active field to 1.
     */
    async deleteJobChecklists(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, jobChecklistsDeleteJobChecklists_js_1.jobChecklistsDeleteJobChecklists)(this, request, options));
    }
}
exports.JobChecklists = JobChecklists;
//# sourceMappingURL=jobchecklists.js.map