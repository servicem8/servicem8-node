"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.AssetTypeFields = void 0;
const assetTypeFieldsCreateAssetTypeFields_js_1 = require("../funcs/assetTypeFieldsCreateAssetTypeFields.js");
const assetTypeFieldsDeleteAssetTypeFields_js_1 = require("../funcs/assetTypeFieldsDeleteAssetTypeFields.js");
const assetTypeFieldsGetAssetTypeFields_js_1 = require("../funcs/assetTypeFieldsGetAssetTypeFields.js");
const assetTypeFieldsListAssetTypeFields_js_1 = require("../funcs/assetTypeFieldsListAssetTypeFields.js");
const assetTypeFieldsUpdateAssetTypeFields_js_1 = require("../funcs/assetTypeFieldsUpdateAssetTypeFields.js");
const sdks_js_1 = require("../lib/sdks.js");
const fp_js_1 = require("../types/fp.js");
class AssetTypeFields extends sdks_js_1.ClientSDK {
    /**
     * List all Asset Type Fields
     *
     * @remarks
     *
     * #### Filtering
     * This endpoint supports result filtering. For more information on how to filter this request, [go here](/docs/filtering).
     *
     * #### OAuth Scope
     * This endpoint requires the following OAuth scope **read_assets**.
     */
    async listAssetTypeFields(options) {
        return (0, fp_js_1.unwrapAsync)((0, assetTypeFieldsListAssetTypeFields_js_1.assetTypeFieldsListAssetTypeFields)(this, options));
    }
    /**
     * Create a new Asset Type Field
     *
     * @remarks
     *
     * #### OAuth Scope
     * This endpoint requires the following OAuth scope **manage_assets**.
     *
     * #### Record UUID
     * UUID is optional for record creation. If no UUID is supplied, a UUID will be automatically generated for the new record and returned in the response header as x-record-uuid.
     */
    async createAssetTypeFields(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, assetTypeFieldsCreateAssetTypeFields_js_1.assetTypeFieldsCreateAssetTypeFields)(this, request, options));
    }
    /**
     * Retrieve an Asset Type Field
     *
     * @remarks
     *
     * #### OAuth Scope
     * This endpoint requires the following OAuth scope **read_assets**.
     */
    async getAssetTypeFields(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, assetTypeFieldsGetAssetTypeFields_js_1.assetTypeFieldsGetAssetTypeFields)(this, request, options));
    }
    /**
     * Update an Asset Type Field
     */
    async updateAssetTypeFields(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, assetTypeFieldsUpdateAssetTypeFields_js_1.assetTypeFieldsUpdateAssetTypeFields)(this, request, options));
    }
    /**
     * Delete an Asset Type Field
     *
     * @remarks
     *
     * In ServiceM8, records are never deleted, but are archived. Archived records will remain accessible via the API as (active = 0), however will no longer be visible in UI. Archived records can be restored to active by setting the record active field to 1.
     */
    async deleteAssetTypeFields(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, assetTypeFieldsDeleteAssetTypeFields_js_1.assetTypeFieldsDeleteAssetTypeFields)(this, request, options));
    }
}
exports.AssetTypeFields = AssetTypeFields;
//# sourceMappingURL=assettypefields.js.map