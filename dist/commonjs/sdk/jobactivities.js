"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.JobActivities = void 0;
const jobActivitiesCreateJobActivities_js_1 = require("../funcs/jobActivitiesCreateJobActivities.js");
const jobActivitiesDeleteJobActivities_js_1 = require("../funcs/jobActivitiesDeleteJobActivities.js");
const jobActivitiesGetJobActivities_js_1 = require("../funcs/jobActivitiesGetJobActivities.js");
const jobActivitiesListJobActivities_js_1 = require("../funcs/jobActivitiesListJobActivities.js");
const jobActivitiesUpdateJobActivities_js_1 = require("../funcs/jobActivitiesUpdateJobActivities.js");
const sdks_js_1 = require("../lib/sdks.js");
const fp_js_1 = require("../types/fp.js");
class JobActivities extends sdks_js_1.ClientSDK {
    /**
     * List all Job Activities
     *
     * @remarks
     *
     * #### Filtering
     * This endpoint supports result filtering. For more information on how to filter this request, [go here](/docs/filtering).
     *
     * #### OAuth Scope
     * This endpoint requires the following OAuth scope **read_schedule**.
     */
    async listJobActivities(options) {
        return (0, fp_js_1.unwrapAsync)((0, jobActivitiesListJobActivities_js_1.jobActivitiesListJobActivities)(this, options));
    }
    /**
     * Create a new Job Activity
     *
     * @remarks
     *
     * #### OAuth Scope
     * This endpoint requires the following OAuth scope **manage_schedule**.
     *
     * #### Record UUID
     * UUID is optional for record creation. If no UUID is supplied, a UUID will be automatically generated for the new record and returned in the response header as x-record-uuid.
     */
    async createJobActivities(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, jobActivitiesCreateJobActivities_js_1.jobActivitiesCreateJobActivities)(this, request, options));
    }
    /**
     * Retrieve a Job Activity
     *
     * @remarks
     *
     * #### OAuth Scope
     * This endpoint requires the following OAuth scope **read_schedule**.
     */
    async getJobActivities(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, jobActivitiesGetJobActivities_js_1.jobActivitiesGetJobActivities)(this, request, options));
    }
    /**
     * Update a Job Activity
     *
     * @remarks
     *
     * #### OAuth Scope
     * This endpoint requires the following OAuth scope **manage_schedule**.
     */
    async updateJobActivities(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, jobActivitiesUpdateJobActivities_js_1.jobActivitiesUpdateJobActivities)(this, request, options));
    }
    /**
     * Delete a Job Activity
     *
     * @remarks
     *
     * In ServiceM8, records are never deleted, but are archived. Archived records will remain accessible via the API as (active = 0), however will no longer be visible in UI. Archived records can be restored to active by setting the record active field to 1.
     *
     * #### OAuth Scope
     * This endpoint requires the following OAuth scope **manage_schedule**.
     */
    async deleteJobActivities(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, jobActivitiesDeleteJobActivities_js_1.jobActivitiesDeleteJobActivities)(this, request, options));
    }
}
exports.JobActivities = JobActivities;
//# sourceMappingURL=jobactivities.js.map