"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Forms = void 0;
const formsCreateForms_js_1 = require("../funcs/formsCreateForms.js");
const formsDeleteForms_js_1 = require("../funcs/formsDeleteForms.js");
const formsGetForms_js_1 = require("../funcs/formsGetForms.js");
const formsListForms_js_1 = require("../funcs/formsListForms.js");
const formsUpdateForms_js_1 = require("../funcs/formsUpdateForms.js");
const sdks_js_1 = require("../lib/sdks.js");
const fp_js_1 = require("../types/fp.js");
class Forms extends sdks_js_1.ClientSDK {
    /**
     * List all Forms
     *
     * @remarks
     *
     * #### Filtering
     * This endpoint supports result filtering. For more information on how to filter this request, [go here](/docs/filtering).
     */
    async listForms(options) {
        return (0, fp_js_1.unwrapAsync)((0, formsListForms_js_1.formsListForms)(this, options));
    }
    /**
     * Create a new Form
     *
     * @remarks
     *
     * #### Record UUID
     * UUID is optional for record creation. If no UUID is supplied, a UUID will be automatically generated for the new record and returned in the response header as x-record-uuid.
     */
    async createForms(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, formsCreateForms_js_1.formsCreateForms)(this, request, options));
    }
    /**
     * Retrieve a Form
     */
    async getForms(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, formsGetForms_js_1.formsGetForms)(this, request, options));
    }
    /**
     * Update a Form
     */
    async updateForms(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, formsUpdateForms_js_1.formsUpdateForms)(this, request, options));
    }
    /**
     * Delete a Form
     *
     * @remarks
     *
     * In ServiceM8, records are never deleted, but are archived. Archived records will remain accessible via the API as (active = 0), however will no longer be visible in UI. Archived records can be restored to active by setting the record active field to 1.
     */
    async deleteForms(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, formsDeleteForms_js_1.formsDeleteForms)(this, request, options));
    }
}
exports.Forms = Forms;
//# sourceMappingURL=forms.js.map