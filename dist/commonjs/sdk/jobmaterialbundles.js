"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.JobMaterialBundles = void 0;
const jobMaterialBundlesCreateJobMaterialBundles_js_1 = require("../funcs/jobMaterialBundlesCreateJobMaterialBundles.js");
const jobMaterialBundlesDeleteJobMaterialBundles_js_1 = require("../funcs/jobMaterialBundlesDeleteJobMaterialBundles.js");
const jobMaterialBundlesGetJobMaterialBundles_js_1 = require("../funcs/jobMaterialBundlesGetJobMaterialBundles.js");
const jobMaterialBundlesListJobMaterialBundles_js_1 = require("../funcs/jobMaterialBundlesListJobMaterialBundles.js");
const jobMaterialBundlesUpdateJobMaterialBundles_js_1 = require("../funcs/jobMaterialBundlesUpdateJobMaterialBundles.js");
const sdks_js_1 = require("../lib/sdks.js");
const fp_js_1 = require("../types/fp.js");
class JobMaterialBundles extends sdks_js_1.ClientSDK {
    /**
     * List all Job Material Bundles
     *
     * @remarks
     *
     * #### Filtering
     * This endpoint supports result filtering. For more information on how to filter this request, [go here](/docs/filtering).
     */
    async listJobMaterialBundles(options) {
        return (0, fp_js_1.unwrapAsync)((0, jobMaterialBundlesListJobMaterialBundles_js_1.jobMaterialBundlesListJobMaterialBundles)(this, options));
    }
    /**
     * Create a new Job Material Bundle
     *
     * @remarks
     *
     * #### Record UUID
     * UUID is optional for record creation. If no UUID is supplied, a UUID will be automatically generated for the new record and returned in the response header as x-record-uuid.
     */
    async createJobMaterialBundles(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, jobMaterialBundlesCreateJobMaterialBundles_js_1.jobMaterialBundlesCreateJobMaterialBundles)(this, request, options));
    }
    /**
     * Retrieve a Job Material Bundle
     */
    async getJobMaterialBundles(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, jobMaterialBundlesGetJobMaterialBundles_js_1.jobMaterialBundlesGetJobMaterialBundles)(this, request, options));
    }
    /**
     * Update a Job Material Bundle
     */
    async updateJobMaterialBundles(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, jobMaterialBundlesUpdateJobMaterialBundles_js_1.jobMaterialBundlesUpdateJobMaterialBundles)(this, request, options));
    }
    /**
     * Delete a Job Material Bundle
     *
     * @remarks
     *
     * In ServiceM8, records are never deleted, but are archived. Archived records will remain accessible via the API as (active = 0), however will no longer be visible in UI. Archived records can be restored to active by setting the record active field to 1.
     */
    async deleteJobMaterialBundles(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, jobMaterialBundlesDeleteJobMaterialBundles_js_1.jobMaterialBundlesDeleteJobMaterialBundles)(this, request, options));
    }
}
exports.JobMaterialBundles = JobMaterialBundles;
//# sourceMappingURL=jobmaterialbundles.js.map