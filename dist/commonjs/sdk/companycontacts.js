"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.CompanyContacts = void 0;
const companyContactsCreateCompanyContacts_js_1 = require("../funcs/companyContactsCreateCompanyContacts.js");
const companyContactsDeleteCompanyContacts_js_1 = require("../funcs/companyContactsDeleteCompanyContacts.js");
const companyContactsGetCompanyContacts_js_1 = require("../funcs/companyContactsGetCompanyContacts.js");
const companyContactsListCompanyContacts_js_1 = require("../funcs/companyContactsListCompanyContacts.js");
const companyContactsUpdateCompanyContacts_js_1 = require("../funcs/companyContactsUpdateCompanyContacts.js");
const sdks_js_1 = require("../lib/sdks.js");
const fp_js_1 = require("../types/fp.js");
class CompanyContacts extends sdks_js_1.ClientSDK {
    /**
     * List all Company Contacts
     *
     * @remarks
     *
     * #### Filtering
     * This endpoint supports result filtering. For more information on how to filter this request, [go here](/docs/filtering).
     *
     * #### OAuth Scope
     * This endpoint requires the following OAuth scope **read_customer_contacts**.
     */
    async listCompanyContacts(options) {
        return (0, fp_js_1.unwrapAsync)((0, companyContactsListCompanyContacts_js_1.companyContactsListCompanyContacts)(this, options));
    }
    /**
     * Create a new Company Contact
     *
     * @remarks
     *
     * #### OAuth Scope
     * This endpoint requires the following OAuth scope **manage_customer_contacts**.
     *
     * #### Record UUID
     * UUID is optional for record creation. If no UUID is supplied, a UUID will be automatically generated for the new record and returned in the response header as x-record-uuid.
     */
    async createCompanyContacts(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, companyContactsCreateCompanyContacts_js_1.companyContactsCreateCompanyContacts)(this, request, options));
    }
    /**
     * Retrieve a Company Contact
     *
     * @remarks
     *
     * #### OAuth Scope
     * This endpoint requires the following OAuth scope **read_customer_contacts**.
     */
    async getCompanyContacts(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, companyContactsGetCompanyContacts_js_1.companyContactsGetCompanyContacts)(this, request, options));
    }
    /**
     * Update a Company Contact
     *
     * @remarks
     *
     * #### OAuth Scope
     * This endpoint requires the following OAuth scope **manage_customer_contacts**.
     */
    async updateCompanyContacts(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, companyContactsUpdateCompanyContacts_js_1.companyContactsUpdateCompanyContacts)(this, request, options));
    }
    /**
     * Delete a Company Contact
     *
     * @remarks
     *
     * In ServiceM8, records are never deleted, but are archived. Archived records will remain accessible via the API as (active = 0), however will no longer be visible in UI. Archived records can be restored to active by setting the record active field to 1.
     *
     * #### OAuth Scope
     * This endpoint requires the following OAuth scope **manage_customer_contacts**.
     */
    async deleteCompanyContacts(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, companyContactsDeleteCompanyContacts_js_1.companyContactsDeleteCompanyContacts)(this, request, options));
    }
}
exports.CompanyContacts = CompanyContacts;
//# sourceMappingURL=companycontacts.js.map