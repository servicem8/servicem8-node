"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.StaffMembers = void 0;
const staffMembersCreateStaffMembers_js_1 = require("../funcs/staffMembersCreateStaffMembers.js");
const staffMembersDeleteStaffMembers_js_1 = require("../funcs/staffMembersDeleteStaffMembers.js");
const staffMembersGetStaffMembers_js_1 = require("../funcs/staffMembersGetStaffMembers.js");
const staffMembersListStaffMembers_js_1 = require("../funcs/staffMembersListStaffMembers.js");
const staffMembersUpdateStaffMembers_js_1 = require("../funcs/staffMembersUpdateStaffMembers.js");
const sdks_js_1 = require("../lib/sdks.js");
const fp_js_1 = require("../types/fp.js");
class StaffMembers extends sdks_js_1.ClientSDK {
    /**
     * List all Staff Members
     *
     * @remarks
     *
     * #### Filtering
     * This endpoint supports result filtering. For more information on how to filter this request, [go here](/docs/filtering).
     *
     * #### OAuth Scope
     * This endpoint requires the following OAuth scope **read_staff**.
     */
    async listStaffMembers(options) {
        return (0, fp_js_1.unwrapAsync)((0, staffMembersListStaffMembers_js_1.staffMembersListStaffMembers)(this, options));
    }
    /**
     * Create a new Staff Member
     *
     * @remarks
     *
     * #### OAuth Scope
     * This endpoint requires the following OAuth scope **manage_staff**.
     *
     * #### Record UUID
     * UUID is optional for record creation. If no UUID is supplied, a UUID will be automatically generated for the new record and returned in the response header as x-record-uuid.
     */
    async createStaffMembers(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, staffMembersCreateStaffMembers_js_1.staffMembersCreateStaffMembers)(this, request, options));
    }
    /**
     * Retrieve a Staff Member
     *
     * @remarks
     *
     * #### OAuth Scope
     * This endpoint requires the following OAuth scope **read_staff**.
     */
    async getStaffMembers(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, staffMembersGetStaffMembers_js_1.staffMembersGetStaffMembers)(this, request, options));
    }
    /**
     * Update a Staff Member
     *
     * @remarks
     *
     * #### OAuth Scope
     * This endpoint requires the following OAuth scope **manage_staff**.
     */
    async updateStaffMembers(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, staffMembersUpdateStaffMembers_js_1.staffMembersUpdateStaffMembers)(this, request, options));
    }
    /**
     * Delete a Staff Member
     *
     * @remarks
     *
     * In ServiceM8, records are never deleted, but are archived. Archived records will remain accessible via the API as (active = 0), however will no longer be visible in UI. Archived records can be restored to active by setting the record active field to 1.
     *
     * #### OAuth Scope
     * This endpoint requires the following OAuth scope **manage_staff**.
     */
    async deleteStaffMembers(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, staffMembersDeleteStaffMembers_js_1.staffMembersDeleteStaffMembers)(this, request, options));
    }
}
exports.StaffMembers = StaffMembers;
//# sourceMappingURL=staffmembers.js.map