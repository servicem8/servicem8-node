"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Locations = void 0;
const locationsCreateLocations_js_1 = require("../funcs/locationsCreateLocations.js");
const locationsDeleteLocations_js_1 = require("../funcs/locationsDeleteLocations.js");
const locationsGetLocations_js_1 = require("../funcs/locationsGetLocations.js");
const locationsListLocations_js_1 = require("../funcs/locationsListLocations.js");
const locationsUpdateLocations_js_1 = require("../funcs/locationsUpdateLocations.js");
const sdks_js_1 = require("../lib/sdks.js");
const fp_js_1 = require("../types/fp.js");
class Locations extends sdks_js_1.ClientSDK {
    /**
     * List all Locations
     *
     * @remarks
     *
     * #### Filtering
     * This endpoint supports result filtering. For more information on how to filter this request, [go here](/docs/filtering).
     *
     * #### OAuth Scope
     * This endpoint requires the following OAuth scope **read_locations**.
     */
    async listLocations(options) {
        return (0, fp_js_1.unwrapAsync)((0, locationsListLocations_js_1.locationsListLocations)(this, options));
    }
    /**
     * Create a new Location
     *
     * @remarks
     *
     * #### OAuth Scope
     * This endpoint requires the following OAuth scope **manage_locations**.
     *
     * #### Record UUID
     * UUID is optional for record creation. If no UUID is supplied, a UUID will be automatically generated for the new record and returned in the response header as x-record-uuid.
     */
    async createLocations(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, locationsCreateLocations_js_1.locationsCreateLocations)(this, request, options));
    }
    /**
     * Retrieve a Location
     *
     * @remarks
     *
     * #### OAuth Scope
     * This endpoint requires the following OAuth scope **read_locations**.
     */
    async getLocations(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, locationsGetLocations_js_1.locationsGetLocations)(this, request, options));
    }
    /**
     * Update a Location
     *
     * @remarks
     *
     * #### OAuth Scope
     * This endpoint requires the following OAuth scope **manage_locations**.
     */
    async updateLocations(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, locationsUpdateLocations_js_1.locationsUpdateLocations)(this, request, options));
    }
    /**
     * Delete a Location
     *
     * @remarks
     *
     * In ServiceM8, records are never deleted, but are archived. Archived records will remain accessible via the API as (active = 0), however will no longer be visible in UI. Archived records can be restored to active by setting the record active field to 1.
     *
     * #### OAuth Scope
     * This endpoint requires the following OAuth scope **manage_locations**.
     */
    async deleteLocations(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, locationsDeleteLocations_js_1.locationsDeleteLocations)(this, request, options));
    }
}
exports.Locations = Locations;
//# sourceMappingURL=locations.js.map