"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.FormResponses = void 0;
const formResponsesCreateFormResponses_js_1 = require("../funcs/formResponsesCreateFormResponses.js");
const formResponsesDeleteFormResponses_js_1 = require("../funcs/formResponsesDeleteFormResponses.js");
const formResponsesGetFormResponses_js_1 = require("../funcs/formResponsesGetFormResponses.js");
const formResponsesListFormResponses_js_1 = require("../funcs/formResponsesListFormResponses.js");
const formResponsesUpdateFormResponses_js_1 = require("../funcs/formResponsesUpdateFormResponses.js");
const sdks_js_1 = require("../lib/sdks.js");
const fp_js_1 = require("../types/fp.js");
class FormResponses extends sdks_js_1.ClientSDK {
    /**
     * List all Form Responses
     *
     * @remarks
     *
     * #### Filtering
     * This endpoint supports result filtering. For more information on how to filter this request, [go here](/docs/filtering).
     */
    async listFormResponses(options) {
        return (0, fp_js_1.unwrapAsync)((0, formResponsesListFormResponses_js_1.formResponsesListFormResponses)(this, options));
    }
    /**
     * Create a new Form Response
     *
     * @remarks
     *
     * #### Record UUID
     * UUID is optional for record creation. If no UUID is supplied, a UUID will be automatically generated for the new record and returned in the response header as x-record-uuid.
     */
    async createFormResponses(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, formResponsesCreateFormResponses_js_1.formResponsesCreateFormResponses)(this, request, options));
    }
    /**
     * Retrieve a Form Response
     */
    async getFormResponses(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, formResponsesGetFormResponses_js_1.formResponsesGetFormResponses)(this, request, options));
    }
    /**
     * Update a Form Response
     */
    async updateFormResponses(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, formResponsesUpdateFormResponses_js_1.formResponsesUpdateFormResponses)(this, request, options));
    }
    /**
     * Delete a Form Response
     *
     * @remarks
     *
     * In ServiceM8, records are never deleted, but are archived. Archived records will remain accessible via the API as (active = 0), however will no longer be visible in UI. Archived records can be restored to active by setting the record active field to 1.
     */
    async deleteFormResponses(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, formResponsesDeleteFormResponses_js_1.formResponsesDeleteFormResponses)(this, request, options));
    }
}
exports.FormResponses = FormResponses;
//# sourceMappingURL=formresponses.js.map