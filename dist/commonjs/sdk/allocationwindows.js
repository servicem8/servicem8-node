"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.AllocationWindows = void 0;
const allocationWindowsCreateAllocationWindows_js_1 = require("../funcs/allocationWindowsCreateAllocationWindows.js");
const allocationWindowsDeleteAllocationWindows_js_1 = require("../funcs/allocationWindowsDeleteAllocationWindows.js");
const allocationWindowsGetAllocationWindows_js_1 = require("../funcs/allocationWindowsGetAllocationWindows.js");
const allocationWindowsListAllocationWindows_js_1 = require("../funcs/allocationWindowsListAllocationWindows.js");
const allocationWindowsUpdateAllocationWindows_js_1 = require("../funcs/allocationWindowsUpdateAllocationWindows.js");
const sdks_js_1 = require("../lib/sdks.js");
const fp_js_1 = require("../types/fp.js");
class AllocationWindows extends sdks_js_1.ClientSDK {
    /**
     * List all Allocation Windows
     *
     * @remarks
     *
     * #### Filtering
     * This endpoint supports result filtering. For more information on how to filter this request, [go here](/docs/filtering).
     */
    async listAllocationWindows(options) {
        return (0, fp_js_1.unwrapAsync)((0, allocationWindowsListAllocationWindows_js_1.allocationWindowsListAllocationWindows)(this, options));
    }
    /**
     * Create a new Allocation Window
     *
     * @remarks
     *
     * #### Record UUID
     * UUID is optional for record creation. If no UUID is supplied, a UUID will be automatically generated for the new record and returned in the response header as x-record-uuid.
     */
    async createAllocationWindows(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, allocationWindowsCreateAllocationWindows_js_1.allocationWindowsCreateAllocationWindows)(this, request, options));
    }
    /**
     * Retrieve an Allocation Window
     */
    async getAllocationWindows(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, allocationWindowsGetAllocationWindows_js_1.allocationWindowsGetAllocationWindows)(this, request, options));
    }
    /**
     * Update an Allocation Window
     */
    async updateAllocationWindows(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, allocationWindowsUpdateAllocationWindows_js_1.allocationWindowsUpdateAllocationWindows)(this, request, options));
    }
    /**
     * Delete an Allocation Window
     *
     * @remarks
     *
     * In ServiceM8, records are never deleted, but are archived. Archived records will remain accessible via the API as (active = 0), however will no longer be visible in UI. Archived records can be restored to active by setting the record active field to 1.
     */
    async deleteAllocationWindows(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, allocationWindowsDeleteAllocationWindows_js_1.allocationWindowsDeleteAllocationWindows)(this, request, options));
    }
}
exports.AllocationWindows = AllocationWindows;
//# sourceMappingURL=allocationwindows.js.map