"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.EmailTemplates = void 0;
const emailTemplatesCreateEmailTemplates_js_1 = require("../funcs/emailTemplatesCreateEmailTemplates.js");
const emailTemplatesDeleteEmailTemplates_js_1 = require("../funcs/emailTemplatesDeleteEmailTemplates.js");
const emailTemplatesGetEmailTemplates_js_1 = require("../funcs/emailTemplatesGetEmailTemplates.js");
const emailTemplatesListEmailTemplates_js_1 = require("../funcs/emailTemplatesListEmailTemplates.js");
const emailTemplatesUpdateEmailTemplates_js_1 = require("../funcs/emailTemplatesUpdateEmailTemplates.js");
const sdks_js_1 = require("../lib/sdks.js");
const fp_js_1 = require("../types/fp.js");
class EmailTemplates extends sdks_js_1.ClientSDK {
    /**
     * List all Email Templates
     *
     * @remarks
     *
     * #### Filtering
     * This endpoint supports result filtering. For more information on how to filter this request, [go here](/docs/filtering).
     */
    async listEmailTemplates(options) {
        return (0, fp_js_1.unwrapAsync)((0, emailTemplatesListEmailTemplates_js_1.emailTemplatesListEmailTemplates)(this, options));
    }
    /**
     * Create a new Email Template
     *
     * @remarks
     *
     * #### Record UUID
     * UUID is optional for record creation. If no UUID is supplied, a UUID will be automatically generated for the new record and returned in the response header as x-record-uuid.
     */
    async createEmailTemplates(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, emailTemplatesCreateEmailTemplates_js_1.emailTemplatesCreateEmailTemplates)(this, request, options));
    }
    /**
     * Retrieve an Email Template
     */
    async getEmailTemplates(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, emailTemplatesGetEmailTemplates_js_1.emailTemplatesGetEmailTemplates)(this, request, options));
    }
    /**
     * Update an Email Template
     */
    async updateEmailTemplates(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, emailTemplatesUpdateEmailTemplates_js_1.emailTemplatesUpdateEmailTemplates)(this, request, options));
    }
    /**
     * Delete an Email Template
     *
     * @remarks
     *
     * In ServiceM8, records are never deleted, but are archived. Archived records will remain accessible via the API as (active = 0), however will no longer be visible in UI. Archived records can be restored to active by setting the record active field to 1.
     */
    async deleteEmailTemplates(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, emailTemplatesDeleteEmailTemplates_js_1.emailTemplatesDeleteEmailTemplates)(this, request, options));
    }
}
exports.EmailTemplates = EmailTemplates;
//# sourceMappingURL=emailtemplates.js.map