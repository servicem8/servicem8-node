"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.JobMaterials = void 0;
const jobMaterialsCreateJobMaterials_js_1 = require("../funcs/jobMaterialsCreateJobMaterials.js");
const jobMaterialsDeleteJobMaterials_js_1 = require("../funcs/jobMaterialsDeleteJobMaterials.js");
const jobMaterialsGetJobMaterials_js_1 = require("../funcs/jobMaterialsGetJobMaterials.js");
const jobMaterialsListJobMaterials_js_1 = require("../funcs/jobMaterialsListJobMaterials.js");
const jobMaterialsUpdateJobMaterials_js_1 = require("../funcs/jobMaterialsUpdateJobMaterials.js");
const sdks_js_1 = require("../lib/sdks.js");
const fp_js_1 = require("../types/fp.js");
class JobMaterials extends sdks_js_1.ClientSDK {
    /**
     * List all Job Materials
     *
     * @remarks
     *
     * #### Filtering
     * This endpoint supports result filtering. For more information on how to filter this request, [go here](/docs/filtering).
     *
     * #### OAuth Scope
     * This endpoint requires the following OAuth scope **read_job_materials**.
     */
    async listJobMaterials(options) {
        return (0, fp_js_1.unwrapAsync)((0, jobMaterialsListJobMaterials_js_1.jobMaterialsListJobMaterials)(this, options));
    }
    /**
     * Create a new Job Material
     *
     * @remarks
     *
     * #### OAuth Scope
     * This endpoint requires the following OAuth scope **manage_job_materials**.
     *
     * #### Record UUID
     * UUID is optional for record creation. If no UUID is supplied, a UUID will be automatically generated for the new record and returned in the response header as x-record-uuid.
     */
    async createJobMaterials(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, jobMaterialsCreateJobMaterials_js_1.jobMaterialsCreateJobMaterials)(this, request, options));
    }
    /**
     * Retrieve a Job Material
     *
     * @remarks
     *
     * #### OAuth Scope
     * This endpoint requires the following OAuth scope **read_job_materials**.
     */
    async getJobMaterials(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, jobMaterialsGetJobMaterials_js_1.jobMaterialsGetJobMaterials)(this, request, options));
    }
    /**
     * Update a Job Material
     *
     * @remarks
     *
     * #### OAuth Scope
     * This endpoint requires the following OAuth scope **manage_job_materials**.
     */
    async updateJobMaterials(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, jobMaterialsUpdateJobMaterials_js_1.jobMaterialsUpdateJobMaterials)(this, request, options));
    }
    /**
     * Delete a Job Material
     *
     * @remarks
     *
     * In ServiceM8, records are never deleted, but are archived. Archived records will remain accessible via the API as (active = 0), however will no longer be visible in UI. Archived records can be restored to active by setting the record active field to 1.
     *
     * #### OAuth Scope
     * This endpoint requires the following OAuth scope **manage_job_materials**.
     */
    async deleteJobMaterials(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, jobMaterialsDeleteJobMaterials_js_1.jobMaterialsDeleteJobMaterials)(this, request, options));
    }
}
exports.JobMaterials = JobMaterials;
//# sourceMappingURL=jobmaterials.js.map