"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Notes = void 0;
const notesCreateNotes_js_1 = require("../funcs/notesCreateNotes.js");
const notesDeleteNotes_js_1 = require("../funcs/notesDeleteNotes.js");
const notesGetNotes_js_1 = require("../funcs/notesGetNotes.js");
const notesListNotes_js_1 = require("../funcs/notesListNotes.js");
const notesUpdateNotes_js_1 = require("../funcs/notesUpdateNotes.js");
const sdks_js_1 = require("../lib/sdks.js");
const fp_js_1 = require("../types/fp.js");
class Notes extends sdks_js_1.ClientSDK {
    /**
     * List all Notes
     *
     * @remarks
     *
     * #### Filtering
     * This endpoint supports result filtering. For more information on how to filter this request, [go here](/docs/filtering).
     */
    async listNotes(options) {
        return (0, fp_js_1.unwrapAsync)((0, notesListNotes_js_1.notesListNotes)(this, options));
    }
    /**
     * Create a new Note
     *
     * @remarks
     *
     * #### Record UUID
     * UUID is optional for record creation. If no UUID is supplied, a UUID will be automatically generated for the new record and returned in the response header as x-record-uuid.
     */
    async createNotes(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, notesCreateNotes_js_1.notesCreateNotes)(this, request, options));
    }
    /**
     * Retrieve a Note
     */
    async getNotes(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, notesGetNotes_js_1.notesGetNotes)(this, request, options));
    }
    /**
     * Update a Note
     */
    async updateNotes(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, notesUpdateNotes_js_1.notesUpdateNotes)(this, request, options));
    }
    /**
     * Delete a Note
     *
     * @remarks
     *
     * In ServiceM8, records are never deleted, but are archived. Archived records will remain accessible via the API as (active = 0), however will no longer be visible in UI. Archived records can be restored to active by setting the record active field to 1.
     */
    async deleteNotes(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, notesDeleteNotes_js_1.notesDeleteNotes)(this, request, options));
    }
}
exports.Notes = Notes;
//# sourceMappingURL=notes.js.map