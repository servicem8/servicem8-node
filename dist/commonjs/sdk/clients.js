"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Clients = void 0;
const clientsCreateClients_js_1 = require("../funcs/clientsCreateClients.js");
const clientsDeleteClients_js_1 = require("../funcs/clientsDeleteClients.js");
const clientsGetClients_js_1 = require("../funcs/clientsGetClients.js");
const clientsListClients_js_1 = require("../funcs/clientsListClients.js");
const clientsUpdateClients_js_1 = require("../funcs/clientsUpdateClients.js");
const sdks_js_1 = require("../lib/sdks.js");
const fp_js_1 = require("../types/fp.js");
class Clients extends sdks_js_1.ClientSDK {
    /**
     * List all Clients
     *
     * @remarks
     *
     * #### Filtering
     * This endpoint supports result filtering. For more information on how to filter this request, [go here](/docs/filtering).
     *
     * #### OAuth Scope
     * This endpoint requires the following OAuth scope **read_customers**.
     */
    async listClients(options) {
        return (0, fp_js_1.unwrapAsync)((0, clientsListClients_js_1.clientsListClients)(this, options));
    }
    /**
     * Create a new Client
     *
     * @remarks
     *
     * #### OAuth Scope
     * This endpoint requires the following OAuth scope **manage_customers**.
     *
     * #### Record UUID
     * UUID is optional for record creation. If no UUID is supplied, a UUID will be automatically generated for the new record and returned in the response header as x-record-uuid.
     */
    async createClients(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, clientsCreateClients_js_1.clientsCreateClients)(this, request, options));
    }
    /**
     * Retrieve a Client
     *
     * @remarks
     *
     * #### OAuth Scope
     * This endpoint requires the following OAuth scope **read_customers**.
     */
    async getClients(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, clientsGetClients_js_1.clientsGetClients)(this, request, options));
    }
    /**
     * Update a Client
     *
     * @remarks
     *
     * #### OAuth Scope
     * This endpoint requires the following OAuth scope **manage_customers**.
     */
    async updateClients(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, clientsUpdateClients_js_1.clientsUpdateClients)(this, request, options));
    }
    /**
     * Delete a Client
     *
     * @remarks
     *
     * In ServiceM8, records are never deleted, but are archived. Archived records will remain accessible via the API as (active = 0), however will no longer be visible in UI. Archived records can be restored to active by setting the record active field to 1.
     *
     * #### OAuth Scope
     * This endpoint requires the following OAuth scope **manage_customers**.
     */
    async deleteClients(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, clientsDeleteClients_js_1.clientsDeleteClients)(this, request, options));
    }
}
exports.Clients = Clients;
//# sourceMappingURL=clients.js.map