"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.AllocationWindowInput$ = exports.AllocationWindowInput$outboundSchema = exports.AllocationWindowInput$inboundSchema = exports.AllocationWindow$ = exports.AllocationWindow$outboundSchema = exports.AllocationWindow$inboundSchema = exports.AllocationWindowActive$ = exports.AllocationWindowActive$outboundSchema = exports.AllocationWindowActive$inboundSchema = exports.AllocationWindowActive = void 0;
exports.allocationWindowToJSON = allocationWindowToJSON;
exports.allocationWindowFromJSON = allocationWindowFromJSON;
exports.allocationWindowInputToJSON = allocationWindowInputToJSON;
exports.allocationWindowInputFromJSON = allocationWindowInputFromJSON;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../lib/primitives.js");
const schemas_js_1 = require("../../lib/schemas.js");
/**
 * Record active/deleted flag.
 *
 * @remarks
 *
 * Valid values are [0,1]
 */
exports.AllocationWindowActive = {
    Zero: 0,
    One: 1,
};
/** @internal */
exports.AllocationWindowActive$inboundSchema = z.nativeEnum(exports.AllocationWindowActive);
/** @internal */
exports.AllocationWindowActive$outboundSchema = exports.AllocationWindowActive$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var AllocationWindowActive$;
(function (AllocationWindowActive$) {
    /** @deprecated use `AllocationWindowActive$inboundSchema` instead. */
    AllocationWindowActive$.inboundSchema = exports.AllocationWindowActive$inboundSchema;
    /** @deprecated use `AllocationWindowActive$outboundSchema` instead. */
    AllocationWindowActive$.outboundSchema = exports.AllocationWindowActive$outboundSchema;
})(AllocationWindowActive$ || (exports.AllocationWindowActive$ = AllocationWindowActive$ = {}));
/** @internal */
exports.AllocationWindow$inboundSchema = z.object({
    uuid: z.string().optional(),
    active: exports.AllocationWindowActive$inboundSchema.default(1),
    edit_date: z.string().optional(),
    name: z.string().optional(),
    start_time: z.number().int().optional(),
    end_time: z.number().int().optional(),
    sort_priority: z.number().int().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "edit_date": "editDate",
        "start_time": "startTime",
        "end_time": "endTime",
        "sort_priority": "sortPriority",
    });
});
/** @internal */
exports.AllocationWindow$outboundSchema = z.object({
    uuid: z.string().optional(),
    active: exports.AllocationWindowActive$outboundSchema.default(1),
    editDate: z.string().optional(),
    name: z.string().optional(),
    startTime: z.number().int().optional(),
    endTime: z.number().int().optional(),
    sortPriority: z.number().int().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        editDate: "edit_date",
        startTime: "start_time",
        endTime: "end_time",
        sortPriority: "sort_priority",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var AllocationWindow$;
(function (AllocationWindow$) {
    /** @deprecated use `AllocationWindow$inboundSchema` instead. */
    AllocationWindow$.inboundSchema = exports.AllocationWindow$inboundSchema;
    /** @deprecated use `AllocationWindow$outboundSchema` instead. */
    AllocationWindow$.outboundSchema = exports.AllocationWindow$outboundSchema;
})(AllocationWindow$ || (exports.AllocationWindow$ = AllocationWindow$ = {}));
function allocationWindowToJSON(allocationWindow) {
    return JSON.stringify(exports.AllocationWindow$outboundSchema.parse(allocationWindow));
}
function allocationWindowFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.AllocationWindow$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AllocationWindow' from JSON`);
}
/** @internal */
exports.AllocationWindowInput$inboundSchema = z.object({
    uuid: z.string().optional(),
    active: exports.AllocationWindowActive$inboundSchema.default(1),
    name: z.string().optional(),
    start_time: z.number().int().optional(),
    end_time: z.number().int().optional(),
    sort_priority: z.number().int().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "start_time": "startTime",
        "end_time": "endTime",
        "sort_priority": "sortPriority",
    });
});
/** @internal */
exports.AllocationWindowInput$outboundSchema = z.object({
    uuid: z.string().optional(),
    active: exports.AllocationWindowActive$outboundSchema.default(1),
    name: z.string().optional(),
    startTime: z.number().int().optional(),
    endTime: z.number().int().optional(),
    sortPriority: z.number().int().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        startTime: "start_time",
        endTime: "end_time",
        sortPriority: "sort_priority",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var AllocationWindowInput$;
(function (AllocationWindowInput$) {
    /** @deprecated use `AllocationWindowInput$inboundSchema` instead. */
    AllocationWindowInput$.inboundSchema = exports.AllocationWindowInput$inboundSchema;
    /** @deprecated use `AllocationWindowInput$outboundSchema` instead. */
    AllocationWindowInput$.outboundSchema = exports.AllocationWindowInput$outboundSchema;
})(AllocationWindowInput$ || (exports.AllocationWindowInput$ = AllocationWindowInput$ = {}));
function allocationWindowInputToJSON(allocationWindowInput) {
    return JSON.stringify(exports.AllocationWindowInput$outboundSchema.parse(allocationWindowInput));
}
function allocationWindowInputFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.AllocationWindowInput$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AllocationWindowInput' from JSON`);
}
//# sourceMappingURL=allocationwindow.js.map