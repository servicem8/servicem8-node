"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.TaskInput$ = exports.TaskInput$outboundSchema = exports.TaskInput$inboundSchema = exports.Task$ = exports.Task$outboundSchema = exports.Task$inboundSchema = exports.TaskActive$ = exports.TaskActive$outboundSchema = exports.TaskActive$inboundSchema = exports.TaskActive = void 0;
exports.taskToJSON = taskToJSON;
exports.taskFromJSON = taskFromJSON;
exports.taskInputToJSON = taskInputToJSON;
exports.taskInputFromJSON = taskInputFromJSON;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../lib/primitives.js");
const schemas_js_1 = require("../../lib/schemas.js");
/**
 * Record active/deleted flag.
 *
 * @remarks
 *
 * Valid values are [0,1]
 */
exports.TaskActive = {
    Zero: 0,
    One: 1,
};
/** @internal */
exports.TaskActive$inboundSchema = z
    .nativeEnum(exports.TaskActive);
/** @internal */
exports.TaskActive$outboundSchema = exports.TaskActive$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var TaskActive$;
(function (TaskActive$) {
    /** @deprecated use `TaskActive$inboundSchema` instead. */
    TaskActive$.inboundSchema = exports.TaskActive$inboundSchema;
    /** @deprecated use `TaskActive$outboundSchema` instead. */
    TaskActive$.outboundSchema = exports.TaskActive$outboundSchema;
})(TaskActive$ || (exports.TaskActive$ = TaskActive$ = {}));
/** @internal */
exports.Task$inboundSchema = z
    .object({
    uuid: z.string().optional(),
    active: exports.TaskActive$inboundSchema.default(1),
    edit_date: z.string().optional(),
    due_date: z.string().optional(),
    task_details: z.string().optional(),
    name: z.string(),
    related_object: z.string().optional(),
    related_object_uuid: z.string().optional(),
    task_complete: z.string().optional(),
    completed_timestamp: z.string().optional(),
    completed_by_staff_uuid: z.string().optional(),
    assigned_to_staff_uuid: z.string().optional(),
    lng: z.number().optional(),
    lat: z.number().optional(),
    created_by_staff_uuid: z.string().optional(),
    create_date: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "edit_date": "editDate",
        "due_date": "dueDate",
        "task_details": "taskDetails",
        "related_object": "relatedObject",
        "related_object_uuid": "relatedObjectUuid",
        "task_complete": "taskComplete",
        "completed_timestamp": "completedTimestamp",
        "completed_by_staff_uuid": "completedByStaffUuid",
        "assigned_to_staff_uuid": "assignedToStaffUuid",
        "created_by_staff_uuid": "createdByStaffUuid",
        "create_date": "createDate",
    });
});
/** @internal */
exports.Task$outboundSchema = z.object({
    uuid: z.string().optional(),
    active: exports.TaskActive$outboundSchema.default(1),
    editDate: z.string().optional(),
    dueDate: z.string().optional(),
    taskDetails: z.string().optional(),
    name: z.string(),
    relatedObject: z.string().optional(),
    relatedObjectUuid: z.string().optional(),
    taskComplete: z.string().optional(),
    completedTimestamp: z.string().optional(),
    completedByStaffUuid: z.string().optional(),
    assignedToStaffUuid: z.string().optional(),
    lng: z.number().optional(),
    lat: z.number().optional(),
    createdByStaffUuid: z.string().optional(),
    createDate: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        editDate: "edit_date",
        dueDate: "due_date",
        taskDetails: "task_details",
        relatedObject: "related_object",
        relatedObjectUuid: "related_object_uuid",
        taskComplete: "task_complete",
        completedTimestamp: "completed_timestamp",
        completedByStaffUuid: "completed_by_staff_uuid",
        assignedToStaffUuid: "assigned_to_staff_uuid",
        createdByStaffUuid: "created_by_staff_uuid",
        createDate: "create_date",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Task$;
(function (Task$) {
    /** @deprecated use `Task$inboundSchema` instead. */
    Task$.inboundSchema = exports.Task$inboundSchema;
    /** @deprecated use `Task$outboundSchema` instead. */
    Task$.outboundSchema = exports.Task$outboundSchema;
})(Task$ || (exports.Task$ = Task$ = {}));
function taskToJSON(task) {
    return JSON.stringify(exports.Task$outboundSchema.parse(task));
}
function taskFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.Task$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Task' from JSON`);
}
/** @internal */
exports.TaskInput$inboundSchema = z.object({
    uuid: z.string().optional(),
    active: exports.TaskActive$inboundSchema.default(1),
    due_date: z.string().optional(),
    task_details: z.string().optional(),
    name: z.string(),
    related_object: z.string().optional(),
    related_object_uuid: z.string().optional(),
    task_complete: z.string().optional(),
    completed_timestamp: z.string().optional(),
    completed_by_staff_uuid: z.string().optional(),
    assigned_to_staff_uuid: z.string().optional(),
    lng: z.number().optional(),
    lat: z.number().optional(),
    created_by_staff_uuid: z.string().optional(),
    create_date: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "due_date": "dueDate",
        "task_details": "taskDetails",
        "related_object": "relatedObject",
        "related_object_uuid": "relatedObjectUuid",
        "task_complete": "taskComplete",
        "completed_timestamp": "completedTimestamp",
        "completed_by_staff_uuid": "completedByStaffUuid",
        "assigned_to_staff_uuid": "assignedToStaffUuid",
        "created_by_staff_uuid": "createdByStaffUuid",
        "create_date": "createDate",
    });
});
/** @internal */
exports.TaskInput$outboundSchema = z.object({
    uuid: z.string().optional(),
    active: exports.TaskActive$outboundSchema.default(1),
    dueDate: z.string().optional(),
    taskDetails: z.string().optional(),
    name: z.string(),
    relatedObject: z.string().optional(),
    relatedObjectUuid: z.string().optional(),
    taskComplete: z.string().optional(),
    completedTimestamp: z.string().optional(),
    completedByStaffUuid: z.string().optional(),
    assignedToStaffUuid: z.string().optional(),
    lng: z.number().optional(),
    lat: z.number().optional(),
    createdByStaffUuid: z.string().optional(),
    createDate: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        dueDate: "due_date",
        taskDetails: "task_details",
        relatedObject: "related_object",
        relatedObjectUuid: "related_object_uuid",
        taskComplete: "task_complete",
        completedTimestamp: "completed_timestamp",
        completedByStaffUuid: "completed_by_staff_uuid",
        assignedToStaffUuid: "assigned_to_staff_uuid",
        createdByStaffUuid: "created_by_staff_uuid",
        createDate: "create_date",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var TaskInput$;
(function (TaskInput$) {
    /** @deprecated use `TaskInput$inboundSchema` instead. */
    TaskInput$.inboundSchema = exports.TaskInput$inboundSchema;
    /** @deprecated use `TaskInput$outboundSchema` instead. */
    TaskInput$.outboundSchema = exports.TaskInput$outboundSchema;
})(TaskInput$ || (exports.TaskInput$ = TaskInput$ = {}));
function taskInputToJSON(taskInput) {
    return JSON.stringify(exports.TaskInput$outboundSchema.parse(taskInput));
}
function taskInputFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.TaskInput$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'TaskInput' from JSON`);
}
//# sourceMappingURL=task.js.map