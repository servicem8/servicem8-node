"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.AssetTypeFieldInput$ = exports.AssetTypeFieldInput$outboundSchema = exports.AssetTypeFieldInput$inboundSchema = exports.AssetTypeField$ = exports.AssetTypeField$outboundSchema = exports.AssetTypeField$inboundSchema = exports.FieldData$ = exports.FieldData$outboundSchema = exports.FieldData$inboundSchema = exports.AssetTypeFieldFieldType$ = exports.AssetTypeFieldFieldType$outboundSchema = exports.AssetTypeFieldFieldType$inboundSchema = exports.AssetTypeFieldActive$ = exports.AssetTypeFieldActive$outboundSchema = exports.AssetTypeFieldActive$inboundSchema = exports.AssetTypeFieldFieldType = exports.AssetTypeFieldActive = void 0;
exports.fieldDataToJSON = fieldDataToJSON;
exports.fieldDataFromJSON = fieldDataFromJSON;
exports.assetTypeFieldToJSON = assetTypeFieldToJSON;
exports.assetTypeFieldFromJSON = assetTypeFieldFromJSON;
exports.assetTypeFieldInputToJSON = assetTypeFieldInputToJSON;
exports.assetTypeFieldInputFromJSON = assetTypeFieldInputFromJSON;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../lib/primitives.js");
const schemas_js_1 = require("../../lib/schemas.js");
/**
 * Record active/deleted flag.
 *
 * @remarks
 *
 * Valid values are [0,1]
 */
exports.AssetTypeFieldActive = {
    Zero: 0,
    One: 1,
};
exports.AssetTypeFieldFieldType = {
    Text: "Text",
    Number: "Number",
    Date: "Date",
    MultipleChoice: "Multiple Choice",
};
/** @internal */
exports.AssetTypeFieldActive$inboundSchema = z.nativeEnum(exports.AssetTypeFieldActive);
/** @internal */
exports.AssetTypeFieldActive$outboundSchema = exports.AssetTypeFieldActive$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var AssetTypeFieldActive$;
(function (AssetTypeFieldActive$) {
    /** @deprecated use `AssetTypeFieldActive$inboundSchema` instead. */
    AssetTypeFieldActive$.inboundSchema = exports.AssetTypeFieldActive$inboundSchema;
    /** @deprecated use `AssetTypeFieldActive$outboundSchema` instead. */
    AssetTypeFieldActive$.outboundSchema = exports.AssetTypeFieldActive$outboundSchema;
})(AssetTypeFieldActive$ || (exports.AssetTypeFieldActive$ = AssetTypeFieldActive$ = {}));
/** @internal */
exports.AssetTypeFieldFieldType$inboundSchema = z.nativeEnum(exports.AssetTypeFieldFieldType);
/** @internal */
exports.AssetTypeFieldFieldType$outboundSchema = exports.AssetTypeFieldFieldType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var AssetTypeFieldFieldType$;
(function (AssetTypeFieldFieldType$) {
    /** @deprecated use `AssetTypeFieldFieldType$inboundSchema` instead. */
    AssetTypeFieldFieldType$.inboundSchema = exports.AssetTypeFieldFieldType$inboundSchema;
    /** @deprecated use `AssetTypeFieldFieldType$outboundSchema` instead. */
    AssetTypeFieldFieldType$.outboundSchema = exports.AssetTypeFieldFieldType$outboundSchema;
})(AssetTypeFieldFieldType$ || (exports.AssetTypeFieldFieldType$ = AssetTypeFieldFieldType$ = {}));
/** @internal */
exports.FieldData$inboundSchema = z.object({
    fieldType: exports.AssetTypeFieldFieldType$inboundSchema,
    mandatory: z.boolean(),
    choices: z.array(z.string()).optional(),
});
/** @internal */
exports.FieldData$outboundSchema = z.object({
    fieldType: exports.AssetTypeFieldFieldType$outboundSchema,
    mandatory: z.boolean(),
    choices: z.array(z.string()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var FieldData$;
(function (FieldData$) {
    /** @deprecated use `FieldData$inboundSchema` instead. */
    FieldData$.inboundSchema = exports.FieldData$inboundSchema;
    /** @deprecated use `FieldData$outboundSchema` instead. */
    FieldData$.outboundSchema = exports.FieldData$outboundSchema;
})(FieldData$ || (exports.FieldData$ = FieldData$ = {}));
function fieldDataToJSON(fieldData) {
    return JSON.stringify(exports.FieldData$outboundSchema.parse(fieldData));
}
function fieldDataFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.FieldData$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'FieldData' from JSON`);
}
/** @internal */
exports.AssetTypeField$inboundSchema = z.object({
    uuid: z.string().optional(),
    active: exports.AssetTypeFieldActive$inboundSchema.default(1),
    edit_date: z.string().optional(),
    asset_type_uuid: z.string().optional(),
    name: z.string(),
    field_data: z.lazy(() => exports.FieldData$inboundSchema).optional(),
    sort_order: z.number().int().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "edit_date": "editDate",
        "asset_type_uuid": "assetTypeUuid",
        "field_data": "fieldData",
        "sort_order": "sortOrder",
    });
});
/** @internal */
exports.AssetTypeField$outboundSchema = z.object({
    uuid: z.string().optional(),
    active: exports.AssetTypeFieldActive$outboundSchema.default(1),
    editDate: z.string().optional(),
    assetTypeUuid: z.string().optional(),
    name: z.string(),
    fieldData: z.lazy(() => exports.FieldData$outboundSchema).optional(),
    sortOrder: z.number().int().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        editDate: "edit_date",
        assetTypeUuid: "asset_type_uuid",
        fieldData: "field_data",
        sortOrder: "sort_order",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var AssetTypeField$;
(function (AssetTypeField$) {
    /** @deprecated use `AssetTypeField$inboundSchema` instead. */
    AssetTypeField$.inboundSchema = exports.AssetTypeField$inboundSchema;
    /** @deprecated use `AssetTypeField$outboundSchema` instead. */
    AssetTypeField$.outboundSchema = exports.AssetTypeField$outboundSchema;
})(AssetTypeField$ || (exports.AssetTypeField$ = AssetTypeField$ = {}));
function assetTypeFieldToJSON(assetTypeField) {
    return JSON.stringify(exports.AssetTypeField$outboundSchema.parse(assetTypeField));
}
function assetTypeFieldFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.AssetTypeField$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AssetTypeField' from JSON`);
}
/** @internal */
exports.AssetTypeFieldInput$inboundSchema = z.object({
    uuid: z.string().optional(),
    active: exports.AssetTypeFieldActive$inboundSchema.default(1),
    asset_type_uuid: z.string().optional(),
    name: z.string(),
    field_data: z.lazy(() => exports.FieldData$inboundSchema).optional(),
    sort_order: z.number().int().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "asset_type_uuid": "assetTypeUuid",
        "field_data": "fieldData",
        "sort_order": "sortOrder",
    });
});
/** @internal */
exports.AssetTypeFieldInput$outboundSchema = z.object({
    uuid: z.string().optional(),
    active: exports.AssetTypeFieldActive$outboundSchema.default(1),
    assetTypeUuid: z.string().optional(),
    name: z.string(),
    fieldData: z.lazy(() => exports.FieldData$outboundSchema).optional(),
    sortOrder: z.number().int().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        assetTypeUuid: "asset_type_uuid",
        fieldData: "field_data",
        sortOrder: "sort_order",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var AssetTypeFieldInput$;
(function (AssetTypeFieldInput$) {
    /** @deprecated use `AssetTypeFieldInput$inboundSchema` instead. */
    AssetTypeFieldInput$.inboundSchema = exports.AssetTypeFieldInput$inboundSchema;
    /** @deprecated use `AssetTypeFieldInput$outboundSchema` instead. */
    AssetTypeFieldInput$.outboundSchema = exports.AssetTypeFieldInput$outboundSchema;
})(AssetTypeFieldInput$ || (exports.AssetTypeFieldInput$ = AssetTypeFieldInput$ = {}));
function assetTypeFieldInputToJSON(assetTypeFieldInput) {
    return JSON.stringify(exports.AssetTypeFieldInput$outboundSchema.parse(assetTypeFieldInput));
}
function assetTypeFieldInputFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.AssetTypeFieldInput$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AssetTypeFieldInput' from JSON`);
}
//# sourceMappingURL=assettypefield.js.map