"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.CompanyInput$ = exports.CompanyInput$outboundSchema = exports.CompanyInput$inboundSchema = exports.Company$ = exports.Company$outboundSchema = exports.Company$inboundSchema = exports.CompanyActive$ = exports.CompanyActive$outboundSchema = exports.CompanyActive$inboundSchema = exports.CompanyActive = void 0;
exports.companyToJSON = companyToJSON;
exports.companyFromJSON = companyFromJSON;
exports.companyInputToJSON = companyInputToJSON;
exports.companyInputFromJSON = companyInputFromJSON;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../lib/primitives.js");
const schemas_js_1 = require("../../lib/schemas.js");
/**
 * Record active/deleted flag.
 *
 * @remarks
 *
 * Valid values are [0,1]
 */
exports.CompanyActive = {
    Zero: 0,
    One: 1,
};
/** @internal */
exports.CompanyActive$inboundSchema = z.nativeEnum(exports.CompanyActive);
/** @internal */
exports.CompanyActive$outboundSchema = exports.CompanyActive$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var CompanyActive$;
(function (CompanyActive$) {
    /** @deprecated use `CompanyActive$inboundSchema` instead. */
    CompanyActive$.inboundSchema = exports.CompanyActive$inboundSchema;
    /** @deprecated use `CompanyActive$outboundSchema` instead. */
    CompanyActive$.outboundSchema = exports.CompanyActive$outboundSchema;
})(CompanyActive$ || (exports.CompanyActive$ = CompanyActive$ = {}));
/** @internal */
exports.Company$inboundSchema = z.object({
    uuid: z.string().optional(),
    active: exports.CompanyActive$inboundSchema.default(1),
    edit_date: z.string().optional(),
    name: z.string(),
    website: z.string().optional(),
    abn_number: z.string().optional(),
    is_individual: z.string().optional(),
    address_street: z.string().optional(),
    address_city: z.string().optional(),
    address_state: z.string().optional(),
    address_postcode: z.string().optional(),
    address_country: z.string().optional(),
    fax_number: z.string().optional(),
    address: z.string().optional(),
    billing_address: z.string().optional(),
    badges: z.string().optional(),
    tax_rate_uuid: z.string().optional(),
    billing_attention: z.string().optional(),
    payment_terms: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "edit_date": "editDate",
        "abn_number": "abnNumber",
        "is_individual": "isIndividual",
        "address_street": "addressStreet",
        "address_city": "addressCity",
        "address_state": "addressState",
        "address_postcode": "addressPostcode",
        "address_country": "addressCountry",
        "fax_number": "faxNumber",
        "billing_address": "billingAddress",
        "tax_rate_uuid": "taxRateUuid",
        "billing_attention": "billingAttention",
        "payment_terms": "paymentTerms",
    });
});
/** @internal */
exports.Company$outboundSchema = z.object({
    uuid: z.string().optional(),
    active: exports.CompanyActive$outboundSchema.default(1),
    editDate: z.string().optional(),
    name: z.string(),
    website: z.string().optional(),
    abnNumber: z.string().optional(),
    isIndividual: z.string().optional(),
    addressStreet: z.string().optional(),
    addressCity: z.string().optional(),
    addressState: z.string().optional(),
    addressPostcode: z.string().optional(),
    addressCountry: z.string().optional(),
    faxNumber: z.string().optional(),
    address: z.string().optional(),
    billingAddress: z.string().optional(),
    badges: z.string().optional(),
    taxRateUuid: z.string().optional(),
    billingAttention: z.string().optional(),
    paymentTerms: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        editDate: "edit_date",
        abnNumber: "abn_number",
        isIndividual: "is_individual",
        addressStreet: "address_street",
        addressCity: "address_city",
        addressState: "address_state",
        addressPostcode: "address_postcode",
        addressCountry: "address_country",
        faxNumber: "fax_number",
        billingAddress: "billing_address",
        taxRateUuid: "tax_rate_uuid",
        billingAttention: "billing_attention",
        paymentTerms: "payment_terms",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Company$;
(function (Company$) {
    /** @deprecated use `Company$inboundSchema` instead. */
    Company$.inboundSchema = exports.Company$inboundSchema;
    /** @deprecated use `Company$outboundSchema` instead. */
    Company$.outboundSchema = exports.Company$outboundSchema;
})(Company$ || (exports.Company$ = Company$ = {}));
function companyToJSON(company) {
    return JSON.stringify(exports.Company$outboundSchema.parse(company));
}
function companyFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.Company$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Company' from JSON`);
}
/** @internal */
exports.CompanyInput$inboundSchema = z.object({
    uuid: z.string().optional(),
    active: exports.CompanyActive$inboundSchema.default(1),
    name: z.string(),
    website: z.string().optional(),
    abn_number: z.string().optional(),
    is_individual: z.string().optional(),
    address_street: z.string().optional(),
    address_city: z.string().optional(),
    address_state: z.string().optional(),
    address_postcode: z.string().optional(),
    address_country: z.string().optional(),
    fax_number: z.string().optional(),
    address: z.string().optional(),
    billing_address: z.string().optional(),
    badges: z.string().optional(),
    tax_rate_uuid: z.string().optional(),
    billing_attention: z.string().optional(),
    payment_terms: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "abn_number": "abnNumber",
        "is_individual": "isIndividual",
        "address_street": "addressStreet",
        "address_city": "addressCity",
        "address_state": "addressState",
        "address_postcode": "addressPostcode",
        "address_country": "addressCountry",
        "fax_number": "faxNumber",
        "billing_address": "billingAddress",
        "tax_rate_uuid": "taxRateUuid",
        "billing_attention": "billingAttention",
        "payment_terms": "paymentTerms",
    });
});
/** @internal */
exports.CompanyInput$outboundSchema = z.object({
    uuid: z.string().optional(),
    active: exports.CompanyActive$outboundSchema.default(1),
    name: z.string(),
    website: z.string().optional(),
    abnNumber: z.string().optional(),
    isIndividual: z.string().optional(),
    addressStreet: z.string().optional(),
    addressCity: z.string().optional(),
    addressState: z.string().optional(),
    addressPostcode: z.string().optional(),
    addressCountry: z.string().optional(),
    faxNumber: z.string().optional(),
    address: z.string().optional(),
    billingAddress: z.string().optional(),
    badges: z.string().optional(),
    taxRateUuid: z.string().optional(),
    billingAttention: z.string().optional(),
    paymentTerms: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        abnNumber: "abn_number",
        isIndividual: "is_individual",
        addressStreet: "address_street",
        addressCity: "address_city",
        addressState: "address_state",
        addressPostcode: "address_postcode",
        addressCountry: "address_country",
        faxNumber: "fax_number",
        billingAddress: "billing_address",
        taxRateUuid: "tax_rate_uuid",
        billingAttention: "billing_attention",
        paymentTerms: "payment_terms",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var CompanyInput$;
(function (CompanyInput$) {
    /** @deprecated use `CompanyInput$inboundSchema` instead. */
    CompanyInput$.inboundSchema = exports.CompanyInput$inboundSchema;
    /** @deprecated use `CompanyInput$outboundSchema` instead. */
    CompanyInput$.outboundSchema = exports.CompanyInput$outboundSchema;
})(CompanyInput$ || (exports.CompanyInput$ = CompanyInput$ = {}));
function companyInputToJSON(companyInput) {
    return JSON.stringify(exports.CompanyInput$outboundSchema.parse(companyInput));
}
function companyInputFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.CompanyInput$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CompanyInput' from JSON`);
}
//# sourceMappingURL=company.js.map