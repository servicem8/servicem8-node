"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.FormInput$ = exports.FormInput$outboundSchema = exports.FormInput$inboundSchema = exports.Form$ = exports.Form$outboundSchema = exports.Form$inboundSchema = exports.TemplateField$ = exports.TemplateField$outboundSchema = exports.TemplateField$inboundSchema = exports.FormFieldType$ = exports.FormFieldType$outboundSchema = exports.FormFieldType$inboundSchema = exports.FormActive$ = exports.FormActive$outboundSchema = exports.FormActive$inboundSchema = exports.FormFieldType = exports.FormActive = void 0;
exports.templateFieldToJSON = templateFieldToJSON;
exports.templateFieldFromJSON = templateFieldFromJSON;
exports.formToJSON = formToJSON;
exports.formFromJSON = formFromJSON;
exports.formInputToJSON = formInputToJSON;
exports.formInputFromJSON = formInputFromJSON;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../lib/primitives.js");
const schemas_js_1 = require("../../lib/schemas.js");
/**
 * Record active/deleted flag.
 *
 * @remarks
 *
 * Valid values are [0,1]
 */
exports.FormActive = {
    Zero: 0,
    One: 1,
};
exports.FormFieldType = {
    Text: "Text",
};
/** @internal */
exports.FormActive$inboundSchema = z
    .nativeEnum(exports.FormActive);
/** @internal */
exports.FormActive$outboundSchema = exports.FormActive$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var FormActive$;
(function (FormActive$) {
    /** @deprecated use `FormActive$inboundSchema` instead. */
    FormActive$.inboundSchema = exports.FormActive$inboundSchema;
    /** @deprecated use `FormActive$outboundSchema` instead. */
    FormActive$.outboundSchema = exports.FormActive$outboundSchema;
})(FormActive$ || (exports.FormActive$ = FormActive$ = {}));
/** @internal */
exports.FormFieldType$inboundSchema = z.nativeEnum(exports.FormFieldType);
/** @internal */
exports.FormFieldType$outboundSchema = exports.FormFieldType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var FormFieldType$;
(function (FormFieldType$) {
    /** @deprecated use `FormFieldType$inboundSchema` instead. */
    FormFieldType$.inboundSchema = exports.FormFieldType$inboundSchema;
    /** @deprecated use `FormFieldType$outboundSchema` instead. */
    FormFieldType$.outboundSchema = exports.FormFieldType$outboundSchema;
})(FormFieldType$ || (exports.FormFieldType$ = FormFieldType$ = {}));
/** @internal */
exports.TemplateField$inboundSchema = z.object({
    name: z.string(),
    fieldType: exports.FormFieldType$inboundSchema,
    value: z.string(),
    sortOrder: z.number().int(),
});
/** @internal */
exports.TemplateField$outboundSchema = z.object({
    name: z.string(),
    fieldType: exports.FormFieldType$outboundSchema,
    value: z.string(),
    sortOrder: z.number().int(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var TemplateField$;
(function (TemplateField$) {
    /** @deprecated use `TemplateField$inboundSchema` instead. */
    TemplateField$.inboundSchema = exports.TemplateField$inboundSchema;
    /** @deprecated use `TemplateField$outboundSchema` instead. */
    TemplateField$.outboundSchema = exports.TemplateField$outboundSchema;
})(TemplateField$ || (exports.TemplateField$ = TemplateField$ = {}));
function templateFieldToJSON(templateField) {
    return JSON.stringify(exports.TemplateField$outboundSchema.parse(templateField));
}
function templateFieldFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.TemplateField$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'TemplateField' from JSON`);
}
/** @internal */
exports.Form$inboundSchema = z
    .object({
    uuid: z.string().optional(),
    active: exports.FormActive$inboundSchema.default(1),
    edit_date: z.string().optional(),
    name: z.string().optional(),
    document_template_uuid: z.string().optional(),
    can_be_used_independently: z.string().optional(),
    badge_mandatory_state: z.string().optional(),
    template_fields: z.array(z.lazy(() => exports.TemplateField$inboundSchema))
        .optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "edit_date": "editDate",
        "document_template_uuid": "documentTemplateUuid",
        "can_be_used_independently": "canBeUsedIndependently",
        "badge_mandatory_state": "badgeMandatoryState",
        "template_fields": "templateFields",
    });
});
/** @internal */
exports.Form$outboundSchema = z.object({
    uuid: z.string().optional(),
    active: exports.FormActive$outboundSchema.default(1),
    editDate: z.string().optional(),
    name: z.string().optional(),
    documentTemplateUuid: z.string().optional(),
    canBeUsedIndependently: z.string().optional(),
    badgeMandatoryState: z.string().optional(),
    templateFields: z.array(z.lazy(() => exports.TemplateField$outboundSchema))
        .optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        editDate: "edit_date",
        documentTemplateUuid: "document_template_uuid",
        canBeUsedIndependently: "can_be_used_independently",
        badgeMandatoryState: "badge_mandatory_state",
        templateFields: "template_fields",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Form$;
(function (Form$) {
    /** @deprecated use `Form$inboundSchema` instead. */
    Form$.inboundSchema = exports.Form$inboundSchema;
    /** @deprecated use `Form$outboundSchema` instead. */
    Form$.outboundSchema = exports.Form$outboundSchema;
})(Form$ || (exports.Form$ = Form$ = {}));
function formToJSON(form) {
    return JSON.stringify(exports.Form$outboundSchema.parse(form));
}
function formFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.Form$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Form' from JSON`);
}
/** @internal */
exports.FormInput$inboundSchema = z.object({
    uuid: z.string().optional(),
    active: exports.FormActive$inboundSchema.default(1),
    name: z.string().optional(),
    document_template_uuid: z.string().optional(),
    can_be_used_independently: z.string().optional(),
    badge_mandatory_state: z.string().optional(),
    template_fields: z.array(z.lazy(() => exports.TemplateField$inboundSchema))
        .optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "document_template_uuid": "documentTemplateUuid",
        "can_be_used_independently": "canBeUsedIndependently",
        "badge_mandatory_state": "badgeMandatoryState",
        "template_fields": "templateFields",
    });
});
/** @internal */
exports.FormInput$outboundSchema = z.object({
    uuid: z.string().optional(),
    active: exports.FormActive$outboundSchema.default(1),
    name: z.string().optional(),
    documentTemplateUuid: z.string().optional(),
    canBeUsedIndependently: z.string().optional(),
    badgeMandatoryState: z.string().optional(),
    templateFields: z.array(z.lazy(() => exports.TemplateField$outboundSchema))
        .optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        documentTemplateUuid: "document_template_uuid",
        canBeUsedIndependently: "can_be_used_independently",
        badgeMandatoryState: "badge_mandatory_state",
        templateFields: "template_fields",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var FormInput$;
(function (FormInput$) {
    /** @deprecated use `FormInput$inboundSchema` instead. */
    FormInput$.inboundSchema = exports.FormInput$inboundSchema;
    /** @deprecated use `FormInput$outboundSchema` instead. */
    FormInput$.outboundSchema = exports.FormInput$outboundSchema;
})(FormInput$ || (exports.FormInput$ = FormInput$ = {}));
function formInputToJSON(formInput) {
    return JSON.stringify(exports.FormInput$outboundSchema.parse(formInput));
}
function formInputFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.FormInput$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'FormInput' from JSON`);
}
//# sourceMappingURL=form.js.map