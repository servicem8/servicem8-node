"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.AssetInput$ = exports.AssetInput$outboundSchema = exports.AssetInput$inboundSchema = exports.Asset$ = exports.Asset$outboundSchema = exports.Asset$inboundSchema = exports.FieldDatum$ = exports.FieldDatum$outboundSchema = exports.FieldDatum$inboundSchema = exports.AssetActive$ = exports.AssetActive$outboundSchema = exports.AssetActive$inboundSchema = exports.AssetActive = void 0;
exports.fieldDatumToJSON = fieldDatumToJSON;
exports.fieldDatumFromJSON = fieldDatumFromJSON;
exports.assetToJSON = assetToJSON;
exports.assetFromJSON = assetFromJSON;
exports.assetInputToJSON = assetInputToJSON;
exports.assetInputFromJSON = assetInputFromJSON;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../lib/primitives.js");
const schemas_js_1 = require("../../lib/schemas.js");
/**
 * Record active/deleted flag.
 *
 * @remarks
 *
 * Valid values are [0,1]
 */
exports.AssetActive = {
    Zero: 0,
    One: 1,
};
/** @internal */
exports.AssetActive$inboundSchema = z
    .nativeEnum(exports.AssetActive);
/** @internal */
exports.AssetActive$outboundSchema = exports.AssetActive$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var AssetActive$;
(function (AssetActive$) {
    /** @deprecated use `AssetActive$inboundSchema` instead. */
    AssetActive$.inboundSchema = exports.AssetActive$inboundSchema;
    /** @deprecated use `AssetActive$outboundSchema` instead. */
    AssetActive$.outboundSchema = exports.AssetActive$outboundSchema;
})(AssetActive$ || (exports.AssetActive$ = AssetActive$ = {}));
/** @internal */
exports.FieldDatum$inboundSchema = z.object({
    uuid: z.string(),
    fieldType: z.string(),
    fieldName: z.string(),
    fieldValue: z.string(),
    sortOrder: z.number(),
});
/** @internal */
exports.FieldDatum$outboundSchema = z.object({
    uuid: z.string(),
    fieldType: z.string(),
    fieldName: z.string(),
    fieldValue: z.string(),
    sortOrder: z.number(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var FieldDatum$;
(function (FieldDatum$) {
    /** @deprecated use `FieldDatum$inboundSchema` instead. */
    FieldDatum$.inboundSchema = exports.FieldDatum$inboundSchema;
    /** @deprecated use `FieldDatum$outboundSchema` instead. */
    FieldDatum$.outboundSchema = exports.FieldDatum$outboundSchema;
})(FieldDatum$ || (exports.FieldDatum$ = FieldDatum$ = {}));
function fieldDatumToJSON(fieldDatum) {
    return JSON.stringify(exports.FieldDatum$outboundSchema.parse(fieldDatum));
}
function fieldDatumFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.FieldDatum$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'FieldDatum' from JSON`);
}
/** @internal */
exports.Asset$inboundSchema = z
    .object({
    uuid: z.string().optional(),
    active: exports.AssetActive$inboundSchema.default(1),
    edit_date: z.string().optional(),
    company_uuid: z.string().optional(),
    asset_code: z.string().optional(),
    asset_type_uuid: z.string().optional(),
    name: z.string(),
    lat: z.number().optional(),
    lng: z.number().optional(),
    geo_timestamp: z.string().optional(),
    altitude: z.number().optional(),
    field_data: z.array(z.lazy(() => exports.FieldDatum$inboundSchema)).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "edit_date": "editDate",
        "company_uuid": "companyUuid",
        "asset_code": "assetCode",
        "asset_type_uuid": "assetTypeUuid",
        "geo_timestamp": "geoTimestamp",
        "field_data": "fieldData",
    });
});
/** @internal */
exports.Asset$outboundSchema = z.object({
    uuid: z.string().optional(),
    active: exports.AssetActive$outboundSchema.default(1),
    editDate: z.string().optional(),
    companyUuid: z.string().optional(),
    assetCode: z.string().optional(),
    assetTypeUuid: z.string().optional(),
    name: z.string(),
    lat: z.number().optional(),
    lng: z.number().optional(),
    geoTimestamp: z.string().optional(),
    altitude: z.number().optional(),
    fieldData: z.array(z.lazy(() => exports.FieldDatum$outboundSchema)).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        editDate: "edit_date",
        companyUuid: "company_uuid",
        assetCode: "asset_code",
        assetTypeUuid: "asset_type_uuid",
        geoTimestamp: "geo_timestamp",
        fieldData: "field_data",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Asset$;
(function (Asset$) {
    /** @deprecated use `Asset$inboundSchema` instead. */
    Asset$.inboundSchema = exports.Asset$inboundSchema;
    /** @deprecated use `Asset$outboundSchema` instead. */
    Asset$.outboundSchema = exports.Asset$outboundSchema;
})(Asset$ || (exports.Asset$ = Asset$ = {}));
function assetToJSON(asset) {
    return JSON.stringify(exports.Asset$outboundSchema.parse(asset));
}
function assetFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.Asset$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Asset' from JSON`);
}
/** @internal */
exports.AssetInput$inboundSchema = z.object({
    uuid: z.string().optional(),
    active: exports.AssetActive$inboundSchema.default(1),
    company_uuid: z.string().optional(),
    asset_code: z.string().optional(),
    asset_type_uuid: z.string().optional(),
    name: z.string(),
    lat: z.number().optional(),
    lng: z.number().optional(),
    geo_timestamp: z.string().optional(),
    altitude: z.number().optional(),
    field_data: z.array(z.lazy(() => exports.FieldDatum$inboundSchema)).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "company_uuid": "companyUuid",
        "asset_code": "assetCode",
        "asset_type_uuid": "assetTypeUuid",
        "geo_timestamp": "geoTimestamp",
        "field_data": "fieldData",
    });
});
/** @internal */
exports.AssetInput$outboundSchema = z.object({
    uuid: z.string().optional(),
    active: exports.AssetActive$outboundSchema.default(1),
    companyUuid: z.string().optional(),
    assetCode: z.string().optional(),
    assetTypeUuid: z.string().optional(),
    name: z.string(),
    lat: z.number().optional(),
    lng: z.number().optional(),
    geoTimestamp: z.string().optional(),
    altitude: z.number().optional(),
    fieldData: z.array(z.lazy(() => exports.FieldDatum$outboundSchema)).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        companyUuid: "company_uuid",
        assetCode: "asset_code",
        assetTypeUuid: "asset_type_uuid",
        geoTimestamp: "geo_timestamp",
        fieldData: "field_data",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var AssetInput$;
(function (AssetInput$) {
    /** @deprecated use `AssetInput$inboundSchema` instead. */
    AssetInput$.inboundSchema = exports.AssetInput$inboundSchema;
    /** @deprecated use `AssetInput$outboundSchema` instead. */
    AssetInput$.outboundSchema = exports.AssetInput$outboundSchema;
})(AssetInput$ || (exports.AssetInput$ = AssetInput$ = {}));
function assetInputToJSON(assetInput) {
    return JSON.stringify(exports.AssetInput$outboundSchema.parse(assetInput));
}
function assetInputFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.AssetInput$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AssetInput' from JSON`);
}
//# sourceMappingURL=asset.js.map