"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.KnowledgeArticleInput$ = exports.KnowledgeArticleInput$outboundSchema = exports.KnowledgeArticleInput$inboundSchema = exports.KnowledgeArticle$ = exports.KnowledgeArticle$outboundSchema = exports.KnowledgeArticle$inboundSchema = exports.Relationship$ = exports.Relationship$outboundSchema = exports.Relationship$inboundSchema = exports.ObjectName$ = exports.ObjectName$outboundSchema = exports.ObjectName$inboundSchema = exports.KnowledgeArticleActive$ = exports.KnowledgeArticleActive$outboundSchema = exports.KnowledgeArticleActive$inboundSchema = exports.ObjectName = exports.KnowledgeArticleActive = void 0;
exports.relationshipToJSON = relationshipToJSON;
exports.relationshipFromJSON = relationshipFromJSON;
exports.knowledgeArticleToJSON = knowledgeArticleToJSON;
exports.knowledgeArticleFromJSON = knowledgeArticleFromJSON;
exports.knowledgeArticleInputToJSON = knowledgeArticleInputToJSON;
exports.knowledgeArticleInputFromJSON = knowledgeArticleInputFromJSON;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../lib/primitives.js");
const schemas_js_1 = require("../../lib/schemas.js");
/**
 * Record active/deleted flag.
 *
 * @remarks
 *
 * Valid values are [0,1]
 */
exports.KnowledgeArticleActive = {
    Zero: 0,
    One: 1,
};
exports.ObjectName = {
    JobMixed: "Job",
    JobLower: "job",
};
/** @internal */
exports.KnowledgeArticleActive$inboundSchema = z.nativeEnum(exports.KnowledgeArticleActive);
/** @internal */
exports.KnowledgeArticleActive$outboundSchema = exports.KnowledgeArticleActive$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var KnowledgeArticleActive$;
(function (KnowledgeArticleActive$) {
    /** @deprecated use `KnowledgeArticleActive$inboundSchema` instead. */
    KnowledgeArticleActive$.inboundSchema = exports.KnowledgeArticleActive$inboundSchema;
    /** @deprecated use `KnowledgeArticleActive$outboundSchema` instead. */
    KnowledgeArticleActive$.outboundSchema = exports.KnowledgeArticleActive$outboundSchema;
})(KnowledgeArticleActive$ || (exports.KnowledgeArticleActive$ = KnowledgeArticleActive$ = {}));
/** @internal */
exports.ObjectName$inboundSchema = z
    .nativeEnum(exports.ObjectName);
/** @internal */
exports.ObjectName$outboundSchema = exports.ObjectName$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ObjectName$;
(function (ObjectName$) {
    /** @deprecated use `ObjectName$inboundSchema` instead. */
    ObjectName$.inboundSchema = exports.ObjectName$inboundSchema;
    /** @deprecated use `ObjectName$outboundSchema` instead. */
    ObjectName$.outboundSchema = exports.ObjectName$outboundSchema;
})(ObjectName$ || (exports.ObjectName$ = ObjectName$ = {}));
/** @internal */
exports.Relationship$inboundSchema = z.object({
    object_name: exports.ObjectName$inboundSchema,
    object_uuid: z.string(),
    object_description: z.string().optional(),
    create_date: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "object_name": "objectName",
        "object_uuid": "objectUuid",
        "object_description": "objectDescription",
        "create_date": "createDate",
    });
});
/** @internal */
exports.Relationship$outboundSchema = z.object({
    objectName: exports.ObjectName$outboundSchema,
    objectUuid: z.string(),
    objectDescription: z.string().optional(),
    createDate: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        objectName: "object_name",
        objectUuid: "object_uuid",
        objectDescription: "object_description",
        createDate: "create_date",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Relationship$;
(function (Relationship$) {
    /** @deprecated use `Relationship$inboundSchema` instead. */
    Relationship$.inboundSchema = exports.Relationship$inboundSchema;
    /** @deprecated use `Relationship$outboundSchema` instead. */
    Relationship$.outboundSchema = exports.Relationship$outboundSchema;
})(Relationship$ || (exports.Relationship$ = Relationship$ = {}));
function relationshipToJSON(relationship) {
    return JSON.stringify(exports.Relationship$outboundSchema.parse(relationship));
}
function relationshipFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.Relationship$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Relationship' from JSON`);
}
/** @internal */
exports.KnowledgeArticle$inboundSchema = z.object({
    uuid: z.string().optional(),
    active: exports.KnowledgeArticleActive$inboundSchema.default(1),
    edit_date: z.string().optional(),
    name: z.string(),
    content: z.string().optional(),
    article_type: z.string().optional(),
    tags: z.string().optional(),
    relationships: z.array(z.lazy(() => exports.Relationship$inboundSchema)).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "edit_date": "editDate",
        "article_type": "articleType",
    });
});
/** @internal */
exports.KnowledgeArticle$outboundSchema = z.object({
    uuid: z.string().optional(),
    active: exports.KnowledgeArticleActive$outboundSchema.default(1),
    editDate: z.string().optional(),
    name: z.string(),
    content: z.string().optional(),
    articleType: z.string().optional(),
    tags: z.string().optional(),
    relationships: z.array(z.lazy(() => exports.Relationship$outboundSchema)).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        editDate: "edit_date",
        articleType: "article_type",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var KnowledgeArticle$;
(function (KnowledgeArticle$) {
    /** @deprecated use `KnowledgeArticle$inboundSchema` instead. */
    KnowledgeArticle$.inboundSchema = exports.KnowledgeArticle$inboundSchema;
    /** @deprecated use `KnowledgeArticle$outboundSchema` instead. */
    KnowledgeArticle$.outboundSchema = exports.KnowledgeArticle$outboundSchema;
})(KnowledgeArticle$ || (exports.KnowledgeArticle$ = KnowledgeArticle$ = {}));
function knowledgeArticleToJSON(knowledgeArticle) {
    return JSON.stringify(exports.KnowledgeArticle$outboundSchema.parse(knowledgeArticle));
}
function knowledgeArticleFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.KnowledgeArticle$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'KnowledgeArticle' from JSON`);
}
/** @internal */
exports.KnowledgeArticleInput$inboundSchema = z.object({
    uuid: z.string().optional(),
    active: exports.KnowledgeArticleActive$inboundSchema.default(1),
    name: z.string(),
    content: z.string().optional(),
    article_type: z.string().optional(),
    tags: z.string().optional(),
    relationships: z.array(z.lazy(() => exports.Relationship$inboundSchema)).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "article_type": "articleType",
    });
});
/** @internal */
exports.KnowledgeArticleInput$outboundSchema = z.object({
    uuid: z.string().optional(),
    active: exports.KnowledgeArticleActive$outboundSchema.default(1),
    name: z.string(),
    content: z.string().optional(),
    articleType: z.string().optional(),
    tags: z.string().optional(),
    relationships: z.array(z.lazy(() => exports.Relationship$outboundSchema)).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        articleType: "article_type",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var KnowledgeArticleInput$;
(function (KnowledgeArticleInput$) {
    /** @deprecated use `KnowledgeArticleInput$inboundSchema` instead. */
    KnowledgeArticleInput$.inboundSchema = exports.KnowledgeArticleInput$inboundSchema;
    /** @deprecated use `KnowledgeArticleInput$outboundSchema` instead. */
    KnowledgeArticleInput$.outboundSchema = exports.KnowledgeArticleInput$outboundSchema;
})(KnowledgeArticleInput$ || (exports.KnowledgeArticleInput$ = KnowledgeArticleInput$ = {}));
function knowledgeArticleInputToJSON(knowledgeArticleInput) {
    return JSON.stringify(exports.KnowledgeArticleInput$outboundSchema.parse(knowledgeArticleInput));
}
function knowledgeArticleInputFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.KnowledgeArticleInput$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'KnowledgeArticleInput' from JSON`);
}
//# sourceMappingURL=knowledgearticle.js.map