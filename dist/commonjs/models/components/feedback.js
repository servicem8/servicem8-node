"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.FeedbackInput$ = exports.FeedbackInput$outboundSchema = exports.FeedbackInput$inboundSchema = exports.Feedback$ = exports.Feedback$outboundSchema = exports.Feedback$inboundSchema = exports.FeedbackActive$ = exports.FeedbackActive$outboundSchema = exports.FeedbackActive$inboundSchema = exports.FeedbackActive = void 0;
exports.feedbackToJSON = feedbackToJSON;
exports.feedbackFromJSON = feedbackFromJSON;
exports.feedbackInputToJSON = feedbackInputToJSON;
exports.feedbackInputFromJSON = feedbackInputFromJSON;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../lib/primitives.js");
const schemas_js_1 = require("../../lib/schemas.js");
/**
 * Record active/deleted flag.
 *
 * @remarks
 *
 * Valid values are [0,1]
 */
exports.FeedbackActive = {
    Zero: 0,
    One: 1,
};
/** @internal */
exports.FeedbackActive$inboundSchema = z.nativeEnum(exports.FeedbackActive);
/** @internal */
exports.FeedbackActive$outboundSchema = exports.FeedbackActive$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var FeedbackActive$;
(function (FeedbackActive$) {
    /** @deprecated use `FeedbackActive$inboundSchema` instead. */
    FeedbackActive$.inboundSchema = exports.FeedbackActive$inboundSchema;
    /** @deprecated use `FeedbackActive$outboundSchema` instead. */
    FeedbackActive$.outboundSchema = exports.FeedbackActive$outboundSchema;
})(FeedbackActive$ || (exports.FeedbackActive$ = FeedbackActive$ = {}));
/** @internal */
exports.Feedback$inboundSchema = z.object({
    uuid: z.string().optional(),
    active: exports.FeedbackActive$inboundSchema.default(1),
    edit_date: z.string().optional(),
    timestamp: z.string().optional(),
    related_object: z.string().optional(),
    related_object_uuid: z.string().optional(),
    rating: z.string().optional(),
    comment: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "edit_date": "editDate",
        "related_object": "relatedObject",
        "related_object_uuid": "relatedObjectUuid",
    });
});
/** @internal */
exports.Feedback$outboundSchema = z.object({
    uuid: z.string().optional(),
    active: exports.FeedbackActive$outboundSchema.default(1),
    editDate: z.string().optional(),
    timestamp: z.string().optional(),
    relatedObject: z.string().optional(),
    relatedObjectUuid: z.string().optional(),
    rating: z.string().optional(),
    comment: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        editDate: "edit_date",
        relatedObject: "related_object",
        relatedObjectUuid: "related_object_uuid",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Feedback$;
(function (Feedback$) {
    /** @deprecated use `Feedback$inboundSchema` instead. */
    Feedback$.inboundSchema = exports.Feedback$inboundSchema;
    /** @deprecated use `Feedback$outboundSchema` instead. */
    Feedback$.outboundSchema = exports.Feedback$outboundSchema;
})(Feedback$ || (exports.Feedback$ = Feedback$ = {}));
function feedbackToJSON(feedback) {
    return JSON.stringify(exports.Feedback$outboundSchema.parse(feedback));
}
function feedbackFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.Feedback$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Feedback' from JSON`);
}
/** @internal */
exports.FeedbackInput$inboundSchema = z.object({
    uuid: z.string().optional(),
    active: exports.FeedbackActive$inboundSchema.default(1),
    timestamp: z.string().optional(),
    related_object: z.string().optional(),
    related_object_uuid: z.string().optional(),
    rating: z.string().optional(),
    comment: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "related_object": "relatedObject",
        "related_object_uuid": "relatedObjectUuid",
    });
});
/** @internal */
exports.FeedbackInput$outboundSchema = z.object({
    uuid: z.string().optional(),
    active: exports.FeedbackActive$outboundSchema.default(1),
    timestamp: z.string().optional(),
    relatedObject: z.string().optional(),
    relatedObjectUuid: z.string().optional(),
    rating: z.string().optional(),
    comment: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        relatedObject: "related_object",
        relatedObjectUuid: "related_object_uuid",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var FeedbackInput$;
(function (FeedbackInput$) {
    /** @deprecated use `FeedbackInput$inboundSchema` instead. */
    FeedbackInput$.inboundSchema = exports.FeedbackInput$inboundSchema;
    /** @deprecated use `FeedbackInput$outboundSchema` instead. */
    FeedbackInput$.outboundSchema = exports.FeedbackInput$outboundSchema;
})(FeedbackInput$ || (exports.FeedbackInput$ = FeedbackInput$ = {}));
function feedbackInputToJSON(feedbackInput) {
    return JSON.stringify(exports.FeedbackInput$outboundSchema.parse(feedbackInput));
}
function feedbackInputFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.FeedbackInput$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'FeedbackInput' from JSON`);
}
//# sourceMappingURL=feedback.js.map