"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.JobContactInput$ = exports.JobContactInput$outboundSchema = exports.JobContactInput$inboundSchema = exports.JobContact$ = exports.JobContact$outboundSchema = exports.JobContact$inboundSchema = exports.JobContactActive$ = exports.JobContactActive$outboundSchema = exports.JobContactActive$inboundSchema = exports.JobContactActive = void 0;
exports.jobContactToJSON = jobContactToJSON;
exports.jobContactFromJSON = jobContactFromJSON;
exports.jobContactInputToJSON = jobContactInputToJSON;
exports.jobContactInputFromJSON = jobContactInputFromJSON;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../lib/primitives.js");
const schemas_js_1 = require("../../lib/schemas.js");
/**
 * Record active/deleted flag.
 *
 * @remarks
 *
 * Valid values are [0,1]
 */
exports.JobContactActive = {
    Zero: 0,
    One: 1,
};
/** @internal */
exports.JobContactActive$inboundSchema = z.nativeEnum(exports.JobContactActive);
/** @internal */
exports.JobContactActive$outboundSchema = exports.JobContactActive$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var JobContactActive$;
(function (JobContactActive$) {
    /** @deprecated use `JobContactActive$inboundSchema` instead. */
    JobContactActive$.inboundSchema = exports.JobContactActive$inboundSchema;
    /** @deprecated use `JobContactActive$outboundSchema` instead. */
    JobContactActive$.outboundSchema = exports.JobContactActive$outboundSchema;
})(JobContactActive$ || (exports.JobContactActive$ = JobContactActive$ = {}));
/** @internal */
exports.JobContact$inboundSchema = z.object({
    uuid: z.string().optional(),
    active: exports.JobContactActive$inboundSchema.default(1),
    edit_date: z.string().optional(),
    job_uuid: z.string().optional(),
    first: z.string().optional(),
    last: z.string().optional(),
    phone: z.string().optional(),
    mobile: z.string().optional(),
    email: z.string().optional(),
    type: z.string().optional(),
    is_primary_contact: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "edit_date": "editDate",
        "job_uuid": "jobUuid",
        "is_primary_contact": "isPrimaryContact",
    });
});
/** @internal */
exports.JobContact$outboundSchema = z.object({
    uuid: z.string().optional(),
    active: exports.JobContactActive$outboundSchema.default(1),
    editDate: z.string().optional(),
    jobUuid: z.string().optional(),
    first: z.string().optional(),
    last: z.string().optional(),
    phone: z.string().optional(),
    mobile: z.string().optional(),
    email: z.string().optional(),
    type: z.string().optional(),
    isPrimaryContact: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        editDate: "edit_date",
        jobUuid: "job_uuid",
        isPrimaryContact: "is_primary_contact",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var JobContact$;
(function (JobContact$) {
    /** @deprecated use `JobContact$inboundSchema` instead. */
    JobContact$.inboundSchema = exports.JobContact$inboundSchema;
    /** @deprecated use `JobContact$outboundSchema` instead. */
    JobContact$.outboundSchema = exports.JobContact$outboundSchema;
})(JobContact$ || (exports.JobContact$ = JobContact$ = {}));
function jobContactToJSON(jobContact) {
    return JSON.stringify(exports.JobContact$outboundSchema.parse(jobContact));
}
function jobContactFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.JobContact$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'JobContact' from JSON`);
}
/** @internal */
exports.JobContactInput$inboundSchema = z.object({
    uuid: z.string().optional(),
    active: exports.JobContactActive$inboundSchema.default(1),
    job_uuid: z.string().optional(),
    first: z.string().optional(),
    last: z.string().optional(),
    phone: z.string().optional(),
    mobile: z.string().optional(),
    email: z.string().optional(),
    type: z.string().optional(),
    is_primary_contact: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "job_uuid": "jobUuid",
        "is_primary_contact": "isPrimaryContact",
    });
});
/** @internal */
exports.JobContactInput$outboundSchema = z.object({
    uuid: z.string().optional(),
    active: exports.JobContactActive$outboundSchema.default(1),
    jobUuid: z.string().optional(),
    first: z.string().optional(),
    last: z.string().optional(),
    phone: z.string().optional(),
    mobile: z.string().optional(),
    email: z.string().optional(),
    type: z.string().optional(),
    isPrimaryContact: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        jobUuid: "job_uuid",
        isPrimaryContact: "is_primary_contact",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var JobContactInput$;
(function (JobContactInput$) {
    /** @deprecated use `JobContactInput$inboundSchema` instead. */
    JobContactInput$.inboundSchema = exports.JobContactInput$inboundSchema;
    /** @deprecated use `JobContactInput$outboundSchema` instead. */
    JobContactInput$.outboundSchema = exports.JobContactInput$outboundSchema;
})(JobContactInput$ || (exports.JobContactInput$ = JobContactInput$ = {}));
function jobContactInputToJSON(jobContactInput) {
    return JSON.stringify(exports.JobContactInput$outboundSchema.parse(jobContactInput));
}
function jobContactInputFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.JobContactInput$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'JobContactInput' from JSON`);
}
//# sourceMappingURL=jobcontact.js.map