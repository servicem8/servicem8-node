"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.MaterialInput$ = exports.MaterialInput$outboundSchema = exports.MaterialInput$inboundSchema = exports.Material$ = exports.Material$outboundSchema = exports.Material$inboundSchema = exports.ItemIsInventoried$ = exports.ItemIsInventoried$outboundSchema = exports.ItemIsInventoried$inboundSchema = exports.PriceIncludesTaxes$ = exports.PriceIncludesTaxes$outboundSchema = exports.PriceIncludesTaxes$inboundSchema = exports.MaterialActive$ = exports.MaterialActive$outboundSchema = exports.MaterialActive$inboundSchema = exports.ItemIsInventoried = exports.PriceIncludesTaxes = exports.MaterialActive = void 0;
exports.materialToJSON = materialToJSON;
exports.materialFromJSON = materialFromJSON;
exports.materialInputToJSON = materialInputToJSON;
exports.materialInputFromJSON = materialInputFromJSON;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../lib/primitives.js");
const schemas_js_1 = require("../../lib/schemas.js");
/**
 * Record active/deleted flag.
 *
 * @remarks
 *
 * Valid values are [0,1]
 */
exports.MaterialActive = {
    Zero: 0,
    One: 1,
};
/**
 * @remarks
 *
 * Valid values are [0,1]
 */
exports.PriceIncludesTaxes = {
    Zero: 0,
    One: 1,
};
/**
 * @remarks
 *
 * Valid values are [0,1]
 */
exports.ItemIsInventoried = {
    Zero: 0,
    One: 1,
};
/** @internal */
exports.MaterialActive$inboundSchema = z.nativeEnum(exports.MaterialActive);
/** @internal */
exports.MaterialActive$outboundSchema = exports.MaterialActive$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var MaterialActive$;
(function (MaterialActive$) {
    /** @deprecated use `MaterialActive$inboundSchema` instead. */
    MaterialActive$.inboundSchema = exports.MaterialActive$inboundSchema;
    /** @deprecated use `MaterialActive$outboundSchema` instead. */
    MaterialActive$.outboundSchema = exports.MaterialActive$outboundSchema;
})(MaterialActive$ || (exports.MaterialActive$ = MaterialActive$ = {}));
/** @internal */
exports.PriceIncludesTaxes$inboundSchema = z.nativeEnum(exports.PriceIncludesTaxes);
/** @internal */
exports.PriceIncludesTaxes$outboundSchema = exports.PriceIncludesTaxes$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var PriceIncludesTaxes$;
(function (PriceIncludesTaxes$) {
    /** @deprecated use `PriceIncludesTaxes$inboundSchema` instead. */
    PriceIncludesTaxes$.inboundSchema = exports.PriceIncludesTaxes$inboundSchema;
    /** @deprecated use `PriceIncludesTaxes$outboundSchema` instead. */
    PriceIncludesTaxes$.outboundSchema = exports.PriceIncludesTaxes$outboundSchema;
})(PriceIncludesTaxes$ || (exports.PriceIncludesTaxes$ = PriceIncludesTaxes$ = {}));
/** @internal */
exports.ItemIsInventoried$inboundSchema = z.nativeEnum(exports.ItemIsInventoried);
/** @internal */
exports.ItemIsInventoried$outboundSchema = exports.ItemIsInventoried$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ItemIsInventoried$;
(function (ItemIsInventoried$) {
    /** @deprecated use `ItemIsInventoried$inboundSchema` instead. */
    ItemIsInventoried$.inboundSchema = exports.ItemIsInventoried$inboundSchema;
    /** @deprecated use `ItemIsInventoried$outboundSchema` instead. */
    ItemIsInventoried$.outboundSchema = exports.ItemIsInventoried$outboundSchema;
})(ItemIsInventoried$ || (exports.ItemIsInventoried$ = ItemIsInventoried$ = {}));
/** @internal */
exports.Material$inboundSchema = z.object({
    uuid: z.string().optional(),
    active: exports.MaterialActive$inboundSchema.default(1),
    edit_date: z.string().optional(),
    name: z.string(),
    item_number: z.string().optional(),
    price: z.string().optional(),
    cost: z.string().optional(),
    item_description: z.string().optional(),
    quantity_in_stock: z.number().optional(),
    price_includes_taxes: exports.PriceIncludesTaxes$inboundSchema.optional(),
    use_description_for_invoicing: z.string().optional(),
    tax_rate_uuid: z.string().optional(),
    barcode: z.string().optional(),
    item_is_inventoried: exports.ItemIsInventoried$inboundSchema.optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "edit_date": "editDate",
        "item_number": "itemNumber",
        "item_description": "itemDescription",
        "quantity_in_stock": "quantityInStock",
        "price_includes_taxes": "priceIncludesTaxes",
        "use_description_for_invoicing": "useDescriptionForInvoicing",
        "tax_rate_uuid": "taxRateUuid",
        "item_is_inventoried": "itemIsInventoried",
    });
});
/** @internal */
exports.Material$outboundSchema = z.object({
    uuid: z.string().optional(),
    active: exports.MaterialActive$outboundSchema.default(1),
    editDate: z.string().optional(),
    name: z.string(),
    itemNumber: z.string().optional(),
    price: z.string().optional(),
    cost: z.string().optional(),
    itemDescription: z.string().optional(),
    quantityInStock: z.number().optional(),
    priceIncludesTaxes: exports.PriceIncludesTaxes$outboundSchema.optional(),
    useDescriptionForInvoicing: z.string().optional(),
    taxRateUuid: z.string().optional(),
    barcode: z.string().optional(),
    itemIsInventoried: exports.ItemIsInventoried$outboundSchema.optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        editDate: "edit_date",
        itemNumber: "item_number",
        itemDescription: "item_description",
        quantityInStock: "quantity_in_stock",
        priceIncludesTaxes: "price_includes_taxes",
        useDescriptionForInvoicing: "use_description_for_invoicing",
        taxRateUuid: "tax_rate_uuid",
        itemIsInventoried: "item_is_inventoried",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Material$;
(function (Material$) {
    /** @deprecated use `Material$inboundSchema` instead. */
    Material$.inboundSchema = exports.Material$inboundSchema;
    /** @deprecated use `Material$outboundSchema` instead. */
    Material$.outboundSchema = exports.Material$outboundSchema;
})(Material$ || (exports.Material$ = Material$ = {}));
function materialToJSON(material) {
    return JSON.stringify(exports.Material$outboundSchema.parse(material));
}
function materialFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.Material$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Material' from JSON`);
}
/** @internal */
exports.MaterialInput$inboundSchema = z.object({
    uuid: z.string().optional(),
    active: exports.MaterialActive$inboundSchema.default(1),
    name: z.string(),
    item_number: z.string().optional(),
    price: z.string().optional(),
    cost: z.string().optional(),
    item_description: z.string().optional(),
    quantity_in_stock: z.number().optional(),
    price_includes_taxes: exports.PriceIncludesTaxes$inboundSchema.optional(),
    use_description_for_invoicing: z.string().optional(),
    tax_rate_uuid: z.string().optional(),
    barcode: z.string().optional(),
    item_is_inventoried: exports.ItemIsInventoried$inboundSchema.optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "item_number": "itemNumber",
        "item_description": "itemDescription",
        "quantity_in_stock": "quantityInStock",
        "price_includes_taxes": "priceIncludesTaxes",
        "use_description_for_invoicing": "useDescriptionForInvoicing",
        "tax_rate_uuid": "taxRateUuid",
        "item_is_inventoried": "itemIsInventoried",
    });
});
/** @internal */
exports.MaterialInput$outboundSchema = z.object({
    uuid: z.string().optional(),
    active: exports.MaterialActive$outboundSchema.default(1),
    name: z.string(),
    itemNumber: z.string().optional(),
    price: z.string().optional(),
    cost: z.string().optional(),
    itemDescription: z.string().optional(),
    quantityInStock: z.number().optional(),
    priceIncludesTaxes: exports.PriceIncludesTaxes$outboundSchema.optional(),
    useDescriptionForInvoicing: z.string().optional(),
    taxRateUuid: z.string().optional(),
    barcode: z.string().optional(),
    itemIsInventoried: exports.ItemIsInventoried$outboundSchema.optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        itemNumber: "item_number",
        itemDescription: "item_description",
        quantityInStock: "quantity_in_stock",
        priceIncludesTaxes: "price_includes_taxes",
        useDescriptionForInvoicing: "use_description_for_invoicing",
        taxRateUuid: "tax_rate_uuid",
        itemIsInventoried: "item_is_inventoried",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var MaterialInput$;
(function (MaterialInput$) {
    /** @deprecated use `MaterialInput$inboundSchema` instead. */
    MaterialInput$.inboundSchema = exports.MaterialInput$inboundSchema;
    /** @deprecated use `MaterialInput$outboundSchema` instead. */
    MaterialInput$.outboundSchema = exports.MaterialInput$outboundSchema;
})(MaterialInput$ || (exports.MaterialInput$ = MaterialInput$ = {}));
function materialInputToJSON(materialInput) {
    return JSON.stringify(exports.MaterialInput$outboundSchema.parse(materialInput));
}
function materialInputFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.MaterialInput$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'MaterialInput' from JSON`);
}
//# sourceMappingURL=material.js.map