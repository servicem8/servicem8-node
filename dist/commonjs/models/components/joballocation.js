"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.JobAllocationInput$ = exports.JobAllocationInput$outboundSchema = exports.JobAllocationInput$inboundSchema = exports.JobAllocation$ = exports.JobAllocation$outboundSchema = exports.JobAllocation$inboundSchema = exports.JobAllocationActive$ = exports.JobAllocationActive$outboundSchema = exports.JobAllocationActive$inboundSchema = exports.JobAllocationActive = void 0;
exports.jobAllocationToJSON = jobAllocationToJSON;
exports.jobAllocationFromJSON = jobAllocationFromJSON;
exports.jobAllocationInputToJSON = jobAllocationInputToJSON;
exports.jobAllocationInputFromJSON = jobAllocationInputFromJSON;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../lib/primitives.js");
const schemas_js_1 = require("../../lib/schemas.js");
/**
 * Record active/deleted flag.
 *
 * @remarks
 *
 * Valid values are [0,1]
 */
exports.JobAllocationActive = {
    Zero: 0,
    One: 1,
};
/** @internal */
exports.JobAllocationActive$inboundSchema = z.nativeEnum(exports.JobAllocationActive);
/** @internal */
exports.JobAllocationActive$outboundSchema = exports.JobAllocationActive$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var JobAllocationActive$;
(function (JobAllocationActive$) {
    /** @deprecated use `JobAllocationActive$inboundSchema` instead. */
    JobAllocationActive$.inboundSchema = exports.JobAllocationActive$inboundSchema;
    /** @deprecated use `JobAllocationActive$outboundSchema` instead. */
    JobAllocationActive$.outboundSchema = exports.JobAllocationActive$outboundSchema;
})(JobAllocationActive$ || (exports.JobAllocationActive$ = JobAllocationActive$ = {}));
/** @internal */
exports.JobAllocation$inboundSchema = z.object({
    uuid: z.string().optional(),
    active: exports.JobAllocationActive$inboundSchema.default(1),
    edit_date: z.string().optional(),
    job_uuid: z.string().optional(),
    queue_uuid: z.string().optional(),
    staff_uuid: z.string().optional(),
    allocation_date: z.string().optional(),
    allocation_window_uuid: z.string().optional(),
    allocated_by_staff_uuid: z.string().optional(),
    allocated_timestamp: z.string().optional(),
    expiry_timestamp: z.string().optional(),
    read_timestamp: z.string().optional(),
    completion_timestamp: z.string().optional(),
    estimated_duration: z.string().optional(),
    revised_duration: z.string().optional(),
    sort_priority: z.string().optional(),
    requires_acceptance: z.string().optional(),
    acceptance_status: z.string().optional(),
    acceptance_timestamp: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "edit_date": "editDate",
        "job_uuid": "jobUuid",
        "queue_uuid": "queueUuid",
        "staff_uuid": "staffUuid",
        "allocation_date": "allocationDate",
        "allocation_window_uuid": "allocationWindowUuid",
        "allocated_by_staff_uuid": "allocatedByStaffUuid",
        "allocated_timestamp": "allocatedTimestamp",
        "expiry_timestamp": "expiryTimestamp",
        "read_timestamp": "readTimestamp",
        "completion_timestamp": "completionTimestamp",
        "estimated_duration": "estimatedDuration",
        "revised_duration": "revisedDuration",
        "sort_priority": "sortPriority",
        "requires_acceptance": "requiresAcceptance",
        "acceptance_status": "acceptanceStatus",
        "acceptance_timestamp": "acceptanceTimestamp",
    });
});
/** @internal */
exports.JobAllocation$outboundSchema = z.object({
    uuid: z.string().optional(),
    active: exports.JobAllocationActive$outboundSchema.default(1),
    editDate: z.string().optional(),
    jobUuid: z.string().optional(),
    queueUuid: z.string().optional(),
    staffUuid: z.string().optional(),
    allocationDate: z.string().optional(),
    allocationWindowUuid: z.string().optional(),
    allocatedByStaffUuid: z.string().optional(),
    allocatedTimestamp: z.string().optional(),
    expiryTimestamp: z.string().optional(),
    readTimestamp: z.string().optional(),
    completionTimestamp: z.string().optional(),
    estimatedDuration: z.string().optional(),
    revisedDuration: z.string().optional(),
    sortPriority: z.string().optional(),
    requiresAcceptance: z.string().optional(),
    acceptanceStatus: z.string().optional(),
    acceptanceTimestamp: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        editDate: "edit_date",
        jobUuid: "job_uuid",
        queueUuid: "queue_uuid",
        staffUuid: "staff_uuid",
        allocationDate: "allocation_date",
        allocationWindowUuid: "allocation_window_uuid",
        allocatedByStaffUuid: "allocated_by_staff_uuid",
        allocatedTimestamp: "allocated_timestamp",
        expiryTimestamp: "expiry_timestamp",
        readTimestamp: "read_timestamp",
        completionTimestamp: "completion_timestamp",
        estimatedDuration: "estimated_duration",
        revisedDuration: "revised_duration",
        sortPriority: "sort_priority",
        requiresAcceptance: "requires_acceptance",
        acceptanceStatus: "acceptance_status",
        acceptanceTimestamp: "acceptance_timestamp",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var JobAllocation$;
(function (JobAllocation$) {
    /** @deprecated use `JobAllocation$inboundSchema` instead. */
    JobAllocation$.inboundSchema = exports.JobAllocation$inboundSchema;
    /** @deprecated use `JobAllocation$outboundSchema` instead. */
    JobAllocation$.outboundSchema = exports.JobAllocation$outboundSchema;
})(JobAllocation$ || (exports.JobAllocation$ = JobAllocation$ = {}));
function jobAllocationToJSON(jobAllocation) {
    return JSON.stringify(exports.JobAllocation$outboundSchema.parse(jobAllocation));
}
function jobAllocationFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.JobAllocation$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'JobAllocation' from JSON`);
}
/** @internal */
exports.JobAllocationInput$inboundSchema = z.object({
    uuid: z.string().optional(),
    active: exports.JobAllocationActive$inboundSchema.default(1),
    job_uuid: z.string().optional(),
    queue_uuid: z.string().optional(),
    staff_uuid: z.string().optional(),
    allocation_date: z.string().optional(),
    allocation_window_uuid: z.string().optional(),
    allocated_by_staff_uuid: z.string().optional(),
    allocated_timestamp: z.string().optional(),
    expiry_timestamp: z.string().optional(),
    read_timestamp: z.string().optional(),
    completion_timestamp: z.string().optional(),
    estimated_duration: z.string().optional(),
    revised_duration: z.string().optional(),
    sort_priority: z.string().optional(),
    requires_acceptance: z.string().optional(),
    acceptance_status: z.string().optional(),
    acceptance_timestamp: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "job_uuid": "jobUuid",
        "queue_uuid": "queueUuid",
        "staff_uuid": "staffUuid",
        "allocation_date": "allocationDate",
        "allocation_window_uuid": "allocationWindowUuid",
        "allocated_by_staff_uuid": "allocatedByStaffUuid",
        "allocated_timestamp": "allocatedTimestamp",
        "expiry_timestamp": "expiryTimestamp",
        "read_timestamp": "readTimestamp",
        "completion_timestamp": "completionTimestamp",
        "estimated_duration": "estimatedDuration",
        "revised_duration": "revisedDuration",
        "sort_priority": "sortPriority",
        "requires_acceptance": "requiresAcceptance",
        "acceptance_status": "acceptanceStatus",
        "acceptance_timestamp": "acceptanceTimestamp",
    });
});
/** @internal */
exports.JobAllocationInput$outboundSchema = z.object({
    uuid: z.string().optional(),
    active: exports.JobAllocationActive$outboundSchema.default(1),
    jobUuid: z.string().optional(),
    queueUuid: z.string().optional(),
    staffUuid: z.string().optional(),
    allocationDate: z.string().optional(),
    allocationWindowUuid: z.string().optional(),
    allocatedByStaffUuid: z.string().optional(),
    allocatedTimestamp: z.string().optional(),
    expiryTimestamp: z.string().optional(),
    readTimestamp: z.string().optional(),
    completionTimestamp: z.string().optional(),
    estimatedDuration: z.string().optional(),
    revisedDuration: z.string().optional(),
    sortPriority: z.string().optional(),
    requiresAcceptance: z.string().optional(),
    acceptanceStatus: z.string().optional(),
    acceptanceTimestamp: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        jobUuid: "job_uuid",
        queueUuid: "queue_uuid",
        staffUuid: "staff_uuid",
        allocationDate: "allocation_date",
        allocationWindowUuid: "allocation_window_uuid",
        allocatedByStaffUuid: "allocated_by_staff_uuid",
        allocatedTimestamp: "allocated_timestamp",
        expiryTimestamp: "expiry_timestamp",
        readTimestamp: "read_timestamp",
        completionTimestamp: "completion_timestamp",
        estimatedDuration: "estimated_duration",
        revisedDuration: "revised_duration",
        sortPriority: "sort_priority",
        requiresAcceptance: "requires_acceptance",
        acceptanceStatus: "acceptance_status",
        acceptanceTimestamp: "acceptance_timestamp",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var JobAllocationInput$;
(function (JobAllocationInput$) {
    /** @deprecated use `JobAllocationInput$inboundSchema` instead. */
    JobAllocationInput$.inboundSchema = exports.JobAllocationInput$inboundSchema;
    /** @deprecated use `JobAllocationInput$outboundSchema` instead. */
    JobAllocationInput$.outboundSchema = exports.JobAllocationInput$outboundSchema;
})(JobAllocationInput$ || (exports.JobAllocationInput$ = JobAllocationInput$ = {}));
function jobAllocationInputToJSON(jobAllocationInput) {
    return JSON.stringify(exports.JobAllocationInput$outboundSchema.parse(jobAllocationInput));
}
function jobAllocationInputFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.JobAllocationInput$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'JobAllocationInput' from JSON`);
}
//# sourceMappingURL=joballocation.js.map