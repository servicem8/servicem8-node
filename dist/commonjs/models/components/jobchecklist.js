"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.JobChecklistInput$ = exports.JobChecklistInput$outboundSchema = exports.JobChecklistInput$inboundSchema = exports.JobChecklist$ = exports.JobChecklist$outboundSchema = exports.JobChecklist$inboundSchema = exports.IsLocked$ = exports.IsLocked$outboundSchema = exports.IsLocked$inboundSchema = exports.ReminderDataUnion3$ = exports.ReminderDataUnion3$outboundSchema = exports.ReminderDataUnion3$inboundSchema = exports.ReminderDataUnion1$ = exports.ReminderDataUnion1$outboundSchema = exports.ReminderDataUnion1$inboundSchema = exports.ReminderData1$ = exports.ReminderData1$outboundSchema = exports.ReminderData1$inboundSchema = exports.ReminderDataUnion2$ = exports.ReminderDataUnion2$outboundSchema = exports.ReminderDataUnion2$inboundSchema = exports.ReminderData2$ = exports.ReminderData2$outboundSchema = exports.ReminderData2$inboundSchema = exports.JobChecklistActive$ = exports.JobChecklistActive$outboundSchema = exports.JobChecklistActive$inboundSchema = exports.IsLocked = exports.JobChecklistActive = void 0;
exports.reminderData2ToJSON = reminderData2ToJSON;
exports.reminderData2FromJSON = reminderData2FromJSON;
exports.reminderDataUnion2ToJSON = reminderDataUnion2ToJSON;
exports.reminderDataUnion2FromJSON = reminderDataUnion2FromJSON;
exports.reminderData1ToJSON = reminderData1ToJSON;
exports.reminderData1FromJSON = reminderData1FromJSON;
exports.reminderDataUnion1ToJSON = reminderDataUnion1ToJSON;
exports.reminderDataUnion1FromJSON = reminderDataUnion1FromJSON;
exports.reminderDataUnion3ToJSON = reminderDataUnion3ToJSON;
exports.reminderDataUnion3FromJSON = reminderDataUnion3FromJSON;
exports.jobChecklistToJSON = jobChecklistToJSON;
exports.jobChecklistFromJSON = jobChecklistFromJSON;
exports.jobChecklistInputToJSON = jobChecklistInputToJSON;
exports.jobChecklistInputFromJSON = jobChecklistInputFromJSON;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../lib/primitives.js");
const schemas_js_1 = require("../../lib/schemas.js");
/**
 * Record active/deleted flag.
 *
 * @remarks
 *
 * Valid values are [0,1]
 */
exports.JobChecklistActive = {
    Zero: 0,
    One: 1,
};
/**
 * If this checklist item is locked (read-only) and cannot be modified. This is set by the system when the checklist item is created from a Task or Network Request. (Read-only).
 *
 * @remarks
 *
 * Valid values are [0,1]
 */
exports.IsLocked = {
    Zero: 0,
    One: 1,
};
/** @internal */
exports.JobChecklistActive$inboundSchema = z.nativeEnum(exports.JobChecklistActive);
/** @internal */
exports.JobChecklistActive$outboundSchema = exports.JobChecklistActive$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var JobChecklistActive$;
(function (JobChecklistActive$) {
    /** @deprecated use `JobChecklistActive$inboundSchema` instead. */
    JobChecklistActive$.inboundSchema = exports.JobChecklistActive$inboundSchema;
    /** @deprecated use `JobChecklistActive$outboundSchema` instead. */
    JobChecklistActive$.outboundSchema = exports.JobChecklistActive$outboundSchema;
})(JobChecklistActive$ || (exports.JobChecklistActive$ = JobChecklistActive$ = {}));
/** @internal */
exports.ReminderData2$inboundSchema = z.object({});
/** @internal */
exports.ReminderData2$outboundSchema = z.object({});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ReminderData2$;
(function (ReminderData2$) {
    /** @deprecated use `ReminderData2$inboundSchema` instead. */
    ReminderData2$.inboundSchema = exports.ReminderData2$inboundSchema;
    /** @deprecated use `ReminderData2$outboundSchema` instead. */
    ReminderData2$.outboundSchema = exports.ReminderData2$outboundSchema;
})(ReminderData2$ || (exports.ReminderData2$ = ReminderData2$ = {}));
function reminderData2ToJSON(reminderData2) {
    return JSON.stringify(exports.ReminderData2$outboundSchema.parse(reminderData2));
}
function reminderData2FromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.ReminderData2$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ReminderData2' from JSON`);
}
/** @internal */
exports.ReminderDataUnion2$inboundSchema = z.union([z.lazy(() => exports.ReminderData2$inboundSchema), z.string()]);
/** @internal */
exports.ReminderDataUnion2$outboundSchema = z.union([z.lazy(() => exports.ReminderData2$outboundSchema), z.string()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ReminderDataUnion2$;
(function (ReminderDataUnion2$) {
    /** @deprecated use `ReminderDataUnion2$inboundSchema` instead. */
    ReminderDataUnion2$.inboundSchema = exports.ReminderDataUnion2$inboundSchema;
    /** @deprecated use `ReminderDataUnion2$outboundSchema` instead. */
    ReminderDataUnion2$.outboundSchema = exports.ReminderDataUnion2$outboundSchema;
})(ReminderDataUnion2$ || (exports.ReminderDataUnion2$ = ReminderDataUnion2$ = {}));
function reminderDataUnion2ToJSON(reminderDataUnion2) {
    return JSON.stringify(exports.ReminderDataUnion2$outboundSchema.parse(reminderDataUnion2));
}
function reminderDataUnion2FromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.ReminderDataUnion2$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ReminderDataUnion2' from JSON`);
}
/** @internal */
exports.ReminderData1$inboundSchema = z.object({});
/** @internal */
exports.ReminderData1$outboundSchema = z.object({});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ReminderData1$;
(function (ReminderData1$) {
    /** @deprecated use `ReminderData1$inboundSchema` instead. */
    ReminderData1$.inboundSchema = exports.ReminderData1$inboundSchema;
    /** @deprecated use `ReminderData1$outboundSchema` instead. */
    ReminderData1$.outboundSchema = exports.ReminderData1$outboundSchema;
})(ReminderData1$ || (exports.ReminderData1$ = ReminderData1$ = {}));
function reminderData1ToJSON(reminderData1) {
    return JSON.stringify(exports.ReminderData1$outboundSchema.parse(reminderData1));
}
function reminderData1FromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.ReminderData1$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ReminderData1' from JSON`);
}
/** @internal */
exports.ReminderDataUnion1$inboundSchema = z.union([z.lazy(() => exports.ReminderData1$inboundSchema), z.string()]);
/** @internal */
exports.ReminderDataUnion1$outboundSchema = z.union([z.lazy(() => exports.ReminderData1$outboundSchema), z.string()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ReminderDataUnion1$;
(function (ReminderDataUnion1$) {
    /** @deprecated use `ReminderDataUnion1$inboundSchema` instead. */
    ReminderDataUnion1$.inboundSchema = exports.ReminderDataUnion1$inboundSchema;
    /** @deprecated use `ReminderDataUnion1$outboundSchema` instead. */
    ReminderDataUnion1$.outboundSchema = exports.ReminderDataUnion1$outboundSchema;
})(ReminderDataUnion1$ || (exports.ReminderDataUnion1$ = ReminderDataUnion1$ = {}));
function reminderDataUnion1ToJSON(reminderDataUnion1) {
    return JSON.stringify(exports.ReminderDataUnion1$outboundSchema.parse(reminderDataUnion1));
}
function reminderDataUnion1FromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.ReminderDataUnion1$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ReminderDataUnion1' from JSON`);
}
/** @internal */
exports.ReminderDataUnion3$inboundSchema = z.union([
    z.union([z.lazy(() => exports.ReminderData1$inboundSchema), z.string()]),
    z.union([z.lazy(() => exports.ReminderData2$inboundSchema), z.string()]),
]);
/** @internal */
exports.ReminderDataUnion3$outboundSchema = z.union([
    z.union([z.lazy(() => exports.ReminderData1$outboundSchema), z.string()]),
    z.union([z.lazy(() => exports.ReminderData2$outboundSchema), z.string()]),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ReminderDataUnion3$;
(function (ReminderDataUnion3$) {
    /** @deprecated use `ReminderDataUnion3$inboundSchema` instead. */
    ReminderDataUnion3$.inboundSchema = exports.ReminderDataUnion3$inboundSchema;
    /** @deprecated use `ReminderDataUnion3$outboundSchema` instead. */
    ReminderDataUnion3$.outboundSchema = exports.ReminderDataUnion3$outboundSchema;
})(ReminderDataUnion3$ || (exports.ReminderDataUnion3$ = ReminderDataUnion3$ = {}));
function reminderDataUnion3ToJSON(reminderDataUnion3) {
    return JSON.stringify(exports.ReminderDataUnion3$outboundSchema.parse(reminderDataUnion3));
}
function reminderDataUnion3FromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.ReminderDataUnion3$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ReminderDataUnion3' from JSON`);
}
/** @internal */
exports.IsLocked$inboundSchema = z
    .nativeEnum(exports.IsLocked);
/** @internal */
exports.IsLocked$outboundSchema = exports.IsLocked$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var IsLocked$;
(function (IsLocked$) {
    /** @deprecated use `IsLocked$inboundSchema` instead. */
    IsLocked$.inboundSchema = exports.IsLocked$inboundSchema;
    /** @deprecated use `IsLocked$outboundSchema` instead. */
    IsLocked$.outboundSchema = exports.IsLocked$outboundSchema;
})(IsLocked$ || (exports.IsLocked$ = IsLocked$ = {}));
/** @internal */
exports.JobChecklist$inboundSchema = z.object({
    uuid: z.string().optional(),
    active: exports.JobChecklistActive$inboundSchema.default(1),
    edit_date: z.string().optional(),
    job_uuid: z.string().optional(),
    name: z.string().optional(),
    section_name: z.string().optional(),
    item_type: z.string().optional(),
    sort_order: z.number().int().optional(),
    completed_timestamp: z.string().optional(),
    completed_by_staff_uuid: z.string().optional(),
    completed_during_checkin_uuid: z.string().optional(),
    reminder_type: z.string().optional(),
    reminder_data: z.union([
        z.union([z.lazy(() => exports.ReminderData1$inboundSchema), z.string()]),
        z.union([z.lazy(() => exports.ReminderData2$inboundSchema), z.string()]),
    ]).optional(),
    regarding_object: z.string().optional(),
    regarding_object_uuid: z.string().optional(),
    fulfilled_by_object_name: z.string().optional(),
    fulfilled_by_object_uuid: z.string().optional(),
    assigned_to_staff_uuids: z.array(z.string()).optional(),
    is_locked: exports.IsLocked$inboundSchema.optional(),
    assigned_timestamp: z.string().optional(),
    assigned_by_staff_uuid: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "edit_date": "editDate",
        "job_uuid": "jobUuid",
        "section_name": "sectionName",
        "item_type": "itemType",
        "sort_order": "sortOrder",
        "completed_timestamp": "completedTimestamp",
        "completed_by_staff_uuid": "completedByStaffUuid",
        "completed_during_checkin_uuid": "completedDuringCheckinUuid",
        "reminder_type": "reminderType",
        "reminder_data": "reminderData",
        "regarding_object": "regardingObject",
        "regarding_object_uuid": "regardingObjectUuid",
        "fulfilled_by_object_name": "fulfilledByObjectName",
        "fulfilled_by_object_uuid": "fulfilledByObjectUuid",
        "assigned_to_staff_uuids": "assignedToStaffUuids",
        "is_locked": "isLocked",
        "assigned_timestamp": "assignedTimestamp",
        "assigned_by_staff_uuid": "assignedByStaffUuid",
    });
});
/** @internal */
exports.JobChecklist$outboundSchema = z.object({
    uuid: z.string().optional(),
    active: exports.JobChecklistActive$outboundSchema.default(1),
    editDate: z.string().optional(),
    jobUuid: z.string().optional(),
    name: z.string().optional(),
    sectionName: z.string().optional(),
    itemType: z.string().optional(),
    sortOrder: z.number().int().optional(),
    completedTimestamp: z.string().optional(),
    completedByStaffUuid: z.string().optional(),
    completedDuringCheckinUuid: z.string().optional(),
    reminderType: z.string().optional(),
    reminderData: z.union([
        z.union([z.lazy(() => exports.ReminderData1$outboundSchema), z.string()]),
        z.union([z.lazy(() => exports.ReminderData2$outboundSchema), z.string()]),
    ]).optional(),
    regardingObject: z.string().optional(),
    regardingObjectUuid: z.string().optional(),
    fulfilledByObjectName: z.string().optional(),
    fulfilledByObjectUuid: z.string().optional(),
    assignedToStaffUuids: z.array(z.string()).optional(),
    isLocked: exports.IsLocked$outboundSchema.optional(),
    assignedTimestamp: z.string().optional(),
    assignedByStaffUuid: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        editDate: "edit_date",
        jobUuid: "job_uuid",
        sectionName: "section_name",
        itemType: "item_type",
        sortOrder: "sort_order",
        completedTimestamp: "completed_timestamp",
        completedByStaffUuid: "completed_by_staff_uuid",
        completedDuringCheckinUuid: "completed_during_checkin_uuid",
        reminderType: "reminder_type",
        reminderData: "reminder_data",
        regardingObject: "regarding_object",
        regardingObjectUuid: "regarding_object_uuid",
        fulfilledByObjectName: "fulfilled_by_object_name",
        fulfilledByObjectUuid: "fulfilled_by_object_uuid",
        assignedToStaffUuids: "assigned_to_staff_uuids",
        isLocked: "is_locked",
        assignedTimestamp: "assigned_timestamp",
        assignedByStaffUuid: "assigned_by_staff_uuid",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var JobChecklist$;
(function (JobChecklist$) {
    /** @deprecated use `JobChecklist$inboundSchema` instead. */
    JobChecklist$.inboundSchema = exports.JobChecklist$inboundSchema;
    /** @deprecated use `JobChecklist$outboundSchema` instead. */
    JobChecklist$.outboundSchema = exports.JobChecklist$outboundSchema;
})(JobChecklist$ || (exports.JobChecklist$ = JobChecklist$ = {}));
function jobChecklistToJSON(jobChecklist) {
    return JSON.stringify(exports.JobChecklist$outboundSchema.parse(jobChecklist));
}
function jobChecklistFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.JobChecklist$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'JobChecklist' from JSON`);
}
/** @internal */
exports.JobChecklistInput$inboundSchema = z.object({
    uuid: z.string().optional(),
    active: exports.JobChecklistActive$inboundSchema.default(1),
    job_uuid: z.string().optional(),
    name: z.string().optional(),
    section_name: z.string().optional(),
    item_type: z.string().optional(),
    sort_order: z.number().int().optional(),
    completed_timestamp: z.string().optional(),
    completed_by_staff_uuid: z.string().optional(),
    completed_during_checkin_uuid: z.string().optional(),
    reminder_type: z.string().optional(),
    reminder_data: z.union([
        z.union([z.lazy(() => exports.ReminderData1$inboundSchema), z.string()]),
        z.union([z.lazy(() => exports.ReminderData2$inboundSchema), z.string()]),
    ]).optional(),
    regarding_object: z.string().optional(),
    regarding_object_uuid: z.string().optional(),
    fulfilled_by_object_name: z.string().optional(),
    fulfilled_by_object_uuid: z.string().optional(),
    assigned_to_staff_uuids: z.array(z.string()).optional(),
    is_locked: exports.IsLocked$inboundSchema.optional(),
    assigned_timestamp: z.string().optional(),
    assigned_by_staff_uuid: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "job_uuid": "jobUuid",
        "section_name": "sectionName",
        "item_type": "itemType",
        "sort_order": "sortOrder",
        "completed_timestamp": "completedTimestamp",
        "completed_by_staff_uuid": "completedByStaffUuid",
        "completed_during_checkin_uuid": "completedDuringCheckinUuid",
        "reminder_type": "reminderType",
        "reminder_data": "reminderData",
        "regarding_object": "regardingObject",
        "regarding_object_uuid": "regardingObjectUuid",
        "fulfilled_by_object_name": "fulfilledByObjectName",
        "fulfilled_by_object_uuid": "fulfilledByObjectUuid",
        "assigned_to_staff_uuids": "assignedToStaffUuids",
        "is_locked": "isLocked",
        "assigned_timestamp": "assignedTimestamp",
        "assigned_by_staff_uuid": "assignedByStaffUuid",
    });
});
/** @internal */
exports.JobChecklistInput$outboundSchema = z.object({
    uuid: z.string().optional(),
    active: exports.JobChecklistActive$outboundSchema.default(1),
    jobUuid: z.string().optional(),
    name: z.string().optional(),
    sectionName: z.string().optional(),
    itemType: z.string().optional(),
    sortOrder: z.number().int().optional(),
    completedTimestamp: z.string().optional(),
    completedByStaffUuid: z.string().optional(),
    completedDuringCheckinUuid: z.string().optional(),
    reminderType: z.string().optional(),
    reminderData: z.union([
        z.union([z.lazy(() => exports.ReminderData1$outboundSchema), z.string()]),
        z.union([z.lazy(() => exports.ReminderData2$outboundSchema), z.string()]),
    ]).optional(),
    regardingObject: z.string().optional(),
    regardingObjectUuid: z.string().optional(),
    fulfilledByObjectName: z.string().optional(),
    fulfilledByObjectUuid: z.string().optional(),
    assignedToStaffUuids: z.array(z.string()).optional(),
    isLocked: exports.IsLocked$outboundSchema.optional(),
    assignedTimestamp: z.string().optional(),
    assignedByStaffUuid: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        jobUuid: "job_uuid",
        sectionName: "section_name",
        itemType: "item_type",
        sortOrder: "sort_order",
        completedTimestamp: "completed_timestamp",
        completedByStaffUuid: "completed_by_staff_uuid",
        completedDuringCheckinUuid: "completed_during_checkin_uuid",
        reminderType: "reminder_type",
        reminderData: "reminder_data",
        regardingObject: "regarding_object",
        regardingObjectUuid: "regarding_object_uuid",
        fulfilledByObjectName: "fulfilled_by_object_name",
        fulfilledByObjectUuid: "fulfilled_by_object_uuid",
        assignedToStaffUuids: "assigned_to_staff_uuids",
        isLocked: "is_locked",
        assignedTimestamp: "assigned_timestamp",
        assignedByStaffUuid: "assigned_by_staff_uuid",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var JobChecklistInput$;
(function (JobChecklistInput$) {
    /** @deprecated use `JobChecklistInput$inboundSchema` instead. */
    JobChecklistInput$.inboundSchema = exports.JobChecklistInput$inboundSchema;
    /** @deprecated use `JobChecklistInput$outboundSchema` instead. */
    JobChecklistInput$.outboundSchema = exports.JobChecklistInput$outboundSchema;
})(JobChecklistInput$ || (exports.JobChecklistInput$ = JobChecklistInput$ = {}));
function jobChecklistInputToJSON(jobChecklistInput) {
    return JSON.stringify(exports.JobChecklistInput$outboundSchema.parse(jobChecklistInput));
}
function jobChecklistInputFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.JobChecklistInput$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'JobChecklistInput' from JSON`);
}
//# sourceMappingURL=jobchecklist.js.map