"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.BadgeInput$ = exports.BadgeInput$outboundSchema = exports.BadgeInput$inboundSchema = exports.Badge$ = exports.Badge$outboundSchema = exports.Badge$inboundSchema = exports.BadgeActive$ = exports.BadgeActive$outboundSchema = exports.BadgeActive$inboundSchema = exports.BadgeActive = void 0;
exports.badgeToJSON = badgeToJSON;
exports.badgeFromJSON = badgeFromJSON;
exports.badgeInputToJSON = badgeInputToJSON;
exports.badgeInputFromJSON = badgeInputFromJSON;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../lib/primitives.js");
const schemas_js_1 = require("../../lib/schemas.js");
/**
 * Record active/deleted flag.
 *
 * @remarks
 *
 * Valid values are [0,1]
 */
exports.BadgeActive = {
    Zero: 0,
    One: 1,
};
/** @internal */
exports.BadgeActive$inboundSchema = z
    .nativeEnum(exports.BadgeActive);
/** @internal */
exports.BadgeActive$outboundSchema = exports.BadgeActive$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var BadgeActive$;
(function (BadgeActive$) {
    /** @deprecated use `BadgeActive$inboundSchema` instead. */
    BadgeActive$.inboundSchema = exports.BadgeActive$inboundSchema;
    /** @deprecated use `BadgeActive$outboundSchema` instead. */
    BadgeActive$.outboundSchema = exports.BadgeActive$outboundSchema;
})(BadgeActive$ || (exports.BadgeActive$ = BadgeActive$ = {}));
/** @internal */
exports.Badge$inboundSchema = z
    .object({
    uuid: z.string().optional(),
    active: exports.BadgeActive$inboundSchema.default(1),
    edit_date: z.string().optional(),
    name: z.string(),
    automatically_allocated: z.string().optional(),
    file_name: z.string().optional(),
    regarding_form_uuid: z.string().optional(),
    regarding_asset_type_uuid: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "edit_date": "editDate",
        "automatically_allocated": "automaticallyAllocated",
        "file_name": "fileName",
        "regarding_form_uuid": "regardingFormUuid",
        "regarding_asset_type_uuid": "regardingAssetTypeUuid",
    });
});
/** @internal */
exports.Badge$outboundSchema = z.object({
    uuid: z.string().optional(),
    active: exports.BadgeActive$outboundSchema.default(1),
    editDate: z.string().optional(),
    name: z.string(),
    automaticallyAllocated: z.string().optional(),
    fileName: z.string().optional(),
    regardingFormUuid: z.string().optional(),
    regardingAssetTypeUuid: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        editDate: "edit_date",
        automaticallyAllocated: "automatically_allocated",
        fileName: "file_name",
        regardingFormUuid: "regarding_form_uuid",
        regardingAssetTypeUuid: "regarding_asset_type_uuid",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Badge$;
(function (Badge$) {
    /** @deprecated use `Badge$inboundSchema` instead. */
    Badge$.inboundSchema = exports.Badge$inboundSchema;
    /** @deprecated use `Badge$outboundSchema` instead. */
    Badge$.outboundSchema = exports.Badge$outboundSchema;
})(Badge$ || (exports.Badge$ = Badge$ = {}));
function badgeToJSON(badge) {
    return JSON.stringify(exports.Badge$outboundSchema.parse(badge));
}
function badgeFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.Badge$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Badge' from JSON`);
}
/** @internal */
exports.BadgeInput$inboundSchema = z.object({
    uuid: z.string().optional(),
    active: exports.BadgeActive$inboundSchema.default(1),
    name: z.string(),
    automatically_allocated: z.string().optional(),
    file_name: z.string().optional(),
    regarding_form_uuid: z.string().optional(),
    regarding_asset_type_uuid: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "automatically_allocated": "automaticallyAllocated",
        "file_name": "fileName",
        "regarding_form_uuid": "regardingFormUuid",
        "regarding_asset_type_uuid": "regardingAssetTypeUuid",
    });
});
/** @internal */
exports.BadgeInput$outboundSchema = z.object({
    uuid: z.string().optional(),
    active: exports.BadgeActive$outboundSchema.default(1),
    name: z.string(),
    automaticallyAllocated: z.string().optional(),
    fileName: z.string().optional(),
    regardingFormUuid: z.string().optional(),
    regardingAssetTypeUuid: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        automaticallyAllocated: "automatically_allocated",
        fileName: "file_name",
        regardingFormUuid: "regarding_form_uuid",
        regardingAssetTypeUuid: "regarding_asset_type_uuid",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var BadgeInput$;
(function (BadgeInput$) {
    /** @deprecated use `BadgeInput$inboundSchema` instead. */
    BadgeInput$.inboundSchema = exports.BadgeInput$inboundSchema;
    /** @deprecated use `BadgeInput$outboundSchema` instead. */
    BadgeInput$.outboundSchema = exports.BadgeInput$outboundSchema;
})(BadgeInput$ || (exports.BadgeInput$ = BadgeInput$ = {}));
function badgeInputToJSON(badgeInput) {
    return JSON.stringify(exports.BadgeInput$outboundSchema.parse(badgeInput));
}
function badgeInputFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.BadgeInput$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'BadgeInput' from JSON`);
}
//# sourceMappingURL=badge.js.map