"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.JobActivityInput$ = exports.JobActivityInput$outboundSchema = exports.JobActivityInput$inboundSchema = exports.JobActivity$ = exports.JobActivity$outboundSchema = exports.JobActivity$inboundSchema = exports.JobActivityActive$ = exports.JobActivityActive$outboundSchema = exports.JobActivityActive$inboundSchema = exports.JobActivityActive = void 0;
exports.jobActivityToJSON = jobActivityToJSON;
exports.jobActivityFromJSON = jobActivityFromJSON;
exports.jobActivityInputToJSON = jobActivityInputToJSON;
exports.jobActivityInputFromJSON = jobActivityInputFromJSON;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../lib/primitives.js");
const schemas_js_1 = require("../../lib/schemas.js");
/**
 * Record active/deleted flag.
 *
 * @remarks
 *
 * Valid values are [0,1]
 */
exports.JobActivityActive = {
    Zero: 0,
    One: 1,
};
/** @internal */
exports.JobActivityActive$inboundSchema = z.nativeEnum(exports.JobActivityActive);
/** @internal */
exports.JobActivityActive$outboundSchema = exports.JobActivityActive$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var JobActivityActive$;
(function (JobActivityActive$) {
    /** @deprecated use `JobActivityActive$inboundSchema` instead. */
    JobActivityActive$.inboundSchema = exports.JobActivityActive$inboundSchema;
    /** @deprecated use `JobActivityActive$outboundSchema` instead. */
    JobActivityActive$.outboundSchema = exports.JobActivityActive$outboundSchema;
})(JobActivityActive$ || (exports.JobActivityActive$ = JobActivityActive$ = {}));
/** @internal */
exports.JobActivity$inboundSchema = z.object({
    uuid: z.string().optional(),
    active: exports.JobActivityActive$inboundSchema.default(1),
    edit_date: z.string().optional(),
    job_uuid: z.string().optional(),
    staff_uuid: z.string().optional(),
    start_date: z.string().optional(),
    end_date: z.string().optional(),
    activity_was_scheduled: z.string().optional(),
    activity_was_recorded: z.string().optional(),
    activity_was_automated: z.string().optional(),
    has_been_opened: z.string().optional(),
    has_been_opened_timestamp: z.string().optional(),
    travel_time_in_seconds: z.string().optional(),
    travel_distance_in_meters: z.string().optional(),
    allocated_by_staff_uuid: z.string().optional(),
    allocated_timestamp: z.string().optional(),
    material_uuid: z.string().optional(),
    edit_by_staff_uuid: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "edit_date": "editDate",
        "job_uuid": "jobUuid",
        "staff_uuid": "staffUuid",
        "start_date": "startDate",
        "end_date": "endDate",
        "activity_was_scheduled": "activityWasScheduled",
        "activity_was_recorded": "activityWasRecorded",
        "activity_was_automated": "activityWasAutomated",
        "has_been_opened": "hasBeenOpened",
        "has_been_opened_timestamp": "hasBeenOpenedTimestamp",
        "travel_time_in_seconds": "travelTimeInSeconds",
        "travel_distance_in_meters": "travelDistanceInMeters",
        "allocated_by_staff_uuid": "allocatedByStaffUuid",
        "allocated_timestamp": "allocatedTimestamp",
        "material_uuid": "materialUuid",
        "edit_by_staff_uuid": "editByStaffUuid",
    });
});
/** @internal */
exports.JobActivity$outboundSchema = z.object({
    uuid: z.string().optional(),
    active: exports.JobActivityActive$outboundSchema.default(1),
    editDate: z.string().optional(),
    jobUuid: z.string().optional(),
    staffUuid: z.string().optional(),
    startDate: z.string().optional(),
    endDate: z.string().optional(),
    activityWasScheduled: z.string().optional(),
    activityWasRecorded: z.string().optional(),
    activityWasAutomated: z.string().optional(),
    hasBeenOpened: z.string().optional(),
    hasBeenOpenedTimestamp: z.string().optional(),
    travelTimeInSeconds: z.string().optional(),
    travelDistanceInMeters: z.string().optional(),
    allocatedByStaffUuid: z.string().optional(),
    allocatedTimestamp: z.string().optional(),
    materialUuid: z.string().optional(),
    editByStaffUuid: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        editDate: "edit_date",
        jobUuid: "job_uuid",
        staffUuid: "staff_uuid",
        startDate: "start_date",
        endDate: "end_date",
        activityWasScheduled: "activity_was_scheduled",
        activityWasRecorded: "activity_was_recorded",
        activityWasAutomated: "activity_was_automated",
        hasBeenOpened: "has_been_opened",
        hasBeenOpenedTimestamp: "has_been_opened_timestamp",
        travelTimeInSeconds: "travel_time_in_seconds",
        travelDistanceInMeters: "travel_distance_in_meters",
        allocatedByStaffUuid: "allocated_by_staff_uuid",
        allocatedTimestamp: "allocated_timestamp",
        materialUuid: "material_uuid",
        editByStaffUuid: "edit_by_staff_uuid",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var JobActivity$;
(function (JobActivity$) {
    /** @deprecated use `JobActivity$inboundSchema` instead. */
    JobActivity$.inboundSchema = exports.JobActivity$inboundSchema;
    /** @deprecated use `JobActivity$outboundSchema` instead. */
    JobActivity$.outboundSchema = exports.JobActivity$outboundSchema;
})(JobActivity$ || (exports.JobActivity$ = JobActivity$ = {}));
function jobActivityToJSON(jobActivity) {
    return JSON.stringify(exports.JobActivity$outboundSchema.parse(jobActivity));
}
function jobActivityFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.JobActivity$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'JobActivity' from JSON`);
}
/** @internal */
exports.JobActivityInput$inboundSchema = z.object({
    uuid: z.string().optional(),
    active: exports.JobActivityActive$inboundSchema.default(1),
    job_uuid: z.string().optional(),
    staff_uuid: z.string().optional(),
    start_date: z.string().optional(),
    end_date: z.string().optional(),
    activity_was_scheduled: z.string().optional(),
    activity_was_recorded: z.string().optional(),
    activity_was_automated: z.string().optional(),
    has_been_opened: z.string().optional(),
    has_been_opened_timestamp: z.string().optional(),
    travel_time_in_seconds: z.string().optional(),
    travel_distance_in_meters: z.string().optional(),
    allocated_by_staff_uuid: z.string().optional(),
    allocated_timestamp: z.string().optional(),
    material_uuid: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "job_uuid": "jobUuid",
        "staff_uuid": "staffUuid",
        "start_date": "startDate",
        "end_date": "endDate",
        "activity_was_scheduled": "activityWasScheduled",
        "activity_was_recorded": "activityWasRecorded",
        "activity_was_automated": "activityWasAutomated",
        "has_been_opened": "hasBeenOpened",
        "has_been_opened_timestamp": "hasBeenOpenedTimestamp",
        "travel_time_in_seconds": "travelTimeInSeconds",
        "travel_distance_in_meters": "travelDistanceInMeters",
        "allocated_by_staff_uuid": "allocatedByStaffUuid",
        "allocated_timestamp": "allocatedTimestamp",
        "material_uuid": "materialUuid",
    });
});
/** @internal */
exports.JobActivityInput$outboundSchema = z.object({
    uuid: z.string().optional(),
    active: exports.JobActivityActive$outboundSchema.default(1),
    jobUuid: z.string().optional(),
    staffUuid: z.string().optional(),
    startDate: z.string().optional(),
    endDate: z.string().optional(),
    activityWasScheduled: z.string().optional(),
    activityWasRecorded: z.string().optional(),
    activityWasAutomated: z.string().optional(),
    hasBeenOpened: z.string().optional(),
    hasBeenOpenedTimestamp: z.string().optional(),
    travelTimeInSeconds: z.string().optional(),
    travelDistanceInMeters: z.string().optional(),
    allocatedByStaffUuid: z.string().optional(),
    allocatedTimestamp: z.string().optional(),
    materialUuid: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        jobUuid: "job_uuid",
        staffUuid: "staff_uuid",
        startDate: "start_date",
        endDate: "end_date",
        activityWasScheduled: "activity_was_scheduled",
        activityWasRecorded: "activity_was_recorded",
        activityWasAutomated: "activity_was_automated",
        hasBeenOpened: "has_been_opened",
        hasBeenOpenedTimestamp: "has_been_opened_timestamp",
        travelTimeInSeconds: "travel_time_in_seconds",
        travelDistanceInMeters: "travel_distance_in_meters",
        allocatedByStaffUuid: "allocated_by_staff_uuid",
        allocatedTimestamp: "allocated_timestamp",
        materialUuid: "material_uuid",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var JobActivityInput$;
(function (JobActivityInput$) {
    /** @deprecated use `JobActivityInput$inboundSchema` instead. */
    JobActivityInput$.inboundSchema = exports.JobActivityInput$inboundSchema;
    /** @deprecated use `JobActivityInput$outboundSchema` instead. */
    JobActivityInput$.outboundSchema = exports.JobActivityInput$outboundSchema;
})(JobActivityInput$ || (exports.JobActivityInput$ = JobActivityInput$ = {}));
function jobActivityInputToJSON(jobActivityInput) {
    return JSON.stringify(exports.JobActivityInput$outboundSchema.parse(jobActivityInput));
}
function jobActivityInputFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.JobActivityInput$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'JobActivityInput' from JSON`);
}
//# sourceMappingURL=jobactivity.js.map