"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.MaterialBundleInput$ = exports.MaterialBundleInput$outboundSchema = exports.MaterialBundleInput$inboundSchema = exports.MaterialBundle$ = exports.MaterialBundle$outboundSchema = exports.MaterialBundle$inboundSchema = exports.MaterialList$ = exports.MaterialList$outboundSchema = exports.MaterialList$inboundSchema = exports.MaterialBundleActive$ = exports.MaterialBundleActive$outboundSchema = exports.MaterialBundleActive$inboundSchema = exports.MaterialBundleActive = void 0;
exports.materialListToJSON = materialListToJSON;
exports.materialListFromJSON = materialListFromJSON;
exports.materialBundleToJSON = materialBundleToJSON;
exports.materialBundleFromJSON = materialBundleFromJSON;
exports.materialBundleInputToJSON = materialBundleInputToJSON;
exports.materialBundleInputFromJSON = materialBundleInputFromJSON;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../lib/primitives.js");
const schemas_js_1 = require("../../lib/schemas.js");
/**
 * Record active/deleted flag.
 *
 * @remarks
 *
 * Valid values are [0,1]
 */
exports.MaterialBundleActive = {
    Zero: 0,
    One: 1,
};
/** @internal */
exports.MaterialBundleActive$inboundSchema = z.nativeEnum(exports.MaterialBundleActive);
/** @internal */
exports.MaterialBundleActive$outboundSchema = exports.MaterialBundleActive$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var MaterialBundleActive$;
(function (MaterialBundleActive$) {
    /** @deprecated use `MaterialBundleActive$inboundSchema` instead. */
    MaterialBundleActive$.inboundSchema = exports.MaterialBundleActive$inboundSchema;
    /** @deprecated use `MaterialBundleActive$outboundSchema` instead. */
    MaterialBundleActive$.outboundSchema = exports.MaterialBundleActive$outboundSchema;
})(MaterialBundleActive$ || (exports.MaterialBundleActive$ = MaterialBundleActive$ = {}));
/** @internal */
exports.MaterialList$inboundSchema = z.object({
    uuid: z.string(),
    quantity: z.number(),
});
/** @internal */
exports.MaterialList$outboundSchema = z.object({
    uuid: z.string(),
    quantity: z.number(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var MaterialList$;
(function (MaterialList$) {
    /** @deprecated use `MaterialList$inboundSchema` instead. */
    MaterialList$.inboundSchema = exports.MaterialList$inboundSchema;
    /** @deprecated use `MaterialList$outboundSchema` instead. */
    MaterialList$.outboundSchema = exports.MaterialList$outboundSchema;
})(MaterialList$ || (exports.MaterialList$ = MaterialList$ = {}));
function materialListToJSON(materialList) {
    return JSON.stringify(exports.MaterialList$outboundSchema.parse(materialList));
}
function materialListFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.MaterialList$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'MaterialList' from JSON`);
}
/** @internal */
exports.MaterialBundle$inboundSchema = z.object({
    uuid: z.string().optional(),
    active: exports.MaterialBundleActive$inboundSchema.default(1),
    edit_date: z.string().optional(),
    item_number: z.string(),
    name: z.string().optional(),
    material_list: z.array(z.lazy(() => exports.MaterialList$inboundSchema)).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "edit_date": "editDate",
        "item_number": "itemNumber",
        "material_list": "materialList",
    });
});
/** @internal */
exports.MaterialBundle$outboundSchema = z.object({
    uuid: z.string().optional(),
    active: exports.MaterialBundleActive$outboundSchema.default(1),
    editDate: z.string().optional(),
    itemNumber: z.string(),
    name: z.string().optional(),
    materialList: z.array(z.lazy(() => exports.MaterialList$outboundSchema)).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        editDate: "edit_date",
        itemNumber: "item_number",
        materialList: "material_list",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var MaterialBundle$;
(function (MaterialBundle$) {
    /** @deprecated use `MaterialBundle$inboundSchema` instead. */
    MaterialBundle$.inboundSchema = exports.MaterialBundle$inboundSchema;
    /** @deprecated use `MaterialBundle$outboundSchema` instead. */
    MaterialBundle$.outboundSchema = exports.MaterialBundle$outboundSchema;
})(MaterialBundle$ || (exports.MaterialBundle$ = MaterialBundle$ = {}));
function materialBundleToJSON(materialBundle) {
    return JSON.stringify(exports.MaterialBundle$outboundSchema.parse(materialBundle));
}
function materialBundleFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.MaterialBundle$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'MaterialBundle' from JSON`);
}
/** @internal */
exports.MaterialBundleInput$inboundSchema = z.object({
    uuid: z.string().optional(),
    active: exports.MaterialBundleActive$inboundSchema.default(1),
    item_number: z.string(),
    name: z.string().optional(),
    material_list: z.array(z.lazy(() => exports.MaterialList$inboundSchema)).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "item_number": "itemNumber",
        "material_list": "materialList",
    });
});
/** @internal */
exports.MaterialBundleInput$outboundSchema = z.object({
    uuid: z.string().optional(),
    active: exports.MaterialBundleActive$outboundSchema.default(1),
    itemNumber: z.string(),
    name: z.string().optional(),
    materialList: z.array(z.lazy(() => exports.MaterialList$outboundSchema)).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        itemNumber: "item_number",
        materialList: "material_list",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var MaterialBundleInput$;
(function (MaterialBundleInput$) {
    /** @deprecated use `MaterialBundleInput$inboundSchema` instead. */
    MaterialBundleInput$.inboundSchema = exports.MaterialBundleInput$inboundSchema;
    /** @deprecated use `MaterialBundleInput$outboundSchema` instead. */
    MaterialBundleInput$.outboundSchema = exports.MaterialBundleInput$outboundSchema;
})(MaterialBundleInput$ || (exports.MaterialBundleInput$ = MaterialBundleInput$ = {}));
function materialBundleInputToJSON(materialBundleInput) {
    return JSON.stringify(exports.MaterialBundleInput$outboundSchema.parse(materialBundleInput));
}
function materialBundleInputFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.MaterialBundleInput$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'MaterialBundleInput' from JSON`);
}
//# sourceMappingURL=materialbundle.js.map