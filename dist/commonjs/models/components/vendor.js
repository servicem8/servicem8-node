"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.VendorInput$ = exports.VendorInput$outboundSchema = exports.VendorInput$inboundSchema = exports.Vendor$ = exports.Vendor$outboundSchema = exports.Vendor$inboundSchema = exports.VendorActive$ = exports.VendorActive$outboundSchema = exports.VendorActive$inboundSchema = exports.VendorActive = void 0;
exports.vendorToJSON = vendorToJSON;
exports.vendorFromJSON = vendorFromJSON;
exports.vendorInputToJSON = vendorInputToJSON;
exports.vendorInputFromJSON = vendorInputFromJSON;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../lib/primitives.js");
const schemas_js_1 = require("../../lib/schemas.js");
/**
 * Record active/deleted flag.
 *
 * @remarks
 *
 * Valid values are [0,1]
 */
exports.VendorActive = {
    Zero: 0,
    One: 1,
};
/** @internal */
exports.VendorActive$inboundSchema = z.nativeEnum(exports.VendorActive);
/** @internal */
exports.VendorActive$outboundSchema = exports.VendorActive$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var VendorActive$;
(function (VendorActive$) {
    /** @deprecated use `VendorActive$inboundSchema` instead. */
    VendorActive$.inboundSchema = exports.VendorActive$inboundSchema;
    /** @deprecated use `VendorActive$outboundSchema` instead. */
    VendorActive$.outboundSchema = exports.VendorActive$outboundSchema;
})(VendorActive$ || (exports.VendorActive$ = VendorActive$ = {}));
/** @internal */
exports.Vendor$inboundSchema = z
    .object({
    uuid: z.string().optional(),
    active: exports.VendorActive$inboundSchema.default(1),
    edit_date: z.string().optional(),
    name: z.string(),
    abn_number: z.string().optional(),
    business_number: z.string().optional(),
    website: z.string().optional(),
    email: z.string().optional(),
    email_accounts: z.string().optional(),
    billing_address: z.string().optional(),
    accepted_payment_methods: z.string().optional(),
    default_region: z.string().optional(),
    currency: z.string().optional(),
    opening_time_monday: z.string().optional(),
    closing_time_monday: z.string().optional(),
    opening_time_tuesday: z.string().optional(),
    closing_time_tuesday: z.string().optional(),
    opening_time_wednesday: z.string().optional(),
    closing_time_wednesday: z.string().optional(),
    opening_time_thursday: z.string().optional(),
    closing_time_thursday: z.string().optional(),
    opening_time_friday: z.string().optional(),
    closing_time_friday: z.string().optional(),
    opening_time_saturday: z.string().optional(),
    closing_time_saturday: z.string().optional(),
    opening_time_sunday: z.string().optional(),
    closing_time_sunday: z.string().optional(),
    timezone_name: z.string().optional(),
    invoice_terms: z.string().optional(),
    job_default_status: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "edit_date": "editDate",
        "abn_number": "abnNumber",
        "business_number": "businessNumber",
        "email_accounts": "emailAccounts",
        "billing_address": "billingAddress",
        "accepted_payment_methods": "acceptedPaymentMethods",
        "default_region": "defaultRegion",
        "opening_time_monday": "openingTimeMonday",
        "closing_time_monday": "closingTimeMonday",
        "opening_time_tuesday": "openingTimeTuesday",
        "closing_time_tuesday": "closingTimeTuesday",
        "opening_time_wednesday": "openingTimeWednesday",
        "closing_time_wednesday": "closingTimeWednesday",
        "opening_time_thursday": "openingTimeThursday",
        "closing_time_thursday": "closingTimeThursday",
        "opening_time_friday": "openingTimeFriday",
        "closing_time_friday": "closingTimeFriday",
        "opening_time_saturday": "openingTimeSaturday",
        "closing_time_saturday": "closingTimeSaturday",
        "opening_time_sunday": "openingTimeSunday",
        "closing_time_sunday": "closingTimeSunday",
        "timezone_name": "timezoneName",
        "invoice_terms": "invoiceTerms",
        "job_default_status": "jobDefaultStatus",
    });
});
/** @internal */
exports.Vendor$outboundSchema = z.object({
    uuid: z.string().optional(),
    active: exports.VendorActive$outboundSchema.default(1),
    editDate: z.string().optional(),
    name: z.string(),
    abnNumber: z.string().optional(),
    businessNumber: z.string().optional(),
    website: z.string().optional(),
    email: z.string().optional(),
    emailAccounts: z.string().optional(),
    billingAddress: z.string().optional(),
    acceptedPaymentMethods: z.string().optional(),
    defaultRegion: z.string().optional(),
    currency: z.string().optional(),
    openingTimeMonday: z.string().optional(),
    closingTimeMonday: z.string().optional(),
    openingTimeTuesday: z.string().optional(),
    closingTimeTuesday: z.string().optional(),
    openingTimeWednesday: z.string().optional(),
    closingTimeWednesday: z.string().optional(),
    openingTimeThursday: z.string().optional(),
    closingTimeThursday: z.string().optional(),
    openingTimeFriday: z.string().optional(),
    closingTimeFriday: z.string().optional(),
    openingTimeSaturday: z.string().optional(),
    closingTimeSaturday: z.string().optional(),
    openingTimeSunday: z.string().optional(),
    closingTimeSunday: z.string().optional(),
    timezoneName: z.string().optional(),
    invoiceTerms: z.string().optional(),
    jobDefaultStatus: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        editDate: "edit_date",
        abnNumber: "abn_number",
        businessNumber: "business_number",
        emailAccounts: "email_accounts",
        billingAddress: "billing_address",
        acceptedPaymentMethods: "accepted_payment_methods",
        defaultRegion: "default_region",
        openingTimeMonday: "opening_time_monday",
        closingTimeMonday: "closing_time_monday",
        openingTimeTuesday: "opening_time_tuesday",
        closingTimeTuesday: "closing_time_tuesday",
        openingTimeWednesday: "opening_time_wednesday",
        closingTimeWednesday: "closing_time_wednesday",
        openingTimeThursday: "opening_time_thursday",
        closingTimeThursday: "closing_time_thursday",
        openingTimeFriday: "opening_time_friday",
        closingTimeFriday: "closing_time_friday",
        openingTimeSaturday: "opening_time_saturday",
        closingTimeSaturday: "closing_time_saturday",
        openingTimeSunday: "opening_time_sunday",
        closingTimeSunday: "closing_time_sunday",
        timezoneName: "timezone_name",
        invoiceTerms: "invoice_terms",
        jobDefaultStatus: "job_default_status",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Vendor$;
(function (Vendor$) {
    /** @deprecated use `Vendor$inboundSchema` instead. */
    Vendor$.inboundSchema = exports.Vendor$inboundSchema;
    /** @deprecated use `Vendor$outboundSchema` instead. */
    Vendor$.outboundSchema = exports.Vendor$outboundSchema;
})(Vendor$ || (exports.Vendor$ = Vendor$ = {}));
function vendorToJSON(vendor) {
    return JSON.stringify(exports.Vendor$outboundSchema.parse(vendor));
}
function vendorFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.Vendor$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Vendor' from JSON`);
}
/** @internal */
exports.VendorInput$inboundSchema = z.object({
    uuid: z.string().optional(),
    active: exports.VendorActive$inboundSchema.default(1),
    name: z.string(),
    abn_number: z.string().optional(),
    business_number: z.string().optional(),
    website: z.string().optional(),
    email: z.string().optional(),
    email_accounts: z.string().optional(),
    billing_address: z.string().optional(),
    accepted_payment_methods: z.string().optional(),
    default_region: z.string().optional(),
    currency: z.string().optional(),
    opening_time_monday: z.string().optional(),
    closing_time_monday: z.string().optional(),
    opening_time_tuesday: z.string().optional(),
    closing_time_tuesday: z.string().optional(),
    opening_time_wednesday: z.string().optional(),
    closing_time_wednesday: z.string().optional(),
    opening_time_thursday: z.string().optional(),
    closing_time_thursday: z.string().optional(),
    opening_time_friday: z.string().optional(),
    closing_time_friday: z.string().optional(),
    opening_time_saturday: z.string().optional(),
    closing_time_saturday: z.string().optional(),
    opening_time_sunday: z.string().optional(),
    closing_time_sunday: z.string().optional(),
    timezone_name: z.string().optional(),
    invoice_terms: z.string().optional(),
    job_default_status: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "abn_number": "abnNumber",
        "business_number": "businessNumber",
        "email_accounts": "emailAccounts",
        "billing_address": "billingAddress",
        "accepted_payment_methods": "acceptedPaymentMethods",
        "default_region": "defaultRegion",
        "opening_time_monday": "openingTimeMonday",
        "closing_time_monday": "closingTimeMonday",
        "opening_time_tuesday": "openingTimeTuesday",
        "closing_time_tuesday": "closingTimeTuesday",
        "opening_time_wednesday": "openingTimeWednesday",
        "closing_time_wednesday": "closingTimeWednesday",
        "opening_time_thursday": "openingTimeThursday",
        "closing_time_thursday": "closingTimeThursday",
        "opening_time_friday": "openingTimeFriday",
        "closing_time_friday": "closingTimeFriday",
        "opening_time_saturday": "openingTimeSaturday",
        "closing_time_saturday": "closingTimeSaturday",
        "opening_time_sunday": "openingTimeSunday",
        "closing_time_sunday": "closingTimeSunday",
        "timezone_name": "timezoneName",
        "invoice_terms": "invoiceTerms",
        "job_default_status": "jobDefaultStatus",
    });
});
/** @internal */
exports.VendorInput$outboundSchema = z.object({
    uuid: z.string().optional(),
    active: exports.VendorActive$outboundSchema.default(1),
    name: z.string(),
    abnNumber: z.string().optional(),
    businessNumber: z.string().optional(),
    website: z.string().optional(),
    email: z.string().optional(),
    emailAccounts: z.string().optional(),
    billingAddress: z.string().optional(),
    acceptedPaymentMethods: z.string().optional(),
    defaultRegion: z.string().optional(),
    currency: z.string().optional(),
    openingTimeMonday: z.string().optional(),
    closingTimeMonday: z.string().optional(),
    openingTimeTuesday: z.string().optional(),
    closingTimeTuesday: z.string().optional(),
    openingTimeWednesday: z.string().optional(),
    closingTimeWednesday: z.string().optional(),
    openingTimeThursday: z.string().optional(),
    closingTimeThursday: z.string().optional(),
    openingTimeFriday: z.string().optional(),
    closingTimeFriday: z.string().optional(),
    openingTimeSaturday: z.string().optional(),
    closingTimeSaturday: z.string().optional(),
    openingTimeSunday: z.string().optional(),
    closingTimeSunday: z.string().optional(),
    timezoneName: z.string().optional(),
    invoiceTerms: z.string().optional(),
    jobDefaultStatus: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        abnNumber: "abn_number",
        businessNumber: "business_number",
        emailAccounts: "email_accounts",
        billingAddress: "billing_address",
        acceptedPaymentMethods: "accepted_payment_methods",
        defaultRegion: "default_region",
        openingTimeMonday: "opening_time_monday",
        closingTimeMonday: "closing_time_monday",
        openingTimeTuesday: "opening_time_tuesday",
        closingTimeTuesday: "closing_time_tuesday",
        openingTimeWednesday: "opening_time_wednesday",
        closingTimeWednesday: "closing_time_wednesday",
        openingTimeThursday: "opening_time_thursday",
        closingTimeThursday: "closing_time_thursday",
        openingTimeFriday: "opening_time_friday",
        closingTimeFriday: "closing_time_friday",
        openingTimeSaturday: "opening_time_saturday",
        closingTimeSaturday: "closing_time_saturday",
        openingTimeSunday: "opening_time_sunday",
        closingTimeSunday: "closing_time_sunday",
        timezoneName: "timezone_name",
        invoiceTerms: "invoice_terms",
        jobDefaultStatus: "job_default_status",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var VendorInput$;
(function (VendorInput$) {
    /** @deprecated use `VendorInput$inboundSchema` instead. */
    VendorInput$.inboundSchema = exports.VendorInput$inboundSchema;
    /** @deprecated use `VendorInput$outboundSchema` instead. */
    VendorInput$.outboundSchema = exports.VendorInput$outboundSchema;
})(VendorInput$ || (exports.VendorInput$ = VendorInput$ = {}));
function vendorInputToJSON(vendorInput) {
    return JSON.stringify(exports.VendorInput$outboundSchema.parse(vendorInput));
}
function vendorInputFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.VendorInput$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'VendorInput' from JSON`);
}
//# sourceMappingURL=vendor.js.map