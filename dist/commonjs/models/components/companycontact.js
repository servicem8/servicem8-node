"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.CompanyContactInput$ = exports.CompanyContactInput$outboundSchema = exports.CompanyContactInput$inboundSchema = exports.CompanyContact$ = exports.CompanyContact$outboundSchema = exports.CompanyContact$inboundSchema = exports.CompanyContactActive$ = exports.CompanyContactActive$outboundSchema = exports.CompanyContactActive$inboundSchema = exports.CompanyContactActive = void 0;
exports.companyContactToJSON = companyContactToJSON;
exports.companyContactFromJSON = companyContactFromJSON;
exports.companyContactInputToJSON = companyContactInputToJSON;
exports.companyContactInputFromJSON = companyContactInputFromJSON;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../lib/primitives.js");
const schemas_js_1 = require("../../lib/schemas.js");
/**
 * Record active/deleted flag.
 *
 * @remarks
 *
 * Valid values are [0,1]
 */
exports.CompanyContactActive = {
    Zero: 0,
    One: 1,
};
/** @internal */
exports.CompanyContactActive$inboundSchema = z.nativeEnum(exports.CompanyContactActive);
/** @internal */
exports.CompanyContactActive$outboundSchema = exports.CompanyContactActive$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var CompanyContactActive$;
(function (CompanyContactActive$) {
    /** @deprecated use `CompanyContactActive$inboundSchema` instead. */
    CompanyContactActive$.inboundSchema = exports.CompanyContactActive$inboundSchema;
    /** @deprecated use `CompanyContactActive$outboundSchema` instead. */
    CompanyContactActive$.outboundSchema = exports.CompanyContactActive$outboundSchema;
})(CompanyContactActive$ || (exports.CompanyContactActive$ = CompanyContactActive$ = {}));
/** @internal */
exports.CompanyContact$inboundSchema = z.object({
    uuid: z.string().optional(),
    active: exports.CompanyContactActive$inboundSchema.default(1),
    edit_date: z.string().optional(),
    company_uuid: z.string().optional(),
    first: z.string().optional(),
    last: z.string().optional(),
    phone: z.string().optional(),
    mobile: z.string().optional(),
    email: z.string().optional(),
    type: z.string().optional(),
    is_primary_contact: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "edit_date": "editDate",
        "company_uuid": "companyUuid",
        "is_primary_contact": "isPrimaryContact",
    });
});
/** @internal */
exports.CompanyContact$outboundSchema = z.object({
    uuid: z.string().optional(),
    active: exports.CompanyContactActive$outboundSchema.default(1),
    editDate: z.string().optional(),
    companyUuid: z.string().optional(),
    first: z.string().optional(),
    last: z.string().optional(),
    phone: z.string().optional(),
    mobile: z.string().optional(),
    email: z.string().optional(),
    type: z.string().optional(),
    isPrimaryContact: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        editDate: "edit_date",
        companyUuid: "company_uuid",
        isPrimaryContact: "is_primary_contact",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var CompanyContact$;
(function (CompanyContact$) {
    /** @deprecated use `CompanyContact$inboundSchema` instead. */
    CompanyContact$.inboundSchema = exports.CompanyContact$inboundSchema;
    /** @deprecated use `CompanyContact$outboundSchema` instead. */
    CompanyContact$.outboundSchema = exports.CompanyContact$outboundSchema;
})(CompanyContact$ || (exports.CompanyContact$ = CompanyContact$ = {}));
function companyContactToJSON(companyContact) {
    return JSON.stringify(exports.CompanyContact$outboundSchema.parse(companyContact));
}
function companyContactFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.CompanyContact$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CompanyContact' from JSON`);
}
/** @internal */
exports.CompanyContactInput$inboundSchema = z.object({
    uuid: z.string().optional(),
    active: exports.CompanyContactActive$inboundSchema.default(1),
    company_uuid: z.string().optional(),
    first: z.string().optional(),
    last: z.string().optional(),
    phone: z.string().optional(),
    mobile: z.string().optional(),
    email: z.string().optional(),
    type: z.string().optional(),
    is_primary_contact: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "company_uuid": "companyUuid",
        "is_primary_contact": "isPrimaryContact",
    });
});
/** @internal */
exports.CompanyContactInput$outboundSchema = z.object({
    uuid: z.string().optional(),
    active: exports.CompanyContactActive$outboundSchema.default(1),
    companyUuid: z.string().optional(),
    first: z.string().optional(),
    last: z.string().optional(),
    phone: z.string().optional(),
    mobile: z.string().optional(),
    email: z.string().optional(),
    type: z.string().optional(),
    isPrimaryContact: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        companyUuid: "company_uuid",
        isPrimaryContact: "is_primary_contact",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var CompanyContactInput$;
(function (CompanyContactInput$) {
    /** @deprecated use `CompanyContactInput$inboundSchema` instead. */
    CompanyContactInput$.inboundSchema = exports.CompanyContactInput$inboundSchema;
    /** @deprecated use `CompanyContactInput$outboundSchema` instead. */
    CompanyContactInput$.outboundSchema = exports.CompanyContactInput$outboundSchema;
})(CompanyContactInput$ || (exports.CompanyContactInput$ = CompanyContactInput$ = {}));
function companyContactInputToJSON(companyContactInput) {
    return JSON.stringify(exports.CompanyContactInput$outboundSchema.parse(companyContactInput));
}
function companyContactInputFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.CompanyContactInput$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CompanyContactInput' from JSON`);
}
//# sourceMappingURL=companycontact.js.map