/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import { jobPaymentsCreateJobPayments } from "../funcs/jobPaymentsCreateJobPayments.js";
import { jobPaymentsDeleteJobPayments } from "../funcs/jobPaymentsDeleteJobPayments.js";
import { jobPaymentsGetJobPayments } from "../funcs/jobPaymentsGetJobPayments.js";
import { jobPaymentsListJobPayments } from "../funcs/jobPaymentsListJobPayments.js";
import { jobPaymentsUpdateJobPayments } from "../funcs/jobPaymentsUpdateJobPayments.js";
import { ClientSDK } from "../lib/sdks.js";
import { unwrapAsync } from "../types/fp.js";
export class JobPayments extends ClientSDK {
    /**
     * List all Job Payments
     *
     * @remarks
     *
     * #### Filtering
     * This endpoint supports result filtering. For more information on how to filter this request, [go here](/docs/filtering).
     */
    async listJobPayments(options) {
        return unwrapAsync(jobPaymentsListJobPayments(this, options));
    }
    /**
     * Create a new Job Payment
     *
     * @remarks
     *
     * #### Record UUID
     * UUID is optional for record creation. If no UUID is supplied, a UUID will be automatically generated for the new record and returned in the response header as x-record-uuid.
     */
    async createJobPayments(request, options) {
        return unwrapAsync(jobPaymentsCreateJobPayments(this, request, options));
    }
    /**
     * Retrieve a Job Payment
     */
    async getJobPayments(request, options) {
        return unwrapAsync(jobPaymentsGetJobPayments(this, request, options));
    }
    /**
     * Update a Job Payment
     */
    async updateJobPayments(request, options) {
        return unwrapAsync(jobPaymentsUpdateJobPayments(this, request, options));
    }
    /**
     * Delete a Job Payment
     *
     * @remarks
     *
     * In ServiceM8, records are never deleted, but are archived. Archived records will remain accessible via the API as (active = 0), however will no longer be visible in UI. Archived records can be restored to active by setting the record active field to 1.
     */
    async deleteJobPayments(request, options) {
        return unwrapAsync(jobPaymentsDeleteJobPayments(this, request, options));
    }
}
//# sourceMappingURL=jobpayments.js.map