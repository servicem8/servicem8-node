/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import { jobChecklistsCreateJobChecklists } from "../funcs/jobChecklistsCreateJobChecklists.js";
import { jobChecklistsDeleteJobChecklists } from "../funcs/jobChecklistsDeleteJobChecklists.js";
import { jobChecklistsGetJobChecklists } from "../funcs/jobChecklistsGetJobChecklists.js";
import { jobChecklistsListJobChecklists } from "../funcs/jobChecklistsListJobChecklists.js";
import { jobChecklistsUpdateJobChecklists } from "../funcs/jobChecklistsUpdateJobChecklists.js";
import { ClientSDK } from "../lib/sdks.js";
import { unwrapAsync } from "../types/fp.js";
export class JobChecklists extends ClientSDK {
    /**
     * List all Job Checklists
     *
     * @remarks
     *
     * #### Filtering
     * This endpoint supports result filtering. For more information on how to filter this request, [go here](/docs/filtering).
     */
    async listJobChecklists(options) {
        return unwrapAsync(jobChecklistsListJobChecklists(this, options));
    }
    /**
     * Create a new Job Checklist
     *
     * @remarks
     *
     * #### Record UUID
     * UUID is optional for record creation. If no UUID is supplied, a UUID will be automatically generated for the new record and returned in the response header as x-record-uuid.
     */
    async createJobChecklists(request, options) {
        return unwrapAsync(jobChecklistsCreateJobChecklists(this, request, options));
    }
    /**
     * Retrieve a Job Checklist
     */
    async getJobChecklists(request, options) {
        return unwrapAsync(jobChecklistsGetJobChecklists(this, request, options));
    }
    /**
     * Update a Job Checklist
     */
    async updateJobChecklists(request, options) {
        return unwrapAsync(jobChecklistsUpdateJobChecklists(this, request, options));
    }
    /**
     * Delete a Job Checklist
     *
     * @remarks
     *
     * In ServiceM8, records are never deleted, but are archived. Archived records will remain accessible via the API as (active = 0), however will no longer be visible in UI. Archived records can be restored to active by setting the record active field to 1.
     */
    async deleteJobChecklists(request, options) {
        return unwrapAsync(jobChecklistsDeleteJobChecklists(this, request, options));
    }
}
//# sourceMappingURL=jobchecklists.js.map