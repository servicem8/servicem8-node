/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import { locationsCreateLocations } from "../funcs/locationsCreateLocations.js";
import { locationsDeleteLocations } from "../funcs/locationsDeleteLocations.js";
import { locationsGetLocations } from "../funcs/locationsGetLocations.js";
import { locationsListLocations } from "../funcs/locationsListLocations.js";
import { locationsUpdateLocations } from "../funcs/locationsUpdateLocations.js";
import { ClientSDK } from "../lib/sdks.js";
import { unwrapAsync } from "../types/fp.js";
export class Locations extends ClientSDK {
    /**
     * List all Locations
     *
     * @remarks
     *
     * #### Filtering
     * This endpoint supports result filtering. For more information on how to filter this request, [go here](/docs/filtering).
     *
     * #### OAuth Scope
     * This endpoint requires the following OAuth scope **read_locations**.
     */
    async listLocations(options) {
        return unwrapAsync(locationsListLocations(this, options));
    }
    /**
     * Create a new Location
     *
     * @remarks
     *
     * #### OAuth Scope
     * This endpoint requires the following OAuth scope **manage_locations**.
     *
     * #### Record UUID
     * UUID is optional for record creation. If no UUID is supplied, a UUID will be automatically generated for the new record and returned in the response header as x-record-uuid.
     */
    async createLocations(request, options) {
        return unwrapAsync(locationsCreateLocations(this, request, options));
    }
    /**
     * Retrieve a Location
     *
     * @remarks
     *
     * #### OAuth Scope
     * This endpoint requires the following OAuth scope **read_locations**.
     */
    async getLocations(request, options) {
        return unwrapAsync(locationsGetLocations(this, request, options));
    }
    /**
     * Update a Location
     *
     * @remarks
     *
     * #### OAuth Scope
     * This endpoint requires the following OAuth scope **manage_locations**.
     */
    async updateLocations(request, options) {
        return unwrapAsync(locationsUpdateLocations(this, request, options));
    }
    /**
     * Delete a Location
     *
     * @remarks
     *
     * In ServiceM8, records are never deleted, but are archived. Archived records will remain accessible via the API as (active = 0), however will no longer be visible in UI. Archived records can be restored to active by setting the record active field to 1.
     *
     * #### OAuth Scope
     * This endpoint requires the following OAuth scope **manage_locations**.
     */
    async deleteLocations(request, options) {
        return unwrapAsync(locationsDeleteLocations(this, request, options));
    }
}
//# sourceMappingURL=locations.js.map