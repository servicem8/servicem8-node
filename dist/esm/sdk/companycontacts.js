/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import { companyContactsCreateCompanyContacts } from "../funcs/companyContactsCreateCompanyContacts.js";
import { companyContactsDeleteCompanyContacts } from "../funcs/companyContactsDeleteCompanyContacts.js";
import { companyContactsGetCompanyContacts } from "../funcs/companyContactsGetCompanyContacts.js";
import { companyContactsListCompanyContacts } from "../funcs/companyContactsListCompanyContacts.js";
import { companyContactsUpdateCompanyContacts } from "../funcs/companyContactsUpdateCompanyContacts.js";
import { ClientSDK } from "../lib/sdks.js";
import { unwrapAsync } from "../types/fp.js";
export class CompanyContacts extends ClientSDK {
    /**
     * List all Company Contacts
     *
     * @remarks
     *
     * #### Filtering
     * This endpoint supports result filtering. For more information on how to filter this request, [go here](/docs/filtering).
     *
     * #### OAuth Scope
     * This endpoint requires the following OAuth scope **read_customer_contacts**.
     */
    async listCompanyContacts(options) {
        return unwrapAsync(companyContactsListCompanyContacts(this, options));
    }
    /**
     * Create a new Company Contact
     *
     * @remarks
     *
     * #### OAuth Scope
     * This endpoint requires the following OAuth scope **manage_customer_contacts**.
     *
     * #### Record UUID
     * UUID is optional for record creation. If no UUID is supplied, a UUID will be automatically generated for the new record and returned in the response header as x-record-uuid.
     */
    async createCompanyContacts(request, options) {
        return unwrapAsync(companyContactsCreateCompanyContacts(this, request, options));
    }
    /**
     * Retrieve a Company Contact
     *
     * @remarks
     *
     * #### OAuth Scope
     * This endpoint requires the following OAuth scope **read_customer_contacts**.
     */
    async getCompanyContacts(request, options) {
        return unwrapAsync(companyContactsGetCompanyContacts(this, request, options));
    }
    /**
     * Update a Company Contact
     *
     * @remarks
     *
     * #### OAuth Scope
     * This endpoint requires the following OAuth scope **manage_customer_contacts**.
     */
    async updateCompanyContacts(request, options) {
        return unwrapAsync(companyContactsUpdateCompanyContacts(this, request, options));
    }
    /**
     * Delete a Company Contact
     *
     * @remarks
     *
     * In ServiceM8, records are never deleted, but are archived. Archived records will remain accessible via the API as (active = 0), however will no longer be visible in UI. Archived records can be restored to active by setting the record active field to 1.
     *
     * #### OAuth Scope
     * This endpoint requires the following OAuth scope **manage_customer_contacts**.
     */
    async deleteCompanyContacts(request, options) {
        return unwrapAsync(companyContactsDeleteCompanyContacts(this, request, options));
    }
}
//# sourceMappingURL=companycontacts.js.map