/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import { badgesCreateBadges } from "../funcs/badgesCreateBadges.js";
import { badgesDeleteBadges } from "../funcs/badgesDeleteBadges.js";
import { badgesGetBadges } from "../funcs/badgesGetBadges.js";
import { badgesListBadges } from "../funcs/badgesListBadges.js";
import { badgesUpdateBadges } from "../funcs/badgesUpdateBadges.js";
import { ClientSDK } from "../lib/sdks.js";
import { unwrapAsync } from "../types/fp.js";
export class Badges extends ClientSDK {
    /**
     * List all Badges
     *
     * @remarks
     *
     * #### Filtering
     * This endpoint supports result filtering. For more information on how to filter this request, [go here](/docs/filtering).
     *
     * #### OAuth Scope
     * This endpoint requires the following OAuth scope **manage_badges**.
     */
    async listBadges(options) {
        return unwrapAsync(badgesListBadges(this, options));
    }
    /**
     * Create a new Badge
     *
     * @remarks
     *
     * #### OAuth Scope
     * This endpoint requires the following OAuth scope **manage_badges**.
     *
     * #### Record UUID
     * UUID is optional for record creation. If no UUID is supplied, a UUID will be automatically generated for the new record and returned in the response header as x-record-uuid.
     */
    async createBadges(request, options) {
        return unwrapAsync(badgesCreateBadges(this, request, options));
    }
    /**
     * Retrieve a Badge
     *
     * @remarks
     *
     * #### OAuth Scope
     * This endpoint requires the following OAuth scope **manage_badges**.
     */
    async getBadges(request, options) {
        return unwrapAsync(badgesGetBadges(this, request, options));
    }
    /**
     * Update a Badge
     */
    async updateBadges(request, options) {
        return unwrapAsync(badgesUpdateBadges(this, request, options));
    }
    /**
     * Delete a Badge
     *
     * @remarks
     *
     * In ServiceM8, records are never deleted, but are archived. Archived records will remain accessible via the API as (active = 0), however will no longer be visible in UI. Archived records can be restored to active by setting the record active field to 1.
     */
    async deleteBadges(request, options) {
        return unwrapAsync(badgesDeleteBadges(this, request, options));
    }
}
//# sourceMappingURL=badges.js.map