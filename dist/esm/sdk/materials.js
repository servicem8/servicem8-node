/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import { materialsCreateMaterials } from "../funcs/materialsCreateMaterials.js";
import { materialsDeleteMaterials } from "../funcs/materialsDeleteMaterials.js";
import { materialsGetMaterials } from "../funcs/materialsGetMaterials.js";
import { materialsListMaterials } from "../funcs/materialsListMaterials.js";
import { materialsUpdateMaterials } from "../funcs/materialsUpdateMaterials.js";
import { ClientSDK } from "../lib/sdks.js";
import { unwrapAsync } from "../types/fp.js";
export class Materials extends ClientSDK {
    /**
     * List all Materials
     *
     * @remarks
     *
     * #### Filtering
     * This endpoint supports result filtering. For more information on how to filter this request, [go here](/docs/filtering).
     *
     * #### OAuth Scope
     * This endpoint requires the following OAuth scope **read_inventory**.
     */
    async listMaterials(options) {
        return unwrapAsync(materialsListMaterials(this, options));
    }
    /**
     * Create a new Material
     *
     * @remarks
     *
     * #### OAuth Scope
     * This endpoint requires the following OAuth scope **manage_inventory**.
     *
     * #### Record UUID
     * UUID is optional for record creation. If no UUID is supplied, a UUID will be automatically generated for the new record and returned in the response header as x-record-uuid.
     */
    async createMaterials(request, options) {
        return unwrapAsync(materialsCreateMaterials(this, request, options));
    }
    /**
     * Retrieve a Material
     *
     * @remarks
     *
     * #### OAuth Scope
     * This endpoint requires the following OAuth scope **read_inventory**.
     */
    async getMaterials(request, options) {
        return unwrapAsync(materialsGetMaterials(this, request, options));
    }
    /**
     * Update a Material
     *
     * @remarks
     *
     * #### OAuth Scope
     * This endpoint requires the following OAuth scope **manage_inventory**.
     */
    async updateMaterials(request, options) {
        return unwrapAsync(materialsUpdateMaterials(this, request, options));
    }
    /**
     * Delete a Material
     *
     * @remarks
     *
     * In ServiceM8, records are never deleted, but are archived. Archived records will remain accessible via the API as (active = 0), however will no longer be visible in UI. Archived records can be restored to active by setting the record active field to 1.
     *
     * #### OAuth Scope
     * This endpoint requires the following OAuth scope **manage_inventory**.
     */
    async deleteMaterials(request, options) {
        return unwrapAsync(materialsDeleteMaterials(this, request, options));
    }
}
//# sourceMappingURL=materials.js.map