/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import { formFieldsCreateFormFields } from "../funcs/formFieldsCreateFormFields.js";
import { formFieldsDeleteFormFields } from "../funcs/formFieldsDeleteFormFields.js";
import { formFieldsGetFormFields } from "../funcs/formFieldsGetFormFields.js";
import { formFieldsListFormFields } from "../funcs/formFieldsListFormFields.js";
import { formFieldsUpdateFormFields } from "../funcs/formFieldsUpdateFormFields.js";
import { ClientSDK } from "../lib/sdks.js";
import { unwrapAsync } from "../types/fp.js";
export class FormFields extends ClientSDK {
    /**
     * List all Form Fields
     *
     * @remarks
     *
     * #### Filtering
     * This endpoint supports result filtering. For more information on how to filter this request, [go here](/docs/filtering).
     */
    async listFormFields(options) {
        return unwrapAsync(formFieldsListFormFields(this, options));
    }
    /**
     * Create a new Form Field
     *
     * @remarks
     *
     * #### Record UUID
     * UUID is optional for record creation. If no UUID is supplied, a UUID will be automatically generated for the new record and returned in the response header as x-record-uuid.
     */
    async createFormFields(request, options) {
        return unwrapAsync(formFieldsCreateFormFields(this, request, options));
    }
    /**
     * Retrieve a Form Field
     */
    async getFormFields(request, options) {
        return unwrapAsync(formFieldsGetFormFields(this, request, options));
    }
    /**
     * Update a Form Field
     */
    async updateFormFields(request, options) {
        return unwrapAsync(formFieldsUpdateFormFields(this, request, options));
    }
    /**
     * Delete a Form Field
     *
     * @remarks
     *
     * In ServiceM8, records are never deleted, but are archived. Archived records will remain accessible via the API as (active = 0), however will no longer be visible in UI. Archived records can be restored to active by setting the record active field to 1.
     */
    async deleteFormFields(request, options) {
        return unwrapAsync(formFieldsDeleteFormFields(this, request, options));
    }
}
//# sourceMappingURL=formfields.js.map