/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import { allocationWindowsCreateAllocationWindows } from "../funcs/allocationWindowsCreateAllocationWindows.js";
import { allocationWindowsDeleteAllocationWindows } from "../funcs/allocationWindowsDeleteAllocationWindows.js";
import { allocationWindowsGetAllocationWindows } from "../funcs/allocationWindowsGetAllocationWindows.js";
import { allocationWindowsListAllocationWindows } from "../funcs/allocationWindowsListAllocationWindows.js";
import { allocationWindowsUpdateAllocationWindows } from "../funcs/allocationWindowsUpdateAllocationWindows.js";
import { ClientSDK } from "../lib/sdks.js";
import { unwrapAsync } from "../types/fp.js";
export class AllocationWindows extends ClientSDK {
    /**
     * List all Allocation Windows
     *
     * @remarks
     *
     * #### Filtering
     * This endpoint supports result filtering. For more information on how to filter this request, [go here](/docs/filtering).
     */
    async listAllocationWindows(options) {
        return unwrapAsync(allocationWindowsListAllocationWindows(this, options));
    }
    /**
     * Create a new Allocation Window
     *
     * @remarks
     *
     * #### Record UUID
     * UUID is optional for record creation. If no UUID is supplied, a UUID will be automatically generated for the new record and returned in the response header as x-record-uuid.
     */
    async createAllocationWindows(request, options) {
        return unwrapAsync(allocationWindowsCreateAllocationWindows(this, request, options));
    }
    /**
     * Retrieve an Allocation Window
     */
    async getAllocationWindows(request, options) {
        return unwrapAsync(allocationWindowsGetAllocationWindows(this, request, options));
    }
    /**
     * Update an Allocation Window
     */
    async updateAllocationWindows(request, options) {
        return unwrapAsync(allocationWindowsUpdateAllocationWindows(this, request, options));
    }
    /**
     * Delete an Allocation Window
     *
     * @remarks
     *
     * In ServiceM8, records are never deleted, but are archived. Archived records will remain accessible via the API as (active = 0), however will no longer be visible in UI. Archived records can be restored to active by setting the record active field to 1.
     */
    async deleteAllocationWindows(request, options) {
        return unwrapAsync(allocationWindowsDeleteAllocationWindows(this, request, options));
    }
}
//# sourceMappingURL=allocationwindows.js.map