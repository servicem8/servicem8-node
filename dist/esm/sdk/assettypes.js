/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import { assetTypesCreateAssetTypes } from "../funcs/assetTypesCreateAssetTypes.js";
import { assetTypesDeleteAssetTypes } from "../funcs/assetTypesDeleteAssetTypes.js";
import { assetTypesGetAssetTypes } from "../funcs/assetTypesGetAssetTypes.js";
import { assetTypesListAssetTypes } from "../funcs/assetTypesListAssetTypes.js";
import { assetTypesUpdateAssetTypes } from "../funcs/assetTypesUpdateAssetTypes.js";
import { ClientSDK } from "../lib/sdks.js";
import { unwrapAsync } from "../types/fp.js";
export class AssetTypes extends ClientSDK {
    /**
     * List all Asset Types
     *
     * @remarks
     *
     * #### Filtering
     * This endpoint supports result filtering. For more information on how to filter this request, [go here](/docs/filtering).
     *
     * #### OAuth Scope
     * This endpoint requires the following OAuth scope **read_assets**.
     */
    async listAssetTypes(options) {
        return unwrapAsync(assetTypesListAssetTypes(this, options));
    }
    /**
     * Create a new Asset Type
     *
     * @remarks
     *
     * #### OAuth Scope
     * This endpoint requires the following OAuth scope **manage_assets**.
     *
     * #### Record UUID
     * UUID is optional for record creation. If no UUID is supplied, a UUID will be automatically generated for the new record and returned in the response header as x-record-uuid.
     */
    async createAssetTypes(request, options) {
        return unwrapAsync(assetTypesCreateAssetTypes(this, request, options));
    }
    /**
     * Retrieve an Asset Type
     *
     * @remarks
     *
     * #### OAuth Scope
     * This endpoint requires the following OAuth scope **read_assets**.
     */
    async getAssetTypes(request, options) {
        return unwrapAsync(assetTypesGetAssetTypes(this, request, options));
    }
    /**
     * Update an Asset Type
     */
    async updateAssetTypes(request, options) {
        return unwrapAsync(assetTypesUpdateAssetTypes(this, request, options));
    }
    /**
     * Delete an Asset Type
     *
     * @remarks
     *
     * In ServiceM8, records are never deleted, but are archived. Archived records will remain accessible via the API as (active = 0), however will no longer be visible in UI. Archived records can be restored to active by setting the record active field to 1.
     */
    async deleteAssetTypes(request, options) {
        return unwrapAsync(assetTypesDeleteAssetTypes(this, request, options));
    }
}
//# sourceMappingURL=assettypes.js.map