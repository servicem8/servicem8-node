/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import { clientsCreateClients } from "../funcs/clientsCreateClients.js";
import { clientsDeleteClients } from "../funcs/clientsDeleteClients.js";
import { clientsGetClients } from "../funcs/clientsGetClients.js";
import { clientsListClients } from "../funcs/clientsListClients.js";
import { clientsUpdateClients } from "../funcs/clientsUpdateClients.js";
import { ClientSDK } from "../lib/sdks.js";
import { unwrapAsync } from "../types/fp.js";
export class Clients extends ClientSDK {
    /**
     * List all Clients
     *
     * @remarks
     *
     * #### Filtering
     * This endpoint supports result filtering. For more information on how to filter this request, [go here](/docs/filtering).
     *
     * #### OAuth Scope
     * This endpoint requires the following OAuth scope **read_customers**.
     */
    async listClients(options) {
        return unwrapAsync(clientsListClients(this, options));
    }
    /**
     * Create a new Client
     *
     * @remarks
     *
     * #### OAuth Scope
     * This endpoint requires the following OAuth scope **manage_customers**.
     *
     * #### Record UUID
     * UUID is optional for record creation. If no UUID is supplied, a UUID will be automatically generated for the new record and returned in the response header as x-record-uuid.
     */
    async createClients(request, options) {
        return unwrapAsync(clientsCreateClients(this, request, options));
    }
    /**
     * Retrieve a Client
     *
     * @remarks
     *
     * #### OAuth Scope
     * This endpoint requires the following OAuth scope **read_customers**.
     */
    async getClients(request, options) {
        return unwrapAsync(clientsGetClients(this, request, options));
    }
    /**
     * Update a Client
     *
     * @remarks
     *
     * #### OAuth Scope
     * This endpoint requires the following OAuth scope **manage_customers**.
     */
    async updateClients(request, options) {
        return unwrapAsync(clientsUpdateClients(this, request, options));
    }
    /**
     * Delete a Client
     *
     * @remarks
     *
     * In ServiceM8, records are never deleted, but are archived. Archived records will remain accessible via the API as (active = 0), however will no longer be visible in UI. Archived records can be restored to active by setting the record active field to 1.
     *
     * #### OAuth Scope
     * This endpoint requires the following OAuth scope **manage_customers**.
     */
    async deleteClients(request, options) {
        return unwrapAsync(clientsDeleteClients(this, request, options));
    }
}
//# sourceMappingURL=clients.js.map