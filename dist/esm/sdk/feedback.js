/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import { feedbackCreateFeedback } from "../funcs/feedbackCreateFeedback.js";
import { feedbackDeleteFeedback } from "../funcs/feedbackDeleteFeedback.js";
import { feedbackGetFeedback } from "../funcs/feedbackGetFeedback.js";
import { feedbackListFeedback } from "../funcs/feedbackListFeedback.js";
import { feedbackUpdateFeedback } from "../funcs/feedbackUpdateFeedback.js";
import { ClientSDK } from "../lib/sdks.js";
import { unwrapAsync } from "../types/fp.js";
export class Feedback extends ClientSDK {
    /**
     * List all Feedback
     *
     * @remarks
     *
     * #### Filtering
     * This endpoint supports result filtering. For more information on how to filter this request, [go here](/docs/filtering).
     */
    async listFeedback(options) {
        return unwrapAsync(feedbackListFeedback(this, options));
    }
    /**
     * Create a new Feedback
     *
     * @remarks
     *
     * #### Record UUID
     * UUID is optional for record creation. If no UUID is supplied, a UUID will be automatically generated for the new record and returned in the response header as x-record-uuid.
     */
    async createFeedback(request, options) {
        return unwrapAsync(feedbackCreateFeedback(this, request, options));
    }
    /**
     * Retrieve a Feedback
     */
    async getFeedback(request, options) {
        return unwrapAsync(feedbackGetFeedback(this, request, options));
    }
    /**
     * Update a Feedback
     */
    async updateFeedback(request, options) {
        return unwrapAsync(feedbackUpdateFeedback(this, request, options));
    }
    /**
     * Delete a Feedback
     *
     * @remarks
     *
     * In ServiceM8, records are never deleted, but are archived. Archived records will remain accessible via the API as (active = 0), however will no longer be visible in UI. Archived records can be restored to active by setting the record active field to 1.
     */
    async deleteFeedback(request, options) {
        return unwrapAsync(feedbackDeleteFeedback(this, request, options));
    }
}
//# sourceMappingURL=feedback.js.map