/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import { notesCreateNotes } from "../funcs/notesCreateNotes.js";
import { notesDeleteNotes } from "../funcs/notesDeleteNotes.js";
import { notesGetNotes } from "../funcs/notesGetNotes.js";
import { notesListNotes } from "../funcs/notesListNotes.js";
import { notesUpdateNotes } from "../funcs/notesUpdateNotes.js";
import { ClientSDK } from "../lib/sdks.js";
import { unwrapAsync } from "../types/fp.js";
export class Notes extends ClientSDK {
    /**
     * List all Notes
     *
     * @remarks
     *
     * #### Filtering
     * This endpoint supports result filtering. For more information on how to filter this request, [go here](/docs/filtering).
     */
    async listNotes(options) {
        return unwrapAsync(notesListNotes(this, options));
    }
    /**
     * Create a new Note
     *
     * @remarks
     *
     * #### Record UUID
     * UUID is optional for record creation. If no UUID is supplied, a UUID will be automatically generated for the new record and returned in the response header as x-record-uuid.
     */
    async createNotes(request, options) {
        return unwrapAsync(notesCreateNotes(this, request, options));
    }
    /**
     * Retrieve a Note
     */
    async getNotes(request, options) {
        return unwrapAsync(notesGetNotes(this, request, options));
    }
    /**
     * Update a Note
     */
    async updateNotes(request, options) {
        return unwrapAsync(notesUpdateNotes(this, request, options));
    }
    /**
     * Delete a Note
     *
     * @remarks
     *
     * In ServiceM8, records are never deleted, but are archived. Archived records will remain accessible via the API as (active = 0), however will no longer be visible in UI. Archived records can be restored to active by setting the record active field to 1.
     */
    async deleteNotes(request, options) {
        return unwrapAsync(notesDeleteNotes(this, request, options));
    }
}
//# sourceMappingURL=notes.js.map