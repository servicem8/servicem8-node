/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import { jobQueuesCreateJobQueues } from "../funcs/jobQueuesCreateJobQueues.js";
import { jobQueuesDeleteJobQueues } from "../funcs/jobQueuesDeleteJobQueues.js";
import { jobQueuesGetJobQueues } from "../funcs/jobQueuesGetJobQueues.js";
import { jobQueuesListJobQueues } from "../funcs/jobQueuesListJobQueues.js";
import { jobQueuesUpdateJobQueues } from "../funcs/jobQueuesUpdateJobQueues.js";
import { ClientSDK } from "../lib/sdks.js";
import { unwrapAsync } from "../types/fp.js";
export class JobQueues extends ClientSDK {
    /**
     * List all Job Queues
     *
     * @remarks
     *
     * #### Filtering
     * This endpoint supports result filtering. For more information on how to filter this request, [go here](/docs/filtering).
     *
     * #### OAuth Scope
     * This endpoint requires the following OAuth scope **read_job_queues**.
     */
    async listJobQueues(options) {
        return unwrapAsync(jobQueuesListJobQueues(this, options));
    }
    /**
     * Create a new Job Queue
     *
     * @remarks
     *
     * #### OAuth Scope
     * This endpoint requires the following OAuth scope **manage_job_queues**.
     *
     * #### Record UUID
     * UUID is optional for record creation. If no UUID is supplied, a UUID will be automatically generated for the new record and returned in the response header as x-record-uuid.
     */
    async createJobQueues(request, options) {
        return unwrapAsync(jobQueuesCreateJobQueues(this, request, options));
    }
    /**
     * Retrieve a Job Queue
     *
     * @remarks
     *
     * #### OAuth Scope
     * This endpoint requires the following OAuth scope **read_job_queues**.
     */
    async getJobQueues(request, options) {
        return unwrapAsync(jobQueuesGetJobQueues(this, request, options));
    }
    /**
     * Update a Job Queue
     *
     * @remarks
     *
     * #### OAuth Scope
     * This endpoint requires the following OAuth scope **manage_job_queues**.
     */
    async updateJobQueues(request, options) {
        return unwrapAsync(jobQueuesUpdateJobQueues(this, request, options));
    }
    /**
     * Delete a Job Queue
     *
     * @remarks
     *
     * In ServiceM8, records are never deleted, but are archived. Archived records will remain accessible via the API as (active = 0), however will no longer be visible in UI. Archived records can be restored to active by setting the record active field to 1.
     *
     * #### OAuth Scope
     * This endpoint requires the following OAuth scope **manage_job_queues**.
     */
    async deleteJobQueues(request, options) {
        return unwrapAsync(jobQueuesDeleteJobQueues(this, request, options));
    }
}
//# sourceMappingURL=jobqueues.js.map