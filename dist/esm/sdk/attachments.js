/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import { attachmentsCreateAttachments } from "../funcs/attachmentsCreateAttachments.js";
import { attachmentsDeleteAttachments } from "../funcs/attachmentsDeleteAttachments.js";
import { attachmentsGetAttachments } from "../funcs/attachmentsGetAttachments.js";
import { attachmentsListAttachments } from "../funcs/attachmentsListAttachments.js";
import { attachmentsUpdateAttachments } from "../funcs/attachmentsUpdateAttachments.js";
import { ClientSDK } from "../lib/sdks.js";
import { unwrapAsync } from "../types/fp.js";
export class Attachments extends ClientSDK {
    /**
     * List all Attachments
     *
     * @remarks
     *
     * #### Filtering
     * This endpoint supports result filtering. For more information on how to filter this request, [go here](/docs/filtering).
     */
    async listAttachments(options) {
        return unwrapAsync(attachmentsListAttachments(this, options));
    }
    /**
     * Create a new Attachment
     *
     * @remarks
     *
     * #### Record UUID
     * UUID is optional for record creation. If no UUID is supplied, a UUID will be automatically generated for the new record and returned in the response header as x-record-uuid.
     */
    async createAttachments(request, options) {
        return unwrapAsync(attachmentsCreateAttachments(this, request, options));
    }
    /**
     * Retrieve an Attachment
     */
    async getAttachments(request, options) {
        return unwrapAsync(attachmentsGetAttachments(this, request, options));
    }
    /**
     * Update an Attachment
     */
    async updateAttachments(request, options) {
        return unwrapAsync(attachmentsUpdateAttachments(this, request, options));
    }
    /**
     * Delete an Attachment
     *
     * @remarks
     *
     * In ServiceM8, records are never deleted, but are archived. Archived records will remain accessible via the API as (active = 0), however will no longer be visible in UI. Archived records can be restored to active by setting the record active field to 1.
     */
    async deleteAttachments(request, options) {
        return unwrapAsync(attachmentsDeleteAttachments(this, request, options));
    }
}
//# sourceMappingURL=attachments.js.map