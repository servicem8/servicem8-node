/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import { assetTypeFieldsCreateAssetTypeFields } from "../funcs/assetTypeFieldsCreateAssetTypeFields.js";
import { assetTypeFieldsDeleteAssetTypeFields } from "../funcs/assetTypeFieldsDeleteAssetTypeFields.js";
import { assetTypeFieldsGetAssetTypeFields } from "../funcs/assetTypeFieldsGetAssetTypeFields.js";
import { assetTypeFieldsListAssetTypeFields } from "../funcs/assetTypeFieldsListAssetTypeFields.js";
import { assetTypeFieldsUpdateAssetTypeFields } from "../funcs/assetTypeFieldsUpdateAssetTypeFields.js";
import { ClientSDK } from "../lib/sdks.js";
import { unwrapAsync } from "../types/fp.js";
export class AssetTypeFields extends ClientSDK {
    /**
     * List all Asset Type Fields
     *
     * @remarks
     *
     * #### Filtering
     * This endpoint supports result filtering. For more information on how to filter this request, [go here](/docs/filtering).
     *
     * #### OAuth Scope
     * This endpoint requires the following OAuth scope **read_assets**.
     */
    async listAssetTypeFields(options) {
        return unwrapAsync(assetTypeFieldsListAssetTypeFields(this, options));
    }
    /**
     * Create a new Asset Type Field
     *
     * @remarks
     *
     * #### OAuth Scope
     * This endpoint requires the following OAuth scope **manage_assets**.
     *
     * #### Record UUID
     * UUID is optional for record creation. If no UUID is supplied, a UUID will be automatically generated for the new record and returned in the response header as x-record-uuid.
     */
    async createAssetTypeFields(request, options) {
        return unwrapAsync(assetTypeFieldsCreateAssetTypeFields(this, request, options));
    }
    /**
     * Retrieve an Asset Type Field
     *
     * @remarks
     *
     * #### OAuth Scope
     * This endpoint requires the following OAuth scope **read_assets**.
     */
    async getAssetTypeFields(request, options) {
        return unwrapAsync(assetTypeFieldsGetAssetTypeFields(this, request, options));
    }
    /**
     * Update an Asset Type Field
     */
    async updateAssetTypeFields(request, options) {
        return unwrapAsync(assetTypeFieldsUpdateAssetTypeFields(this, request, options));
    }
    /**
     * Delete an Asset Type Field
     *
     * @remarks
     *
     * In ServiceM8, records are never deleted, but are archived. Archived records will remain accessible via the API as (active = 0), however will no longer be visible in UI. Archived records can be restored to active by setting the record active field to 1.
     */
    async deleteAssetTypeFields(request, options) {
        return unwrapAsync(assetTypeFieldsDeleteAssetTypeFields(this, request, options));
    }
}
//# sourceMappingURL=assettypefields.js.map