/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
/**
 * Record active/deleted flag.
 *
 * @remarks
 *
 * Valid values are [0,1]
 */
export const SmsTemplateActive = {
    Zero: 0,
    One: 1,
};
/** @internal */
export const SmsTemplateActive$inboundSchema = z.nativeEnum(SmsTemplateActive);
/** @internal */
export const SmsTemplateActive$outboundSchema = SmsTemplateActive$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var SmsTemplateActive$;
(function (SmsTemplateActive$) {
    /** @deprecated use `SmsTemplateActive$inboundSchema` instead. */
    SmsTemplateActive$.inboundSchema = SmsTemplateActive$inboundSchema;
    /** @deprecated use `SmsTemplateActive$outboundSchema` instead. */
    SmsTemplateActive$.outboundSchema = SmsTemplateActive$outboundSchema;
})(SmsTemplateActive$ || (SmsTemplateActive$ = {}));
/** @internal */
export const SmsTemplate$inboundSchema = z.object({
    uuid: z.string().optional(),
    active: SmsTemplateActive$inboundSchema.default(1),
    edit_date: z.string().optional(),
    name: z.string(),
    message: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "edit_date": "editDate",
    });
});
/** @internal */
export const SmsTemplate$outboundSchema = z.object({
    uuid: z.string().optional(),
    active: SmsTemplateActive$outboundSchema.default(1),
    editDate: z.string().optional(),
    name: z.string(),
    message: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        editDate: "edit_date",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var SmsTemplate$;
(function (SmsTemplate$) {
    /** @deprecated use `SmsTemplate$inboundSchema` instead. */
    SmsTemplate$.inboundSchema = SmsTemplate$inboundSchema;
    /** @deprecated use `SmsTemplate$outboundSchema` instead. */
    SmsTemplate$.outboundSchema = SmsTemplate$outboundSchema;
})(SmsTemplate$ || (SmsTemplate$ = {}));
export function smsTemplateToJSON(smsTemplate) {
    return JSON.stringify(SmsTemplate$outboundSchema.parse(smsTemplate));
}
export function smsTemplateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => SmsTemplate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'SmsTemplate' from JSON`);
}
/** @internal */
export const SmsTemplateInput$inboundSchema = z.object({
    uuid: z.string().optional(),
    active: SmsTemplateActive$inboundSchema.default(1),
    name: z.string(),
    message: z.string().optional(),
});
/** @internal */
export const SmsTemplateInput$outboundSchema = z.object({
    uuid: z.string().optional(),
    active: SmsTemplateActive$outboundSchema.default(1),
    name: z.string(),
    message: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var SmsTemplateInput$;
(function (SmsTemplateInput$) {
    /** @deprecated use `SmsTemplateInput$inboundSchema` instead. */
    SmsTemplateInput$.inboundSchema = SmsTemplateInput$inboundSchema;
    /** @deprecated use `SmsTemplateInput$outboundSchema` instead. */
    SmsTemplateInput$.outboundSchema = SmsTemplateInput$outboundSchema;
})(SmsTemplateInput$ || (SmsTemplateInput$ = {}));
export function smsTemplateInputToJSON(smsTemplateInput) {
    return JSON.stringify(SmsTemplateInput$outboundSchema.parse(smsTemplateInput));
}
export function smsTemplateInputFromJSON(jsonString) {
    return safeParse(jsonString, (x) => SmsTemplateInput$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'SmsTemplateInput' from JSON`);
}
//# sourceMappingURL=smstemplate.js.map