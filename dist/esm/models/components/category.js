/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
/**
 * Record active/deleted flag.
 *
 * @remarks
 *
 * Valid values are [0,1]
 */
export const CategoryActive = {
    Zero: 0,
    One: 1,
};
/** @internal */
export const CategoryActive$inboundSchema = z.nativeEnum(CategoryActive);
/** @internal */
export const CategoryActive$outboundSchema = CategoryActive$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CategoryActive$;
(function (CategoryActive$) {
    /** @deprecated use `CategoryActive$inboundSchema` instead. */
    CategoryActive$.inboundSchema = CategoryActive$inboundSchema;
    /** @deprecated use `CategoryActive$outboundSchema` instead. */
    CategoryActive$.outboundSchema = CategoryActive$outboundSchema;
})(CategoryActive$ || (CategoryActive$ = {}));
/** @internal */
export const Category$inboundSchema = z.object({
    uuid: z.string().optional(),
    active: CategoryActive$inboundSchema.default(1),
    edit_date: z.string().optional(),
    name: z.string(),
    colour: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "edit_date": "editDate",
    });
});
/** @internal */
export const Category$outboundSchema = z.object({
    uuid: z.string().optional(),
    active: CategoryActive$outboundSchema.default(1),
    editDate: z.string().optional(),
    name: z.string(),
    colour: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        editDate: "edit_date",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Category$;
(function (Category$) {
    /** @deprecated use `Category$inboundSchema` instead. */
    Category$.inboundSchema = Category$inboundSchema;
    /** @deprecated use `Category$outboundSchema` instead. */
    Category$.outboundSchema = Category$outboundSchema;
})(Category$ || (Category$ = {}));
export function categoryToJSON(category) {
    return JSON.stringify(Category$outboundSchema.parse(category));
}
export function categoryFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Category$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Category' from JSON`);
}
/** @internal */
export const CategoryInput$inboundSchema = z.object({
    uuid: z.string().optional(),
    active: CategoryActive$inboundSchema.default(1),
    name: z.string(),
    colour: z.string().optional(),
});
/** @internal */
export const CategoryInput$outboundSchema = z.object({
    uuid: z.string().optional(),
    active: CategoryActive$outboundSchema.default(1),
    name: z.string(),
    colour: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CategoryInput$;
(function (CategoryInput$) {
    /** @deprecated use `CategoryInput$inboundSchema` instead. */
    CategoryInput$.inboundSchema = CategoryInput$inboundSchema;
    /** @deprecated use `CategoryInput$outboundSchema` instead. */
    CategoryInput$.outboundSchema = CategoryInput$outboundSchema;
})(CategoryInput$ || (CategoryInput$ = {}));
export function categoryInputToJSON(categoryInput) {
    return JSON.stringify(CategoryInput$outboundSchema.parse(categoryInput));
}
export function categoryInputFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CategoryInput$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CategoryInput' from JSON`);
}
//# sourceMappingURL=category.js.map