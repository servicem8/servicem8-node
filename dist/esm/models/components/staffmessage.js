/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
/**
 * Record active/deleted flag.
 *
 * @remarks
 *
 * Valid values are [0,1]
 */
export const StaffMessageActive = {
    Zero: 0,
    One: 1,
};
/** @internal */
export const StaffMessageActive$inboundSchema = z.nativeEnum(StaffMessageActive);
/** @internal */
export const StaffMessageActive$outboundSchema = StaffMessageActive$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var StaffMessageActive$;
(function (StaffMessageActive$) {
    /** @deprecated use `StaffMessageActive$inboundSchema` instead. */
    StaffMessageActive$.inboundSchema = StaffMessageActive$inboundSchema;
    /** @deprecated use `StaffMessageActive$outboundSchema` instead. */
    StaffMessageActive$.outboundSchema = StaffMessageActive$outboundSchema;
})(StaffMessageActive$ || (StaffMessageActive$ = {}));
/** @internal */
export const StaffMessage$inboundSchema = z.object({
    uuid: z.string().optional(),
    active: StaffMessageActive$inboundSchema.default(1),
    edit_date: z.string().optional(),
    from_staff_uuid: z.string().optional(),
    to_staff_uuid: z.string().optional(),
    sent_timestamp: z.string().optional(),
    delivered_timestamp: z.string().optional(),
    read_timestamp: z.string().optional(),
    message: z.string().optional(),
    regarding_job_uuid: z.string().optional(),
    attached_json: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "edit_date": "editDate",
        "from_staff_uuid": "fromStaffUuid",
        "to_staff_uuid": "toStaffUuid",
        "sent_timestamp": "sentTimestamp",
        "delivered_timestamp": "deliveredTimestamp",
        "read_timestamp": "readTimestamp",
        "regarding_job_uuid": "regardingJobUuid",
        "attached_json": "attachedJson",
    });
});
/** @internal */
export const StaffMessage$outboundSchema = z.object({
    uuid: z.string().optional(),
    active: StaffMessageActive$outboundSchema.default(1),
    editDate: z.string().optional(),
    fromStaffUuid: z.string().optional(),
    toStaffUuid: z.string().optional(),
    sentTimestamp: z.string().optional(),
    deliveredTimestamp: z.string().optional(),
    readTimestamp: z.string().optional(),
    message: z.string().optional(),
    regardingJobUuid: z.string().optional(),
    attachedJson: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        editDate: "edit_date",
        fromStaffUuid: "from_staff_uuid",
        toStaffUuid: "to_staff_uuid",
        sentTimestamp: "sent_timestamp",
        deliveredTimestamp: "delivered_timestamp",
        readTimestamp: "read_timestamp",
        regardingJobUuid: "regarding_job_uuid",
        attachedJson: "attached_json",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var StaffMessage$;
(function (StaffMessage$) {
    /** @deprecated use `StaffMessage$inboundSchema` instead. */
    StaffMessage$.inboundSchema = StaffMessage$inboundSchema;
    /** @deprecated use `StaffMessage$outboundSchema` instead. */
    StaffMessage$.outboundSchema = StaffMessage$outboundSchema;
})(StaffMessage$ || (StaffMessage$ = {}));
export function staffMessageToJSON(staffMessage) {
    return JSON.stringify(StaffMessage$outboundSchema.parse(staffMessage));
}
export function staffMessageFromJSON(jsonString) {
    return safeParse(jsonString, (x) => StaffMessage$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'StaffMessage' from JSON`);
}
/** @internal */
export const StaffMessageInput$inboundSchema = z.object({
    uuid: z.string().optional(),
    active: StaffMessageActive$inboundSchema.default(1),
    from_staff_uuid: z.string().optional(),
    to_staff_uuid: z.string().optional(),
    sent_timestamp: z.string().optional(),
    delivered_timestamp: z.string().optional(),
    read_timestamp: z.string().optional(),
    message: z.string().optional(),
    regarding_job_uuid: z.string().optional(),
    attached_json: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "from_staff_uuid": "fromStaffUuid",
        "to_staff_uuid": "toStaffUuid",
        "sent_timestamp": "sentTimestamp",
        "delivered_timestamp": "deliveredTimestamp",
        "read_timestamp": "readTimestamp",
        "regarding_job_uuid": "regardingJobUuid",
        "attached_json": "attachedJson",
    });
});
/** @internal */
export const StaffMessageInput$outboundSchema = z.object({
    uuid: z.string().optional(),
    active: StaffMessageActive$outboundSchema.default(1),
    fromStaffUuid: z.string().optional(),
    toStaffUuid: z.string().optional(),
    sentTimestamp: z.string().optional(),
    deliveredTimestamp: z.string().optional(),
    readTimestamp: z.string().optional(),
    message: z.string().optional(),
    regardingJobUuid: z.string().optional(),
    attachedJson: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        fromStaffUuid: "from_staff_uuid",
        toStaffUuid: "to_staff_uuid",
        sentTimestamp: "sent_timestamp",
        deliveredTimestamp: "delivered_timestamp",
        readTimestamp: "read_timestamp",
        regardingJobUuid: "regarding_job_uuid",
        attachedJson: "attached_json",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var StaffMessageInput$;
(function (StaffMessageInput$) {
    /** @deprecated use `StaffMessageInput$inboundSchema` instead. */
    StaffMessageInput$.inboundSchema = StaffMessageInput$inboundSchema;
    /** @deprecated use `StaffMessageInput$outboundSchema` instead. */
    StaffMessageInput$.outboundSchema = StaffMessageInput$outboundSchema;
})(StaffMessageInput$ || (StaffMessageInput$ = {}));
export function staffMessageInputToJSON(staffMessageInput) {
    return JSON.stringify(StaffMessageInput$outboundSchema.parse(staffMessageInput));
}
export function staffMessageInputFromJSON(jsonString) {
    return safeParse(jsonString, (x) => StaffMessageInput$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'StaffMessageInput' from JSON`);
}
//# sourceMappingURL=staffmessage.js.map