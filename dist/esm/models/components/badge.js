/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
/**
 * Record active/deleted flag.
 *
 * @remarks
 *
 * Valid values are [0,1]
 */
export const BadgeActive = {
    Zero: 0,
    One: 1,
};
/** @internal */
export const BadgeActive$inboundSchema = z
    .nativeEnum(BadgeActive);
/** @internal */
export const BadgeActive$outboundSchema = BadgeActive$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BadgeActive$;
(function (BadgeActive$) {
    /** @deprecated use `BadgeActive$inboundSchema` instead. */
    BadgeActive$.inboundSchema = BadgeActive$inboundSchema;
    /** @deprecated use `BadgeActive$outboundSchema` instead. */
    BadgeActive$.outboundSchema = BadgeActive$outboundSchema;
})(BadgeActive$ || (BadgeActive$ = {}));
/** @internal */
export const Badge$inboundSchema = z
    .object({
    uuid: z.string().optional(),
    active: BadgeActive$inboundSchema.default(1),
    edit_date: z.string().optional(),
    name: z.string(),
    automatically_allocated: z.string().optional(),
    file_name: z.string().optional(),
    regarding_form_uuid: z.string().optional(),
    regarding_asset_type_uuid: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "edit_date": "editDate",
        "automatically_allocated": "automaticallyAllocated",
        "file_name": "fileName",
        "regarding_form_uuid": "regardingFormUuid",
        "regarding_asset_type_uuid": "regardingAssetTypeUuid",
    });
});
/** @internal */
export const Badge$outboundSchema = z.object({
    uuid: z.string().optional(),
    active: BadgeActive$outboundSchema.default(1),
    editDate: z.string().optional(),
    name: z.string(),
    automaticallyAllocated: z.string().optional(),
    fileName: z.string().optional(),
    regardingFormUuid: z.string().optional(),
    regardingAssetTypeUuid: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        editDate: "edit_date",
        automaticallyAllocated: "automatically_allocated",
        fileName: "file_name",
        regardingFormUuid: "regarding_form_uuid",
        regardingAssetTypeUuid: "regarding_asset_type_uuid",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Badge$;
(function (Badge$) {
    /** @deprecated use `Badge$inboundSchema` instead. */
    Badge$.inboundSchema = Badge$inboundSchema;
    /** @deprecated use `Badge$outboundSchema` instead. */
    Badge$.outboundSchema = Badge$outboundSchema;
})(Badge$ || (Badge$ = {}));
export function badgeToJSON(badge) {
    return JSON.stringify(Badge$outboundSchema.parse(badge));
}
export function badgeFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Badge$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Badge' from JSON`);
}
/** @internal */
export const BadgeInput$inboundSchema = z.object({
    uuid: z.string().optional(),
    active: BadgeActive$inboundSchema.default(1),
    name: z.string(),
    automatically_allocated: z.string().optional(),
    file_name: z.string().optional(),
    regarding_form_uuid: z.string().optional(),
    regarding_asset_type_uuid: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "automatically_allocated": "automaticallyAllocated",
        "file_name": "fileName",
        "regarding_form_uuid": "regardingFormUuid",
        "regarding_asset_type_uuid": "regardingAssetTypeUuid",
    });
});
/** @internal */
export const BadgeInput$outboundSchema = z.object({
    uuid: z.string().optional(),
    active: BadgeActive$outboundSchema.default(1),
    name: z.string(),
    automaticallyAllocated: z.string().optional(),
    fileName: z.string().optional(),
    regardingFormUuid: z.string().optional(),
    regardingAssetTypeUuid: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        automaticallyAllocated: "automatically_allocated",
        fileName: "file_name",
        regardingFormUuid: "regarding_form_uuid",
        regardingAssetTypeUuid: "regarding_asset_type_uuid",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BadgeInput$;
(function (BadgeInput$) {
    /** @deprecated use `BadgeInput$inboundSchema` instead. */
    BadgeInput$.inboundSchema = BadgeInput$inboundSchema;
    /** @deprecated use `BadgeInput$outboundSchema` instead. */
    BadgeInput$.outboundSchema = BadgeInput$outboundSchema;
})(BadgeInput$ || (BadgeInput$ = {}));
export function badgeInputToJSON(badgeInput) {
    return JSON.stringify(BadgeInput$outboundSchema.parse(badgeInput));
}
export function badgeInputFromJSON(jsonString) {
    return safeParse(jsonString, (x) => BadgeInput$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'BadgeInput' from JSON`);
}
//# sourceMappingURL=badge.js.map