/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
/**
 * Record active/deleted flag.
 *
 * @remarks
 *
 * Valid values are [0,1]
 */
export const TaxRateActive = {
    Zero: 0,
    One: 1,
};
/**
 * @remarks
 *
 * Valid values are [0,1]
 */
export const IsDefaultTaxRate = {
    Zero: 0,
    One: 1,
};
/** @internal */
export const TaxRateActive$inboundSchema = z.nativeEnum(TaxRateActive);
/** @internal */
export const TaxRateActive$outboundSchema = TaxRateActive$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TaxRateActive$;
(function (TaxRateActive$) {
    /** @deprecated use `TaxRateActive$inboundSchema` instead. */
    TaxRateActive$.inboundSchema = TaxRateActive$inboundSchema;
    /** @deprecated use `TaxRateActive$outboundSchema` instead. */
    TaxRateActive$.outboundSchema = TaxRateActive$outboundSchema;
})(TaxRateActive$ || (TaxRateActive$ = {}));
/** @internal */
export const IsDefaultTaxRate$inboundSchema = z.nativeEnum(IsDefaultTaxRate);
/** @internal */
export const IsDefaultTaxRate$outboundSchema = IsDefaultTaxRate$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var IsDefaultTaxRate$;
(function (IsDefaultTaxRate$) {
    /** @deprecated use `IsDefaultTaxRate$inboundSchema` instead. */
    IsDefaultTaxRate$.inboundSchema = IsDefaultTaxRate$inboundSchema;
    /** @deprecated use `IsDefaultTaxRate$outboundSchema` instead. */
    IsDefaultTaxRate$.outboundSchema = IsDefaultTaxRate$outboundSchema;
})(IsDefaultTaxRate$ || (IsDefaultTaxRate$ = {}));
/** @internal */
export const TaxRate$inboundSchema = z.object({
    uuid: z.string().optional(),
    active: TaxRateActive$inboundSchema.default(1),
    edit_date: z.string().optional(),
    name: z.string(),
    amount: z.string().optional(),
    is_default_tax_rate: IsDefaultTaxRate$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "edit_date": "editDate",
        "is_default_tax_rate": "isDefaultTaxRate",
    });
});
/** @internal */
export const TaxRate$outboundSchema = z.object({
    uuid: z.string().optional(),
    active: TaxRateActive$outboundSchema.default(1),
    editDate: z.string().optional(),
    name: z.string(),
    amount: z.string().optional(),
    isDefaultTaxRate: IsDefaultTaxRate$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        editDate: "edit_date",
        isDefaultTaxRate: "is_default_tax_rate",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TaxRate$;
(function (TaxRate$) {
    /** @deprecated use `TaxRate$inboundSchema` instead. */
    TaxRate$.inboundSchema = TaxRate$inboundSchema;
    /** @deprecated use `TaxRate$outboundSchema` instead. */
    TaxRate$.outboundSchema = TaxRate$outboundSchema;
})(TaxRate$ || (TaxRate$ = {}));
export function taxRateToJSON(taxRate) {
    return JSON.stringify(TaxRate$outboundSchema.parse(taxRate));
}
export function taxRateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => TaxRate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'TaxRate' from JSON`);
}
/** @internal */
export const TaxRateInput$inboundSchema = z.object({
    uuid: z.string().optional(),
    active: TaxRateActive$inboundSchema.default(1),
    name: z.string(),
    amount: z.string().optional(),
    is_default_tax_rate: IsDefaultTaxRate$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "is_default_tax_rate": "isDefaultTaxRate",
    });
});
/** @internal */
export const TaxRateInput$outboundSchema = z.object({
    uuid: z.string().optional(),
    active: TaxRateActive$outboundSchema.default(1),
    name: z.string(),
    amount: z.string().optional(),
    isDefaultTaxRate: IsDefaultTaxRate$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        isDefaultTaxRate: "is_default_tax_rate",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TaxRateInput$;
(function (TaxRateInput$) {
    /** @deprecated use `TaxRateInput$inboundSchema` instead. */
    TaxRateInput$.inboundSchema = TaxRateInput$inboundSchema;
    /** @deprecated use `TaxRateInput$outboundSchema` instead. */
    TaxRateInput$.outboundSchema = TaxRateInput$outboundSchema;
})(TaxRateInput$ || (TaxRateInput$ = {}));
export function taxRateInputToJSON(taxRateInput) {
    return JSON.stringify(TaxRateInput$outboundSchema.parse(taxRateInput));
}
export function taxRateInputFromJSON(jsonString) {
    return safeParse(jsonString, (x) => TaxRateInput$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'TaxRateInput' from JSON`);
}
//# sourceMappingURL=taxrate.js.map