/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
/**
 * Record active/deleted flag.
 *
 * @remarks
 *
 * Valid values are [0,1]
 */
export const AllocationWindowActive = {
    Zero: 0,
    One: 1,
};
/** @internal */
export const AllocationWindowActive$inboundSchema = z.nativeEnum(AllocationWindowActive);
/** @internal */
export const AllocationWindowActive$outboundSchema = AllocationWindowActive$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AllocationWindowActive$;
(function (AllocationWindowActive$) {
    /** @deprecated use `AllocationWindowActive$inboundSchema` instead. */
    AllocationWindowActive$.inboundSchema = AllocationWindowActive$inboundSchema;
    /** @deprecated use `AllocationWindowActive$outboundSchema` instead. */
    AllocationWindowActive$.outboundSchema = AllocationWindowActive$outboundSchema;
})(AllocationWindowActive$ || (AllocationWindowActive$ = {}));
/** @internal */
export const AllocationWindow$inboundSchema = z.object({
    uuid: z.string().optional(),
    active: AllocationWindowActive$inboundSchema.default(1),
    edit_date: z.string().optional(),
    name: z.string().optional(),
    start_time: z.number().int().optional(),
    end_time: z.number().int().optional(),
    sort_priority: z.number().int().optional(),
}).transform((v) => {
    return remap$(v, {
        "edit_date": "editDate",
        "start_time": "startTime",
        "end_time": "endTime",
        "sort_priority": "sortPriority",
    });
});
/** @internal */
export const AllocationWindow$outboundSchema = z.object({
    uuid: z.string().optional(),
    active: AllocationWindowActive$outboundSchema.default(1),
    editDate: z.string().optional(),
    name: z.string().optional(),
    startTime: z.number().int().optional(),
    endTime: z.number().int().optional(),
    sortPriority: z.number().int().optional(),
}).transform((v) => {
    return remap$(v, {
        editDate: "edit_date",
        startTime: "start_time",
        endTime: "end_time",
        sortPriority: "sort_priority",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AllocationWindow$;
(function (AllocationWindow$) {
    /** @deprecated use `AllocationWindow$inboundSchema` instead. */
    AllocationWindow$.inboundSchema = AllocationWindow$inboundSchema;
    /** @deprecated use `AllocationWindow$outboundSchema` instead. */
    AllocationWindow$.outboundSchema = AllocationWindow$outboundSchema;
})(AllocationWindow$ || (AllocationWindow$ = {}));
export function allocationWindowToJSON(allocationWindow) {
    return JSON.stringify(AllocationWindow$outboundSchema.parse(allocationWindow));
}
export function allocationWindowFromJSON(jsonString) {
    return safeParse(jsonString, (x) => AllocationWindow$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AllocationWindow' from JSON`);
}
/** @internal */
export const AllocationWindowInput$inboundSchema = z.object({
    uuid: z.string().optional(),
    active: AllocationWindowActive$inboundSchema.default(1),
    name: z.string().optional(),
    start_time: z.number().int().optional(),
    end_time: z.number().int().optional(),
    sort_priority: z.number().int().optional(),
}).transform((v) => {
    return remap$(v, {
        "start_time": "startTime",
        "end_time": "endTime",
        "sort_priority": "sortPriority",
    });
});
/** @internal */
export const AllocationWindowInput$outboundSchema = z.object({
    uuid: z.string().optional(),
    active: AllocationWindowActive$outboundSchema.default(1),
    name: z.string().optional(),
    startTime: z.number().int().optional(),
    endTime: z.number().int().optional(),
    sortPriority: z.number().int().optional(),
}).transform((v) => {
    return remap$(v, {
        startTime: "start_time",
        endTime: "end_time",
        sortPriority: "sort_priority",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AllocationWindowInput$;
(function (AllocationWindowInput$) {
    /** @deprecated use `AllocationWindowInput$inboundSchema` instead. */
    AllocationWindowInput$.inboundSchema = AllocationWindowInput$inboundSchema;
    /** @deprecated use `AllocationWindowInput$outboundSchema` instead. */
    AllocationWindowInput$.outboundSchema = AllocationWindowInput$outboundSchema;
})(AllocationWindowInput$ || (AllocationWindowInput$ = {}));
export function allocationWindowInputToJSON(allocationWindowInput) {
    return JSON.stringify(AllocationWindowInput$outboundSchema.parse(allocationWindowInput));
}
export function allocationWindowInputFromJSON(jsonString) {
    return safeParse(jsonString, (x) => AllocationWindowInput$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AllocationWindowInput' from JSON`);
}
//# sourceMappingURL=allocationwindow.js.map