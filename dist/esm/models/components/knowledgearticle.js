/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
/**
 * Record active/deleted flag.
 *
 * @remarks
 *
 * Valid values are [0,1]
 */
export const KnowledgeArticleActive = {
    Zero: 0,
    One: 1,
};
export const ObjectName = {
    JobMixed: "Job",
    JobLower: "job",
};
/** @internal */
export const KnowledgeArticleActive$inboundSchema = z.nativeEnum(KnowledgeArticleActive);
/** @internal */
export const KnowledgeArticleActive$outboundSchema = KnowledgeArticleActive$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var KnowledgeArticleActive$;
(function (KnowledgeArticleActive$) {
    /** @deprecated use `KnowledgeArticleActive$inboundSchema` instead. */
    KnowledgeArticleActive$.inboundSchema = KnowledgeArticleActive$inboundSchema;
    /** @deprecated use `KnowledgeArticleActive$outboundSchema` instead. */
    KnowledgeArticleActive$.outboundSchema = KnowledgeArticleActive$outboundSchema;
})(KnowledgeArticleActive$ || (KnowledgeArticleActive$ = {}));
/** @internal */
export const ObjectName$inboundSchema = z
    .nativeEnum(ObjectName);
/** @internal */
export const ObjectName$outboundSchema = ObjectName$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ObjectName$;
(function (ObjectName$) {
    /** @deprecated use `ObjectName$inboundSchema` instead. */
    ObjectName$.inboundSchema = ObjectName$inboundSchema;
    /** @deprecated use `ObjectName$outboundSchema` instead. */
    ObjectName$.outboundSchema = ObjectName$outboundSchema;
})(ObjectName$ || (ObjectName$ = {}));
/** @internal */
export const Relationship$inboundSchema = z.object({
    object_name: ObjectName$inboundSchema,
    object_uuid: z.string(),
    object_description: z.string().optional(),
    create_date: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "object_name": "objectName",
        "object_uuid": "objectUuid",
        "object_description": "objectDescription",
        "create_date": "createDate",
    });
});
/** @internal */
export const Relationship$outboundSchema = z.object({
    objectName: ObjectName$outboundSchema,
    objectUuid: z.string(),
    objectDescription: z.string().optional(),
    createDate: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        objectName: "object_name",
        objectUuid: "object_uuid",
        objectDescription: "object_description",
        createDate: "create_date",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Relationship$;
(function (Relationship$) {
    /** @deprecated use `Relationship$inboundSchema` instead. */
    Relationship$.inboundSchema = Relationship$inboundSchema;
    /** @deprecated use `Relationship$outboundSchema` instead. */
    Relationship$.outboundSchema = Relationship$outboundSchema;
})(Relationship$ || (Relationship$ = {}));
export function relationshipToJSON(relationship) {
    return JSON.stringify(Relationship$outboundSchema.parse(relationship));
}
export function relationshipFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Relationship$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Relationship' from JSON`);
}
/** @internal */
export const KnowledgeArticle$inboundSchema = z.object({
    uuid: z.string().optional(),
    active: KnowledgeArticleActive$inboundSchema.default(1),
    edit_date: z.string().optional(),
    name: z.string(),
    content: z.string().optional(),
    article_type: z.string().optional(),
    tags: z.string().optional(),
    relationships: z.array(z.lazy(() => Relationship$inboundSchema)).optional(),
}).transform((v) => {
    return remap$(v, {
        "edit_date": "editDate",
        "article_type": "articleType",
    });
});
/** @internal */
export const KnowledgeArticle$outboundSchema = z.object({
    uuid: z.string().optional(),
    active: KnowledgeArticleActive$outboundSchema.default(1),
    editDate: z.string().optional(),
    name: z.string(),
    content: z.string().optional(),
    articleType: z.string().optional(),
    tags: z.string().optional(),
    relationships: z.array(z.lazy(() => Relationship$outboundSchema)).optional(),
}).transform((v) => {
    return remap$(v, {
        editDate: "edit_date",
        articleType: "article_type",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var KnowledgeArticle$;
(function (KnowledgeArticle$) {
    /** @deprecated use `KnowledgeArticle$inboundSchema` instead. */
    KnowledgeArticle$.inboundSchema = KnowledgeArticle$inboundSchema;
    /** @deprecated use `KnowledgeArticle$outboundSchema` instead. */
    KnowledgeArticle$.outboundSchema = KnowledgeArticle$outboundSchema;
})(KnowledgeArticle$ || (KnowledgeArticle$ = {}));
export function knowledgeArticleToJSON(knowledgeArticle) {
    return JSON.stringify(KnowledgeArticle$outboundSchema.parse(knowledgeArticle));
}
export function knowledgeArticleFromJSON(jsonString) {
    return safeParse(jsonString, (x) => KnowledgeArticle$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'KnowledgeArticle' from JSON`);
}
/** @internal */
export const KnowledgeArticleInput$inboundSchema = z.object({
    uuid: z.string().optional(),
    active: KnowledgeArticleActive$inboundSchema.default(1),
    name: z.string(),
    content: z.string().optional(),
    article_type: z.string().optional(),
    tags: z.string().optional(),
    relationships: z.array(z.lazy(() => Relationship$inboundSchema)).optional(),
}).transform((v) => {
    return remap$(v, {
        "article_type": "articleType",
    });
});
/** @internal */
export const KnowledgeArticleInput$outboundSchema = z.object({
    uuid: z.string().optional(),
    active: KnowledgeArticleActive$outboundSchema.default(1),
    name: z.string(),
    content: z.string().optional(),
    articleType: z.string().optional(),
    tags: z.string().optional(),
    relationships: z.array(z.lazy(() => Relationship$outboundSchema)).optional(),
}).transform((v) => {
    return remap$(v, {
        articleType: "article_type",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var KnowledgeArticleInput$;
(function (KnowledgeArticleInput$) {
    /** @deprecated use `KnowledgeArticleInput$inboundSchema` instead. */
    KnowledgeArticleInput$.inboundSchema = KnowledgeArticleInput$inboundSchema;
    /** @deprecated use `KnowledgeArticleInput$outboundSchema` instead. */
    KnowledgeArticleInput$.outboundSchema = KnowledgeArticleInput$outboundSchema;
})(KnowledgeArticleInput$ || (KnowledgeArticleInput$ = {}));
export function knowledgeArticleInputToJSON(knowledgeArticleInput) {
    return JSON.stringify(KnowledgeArticleInput$outboundSchema.parse(knowledgeArticleInput));
}
export function knowledgeArticleInputFromJSON(jsonString) {
    return safeParse(jsonString, (x) => KnowledgeArticleInput$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'KnowledgeArticleInput' from JSON`);
}
//# sourceMappingURL=knowledgearticle.js.map