/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
/**
 * Record active/deleted flag.
 *
 * @remarks
 *
 * Valid values are [0,1]
 */
export const JobMaterialActive = {
    Zero: 0,
    One: 1,
};
/** @internal */
export const JobMaterialActive$inboundSchema = z.nativeEnum(JobMaterialActive);
/** @internal */
export const JobMaterialActive$outboundSchema = JobMaterialActive$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var JobMaterialActive$;
(function (JobMaterialActive$) {
    /** @deprecated use `JobMaterialActive$inboundSchema` instead. */
    JobMaterialActive$.inboundSchema = JobMaterialActive$inboundSchema;
    /** @deprecated use `JobMaterialActive$outboundSchema` instead. */
    JobMaterialActive$.outboundSchema = JobMaterialActive$outboundSchema;
})(JobMaterialActive$ || (JobMaterialActive$ = {}));
/** @internal */
export const JobMaterial$inboundSchema = z.object({
    uuid: z.string().optional(),
    active: JobMaterialActive$inboundSchema.default(1),
    edit_date: z.string().optional(),
    job_uuid: z.string().optional(),
    material_uuid: z.string().optional(),
    name: z.string().optional(),
    quantity: z.string(),
    price: z.string().optional(),
    displayed_amount: z.string().optional(),
    displayed_amount_is_tax_inclusive: z.string().optional(),
    tax_rate_uuid: z.string().optional(),
    sort_order: z.string().optional(),
    cost: z.string().optional(),
    displayed_cost: z.string().optional(),
    job_material_bundle_uuid: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "edit_date": "editDate",
        "job_uuid": "jobUuid",
        "material_uuid": "materialUuid",
        "displayed_amount": "displayedAmount",
        "displayed_amount_is_tax_inclusive": "displayedAmountIsTaxInclusive",
        "tax_rate_uuid": "taxRateUuid",
        "sort_order": "sortOrder",
        "displayed_cost": "displayedCost",
        "job_material_bundle_uuid": "jobMaterialBundleUuid",
    });
});
/** @internal */
export const JobMaterial$outboundSchema = z.object({
    uuid: z.string().optional(),
    active: JobMaterialActive$outboundSchema.default(1),
    editDate: z.string().optional(),
    jobUuid: z.string().optional(),
    materialUuid: z.string().optional(),
    name: z.string().optional(),
    quantity: z.string(),
    price: z.string().optional(),
    displayedAmount: z.string().optional(),
    displayedAmountIsTaxInclusive: z.string().optional(),
    taxRateUuid: z.string().optional(),
    sortOrder: z.string().optional(),
    cost: z.string().optional(),
    displayedCost: z.string().optional(),
    jobMaterialBundleUuid: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        editDate: "edit_date",
        jobUuid: "job_uuid",
        materialUuid: "material_uuid",
        displayedAmount: "displayed_amount",
        displayedAmountIsTaxInclusive: "displayed_amount_is_tax_inclusive",
        taxRateUuid: "tax_rate_uuid",
        sortOrder: "sort_order",
        displayedCost: "displayed_cost",
        jobMaterialBundleUuid: "job_material_bundle_uuid",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var JobMaterial$;
(function (JobMaterial$) {
    /** @deprecated use `JobMaterial$inboundSchema` instead. */
    JobMaterial$.inboundSchema = JobMaterial$inboundSchema;
    /** @deprecated use `JobMaterial$outboundSchema` instead. */
    JobMaterial$.outboundSchema = JobMaterial$outboundSchema;
})(JobMaterial$ || (JobMaterial$ = {}));
export function jobMaterialToJSON(jobMaterial) {
    return JSON.stringify(JobMaterial$outboundSchema.parse(jobMaterial));
}
export function jobMaterialFromJSON(jsonString) {
    return safeParse(jsonString, (x) => JobMaterial$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'JobMaterial' from JSON`);
}
/** @internal */
export const JobMaterialInput$inboundSchema = z.object({
    uuid: z.string().optional(),
    active: JobMaterialActive$inboundSchema.default(1),
    job_uuid: z.string().optional(),
    material_uuid: z.string().optional(),
    name: z.string().optional(),
    quantity: z.string(),
    price: z.string().optional(),
    displayed_amount: z.string().optional(),
    displayed_amount_is_tax_inclusive: z.string().optional(),
    tax_rate_uuid: z.string().optional(),
    sort_order: z.string().optional(),
    cost: z.string().optional(),
    displayed_cost: z.string().optional(),
    job_material_bundle_uuid: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "job_uuid": "jobUuid",
        "material_uuid": "materialUuid",
        "displayed_amount": "displayedAmount",
        "displayed_amount_is_tax_inclusive": "displayedAmountIsTaxInclusive",
        "tax_rate_uuid": "taxRateUuid",
        "sort_order": "sortOrder",
        "displayed_cost": "displayedCost",
        "job_material_bundle_uuid": "jobMaterialBundleUuid",
    });
});
/** @internal */
export const JobMaterialInput$outboundSchema = z.object({
    uuid: z.string().optional(),
    active: JobMaterialActive$outboundSchema.default(1),
    jobUuid: z.string().optional(),
    materialUuid: z.string().optional(),
    name: z.string().optional(),
    quantity: z.string(),
    price: z.string().optional(),
    displayedAmount: z.string().optional(),
    displayedAmountIsTaxInclusive: z.string().optional(),
    taxRateUuid: z.string().optional(),
    sortOrder: z.string().optional(),
    cost: z.string().optional(),
    displayedCost: z.string().optional(),
    jobMaterialBundleUuid: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        jobUuid: "job_uuid",
        materialUuid: "material_uuid",
        displayedAmount: "displayed_amount",
        displayedAmountIsTaxInclusive: "displayed_amount_is_tax_inclusive",
        taxRateUuid: "tax_rate_uuid",
        sortOrder: "sort_order",
        displayedCost: "displayed_cost",
        jobMaterialBundleUuid: "job_material_bundle_uuid",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var JobMaterialInput$;
(function (JobMaterialInput$) {
    /** @deprecated use `JobMaterialInput$inboundSchema` instead. */
    JobMaterialInput$.inboundSchema = JobMaterialInput$inboundSchema;
    /** @deprecated use `JobMaterialInput$outboundSchema` instead. */
    JobMaterialInput$.outboundSchema = JobMaterialInput$outboundSchema;
})(JobMaterialInput$ || (JobMaterialInput$ = {}));
export function jobMaterialInputToJSON(jobMaterialInput) {
    return JSON.stringify(JobMaterialInput$outboundSchema.parse(jobMaterialInput));
}
export function jobMaterialInputFromJSON(jsonString) {
    return safeParse(jsonString, (x) => JobMaterialInput$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'JobMaterialInput' from JSON`);
}
//# sourceMappingURL=jobmaterial.js.map