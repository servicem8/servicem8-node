/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
/**
 * Record active/deleted flag.
 *
 * @remarks
 *
 * Valid values are [0,1]
 */
export const AssetActive = {
    Zero: 0,
    One: 1,
};
/** @internal */
export const AssetActive$inboundSchema = z
    .nativeEnum(AssetActive);
/** @internal */
export const AssetActive$outboundSchema = AssetActive$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AssetActive$;
(function (AssetActive$) {
    /** @deprecated use `AssetActive$inboundSchema` instead. */
    AssetActive$.inboundSchema = AssetActive$inboundSchema;
    /** @deprecated use `AssetActive$outboundSchema` instead. */
    AssetActive$.outboundSchema = AssetActive$outboundSchema;
})(AssetActive$ || (AssetActive$ = {}));
/** @internal */
export const FieldDatum$inboundSchema = z.object({
    uuid: z.string(),
    fieldType: z.string(),
    fieldName: z.string(),
    fieldValue: z.string(),
    sortOrder: z.number(),
});
/** @internal */
export const FieldDatum$outboundSchema = z.object({
    uuid: z.string(),
    fieldType: z.string(),
    fieldName: z.string(),
    fieldValue: z.string(),
    sortOrder: z.number(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var FieldDatum$;
(function (FieldDatum$) {
    /** @deprecated use `FieldDatum$inboundSchema` instead. */
    FieldDatum$.inboundSchema = FieldDatum$inboundSchema;
    /** @deprecated use `FieldDatum$outboundSchema` instead. */
    FieldDatum$.outboundSchema = FieldDatum$outboundSchema;
})(FieldDatum$ || (FieldDatum$ = {}));
export function fieldDatumToJSON(fieldDatum) {
    return JSON.stringify(FieldDatum$outboundSchema.parse(fieldDatum));
}
export function fieldDatumFromJSON(jsonString) {
    return safeParse(jsonString, (x) => FieldDatum$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'FieldDatum' from JSON`);
}
/** @internal */
export const Asset$inboundSchema = z
    .object({
    uuid: z.string().optional(),
    active: AssetActive$inboundSchema.default(1),
    edit_date: z.string().optional(),
    company_uuid: z.string().optional(),
    asset_code: z.string().optional(),
    asset_type_uuid: z.string().optional(),
    name: z.string(),
    lat: z.number().optional(),
    lng: z.number().optional(),
    geo_timestamp: z.string().optional(),
    altitude: z.number().optional(),
    field_data: z.array(z.lazy(() => FieldDatum$inboundSchema)).optional(),
}).transform((v) => {
    return remap$(v, {
        "edit_date": "editDate",
        "company_uuid": "companyUuid",
        "asset_code": "assetCode",
        "asset_type_uuid": "assetTypeUuid",
        "geo_timestamp": "geoTimestamp",
        "field_data": "fieldData",
    });
});
/** @internal */
export const Asset$outboundSchema = z.object({
    uuid: z.string().optional(),
    active: AssetActive$outboundSchema.default(1),
    editDate: z.string().optional(),
    companyUuid: z.string().optional(),
    assetCode: z.string().optional(),
    assetTypeUuid: z.string().optional(),
    name: z.string(),
    lat: z.number().optional(),
    lng: z.number().optional(),
    geoTimestamp: z.string().optional(),
    altitude: z.number().optional(),
    fieldData: z.array(z.lazy(() => FieldDatum$outboundSchema)).optional(),
}).transform((v) => {
    return remap$(v, {
        editDate: "edit_date",
        companyUuid: "company_uuid",
        assetCode: "asset_code",
        assetTypeUuid: "asset_type_uuid",
        geoTimestamp: "geo_timestamp",
        fieldData: "field_data",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Asset$;
(function (Asset$) {
    /** @deprecated use `Asset$inboundSchema` instead. */
    Asset$.inboundSchema = Asset$inboundSchema;
    /** @deprecated use `Asset$outboundSchema` instead. */
    Asset$.outboundSchema = Asset$outboundSchema;
})(Asset$ || (Asset$ = {}));
export function assetToJSON(asset) {
    return JSON.stringify(Asset$outboundSchema.parse(asset));
}
export function assetFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Asset$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Asset' from JSON`);
}
/** @internal */
export const AssetInput$inboundSchema = z.object({
    uuid: z.string().optional(),
    active: AssetActive$inboundSchema.default(1),
    company_uuid: z.string().optional(),
    asset_code: z.string().optional(),
    asset_type_uuid: z.string().optional(),
    name: z.string(),
    lat: z.number().optional(),
    lng: z.number().optional(),
    geo_timestamp: z.string().optional(),
    altitude: z.number().optional(),
    field_data: z.array(z.lazy(() => FieldDatum$inboundSchema)).optional(),
}).transform((v) => {
    return remap$(v, {
        "company_uuid": "companyUuid",
        "asset_code": "assetCode",
        "asset_type_uuid": "assetTypeUuid",
        "geo_timestamp": "geoTimestamp",
        "field_data": "fieldData",
    });
});
/** @internal */
export const AssetInput$outboundSchema = z.object({
    uuid: z.string().optional(),
    active: AssetActive$outboundSchema.default(1),
    companyUuid: z.string().optional(),
    assetCode: z.string().optional(),
    assetTypeUuid: z.string().optional(),
    name: z.string(),
    lat: z.number().optional(),
    lng: z.number().optional(),
    geoTimestamp: z.string().optional(),
    altitude: z.number().optional(),
    fieldData: z.array(z.lazy(() => FieldDatum$outboundSchema)).optional(),
}).transform((v) => {
    return remap$(v, {
        companyUuid: "company_uuid",
        assetCode: "asset_code",
        assetTypeUuid: "asset_type_uuid",
        geoTimestamp: "geo_timestamp",
        fieldData: "field_data",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AssetInput$;
(function (AssetInput$) {
    /** @deprecated use `AssetInput$inboundSchema` instead. */
    AssetInput$.inboundSchema = AssetInput$inboundSchema;
    /** @deprecated use `AssetInput$outboundSchema` instead. */
    AssetInput$.outboundSchema = AssetInput$outboundSchema;
})(AssetInput$ || (AssetInput$ = {}));
export function assetInputToJSON(assetInput) {
    return JSON.stringify(AssetInput$outboundSchema.parse(assetInput));
}
export function assetInputFromJSON(jsonString) {
    return safeParse(jsonString, (x) => AssetInput$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AssetInput' from JSON`);
}
//# sourceMappingURL=asset.js.map