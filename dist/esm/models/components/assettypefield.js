/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
/**
 * Record active/deleted flag.
 *
 * @remarks
 *
 * Valid values are [0,1]
 */
export const AssetTypeFieldActive = {
    Zero: 0,
    One: 1,
};
export const AssetTypeFieldFieldType = {
    Text: "Text",
    Number: "Number",
    Date: "Date",
    MultipleChoice: "Multiple Choice",
};
/** @internal */
export const AssetTypeFieldActive$inboundSchema = z.nativeEnum(AssetTypeFieldActive);
/** @internal */
export const AssetTypeFieldActive$outboundSchema = AssetTypeFieldActive$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AssetTypeFieldActive$;
(function (AssetTypeFieldActive$) {
    /** @deprecated use `AssetTypeFieldActive$inboundSchema` instead. */
    AssetTypeFieldActive$.inboundSchema = AssetTypeFieldActive$inboundSchema;
    /** @deprecated use `AssetTypeFieldActive$outboundSchema` instead. */
    AssetTypeFieldActive$.outboundSchema = AssetTypeFieldActive$outboundSchema;
})(AssetTypeFieldActive$ || (AssetTypeFieldActive$ = {}));
/** @internal */
export const AssetTypeFieldFieldType$inboundSchema = z.nativeEnum(AssetTypeFieldFieldType);
/** @internal */
export const AssetTypeFieldFieldType$outboundSchema = AssetTypeFieldFieldType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AssetTypeFieldFieldType$;
(function (AssetTypeFieldFieldType$) {
    /** @deprecated use `AssetTypeFieldFieldType$inboundSchema` instead. */
    AssetTypeFieldFieldType$.inboundSchema = AssetTypeFieldFieldType$inboundSchema;
    /** @deprecated use `AssetTypeFieldFieldType$outboundSchema` instead. */
    AssetTypeFieldFieldType$.outboundSchema = AssetTypeFieldFieldType$outboundSchema;
})(AssetTypeFieldFieldType$ || (AssetTypeFieldFieldType$ = {}));
/** @internal */
export const FieldData$inboundSchema = z.object({
    fieldType: AssetTypeFieldFieldType$inboundSchema,
    mandatory: z.boolean(),
    choices: z.array(z.string()).optional(),
});
/** @internal */
export const FieldData$outboundSchema = z.object({
    fieldType: AssetTypeFieldFieldType$outboundSchema,
    mandatory: z.boolean(),
    choices: z.array(z.string()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var FieldData$;
(function (FieldData$) {
    /** @deprecated use `FieldData$inboundSchema` instead. */
    FieldData$.inboundSchema = FieldData$inboundSchema;
    /** @deprecated use `FieldData$outboundSchema` instead. */
    FieldData$.outboundSchema = FieldData$outboundSchema;
})(FieldData$ || (FieldData$ = {}));
export function fieldDataToJSON(fieldData) {
    return JSON.stringify(FieldData$outboundSchema.parse(fieldData));
}
export function fieldDataFromJSON(jsonString) {
    return safeParse(jsonString, (x) => FieldData$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'FieldData' from JSON`);
}
/** @internal */
export const AssetTypeField$inboundSchema = z.object({
    uuid: z.string().optional(),
    active: AssetTypeFieldActive$inboundSchema.default(1),
    edit_date: z.string().optional(),
    asset_type_uuid: z.string().optional(),
    name: z.string(),
    field_data: z.lazy(() => FieldData$inboundSchema).optional(),
    sort_order: z.number().int().optional(),
}).transform((v) => {
    return remap$(v, {
        "edit_date": "editDate",
        "asset_type_uuid": "assetTypeUuid",
        "field_data": "fieldData",
        "sort_order": "sortOrder",
    });
});
/** @internal */
export const AssetTypeField$outboundSchema = z.object({
    uuid: z.string().optional(),
    active: AssetTypeFieldActive$outboundSchema.default(1),
    editDate: z.string().optional(),
    assetTypeUuid: z.string().optional(),
    name: z.string(),
    fieldData: z.lazy(() => FieldData$outboundSchema).optional(),
    sortOrder: z.number().int().optional(),
}).transform((v) => {
    return remap$(v, {
        editDate: "edit_date",
        assetTypeUuid: "asset_type_uuid",
        fieldData: "field_data",
        sortOrder: "sort_order",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AssetTypeField$;
(function (AssetTypeField$) {
    /** @deprecated use `AssetTypeField$inboundSchema` instead. */
    AssetTypeField$.inboundSchema = AssetTypeField$inboundSchema;
    /** @deprecated use `AssetTypeField$outboundSchema` instead. */
    AssetTypeField$.outboundSchema = AssetTypeField$outboundSchema;
})(AssetTypeField$ || (AssetTypeField$ = {}));
export function assetTypeFieldToJSON(assetTypeField) {
    return JSON.stringify(AssetTypeField$outboundSchema.parse(assetTypeField));
}
export function assetTypeFieldFromJSON(jsonString) {
    return safeParse(jsonString, (x) => AssetTypeField$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AssetTypeField' from JSON`);
}
/** @internal */
export const AssetTypeFieldInput$inboundSchema = z.object({
    uuid: z.string().optional(),
    active: AssetTypeFieldActive$inboundSchema.default(1),
    asset_type_uuid: z.string().optional(),
    name: z.string(),
    field_data: z.lazy(() => FieldData$inboundSchema).optional(),
    sort_order: z.number().int().optional(),
}).transform((v) => {
    return remap$(v, {
        "asset_type_uuid": "assetTypeUuid",
        "field_data": "fieldData",
        "sort_order": "sortOrder",
    });
});
/** @internal */
export const AssetTypeFieldInput$outboundSchema = z.object({
    uuid: z.string().optional(),
    active: AssetTypeFieldActive$outboundSchema.default(1),
    assetTypeUuid: z.string().optional(),
    name: z.string(),
    fieldData: z.lazy(() => FieldData$outboundSchema).optional(),
    sortOrder: z.number().int().optional(),
}).transform((v) => {
    return remap$(v, {
        assetTypeUuid: "asset_type_uuid",
        fieldData: "field_data",
        sortOrder: "sort_order",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AssetTypeFieldInput$;
(function (AssetTypeFieldInput$) {
    /** @deprecated use `AssetTypeFieldInput$inboundSchema` instead. */
    AssetTypeFieldInput$.inboundSchema = AssetTypeFieldInput$inboundSchema;
    /** @deprecated use `AssetTypeFieldInput$outboundSchema` instead. */
    AssetTypeFieldInput$.outboundSchema = AssetTypeFieldInput$outboundSchema;
})(AssetTypeFieldInput$ || (AssetTypeFieldInput$ = {}));
export function assetTypeFieldInputToJSON(assetTypeFieldInput) {
    return JSON.stringify(AssetTypeFieldInput$outboundSchema.parse(assetTypeFieldInput));
}
export function assetTypeFieldInputFromJSON(jsonString) {
    return safeParse(jsonString, (x) => AssetTypeFieldInput$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AssetTypeFieldInput' from JSON`);
}
//# sourceMappingURL=assettypefield.js.map