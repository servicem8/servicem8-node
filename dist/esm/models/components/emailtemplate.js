/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
/**
 * Record active/deleted flag.
 *
 * @remarks
 *
 * Valid values are [0,1]
 */
export const EmailTemplateActive = {
    Zero: 0,
    One: 1,
};
/** @internal */
export const EmailTemplateActive$inboundSchema = z.nativeEnum(EmailTemplateActive);
/** @internal */
export const EmailTemplateActive$outboundSchema = EmailTemplateActive$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EmailTemplateActive$;
(function (EmailTemplateActive$) {
    /** @deprecated use `EmailTemplateActive$inboundSchema` instead. */
    EmailTemplateActive$.inboundSchema = EmailTemplateActive$inboundSchema;
    /** @deprecated use `EmailTemplateActive$outboundSchema` instead. */
    EmailTemplateActive$.outboundSchema = EmailTemplateActive$outboundSchema;
})(EmailTemplateActive$ || (EmailTemplateActive$ = {}));
/** @internal */
export const EmailTemplate$inboundSchema = z.object({
    uuid: z.string().optional(),
    active: EmailTemplateActive$inboundSchema.default(1),
    edit_date: z.string().optional(),
    name: z.string(),
    subject: z.string().optional(),
    message: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "edit_date": "editDate",
    });
});
/** @internal */
export const EmailTemplate$outboundSchema = z.object({
    uuid: z.string().optional(),
    active: EmailTemplateActive$outboundSchema.default(1),
    editDate: z.string().optional(),
    name: z.string(),
    subject: z.string().optional(),
    message: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        editDate: "edit_date",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EmailTemplate$;
(function (EmailTemplate$) {
    /** @deprecated use `EmailTemplate$inboundSchema` instead. */
    EmailTemplate$.inboundSchema = EmailTemplate$inboundSchema;
    /** @deprecated use `EmailTemplate$outboundSchema` instead. */
    EmailTemplate$.outboundSchema = EmailTemplate$outboundSchema;
})(EmailTemplate$ || (EmailTemplate$ = {}));
export function emailTemplateToJSON(emailTemplate) {
    return JSON.stringify(EmailTemplate$outboundSchema.parse(emailTemplate));
}
export function emailTemplateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EmailTemplate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EmailTemplate' from JSON`);
}
/** @internal */
export const EmailTemplateInput$inboundSchema = z.object({
    uuid: z.string().optional(),
    active: EmailTemplateActive$inboundSchema.default(1),
    name: z.string(),
    subject: z.string().optional(),
    message: z.string().optional(),
});
/** @internal */
export const EmailTemplateInput$outboundSchema = z.object({
    uuid: z.string().optional(),
    active: EmailTemplateActive$outboundSchema.default(1),
    name: z.string(),
    subject: z.string().optional(),
    message: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EmailTemplateInput$;
(function (EmailTemplateInput$) {
    /** @deprecated use `EmailTemplateInput$inboundSchema` instead. */
    EmailTemplateInput$.inboundSchema = EmailTemplateInput$inboundSchema;
    /** @deprecated use `EmailTemplateInput$outboundSchema` instead. */
    EmailTemplateInput$.outboundSchema = EmailTemplateInput$outboundSchema;
})(EmailTemplateInput$ || (EmailTemplateInput$ = {}));
export function emailTemplateInputToJSON(emailTemplateInput) {
    return JSON.stringify(EmailTemplateInput$outboundSchema.parse(emailTemplateInput));
}
export function emailTemplateInputFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EmailTemplateInput$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EmailTemplateInput' from JSON`);
}
//# sourceMappingURL=emailtemplate.js.map