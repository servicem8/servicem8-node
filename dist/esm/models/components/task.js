/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
/**
 * Record active/deleted flag.
 *
 * @remarks
 *
 * Valid values are [0,1]
 */
export const TaskActive = {
    Zero: 0,
    One: 1,
};
/** @internal */
export const TaskActive$inboundSchema = z
    .nativeEnum(TaskActive);
/** @internal */
export const TaskActive$outboundSchema = TaskActive$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TaskActive$;
(function (TaskActive$) {
    /** @deprecated use `TaskActive$inboundSchema` instead. */
    TaskActive$.inboundSchema = TaskActive$inboundSchema;
    /** @deprecated use `TaskActive$outboundSchema` instead. */
    TaskActive$.outboundSchema = TaskActive$outboundSchema;
})(TaskActive$ || (TaskActive$ = {}));
/** @internal */
export const Task$inboundSchema = z
    .object({
    uuid: z.string().optional(),
    active: TaskActive$inboundSchema.default(1),
    edit_date: z.string().optional(),
    due_date: z.string().optional(),
    task_details: z.string().optional(),
    name: z.string(),
    related_object: z.string().optional(),
    related_object_uuid: z.string().optional(),
    task_complete: z.string().optional(),
    completed_timestamp: z.string().optional(),
    completed_by_staff_uuid: z.string().optional(),
    assigned_to_staff_uuid: z.string().optional(),
    lng: z.number().optional(),
    lat: z.number().optional(),
    created_by_staff_uuid: z.string().optional(),
    create_date: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "edit_date": "editDate",
        "due_date": "dueDate",
        "task_details": "taskDetails",
        "related_object": "relatedObject",
        "related_object_uuid": "relatedObjectUuid",
        "task_complete": "taskComplete",
        "completed_timestamp": "completedTimestamp",
        "completed_by_staff_uuid": "completedByStaffUuid",
        "assigned_to_staff_uuid": "assignedToStaffUuid",
        "created_by_staff_uuid": "createdByStaffUuid",
        "create_date": "createDate",
    });
});
/** @internal */
export const Task$outboundSchema = z.object({
    uuid: z.string().optional(),
    active: TaskActive$outboundSchema.default(1),
    editDate: z.string().optional(),
    dueDate: z.string().optional(),
    taskDetails: z.string().optional(),
    name: z.string(),
    relatedObject: z.string().optional(),
    relatedObjectUuid: z.string().optional(),
    taskComplete: z.string().optional(),
    completedTimestamp: z.string().optional(),
    completedByStaffUuid: z.string().optional(),
    assignedToStaffUuid: z.string().optional(),
    lng: z.number().optional(),
    lat: z.number().optional(),
    createdByStaffUuid: z.string().optional(),
    createDate: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        editDate: "edit_date",
        dueDate: "due_date",
        taskDetails: "task_details",
        relatedObject: "related_object",
        relatedObjectUuid: "related_object_uuid",
        taskComplete: "task_complete",
        completedTimestamp: "completed_timestamp",
        completedByStaffUuid: "completed_by_staff_uuid",
        assignedToStaffUuid: "assigned_to_staff_uuid",
        createdByStaffUuid: "created_by_staff_uuid",
        createDate: "create_date",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Task$;
(function (Task$) {
    /** @deprecated use `Task$inboundSchema` instead. */
    Task$.inboundSchema = Task$inboundSchema;
    /** @deprecated use `Task$outboundSchema` instead. */
    Task$.outboundSchema = Task$outboundSchema;
})(Task$ || (Task$ = {}));
export function taskToJSON(task) {
    return JSON.stringify(Task$outboundSchema.parse(task));
}
export function taskFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Task$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Task' from JSON`);
}
/** @internal */
export const TaskInput$inboundSchema = z.object({
    uuid: z.string().optional(),
    active: TaskActive$inboundSchema.default(1),
    due_date: z.string().optional(),
    task_details: z.string().optional(),
    name: z.string(),
    related_object: z.string().optional(),
    related_object_uuid: z.string().optional(),
    task_complete: z.string().optional(),
    completed_timestamp: z.string().optional(),
    completed_by_staff_uuid: z.string().optional(),
    assigned_to_staff_uuid: z.string().optional(),
    lng: z.number().optional(),
    lat: z.number().optional(),
    created_by_staff_uuid: z.string().optional(),
    create_date: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "due_date": "dueDate",
        "task_details": "taskDetails",
        "related_object": "relatedObject",
        "related_object_uuid": "relatedObjectUuid",
        "task_complete": "taskComplete",
        "completed_timestamp": "completedTimestamp",
        "completed_by_staff_uuid": "completedByStaffUuid",
        "assigned_to_staff_uuid": "assignedToStaffUuid",
        "created_by_staff_uuid": "createdByStaffUuid",
        "create_date": "createDate",
    });
});
/** @internal */
export const TaskInput$outboundSchema = z.object({
    uuid: z.string().optional(),
    active: TaskActive$outboundSchema.default(1),
    dueDate: z.string().optional(),
    taskDetails: z.string().optional(),
    name: z.string(),
    relatedObject: z.string().optional(),
    relatedObjectUuid: z.string().optional(),
    taskComplete: z.string().optional(),
    completedTimestamp: z.string().optional(),
    completedByStaffUuid: z.string().optional(),
    assignedToStaffUuid: z.string().optional(),
    lng: z.number().optional(),
    lat: z.number().optional(),
    createdByStaffUuid: z.string().optional(),
    createDate: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        dueDate: "due_date",
        taskDetails: "task_details",
        relatedObject: "related_object",
        relatedObjectUuid: "related_object_uuid",
        taskComplete: "task_complete",
        completedTimestamp: "completed_timestamp",
        completedByStaffUuid: "completed_by_staff_uuid",
        assignedToStaffUuid: "assigned_to_staff_uuid",
        createdByStaffUuid: "created_by_staff_uuid",
        createDate: "create_date",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TaskInput$;
(function (TaskInput$) {
    /** @deprecated use `TaskInput$inboundSchema` instead. */
    TaskInput$.inboundSchema = TaskInput$inboundSchema;
    /** @deprecated use `TaskInput$outboundSchema` instead. */
    TaskInput$.outboundSchema = TaskInput$outboundSchema;
})(TaskInput$ || (TaskInput$ = {}));
export function taskInputToJSON(taskInput) {
    return JSON.stringify(TaskInput$outboundSchema.parse(taskInput));
}
export function taskInputFromJSON(jsonString) {
    return safeParse(jsonString, (x) => TaskInput$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'TaskInput' from JSON`);
}
//# sourceMappingURL=task.js.map