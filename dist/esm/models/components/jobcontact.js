/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
/**
 * Record active/deleted flag.
 *
 * @remarks
 *
 * Valid values are [0,1]
 */
export const JobContactActive = {
    Zero: 0,
    One: 1,
};
/** @internal */
export const JobContactActive$inboundSchema = z.nativeEnum(JobContactActive);
/** @internal */
export const JobContactActive$outboundSchema = JobContactActive$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var JobContactActive$;
(function (JobContactActive$) {
    /** @deprecated use `JobContactActive$inboundSchema` instead. */
    JobContactActive$.inboundSchema = JobContactActive$inboundSchema;
    /** @deprecated use `JobContactActive$outboundSchema` instead. */
    JobContactActive$.outboundSchema = JobContactActive$outboundSchema;
})(JobContactActive$ || (JobContactActive$ = {}));
/** @internal */
export const JobContact$inboundSchema = z.object({
    uuid: z.string().optional(),
    active: JobContactActive$inboundSchema.default(1),
    edit_date: z.string().optional(),
    job_uuid: z.string().optional(),
    first: z.string().optional(),
    last: z.string().optional(),
    phone: z.string().optional(),
    mobile: z.string().optional(),
    email: z.string().optional(),
    type: z.string().optional(),
    is_primary_contact: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "edit_date": "editDate",
        "job_uuid": "jobUuid",
        "is_primary_contact": "isPrimaryContact",
    });
});
/** @internal */
export const JobContact$outboundSchema = z.object({
    uuid: z.string().optional(),
    active: JobContactActive$outboundSchema.default(1),
    editDate: z.string().optional(),
    jobUuid: z.string().optional(),
    first: z.string().optional(),
    last: z.string().optional(),
    phone: z.string().optional(),
    mobile: z.string().optional(),
    email: z.string().optional(),
    type: z.string().optional(),
    isPrimaryContact: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        editDate: "edit_date",
        jobUuid: "job_uuid",
        isPrimaryContact: "is_primary_contact",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var JobContact$;
(function (JobContact$) {
    /** @deprecated use `JobContact$inboundSchema` instead. */
    JobContact$.inboundSchema = JobContact$inboundSchema;
    /** @deprecated use `JobContact$outboundSchema` instead. */
    JobContact$.outboundSchema = JobContact$outboundSchema;
})(JobContact$ || (JobContact$ = {}));
export function jobContactToJSON(jobContact) {
    return JSON.stringify(JobContact$outboundSchema.parse(jobContact));
}
export function jobContactFromJSON(jsonString) {
    return safeParse(jsonString, (x) => JobContact$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'JobContact' from JSON`);
}
/** @internal */
export const JobContactInput$inboundSchema = z.object({
    uuid: z.string().optional(),
    active: JobContactActive$inboundSchema.default(1),
    job_uuid: z.string().optional(),
    first: z.string().optional(),
    last: z.string().optional(),
    phone: z.string().optional(),
    mobile: z.string().optional(),
    email: z.string().optional(),
    type: z.string().optional(),
    is_primary_contact: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "job_uuid": "jobUuid",
        "is_primary_contact": "isPrimaryContact",
    });
});
/** @internal */
export const JobContactInput$outboundSchema = z.object({
    uuid: z.string().optional(),
    active: JobContactActive$outboundSchema.default(1),
    jobUuid: z.string().optional(),
    first: z.string().optional(),
    last: z.string().optional(),
    phone: z.string().optional(),
    mobile: z.string().optional(),
    email: z.string().optional(),
    type: z.string().optional(),
    isPrimaryContact: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        jobUuid: "job_uuid",
        isPrimaryContact: "is_primary_contact",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var JobContactInput$;
(function (JobContactInput$) {
    /** @deprecated use `JobContactInput$inboundSchema` instead. */
    JobContactInput$.inboundSchema = JobContactInput$inboundSchema;
    /** @deprecated use `JobContactInput$outboundSchema` instead. */
    JobContactInput$.outboundSchema = JobContactInput$outboundSchema;
})(JobContactInput$ || (JobContactInput$ = {}));
export function jobContactInputToJSON(jobContactInput) {
    return JSON.stringify(JobContactInput$outboundSchema.parse(jobContactInput));
}
export function jobContactInputFromJSON(jsonString) {
    return safeParse(jsonString, (x) => JobContactInput$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'JobContactInput' from JSON`);
}
//# sourceMappingURL=jobcontact.js.map