/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
/**
 * Record active/deleted flag.
 *
 * @remarks
 *
 * Valid values are [0,1]
 */
export const JobPaymentActive = {
    Zero: 0,
    One: 1,
};
/**
 * (Read-only).
 *
 * @remarks
 *
 * Valid values are [0,1]
 */
export const IsDeposit = {
    Zero: 0,
    One: 1,
};
/** @internal */
export const JobPaymentActive$inboundSchema = z.nativeEnum(JobPaymentActive);
/** @internal */
export const JobPaymentActive$outboundSchema = JobPaymentActive$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var JobPaymentActive$;
(function (JobPaymentActive$) {
    /** @deprecated use `JobPaymentActive$inboundSchema` instead. */
    JobPaymentActive$.inboundSchema = JobPaymentActive$inboundSchema;
    /** @deprecated use `JobPaymentActive$outboundSchema` instead. */
    JobPaymentActive$.outboundSchema = JobPaymentActive$outboundSchema;
})(JobPaymentActive$ || (JobPaymentActive$ = {}));
/** @internal */
export const IsDeposit$inboundSchema = z
    .nativeEnum(IsDeposit);
/** @internal */
export const IsDeposit$outboundSchema = IsDeposit$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var IsDeposit$;
(function (IsDeposit$) {
    /** @deprecated use `IsDeposit$inboundSchema` instead. */
    IsDeposit$.inboundSchema = IsDeposit$inboundSchema;
    /** @deprecated use `IsDeposit$outboundSchema` instead. */
    IsDeposit$.outboundSchema = IsDeposit$outboundSchema;
})(IsDeposit$ || (IsDeposit$ = {}));
/** @internal */
export const JobPayment$inboundSchema = z.object({
    uuid: z.string().optional(),
    active: JobPaymentActive$inboundSchema.default(1),
    edit_date: z.string().optional(),
    job_uuid: z.string().optional(),
    actioned_by_uuid: z.string().optional(),
    timestamp: z.string().optional(),
    amount: z.string().optional(),
    method: z.string().optional(),
    note: z.string().optional(),
    attachment_uuid: z.string().optional(),
    is_deposit: IsDeposit$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "edit_date": "editDate",
        "job_uuid": "jobUuid",
        "actioned_by_uuid": "actionedByUuid",
        "attachment_uuid": "attachmentUuid",
        "is_deposit": "isDeposit",
    });
});
/** @internal */
export const JobPayment$outboundSchema = z.object({
    uuid: z.string().optional(),
    active: JobPaymentActive$outboundSchema.default(1),
    editDate: z.string().optional(),
    jobUuid: z.string().optional(),
    actionedByUuid: z.string().optional(),
    timestamp: z.string().optional(),
    amount: z.string().optional(),
    method: z.string().optional(),
    note: z.string().optional(),
    attachmentUuid: z.string().optional(),
    isDeposit: IsDeposit$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        editDate: "edit_date",
        jobUuid: "job_uuid",
        actionedByUuid: "actioned_by_uuid",
        attachmentUuid: "attachment_uuid",
        isDeposit: "is_deposit",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var JobPayment$;
(function (JobPayment$) {
    /** @deprecated use `JobPayment$inboundSchema` instead. */
    JobPayment$.inboundSchema = JobPayment$inboundSchema;
    /** @deprecated use `JobPayment$outboundSchema` instead. */
    JobPayment$.outboundSchema = JobPayment$outboundSchema;
})(JobPayment$ || (JobPayment$ = {}));
export function jobPaymentToJSON(jobPayment) {
    return JSON.stringify(JobPayment$outboundSchema.parse(jobPayment));
}
export function jobPaymentFromJSON(jsonString) {
    return safeParse(jsonString, (x) => JobPayment$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'JobPayment' from JSON`);
}
/** @internal */
export const JobPaymentInput$inboundSchema = z.object({
    uuid: z.string().optional(),
    active: JobPaymentActive$inboundSchema.default(1),
    job_uuid: z.string().optional(),
    actioned_by_uuid: z.string().optional(),
    timestamp: z.string().optional(),
    amount: z.string().optional(),
    method: z.string().optional(),
    note: z.string().optional(),
    attachment_uuid: z.string().optional(),
    is_deposit: IsDeposit$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "job_uuid": "jobUuid",
        "actioned_by_uuid": "actionedByUuid",
        "attachment_uuid": "attachmentUuid",
        "is_deposit": "isDeposit",
    });
});
/** @internal */
export const JobPaymentInput$outboundSchema = z.object({
    uuid: z.string().optional(),
    active: JobPaymentActive$outboundSchema.default(1),
    jobUuid: z.string().optional(),
    actionedByUuid: z.string().optional(),
    timestamp: z.string().optional(),
    amount: z.string().optional(),
    method: z.string().optional(),
    note: z.string().optional(),
    attachmentUuid: z.string().optional(),
    isDeposit: IsDeposit$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        jobUuid: "job_uuid",
        actionedByUuid: "actioned_by_uuid",
        attachmentUuid: "attachment_uuid",
        isDeposit: "is_deposit",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var JobPaymentInput$;
(function (JobPaymentInput$) {
    /** @deprecated use `JobPaymentInput$inboundSchema` instead. */
    JobPaymentInput$.inboundSchema = JobPaymentInput$inboundSchema;
    /** @deprecated use `JobPaymentInput$outboundSchema` instead. */
    JobPaymentInput$.outboundSchema = JobPaymentInput$outboundSchema;
})(JobPaymentInput$ || (JobPaymentInput$ = {}));
export function jobPaymentInputToJSON(jobPaymentInput) {
    return JSON.stringify(JobPaymentInput$outboundSchema.parse(jobPaymentInput));
}
export function jobPaymentInputFromJSON(jsonString) {
    return safeParse(jsonString, (x) => JobPaymentInput$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'JobPaymentInput' from JSON`);
}
//# sourceMappingURL=jobpayment.js.map