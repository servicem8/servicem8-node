/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
/**
 * Record active/deleted flag.
 *
 * @remarks
 *
 * Valid values are [0,1]
 */
export const StaffActive = {
    Zero: 0,
    One: 1,
};
/**
 * @remarks
 *
 * Valid values are [0,1]
 */
export const HideFromSchedule = {
    Zero: 0,
    One: 1,
};
/** @internal */
export const StaffActive$inboundSchema = z
    .nativeEnum(StaffActive);
/** @internal */
export const StaffActive$outboundSchema = StaffActive$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var StaffActive$;
(function (StaffActive$) {
    /** @deprecated use `StaffActive$inboundSchema` instead. */
    StaffActive$.inboundSchema = StaffActive$inboundSchema;
    /** @deprecated use `StaffActive$outboundSchema` instead. */
    StaffActive$.outboundSchema = StaffActive$outboundSchema;
})(StaffActive$ || (StaffActive$ = {}));
/** @internal */
export const HideFromSchedule$inboundSchema = z.nativeEnum(HideFromSchedule);
/** @internal */
export const HideFromSchedule$outboundSchema = HideFromSchedule$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var HideFromSchedule$;
(function (HideFromSchedule$) {
    /** @deprecated use `HideFromSchedule$inboundSchema` instead. */
    HideFromSchedule$.inboundSchema = HideFromSchedule$inboundSchema;
    /** @deprecated use `HideFromSchedule$outboundSchema` instead. */
    HideFromSchedule$.outboundSchema = HideFromSchedule$outboundSchema;
})(HideFromSchedule$ || (HideFromSchedule$ = {}));
/** @internal */
export const Staff$inboundSchema = z
    .object({
    uuid: z.string().optional(),
    active: StaffActive$inboundSchema.default(1),
    edit_date: z.string().optional(),
    first: z.string(),
    last: z.string(),
    email: z.string(),
    mobile: z.string().optional(),
    lng: z.number().optional(),
    lat: z.number().optional(),
    geo_timestamp: z.string().optional(),
    job_title: z.string().optional(),
    navigating_to_job_uuid: z.string().optional(),
    navigating_timestamp: z.string().optional(),
    navigating_expiry_timestamp: z.string().optional(),
    color: z.string().optional(),
    custom_icon_url: z.string().optional(),
    status_message: z.string().optional(),
    status_message_timestamp: z.string().optional(),
    can_receive_push_notification: z.string().optional(),
    hide_from_schedule: HideFromSchedule$inboundSchema.optional(),
    security_role_uuid: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "edit_date": "editDate",
        "geo_timestamp": "geoTimestamp",
        "job_title": "jobTitle",
        "navigating_to_job_uuid": "navigatingToJobUuid",
        "navigating_timestamp": "navigatingTimestamp",
        "navigating_expiry_timestamp": "navigatingExpiryTimestamp",
        "custom_icon_url": "customIconUrl",
        "status_message": "statusMessage",
        "status_message_timestamp": "statusMessageTimestamp",
        "can_receive_push_notification": "canReceivePushNotification",
        "hide_from_schedule": "hideFromSchedule",
        "security_role_uuid": "securityRoleUuid",
    });
});
/** @internal */
export const Staff$outboundSchema = z.object({
    uuid: z.string().optional(),
    active: StaffActive$outboundSchema.default(1),
    editDate: z.string().optional(),
    first: z.string(),
    last: z.string(),
    email: z.string(),
    mobile: z.string().optional(),
    lng: z.number().optional(),
    lat: z.number().optional(),
    geoTimestamp: z.string().optional(),
    jobTitle: z.string().optional(),
    navigatingToJobUuid: z.string().optional(),
    navigatingTimestamp: z.string().optional(),
    navigatingExpiryTimestamp: z.string().optional(),
    color: z.string().optional(),
    customIconUrl: z.string().optional(),
    statusMessage: z.string().optional(),
    statusMessageTimestamp: z.string().optional(),
    canReceivePushNotification: z.string().optional(),
    hideFromSchedule: HideFromSchedule$outboundSchema.optional(),
    securityRoleUuid: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        editDate: "edit_date",
        geoTimestamp: "geo_timestamp",
        jobTitle: "job_title",
        navigatingToJobUuid: "navigating_to_job_uuid",
        navigatingTimestamp: "navigating_timestamp",
        navigatingExpiryTimestamp: "navigating_expiry_timestamp",
        customIconUrl: "custom_icon_url",
        statusMessage: "status_message",
        statusMessageTimestamp: "status_message_timestamp",
        canReceivePushNotification: "can_receive_push_notification",
        hideFromSchedule: "hide_from_schedule",
        securityRoleUuid: "security_role_uuid",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Staff$;
(function (Staff$) {
    /** @deprecated use `Staff$inboundSchema` instead. */
    Staff$.inboundSchema = Staff$inboundSchema;
    /** @deprecated use `Staff$outboundSchema` instead. */
    Staff$.outboundSchema = Staff$outboundSchema;
})(Staff$ || (Staff$ = {}));
export function staffToJSON(staff) {
    return JSON.stringify(Staff$outboundSchema.parse(staff));
}
export function staffFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Staff$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Staff' from JSON`);
}
/** @internal */
export const StaffInput$inboundSchema = z.object({
    uuid: z.string().optional(),
    active: StaffActive$inboundSchema.default(1),
    first: z.string(),
    last: z.string(),
    email: z.string(),
    mobile: z.string().optional(),
    lng: z.number().optional(),
    lat: z.number().optional(),
    geo_timestamp: z.string().optional(),
    job_title: z.string().optional(),
    navigating_to_job_uuid: z.string().optional(),
    navigating_timestamp: z.string().optional(),
    navigating_expiry_timestamp: z.string().optional(),
    color: z.string().optional(),
    custom_icon_url: z.string().optional(),
    status_message: z.string().optional(),
    status_message_timestamp: z.string().optional(),
    can_receive_push_notification: z.string().optional(),
    hide_from_schedule: HideFromSchedule$inboundSchema.optional(),
    security_role_uuid: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "geo_timestamp": "geoTimestamp",
        "job_title": "jobTitle",
        "navigating_to_job_uuid": "navigatingToJobUuid",
        "navigating_timestamp": "navigatingTimestamp",
        "navigating_expiry_timestamp": "navigatingExpiryTimestamp",
        "custom_icon_url": "customIconUrl",
        "status_message": "statusMessage",
        "status_message_timestamp": "statusMessageTimestamp",
        "can_receive_push_notification": "canReceivePushNotification",
        "hide_from_schedule": "hideFromSchedule",
        "security_role_uuid": "securityRoleUuid",
    });
});
/** @internal */
export const StaffInput$outboundSchema = z.object({
    uuid: z.string().optional(),
    active: StaffActive$outboundSchema.default(1),
    first: z.string(),
    last: z.string(),
    email: z.string(),
    mobile: z.string().optional(),
    lng: z.number().optional(),
    lat: z.number().optional(),
    geoTimestamp: z.string().optional(),
    jobTitle: z.string().optional(),
    navigatingToJobUuid: z.string().optional(),
    navigatingTimestamp: z.string().optional(),
    navigatingExpiryTimestamp: z.string().optional(),
    color: z.string().optional(),
    customIconUrl: z.string().optional(),
    statusMessage: z.string().optional(),
    statusMessageTimestamp: z.string().optional(),
    canReceivePushNotification: z.string().optional(),
    hideFromSchedule: HideFromSchedule$outboundSchema.optional(),
    securityRoleUuid: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        geoTimestamp: "geo_timestamp",
        jobTitle: "job_title",
        navigatingToJobUuid: "navigating_to_job_uuid",
        navigatingTimestamp: "navigating_timestamp",
        navigatingExpiryTimestamp: "navigating_expiry_timestamp",
        customIconUrl: "custom_icon_url",
        statusMessage: "status_message",
        statusMessageTimestamp: "status_message_timestamp",
        canReceivePushNotification: "can_receive_push_notification",
        hideFromSchedule: "hide_from_schedule",
        securityRoleUuid: "security_role_uuid",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var StaffInput$;
(function (StaffInput$) {
    /** @deprecated use `StaffInput$inboundSchema` instead. */
    StaffInput$.inboundSchema = StaffInput$inboundSchema;
    /** @deprecated use `StaffInput$outboundSchema` instead. */
    StaffInput$.outboundSchema = StaffInput$outboundSchema;
})(StaffInput$ || (StaffInput$ = {}));
export function staffInputToJSON(staffInput) {
    return JSON.stringify(StaffInput$outboundSchema.parse(staffInput));
}
export function staffInputFromJSON(jsonString) {
    return safeParse(jsonString, (x) => StaffInput$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'StaffInput' from JSON`);
}
//# sourceMappingURL=staff.js.map