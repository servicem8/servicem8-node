/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
/**
 * Record active/deleted flag.
 *
 * @remarks
 *
 * Valid values are [0,1]
 */
export const NoteActive = {
    Zero: 0,
    One: 1,
};
/** @internal */
export const NoteActive$inboundSchema = z
    .nativeEnum(NoteActive);
/** @internal */
export const NoteActive$outboundSchema = NoteActive$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var NoteActive$;
(function (NoteActive$) {
    /** @deprecated use `NoteActive$inboundSchema` instead. */
    NoteActive$.inboundSchema = NoteActive$inboundSchema;
    /** @deprecated use `NoteActive$outboundSchema` instead. */
    NoteActive$.outboundSchema = NoteActive$outboundSchema;
})(NoteActive$ || (NoteActive$ = {}));
/** @internal */
export const Note$inboundSchema = z
    .object({
    uuid: z.string().optional(),
    active: NoteActive$inboundSchema.default(1),
    edit_date: z.string().optional(),
    related_object: z.string().optional(),
    related_object_uuid: z.string().optional(),
    note: z.string().optional(),
    action_required: z.string().optional(),
    action_completed_by_staff_uuid: z.string().optional(),
    edit_by_staff_uuid: z.string().optional(),
    create_date: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "edit_date": "editDate",
        "related_object": "relatedObject",
        "related_object_uuid": "relatedObjectUuid",
        "action_required": "actionRequired",
        "action_completed_by_staff_uuid": "actionCompletedByStaffUuid",
        "edit_by_staff_uuid": "editByStaffUuid",
        "create_date": "createDate",
    });
});
/** @internal */
export const Note$outboundSchema = z.object({
    uuid: z.string().optional(),
    active: NoteActive$outboundSchema.default(1),
    editDate: z.string().optional(),
    relatedObject: z.string().optional(),
    relatedObjectUuid: z.string().optional(),
    note: z.string().optional(),
    actionRequired: z.string().optional(),
    actionCompletedByStaffUuid: z.string().optional(),
    editByStaffUuid: z.string().optional(),
    createDate: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        editDate: "edit_date",
        relatedObject: "related_object",
        relatedObjectUuid: "related_object_uuid",
        actionRequired: "action_required",
        actionCompletedByStaffUuid: "action_completed_by_staff_uuid",
        editByStaffUuid: "edit_by_staff_uuid",
        createDate: "create_date",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Note$;
(function (Note$) {
    /** @deprecated use `Note$inboundSchema` instead. */
    Note$.inboundSchema = Note$inboundSchema;
    /** @deprecated use `Note$outboundSchema` instead. */
    Note$.outboundSchema = Note$outboundSchema;
})(Note$ || (Note$ = {}));
export function noteToJSON(note) {
    return JSON.stringify(Note$outboundSchema.parse(note));
}
export function noteFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Note$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Note' from JSON`);
}
/** @internal */
export const NoteInput$inboundSchema = z.object({
    uuid: z.string().optional(),
    active: NoteActive$inboundSchema.default(1),
    related_object: z.string().optional(),
    related_object_uuid: z.string().optional(),
    note: z.string().optional(),
    action_required: z.string().optional(),
    action_completed_by_staff_uuid: z.string().optional(),
    create_date: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "related_object": "relatedObject",
        "related_object_uuid": "relatedObjectUuid",
        "action_required": "actionRequired",
        "action_completed_by_staff_uuid": "actionCompletedByStaffUuid",
        "create_date": "createDate",
    });
});
/** @internal */
export const NoteInput$outboundSchema = z.object({
    uuid: z.string().optional(),
    active: NoteActive$outboundSchema.default(1),
    relatedObject: z.string().optional(),
    relatedObjectUuid: z.string().optional(),
    note: z.string().optional(),
    actionRequired: z.string().optional(),
    actionCompletedByStaffUuid: z.string().optional(),
    createDate: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        relatedObject: "related_object",
        relatedObjectUuid: "related_object_uuid",
        actionRequired: "action_required",
        actionCompletedByStaffUuid: "action_completed_by_staff_uuid",
        createDate: "create_date",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var NoteInput$;
(function (NoteInput$) {
    /** @deprecated use `NoteInput$inboundSchema` instead. */
    NoteInput$.inboundSchema = NoteInput$inboundSchema;
    /** @deprecated use `NoteInput$outboundSchema` instead. */
    NoteInput$.outboundSchema = NoteInput$outboundSchema;
})(NoteInput$ || (NoteInput$ = {}));
export function noteInputToJSON(noteInput) {
    return JSON.stringify(NoteInput$outboundSchema.parse(noteInput));
}
export function noteInputFromJSON(jsonString) {
    return safeParse(jsonString, (x) => NoteInput$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'NoteInput' from JSON`);
}
//# sourceMappingURL=note.js.map