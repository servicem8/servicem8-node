/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
/**
 * Record active/deleted flag.
 *
 * @remarks
 *
 * Valid values are [0,1]
 */
export const MaterialActive = {
    Zero: 0,
    One: 1,
};
/**
 * @remarks
 *
 * Valid values are [0,1]
 */
export const PriceIncludesTaxes = {
    Zero: 0,
    One: 1,
};
/**
 * @remarks
 *
 * Valid values are [0,1]
 */
export const ItemIsInventoried = {
    Zero: 0,
    One: 1,
};
/** @internal */
export const MaterialActive$inboundSchema = z.nativeEnum(MaterialActive);
/** @internal */
export const MaterialActive$outboundSchema = MaterialActive$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var MaterialActive$;
(function (MaterialActive$) {
    /** @deprecated use `MaterialActive$inboundSchema` instead. */
    MaterialActive$.inboundSchema = MaterialActive$inboundSchema;
    /** @deprecated use `MaterialActive$outboundSchema` instead. */
    MaterialActive$.outboundSchema = MaterialActive$outboundSchema;
})(MaterialActive$ || (MaterialActive$ = {}));
/** @internal */
export const PriceIncludesTaxes$inboundSchema = z.nativeEnum(PriceIncludesTaxes);
/** @internal */
export const PriceIncludesTaxes$outboundSchema = PriceIncludesTaxes$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PriceIncludesTaxes$;
(function (PriceIncludesTaxes$) {
    /** @deprecated use `PriceIncludesTaxes$inboundSchema` instead. */
    PriceIncludesTaxes$.inboundSchema = PriceIncludesTaxes$inboundSchema;
    /** @deprecated use `PriceIncludesTaxes$outboundSchema` instead. */
    PriceIncludesTaxes$.outboundSchema = PriceIncludesTaxes$outboundSchema;
})(PriceIncludesTaxes$ || (PriceIncludesTaxes$ = {}));
/** @internal */
export const ItemIsInventoried$inboundSchema = z.nativeEnum(ItemIsInventoried);
/** @internal */
export const ItemIsInventoried$outboundSchema = ItemIsInventoried$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ItemIsInventoried$;
(function (ItemIsInventoried$) {
    /** @deprecated use `ItemIsInventoried$inboundSchema` instead. */
    ItemIsInventoried$.inboundSchema = ItemIsInventoried$inboundSchema;
    /** @deprecated use `ItemIsInventoried$outboundSchema` instead. */
    ItemIsInventoried$.outboundSchema = ItemIsInventoried$outboundSchema;
})(ItemIsInventoried$ || (ItemIsInventoried$ = {}));
/** @internal */
export const Material$inboundSchema = z.object({
    uuid: z.string().optional(),
    active: MaterialActive$inboundSchema.default(1),
    edit_date: z.string().optional(),
    name: z.string(),
    item_number: z.string().optional(),
    price: z.string().optional(),
    cost: z.string().optional(),
    item_description: z.string().optional(),
    quantity_in_stock: z.number().optional(),
    price_includes_taxes: PriceIncludesTaxes$inboundSchema.optional(),
    use_description_for_invoicing: z.string().optional(),
    tax_rate_uuid: z.string().optional(),
    barcode: z.string().optional(),
    item_is_inventoried: ItemIsInventoried$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "edit_date": "editDate",
        "item_number": "itemNumber",
        "item_description": "itemDescription",
        "quantity_in_stock": "quantityInStock",
        "price_includes_taxes": "priceIncludesTaxes",
        "use_description_for_invoicing": "useDescriptionForInvoicing",
        "tax_rate_uuid": "taxRateUuid",
        "item_is_inventoried": "itemIsInventoried",
    });
});
/** @internal */
export const Material$outboundSchema = z.object({
    uuid: z.string().optional(),
    active: MaterialActive$outboundSchema.default(1),
    editDate: z.string().optional(),
    name: z.string(),
    itemNumber: z.string().optional(),
    price: z.string().optional(),
    cost: z.string().optional(),
    itemDescription: z.string().optional(),
    quantityInStock: z.number().optional(),
    priceIncludesTaxes: PriceIncludesTaxes$outboundSchema.optional(),
    useDescriptionForInvoicing: z.string().optional(),
    taxRateUuid: z.string().optional(),
    barcode: z.string().optional(),
    itemIsInventoried: ItemIsInventoried$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        editDate: "edit_date",
        itemNumber: "item_number",
        itemDescription: "item_description",
        quantityInStock: "quantity_in_stock",
        priceIncludesTaxes: "price_includes_taxes",
        useDescriptionForInvoicing: "use_description_for_invoicing",
        taxRateUuid: "tax_rate_uuid",
        itemIsInventoried: "item_is_inventoried",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Material$;
(function (Material$) {
    /** @deprecated use `Material$inboundSchema` instead. */
    Material$.inboundSchema = Material$inboundSchema;
    /** @deprecated use `Material$outboundSchema` instead. */
    Material$.outboundSchema = Material$outboundSchema;
})(Material$ || (Material$ = {}));
export function materialToJSON(material) {
    return JSON.stringify(Material$outboundSchema.parse(material));
}
export function materialFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Material$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Material' from JSON`);
}
/** @internal */
export const MaterialInput$inboundSchema = z.object({
    uuid: z.string().optional(),
    active: MaterialActive$inboundSchema.default(1),
    name: z.string(),
    item_number: z.string().optional(),
    price: z.string().optional(),
    cost: z.string().optional(),
    item_description: z.string().optional(),
    quantity_in_stock: z.number().optional(),
    price_includes_taxes: PriceIncludesTaxes$inboundSchema.optional(),
    use_description_for_invoicing: z.string().optional(),
    tax_rate_uuid: z.string().optional(),
    barcode: z.string().optional(),
    item_is_inventoried: ItemIsInventoried$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "item_number": "itemNumber",
        "item_description": "itemDescription",
        "quantity_in_stock": "quantityInStock",
        "price_includes_taxes": "priceIncludesTaxes",
        "use_description_for_invoicing": "useDescriptionForInvoicing",
        "tax_rate_uuid": "taxRateUuid",
        "item_is_inventoried": "itemIsInventoried",
    });
});
/** @internal */
export const MaterialInput$outboundSchema = z.object({
    uuid: z.string().optional(),
    active: MaterialActive$outboundSchema.default(1),
    name: z.string(),
    itemNumber: z.string().optional(),
    price: z.string().optional(),
    cost: z.string().optional(),
    itemDescription: z.string().optional(),
    quantityInStock: z.number().optional(),
    priceIncludesTaxes: PriceIncludesTaxes$outboundSchema.optional(),
    useDescriptionForInvoicing: z.string().optional(),
    taxRateUuid: z.string().optional(),
    barcode: z.string().optional(),
    itemIsInventoried: ItemIsInventoried$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        itemNumber: "item_number",
        itemDescription: "item_description",
        quantityInStock: "quantity_in_stock",
        priceIncludesTaxes: "price_includes_taxes",
        useDescriptionForInvoicing: "use_description_for_invoicing",
        taxRateUuid: "tax_rate_uuid",
        itemIsInventoried: "item_is_inventoried",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var MaterialInput$;
(function (MaterialInput$) {
    /** @deprecated use `MaterialInput$inboundSchema` instead. */
    MaterialInput$.inboundSchema = MaterialInput$inboundSchema;
    /** @deprecated use `MaterialInput$outboundSchema` instead. */
    MaterialInput$.outboundSchema = MaterialInput$outboundSchema;
})(MaterialInput$ || (MaterialInput$ = {}));
export function materialInputToJSON(materialInput) {
    return JSON.stringify(MaterialInput$outboundSchema.parse(materialInput));
}
export function materialInputFromJSON(jsonString) {
    return safeParse(jsonString, (x) => MaterialInput$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'MaterialInput' from JSON`);
}
//# sourceMappingURL=material.js.map