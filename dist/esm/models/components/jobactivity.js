/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
/**
 * Record active/deleted flag.
 *
 * @remarks
 *
 * Valid values are [0,1]
 */
export const JobActivityActive = {
    Zero: 0,
    One: 1,
};
/** @internal */
export const JobActivityActive$inboundSchema = z.nativeEnum(JobActivityActive);
/** @internal */
export const JobActivityActive$outboundSchema = JobActivityActive$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var JobActivityActive$;
(function (JobActivityActive$) {
    /** @deprecated use `JobActivityActive$inboundSchema` instead. */
    JobActivityActive$.inboundSchema = JobActivityActive$inboundSchema;
    /** @deprecated use `JobActivityActive$outboundSchema` instead. */
    JobActivityActive$.outboundSchema = JobActivityActive$outboundSchema;
})(JobActivityActive$ || (JobActivityActive$ = {}));
/** @internal */
export const JobActivity$inboundSchema = z.object({
    uuid: z.string().optional(),
    active: JobActivityActive$inboundSchema.default(1),
    edit_date: z.string().optional(),
    job_uuid: z.string().optional(),
    staff_uuid: z.string().optional(),
    start_date: z.string().optional(),
    end_date: z.string().optional(),
    activity_was_scheduled: z.string().optional(),
    activity_was_recorded: z.string().optional(),
    activity_was_automated: z.string().optional(),
    has_been_opened: z.string().optional(),
    has_been_opened_timestamp: z.string().optional(),
    travel_time_in_seconds: z.string().optional(),
    travel_distance_in_meters: z.string().optional(),
    allocated_by_staff_uuid: z.string().optional(),
    allocated_timestamp: z.string().optional(),
    material_uuid: z.string().optional(),
    edit_by_staff_uuid: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "edit_date": "editDate",
        "job_uuid": "jobUuid",
        "staff_uuid": "staffUuid",
        "start_date": "startDate",
        "end_date": "endDate",
        "activity_was_scheduled": "activityWasScheduled",
        "activity_was_recorded": "activityWasRecorded",
        "activity_was_automated": "activityWasAutomated",
        "has_been_opened": "hasBeenOpened",
        "has_been_opened_timestamp": "hasBeenOpenedTimestamp",
        "travel_time_in_seconds": "travelTimeInSeconds",
        "travel_distance_in_meters": "travelDistanceInMeters",
        "allocated_by_staff_uuid": "allocatedByStaffUuid",
        "allocated_timestamp": "allocatedTimestamp",
        "material_uuid": "materialUuid",
        "edit_by_staff_uuid": "editByStaffUuid",
    });
});
/** @internal */
export const JobActivity$outboundSchema = z.object({
    uuid: z.string().optional(),
    active: JobActivityActive$outboundSchema.default(1),
    editDate: z.string().optional(),
    jobUuid: z.string().optional(),
    staffUuid: z.string().optional(),
    startDate: z.string().optional(),
    endDate: z.string().optional(),
    activityWasScheduled: z.string().optional(),
    activityWasRecorded: z.string().optional(),
    activityWasAutomated: z.string().optional(),
    hasBeenOpened: z.string().optional(),
    hasBeenOpenedTimestamp: z.string().optional(),
    travelTimeInSeconds: z.string().optional(),
    travelDistanceInMeters: z.string().optional(),
    allocatedByStaffUuid: z.string().optional(),
    allocatedTimestamp: z.string().optional(),
    materialUuid: z.string().optional(),
    editByStaffUuid: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        editDate: "edit_date",
        jobUuid: "job_uuid",
        staffUuid: "staff_uuid",
        startDate: "start_date",
        endDate: "end_date",
        activityWasScheduled: "activity_was_scheduled",
        activityWasRecorded: "activity_was_recorded",
        activityWasAutomated: "activity_was_automated",
        hasBeenOpened: "has_been_opened",
        hasBeenOpenedTimestamp: "has_been_opened_timestamp",
        travelTimeInSeconds: "travel_time_in_seconds",
        travelDistanceInMeters: "travel_distance_in_meters",
        allocatedByStaffUuid: "allocated_by_staff_uuid",
        allocatedTimestamp: "allocated_timestamp",
        materialUuid: "material_uuid",
        editByStaffUuid: "edit_by_staff_uuid",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var JobActivity$;
(function (JobActivity$) {
    /** @deprecated use `JobActivity$inboundSchema` instead. */
    JobActivity$.inboundSchema = JobActivity$inboundSchema;
    /** @deprecated use `JobActivity$outboundSchema` instead. */
    JobActivity$.outboundSchema = JobActivity$outboundSchema;
})(JobActivity$ || (JobActivity$ = {}));
export function jobActivityToJSON(jobActivity) {
    return JSON.stringify(JobActivity$outboundSchema.parse(jobActivity));
}
export function jobActivityFromJSON(jsonString) {
    return safeParse(jsonString, (x) => JobActivity$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'JobActivity' from JSON`);
}
/** @internal */
export const JobActivityInput$inboundSchema = z.object({
    uuid: z.string().optional(),
    active: JobActivityActive$inboundSchema.default(1),
    job_uuid: z.string().optional(),
    staff_uuid: z.string().optional(),
    start_date: z.string().optional(),
    end_date: z.string().optional(),
    activity_was_scheduled: z.string().optional(),
    activity_was_recorded: z.string().optional(),
    activity_was_automated: z.string().optional(),
    has_been_opened: z.string().optional(),
    has_been_opened_timestamp: z.string().optional(),
    travel_time_in_seconds: z.string().optional(),
    travel_distance_in_meters: z.string().optional(),
    allocated_by_staff_uuid: z.string().optional(),
    allocated_timestamp: z.string().optional(),
    material_uuid: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "job_uuid": "jobUuid",
        "staff_uuid": "staffUuid",
        "start_date": "startDate",
        "end_date": "endDate",
        "activity_was_scheduled": "activityWasScheduled",
        "activity_was_recorded": "activityWasRecorded",
        "activity_was_automated": "activityWasAutomated",
        "has_been_opened": "hasBeenOpened",
        "has_been_opened_timestamp": "hasBeenOpenedTimestamp",
        "travel_time_in_seconds": "travelTimeInSeconds",
        "travel_distance_in_meters": "travelDistanceInMeters",
        "allocated_by_staff_uuid": "allocatedByStaffUuid",
        "allocated_timestamp": "allocatedTimestamp",
        "material_uuid": "materialUuid",
    });
});
/** @internal */
export const JobActivityInput$outboundSchema = z.object({
    uuid: z.string().optional(),
    active: JobActivityActive$outboundSchema.default(1),
    jobUuid: z.string().optional(),
    staffUuid: z.string().optional(),
    startDate: z.string().optional(),
    endDate: z.string().optional(),
    activityWasScheduled: z.string().optional(),
    activityWasRecorded: z.string().optional(),
    activityWasAutomated: z.string().optional(),
    hasBeenOpened: z.string().optional(),
    hasBeenOpenedTimestamp: z.string().optional(),
    travelTimeInSeconds: z.string().optional(),
    travelDistanceInMeters: z.string().optional(),
    allocatedByStaffUuid: z.string().optional(),
    allocatedTimestamp: z.string().optional(),
    materialUuid: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        jobUuid: "job_uuid",
        staffUuid: "staff_uuid",
        startDate: "start_date",
        endDate: "end_date",
        activityWasScheduled: "activity_was_scheduled",
        activityWasRecorded: "activity_was_recorded",
        activityWasAutomated: "activity_was_automated",
        hasBeenOpened: "has_been_opened",
        hasBeenOpenedTimestamp: "has_been_opened_timestamp",
        travelTimeInSeconds: "travel_time_in_seconds",
        travelDistanceInMeters: "travel_distance_in_meters",
        allocatedByStaffUuid: "allocated_by_staff_uuid",
        allocatedTimestamp: "allocated_timestamp",
        materialUuid: "material_uuid",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var JobActivityInput$;
(function (JobActivityInput$) {
    /** @deprecated use `JobActivityInput$inboundSchema` instead. */
    JobActivityInput$.inboundSchema = JobActivityInput$inboundSchema;
    /** @deprecated use `JobActivityInput$outboundSchema` instead. */
    JobActivityInput$.outboundSchema = JobActivityInput$outboundSchema;
})(JobActivityInput$ || (JobActivityInput$ = {}));
export function jobActivityInputToJSON(jobActivityInput) {
    return JSON.stringify(JobActivityInput$outboundSchema.parse(jobActivityInput));
}
export function jobActivityInputFromJSON(jsonString) {
    return safeParse(jsonString, (x) => JobActivityInput$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'JobActivityInput' from JSON`);
}
//# sourceMappingURL=jobactivity.js.map