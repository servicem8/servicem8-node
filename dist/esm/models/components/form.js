/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
/**
 * Record active/deleted flag.
 *
 * @remarks
 *
 * Valid values are [0,1]
 */
export const FormActive = {
    Zero: 0,
    One: 1,
};
export const FormFieldType = {
    Text: "Text",
};
/** @internal */
export const FormActive$inboundSchema = z
    .nativeEnum(FormActive);
/** @internal */
export const FormActive$outboundSchema = FormActive$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var FormActive$;
(function (FormActive$) {
    /** @deprecated use `FormActive$inboundSchema` instead. */
    FormActive$.inboundSchema = FormActive$inboundSchema;
    /** @deprecated use `FormActive$outboundSchema` instead. */
    FormActive$.outboundSchema = FormActive$outboundSchema;
})(FormActive$ || (FormActive$ = {}));
/** @internal */
export const FormFieldType$inboundSchema = z.nativeEnum(FormFieldType);
/** @internal */
export const FormFieldType$outboundSchema = FormFieldType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var FormFieldType$;
(function (FormFieldType$) {
    /** @deprecated use `FormFieldType$inboundSchema` instead. */
    FormFieldType$.inboundSchema = FormFieldType$inboundSchema;
    /** @deprecated use `FormFieldType$outboundSchema` instead. */
    FormFieldType$.outboundSchema = FormFieldType$outboundSchema;
})(FormFieldType$ || (FormFieldType$ = {}));
/** @internal */
export const TemplateField$inboundSchema = z.object({
    name: z.string(),
    fieldType: FormFieldType$inboundSchema,
    value: z.string(),
    sortOrder: z.number().int(),
});
/** @internal */
export const TemplateField$outboundSchema = z.object({
    name: z.string(),
    fieldType: FormFieldType$outboundSchema,
    value: z.string(),
    sortOrder: z.number().int(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TemplateField$;
(function (TemplateField$) {
    /** @deprecated use `TemplateField$inboundSchema` instead. */
    TemplateField$.inboundSchema = TemplateField$inboundSchema;
    /** @deprecated use `TemplateField$outboundSchema` instead. */
    TemplateField$.outboundSchema = TemplateField$outboundSchema;
})(TemplateField$ || (TemplateField$ = {}));
export function templateFieldToJSON(templateField) {
    return JSON.stringify(TemplateField$outboundSchema.parse(templateField));
}
export function templateFieldFromJSON(jsonString) {
    return safeParse(jsonString, (x) => TemplateField$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'TemplateField' from JSON`);
}
/** @internal */
export const Form$inboundSchema = z
    .object({
    uuid: z.string().optional(),
    active: FormActive$inboundSchema.default(1),
    edit_date: z.string().optional(),
    name: z.string().optional(),
    document_template_uuid: z.string().optional(),
    can_be_used_independently: z.string().optional(),
    badge_mandatory_state: z.string().optional(),
    template_fields: z.array(z.lazy(() => TemplateField$inboundSchema))
        .optional(),
}).transform((v) => {
    return remap$(v, {
        "edit_date": "editDate",
        "document_template_uuid": "documentTemplateUuid",
        "can_be_used_independently": "canBeUsedIndependently",
        "badge_mandatory_state": "badgeMandatoryState",
        "template_fields": "templateFields",
    });
});
/** @internal */
export const Form$outboundSchema = z.object({
    uuid: z.string().optional(),
    active: FormActive$outboundSchema.default(1),
    editDate: z.string().optional(),
    name: z.string().optional(),
    documentTemplateUuid: z.string().optional(),
    canBeUsedIndependently: z.string().optional(),
    badgeMandatoryState: z.string().optional(),
    templateFields: z.array(z.lazy(() => TemplateField$outboundSchema))
        .optional(),
}).transform((v) => {
    return remap$(v, {
        editDate: "edit_date",
        documentTemplateUuid: "document_template_uuid",
        canBeUsedIndependently: "can_be_used_independently",
        badgeMandatoryState: "badge_mandatory_state",
        templateFields: "template_fields",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Form$;
(function (Form$) {
    /** @deprecated use `Form$inboundSchema` instead. */
    Form$.inboundSchema = Form$inboundSchema;
    /** @deprecated use `Form$outboundSchema` instead. */
    Form$.outboundSchema = Form$outboundSchema;
})(Form$ || (Form$ = {}));
export function formToJSON(form) {
    return JSON.stringify(Form$outboundSchema.parse(form));
}
export function formFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Form$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Form' from JSON`);
}
/** @internal */
export const FormInput$inboundSchema = z.object({
    uuid: z.string().optional(),
    active: FormActive$inboundSchema.default(1),
    name: z.string().optional(),
    document_template_uuid: z.string().optional(),
    can_be_used_independently: z.string().optional(),
    badge_mandatory_state: z.string().optional(),
    template_fields: z.array(z.lazy(() => TemplateField$inboundSchema))
        .optional(),
}).transform((v) => {
    return remap$(v, {
        "document_template_uuid": "documentTemplateUuid",
        "can_be_used_independently": "canBeUsedIndependently",
        "badge_mandatory_state": "badgeMandatoryState",
        "template_fields": "templateFields",
    });
});
/** @internal */
export const FormInput$outboundSchema = z.object({
    uuid: z.string().optional(),
    active: FormActive$outboundSchema.default(1),
    name: z.string().optional(),
    documentTemplateUuid: z.string().optional(),
    canBeUsedIndependently: z.string().optional(),
    badgeMandatoryState: z.string().optional(),
    templateFields: z.array(z.lazy(() => TemplateField$outboundSchema))
        .optional(),
}).transform((v) => {
    return remap$(v, {
        documentTemplateUuid: "document_template_uuid",
        canBeUsedIndependently: "can_be_used_independently",
        badgeMandatoryState: "badge_mandatory_state",
        templateFields: "template_fields",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var FormInput$;
(function (FormInput$) {
    /** @deprecated use `FormInput$inboundSchema` instead. */
    FormInput$.inboundSchema = FormInput$inboundSchema;
    /** @deprecated use `FormInput$outboundSchema` instead. */
    FormInput$.outboundSchema = FormInput$outboundSchema;
})(FormInput$ || (FormInput$ = {}));
export function formInputToJSON(formInput) {
    return JSON.stringify(FormInput$outboundSchema.parse(formInput));
}
export function formInputFromJSON(jsonString) {
    return safeParse(jsonString, (x) => FormInput$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'FormInput' from JSON`);
}
//# sourceMappingURL=form.js.map