/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
/**
 * Record active/deleted flag.
 *
 * @remarks
 *
 * Valid values are [0,1]
 */
export const MaterialBundleActive = {
    Zero: 0,
    One: 1,
};
/** @internal */
export const MaterialBundleActive$inboundSchema = z.nativeEnum(MaterialBundleActive);
/** @internal */
export const MaterialBundleActive$outboundSchema = MaterialBundleActive$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var MaterialBundleActive$;
(function (MaterialBundleActive$) {
    /** @deprecated use `MaterialBundleActive$inboundSchema` instead. */
    MaterialBundleActive$.inboundSchema = MaterialBundleActive$inboundSchema;
    /** @deprecated use `MaterialBundleActive$outboundSchema` instead. */
    MaterialBundleActive$.outboundSchema = MaterialBundleActive$outboundSchema;
})(MaterialBundleActive$ || (MaterialBundleActive$ = {}));
/** @internal */
export const MaterialList$inboundSchema = z.object({
    uuid: z.string(),
    quantity: z.number(),
});
/** @internal */
export const MaterialList$outboundSchema = z.object({
    uuid: z.string(),
    quantity: z.number(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var MaterialList$;
(function (MaterialList$) {
    /** @deprecated use `MaterialList$inboundSchema` instead. */
    MaterialList$.inboundSchema = MaterialList$inboundSchema;
    /** @deprecated use `MaterialList$outboundSchema` instead. */
    MaterialList$.outboundSchema = MaterialList$outboundSchema;
})(MaterialList$ || (MaterialList$ = {}));
export function materialListToJSON(materialList) {
    return JSON.stringify(MaterialList$outboundSchema.parse(materialList));
}
export function materialListFromJSON(jsonString) {
    return safeParse(jsonString, (x) => MaterialList$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'MaterialList' from JSON`);
}
/** @internal */
export const MaterialBundle$inboundSchema = z.object({
    uuid: z.string().optional(),
    active: MaterialBundleActive$inboundSchema.default(1),
    edit_date: z.string().optional(),
    item_number: z.string(),
    name: z.string().optional(),
    material_list: z.array(z.lazy(() => MaterialList$inboundSchema)).optional(),
}).transform((v) => {
    return remap$(v, {
        "edit_date": "editDate",
        "item_number": "itemNumber",
        "material_list": "materialList",
    });
});
/** @internal */
export const MaterialBundle$outboundSchema = z.object({
    uuid: z.string().optional(),
    active: MaterialBundleActive$outboundSchema.default(1),
    editDate: z.string().optional(),
    itemNumber: z.string(),
    name: z.string().optional(),
    materialList: z.array(z.lazy(() => MaterialList$outboundSchema)).optional(),
}).transform((v) => {
    return remap$(v, {
        editDate: "edit_date",
        itemNumber: "item_number",
        materialList: "material_list",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var MaterialBundle$;
(function (MaterialBundle$) {
    /** @deprecated use `MaterialBundle$inboundSchema` instead. */
    MaterialBundle$.inboundSchema = MaterialBundle$inboundSchema;
    /** @deprecated use `MaterialBundle$outboundSchema` instead. */
    MaterialBundle$.outboundSchema = MaterialBundle$outboundSchema;
})(MaterialBundle$ || (MaterialBundle$ = {}));
export function materialBundleToJSON(materialBundle) {
    return JSON.stringify(MaterialBundle$outboundSchema.parse(materialBundle));
}
export function materialBundleFromJSON(jsonString) {
    return safeParse(jsonString, (x) => MaterialBundle$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'MaterialBundle' from JSON`);
}
/** @internal */
export const MaterialBundleInput$inboundSchema = z.object({
    uuid: z.string().optional(),
    active: MaterialBundleActive$inboundSchema.default(1),
    item_number: z.string(),
    name: z.string().optional(),
    material_list: z.array(z.lazy(() => MaterialList$inboundSchema)).optional(),
}).transform((v) => {
    return remap$(v, {
        "item_number": "itemNumber",
        "material_list": "materialList",
    });
});
/** @internal */
export const MaterialBundleInput$outboundSchema = z.object({
    uuid: z.string().optional(),
    active: MaterialBundleActive$outboundSchema.default(1),
    itemNumber: z.string(),
    name: z.string().optional(),
    materialList: z.array(z.lazy(() => MaterialList$outboundSchema)).optional(),
}).transform((v) => {
    return remap$(v, {
        itemNumber: "item_number",
        materialList: "material_list",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var MaterialBundleInput$;
(function (MaterialBundleInput$) {
    /** @deprecated use `MaterialBundleInput$inboundSchema` instead. */
    MaterialBundleInput$.inboundSchema = MaterialBundleInput$inboundSchema;
    /** @deprecated use `MaterialBundleInput$outboundSchema` instead. */
    MaterialBundleInput$.outboundSchema = MaterialBundleInput$outboundSchema;
})(MaterialBundleInput$ || (MaterialBundleInput$ = {}));
export function materialBundleInputToJSON(materialBundleInput) {
    return JSON.stringify(MaterialBundleInput$outboundSchema.parse(materialBundleInput));
}
export function materialBundleInputFromJSON(jsonString) {
    return safeParse(jsonString, (x) => MaterialBundleInput$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'MaterialBundleInput' from JSON`);
}
//# sourceMappingURL=materialbundle.js.map