/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
/**
 * Record active/deleted flag.
 *
 * @remarks
 *
 * Valid values are [0,1]
 */
export const QueueActive = {
    Zero: 0,
    One: 1,
};
/**
 * @remarks
 *
 * Valid values are [0,1]
 */
export const RequiresAssignment = {
    Zero: 0,
    One: 1,
};
/** @internal */
export const QueueActive$inboundSchema = z
    .nativeEnum(QueueActive);
/** @internal */
export const QueueActive$outboundSchema = QueueActive$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var QueueActive$;
(function (QueueActive$) {
    /** @deprecated use `QueueActive$inboundSchema` instead. */
    QueueActive$.inboundSchema = QueueActive$inboundSchema;
    /** @deprecated use `QueueActive$outboundSchema` instead. */
    QueueActive$.outboundSchema = QueueActive$outboundSchema;
})(QueueActive$ || (QueueActive$ = {}));
/** @internal */
export const RequiresAssignment$inboundSchema = z.nativeEnum(RequiresAssignment);
/** @internal */
export const RequiresAssignment$outboundSchema = RequiresAssignment$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RequiresAssignment$;
(function (RequiresAssignment$) {
    /** @deprecated use `RequiresAssignment$inboundSchema` instead. */
    RequiresAssignment$.inboundSchema = RequiresAssignment$inboundSchema;
    /** @deprecated use `RequiresAssignment$outboundSchema` instead. */
    RequiresAssignment$.outboundSchema = RequiresAssignment$outboundSchema;
})(RequiresAssignment$ || (RequiresAssignment$ = {}));
/** @internal */
export const Queue$inboundSchema = z
    .object({
    uuid: z.string().optional(),
    active: QueueActive$inboundSchema.default(1),
    edit_date: z.string().optional(),
    name: z.string().optional(),
    default_timeframe: z.number().int().optional(),
    subscribed_staff: z.string().optional(),
    requires_assignment: RequiresAssignment$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "edit_date": "editDate",
        "default_timeframe": "defaultTimeframe",
        "subscribed_staff": "subscribedStaff",
        "requires_assignment": "requiresAssignment",
    });
});
/** @internal */
export const Queue$outboundSchema = z.object({
    uuid: z.string().optional(),
    active: QueueActive$outboundSchema.default(1),
    editDate: z.string().optional(),
    name: z.string().optional(),
    defaultTimeframe: z.number().int().optional(),
    subscribedStaff: z.string().optional(),
    requiresAssignment: RequiresAssignment$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        editDate: "edit_date",
        defaultTimeframe: "default_timeframe",
        subscribedStaff: "subscribed_staff",
        requiresAssignment: "requires_assignment",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Queue$;
(function (Queue$) {
    /** @deprecated use `Queue$inboundSchema` instead. */
    Queue$.inboundSchema = Queue$inboundSchema;
    /** @deprecated use `Queue$outboundSchema` instead. */
    Queue$.outboundSchema = Queue$outboundSchema;
})(Queue$ || (Queue$ = {}));
export function queueToJSON(queue) {
    return JSON.stringify(Queue$outboundSchema.parse(queue));
}
export function queueFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Queue$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Queue' from JSON`);
}
/** @internal */
export const QueueInput$inboundSchema = z.object({
    uuid: z.string().optional(),
    active: QueueActive$inboundSchema.default(1),
    name: z.string().optional(),
    default_timeframe: z.number().int().optional(),
    subscribed_staff: z.string().optional(),
    requires_assignment: RequiresAssignment$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "default_timeframe": "defaultTimeframe",
        "subscribed_staff": "subscribedStaff",
        "requires_assignment": "requiresAssignment",
    });
});
/** @internal */
export const QueueInput$outboundSchema = z.object({
    uuid: z.string().optional(),
    active: QueueActive$outboundSchema.default(1),
    name: z.string().optional(),
    defaultTimeframe: z.number().int().optional(),
    subscribedStaff: z.string().optional(),
    requiresAssignment: RequiresAssignment$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        defaultTimeframe: "default_timeframe",
        subscribedStaff: "subscribed_staff",
        requiresAssignment: "requires_assignment",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var QueueInput$;
(function (QueueInput$) {
    /** @deprecated use `QueueInput$inboundSchema` instead. */
    QueueInput$.inboundSchema = QueueInput$inboundSchema;
    /** @deprecated use `QueueInput$outboundSchema` instead. */
    QueueInput$.outboundSchema = QueueInput$outboundSchema;
})(QueueInput$ || (QueueInput$ = {}));
export function queueInputToJSON(queueInput) {
    return JSON.stringify(QueueInput$outboundSchema.parse(queueInput));
}
export function queueInputFromJSON(jsonString) {
    return safeParse(jsonString, (x) => QueueInput$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'QueueInput' from JSON`);
}
//# sourceMappingURL=queue.js.map