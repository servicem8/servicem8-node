/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
/**
 * Record active/deleted flag.
 *
 * @remarks
 *
 * Valid values are [0,1]
 */
export const SecurityRoleActive = {
    Zero: 0,
    One: 1,
};
/** @internal */
export const SecurityRoleActive$inboundSchema = z.nativeEnum(SecurityRoleActive);
/** @internal */
export const SecurityRoleActive$outboundSchema = SecurityRoleActive$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var SecurityRoleActive$;
(function (SecurityRoleActive$) {
    /** @deprecated use `SecurityRoleActive$inboundSchema` instead. */
    SecurityRoleActive$.inboundSchema = SecurityRoleActive$inboundSchema;
    /** @deprecated use `SecurityRoleActive$outboundSchema` instead. */
    SecurityRoleActive$.outboundSchema = SecurityRoleActive$outboundSchema;
})(SecurityRoleActive$ || (SecurityRoleActive$ = {}));
/** @internal */
export const SecurityRole$inboundSchema = z.object({
    uuid: z.string().optional(),
    active: SecurityRoleActive$inboundSchema.default(1),
    edit_date: z.string().optional(),
    name: z.string(),
    role_description: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "edit_date": "editDate",
        "role_description": "roleDescription",
    });
});
/** @internal */
export const SecurityRole$outboundSchema = z.object({
    uuid: z.string().optional(),
    active: SecurityRoleActive$outboundSchema.default(1),
    editDate: z.string().optional(),
    name: z.string(),
    roleDescription: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        editDate: "edit_date",
        roleDescription: "role_description",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var SecurityRole$;
(function (SecurityRole$) {
    /** @deprecated use `SecurityRole$inboundSchema` instead. */
    SecurityRole$.inboundSchema = SecurityRole$inboundSchema;
    /** @deprecated use `SecurityRole$outboundSchema` instead. */
    SecurityRole$.outboundSchema = SecurityRole$outboundSchema;
})(SecurityRole$ || (SecurityRole$ = {}));
export function securityRoleToJSON(securityRole) {
    return JSON.stringify(SecurityRole$outboundSchema.parse(securityRole));
}
export function securityRoleFromJSON(jsonString) {
    return safeParse(jsonString, (x) => SecurityRole$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'SecurityRole' from JSON`);
}
/** @internal */
export const SecurityRoleInput$inboundSchema = z.object({
    uuid: z.string().optional(),
    active: SecurityRoleActive$inboundSchema.default(1),
    name: z.string(),
    role_description: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "role_description": "roleDescription",
    });
});
/** @internal */
export const SecurityRoleInput$outboundSchema = z.object({
    uuid: z.string().optional(),
    active: SecurityRoleActive$outboundSchema.default(1),
    name: z.string(),
    roleDescription: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        roleDescription: "role_description",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var SecurityRoleInput$;
(function (SecurityRoleInput$) {
    /** @deprecated use `SecurityRoleInput$inboundSchema` instead. */
    SecurityRoleInput$.inboundSchema = SecurityRoleInput$inboundSchema;
    /** @deprecated use `SecurityRoleInput$outboundSchema` instead. */
    SecurityRoleInput$.outboundSchema = SecurityRoleInput$outboundSchema;
})(SecurityRoleInput$ || (SecurityRoleInput$ = {}));
export function securityRoleInputToJSON(securityRoleInput) {
    return JSON.stringify(SecurityRoleInput$outboundSchema.parse(securityRoleInput));
}
export function securityRoleInputFromJSON(jsonString) {
    return safeParse(jsonString, (x) => SecurityRoleInput$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'SecurityRoleInput' from JSON`);
}
//# sourceMappingURL=securityrole.js.map