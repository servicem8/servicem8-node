/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
/**
 * Record active/deleted flag.
 *
 * @remarks
 *
 * Valid values are [0,1]
 */
export const CompanyContactActive = {
    Zero: 0,
    One: 1,
};
/** @internal */
export const CompanyContactActive$inboundSchema = z.nativeEnum(CompanyContactActive);
/** @internal */
export const CompanyContactActive$outboundSchema = CompanyContactActive$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CompanyContactActive$;
(function (CompanyContactActive$) {
    /** @deprecated use `CompanyContactActive$inboundSchema` instead. */
    CompanyContactActive$.inboundSchema = CompanyContactActive$inboundSchema;
    /** @deprecated use `CompanyContactActive$outboundSchema` instead. */
    CompanyContactActive$.outboundSchema = CompanyContactActive$outboundSchema;
})(CompanyContactActive$ || (CompanyContactActive$ = {}));
/** @internal */
export const CompanyContact$inboundSchema = z.object({
    uuid: z.string().optional(),
    active: CompanyContactActive$inboundSchema.default(1),
    edit_date: z.string().optional(),
    company_uuid: z.string().optional(),
    first: z.string().optional(),
    last: z.string().optional(),
    phone: z.string().optional(),
    mobile: z.string().optional(),
    email: z.string().optional(),
    type: z.string().optional(),
    is_primary_contact: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "edit_date": "editDate",
        "company_uuid": "companyUuid",
        "is_primary_contact": "isPrimaryContact",
    });
});
/** @internal */
export const CompanyContact$outboundSchema = z.object({
    uuid: z.string().optional(),
    active: CompanyContactActive$outboundSchema.default(1),
    editDate: z.string().optional(),
    companyUuid: z.string().optional(),
    first: z.string().optional(),
    last: z.string().optional(),
    phone: z.string().optional(),
    mobile: z.string().optional(),
    email: z.string().optional(),
    type: z.string().optional(),
    isPrimaryContact: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        editDate: "edit_date",
        companyUuid: "company_uuid",
        isPrimaryContact: "is_primary_contact",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CompanyContact$;
(function (CompanyContact$) {
    /** @deprecated use `CompanyContact$inboundSchema` instead. */
    CompanyContact$.inboundSchema = CompanyContact$inboundSchema;
    /** @deprecated use `CompanyContact$outboundSchema` instead. */
    CompanyContact$.outboundSchema = CompanyContact$outboundSchema;
})(CompanyContact$ || (CompanyContact$ = {}));
export function companyContactToJSON(companyContact) {
    return JSON.stringify(CompanyContact$outboundSchema.parse(companyContact));
}
export function companyContactFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CompanyContact$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CompanyContact' from JSON`);
}
/** @internal */
export const CompanyContactInput$inboundSchema = z.object({
    uuid: z.string().optional(),
    active: CompanyContactActive$inboundSchema.default(1),
    company_uuid: z.string().optional(),
    first: z.string().optional(),
    last: z.string().optional(),
    phone: z.string().optional(),
    mobile: z.string().optional(),
    email: z.string().optional(),
    type: z.string().optional(),
    is_primary_contact: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "company_uuid": "companyUuid",
        "is_primary_contact": "isPrimaryContact",
    });
});
/** @internal */
export const CompanyContactInput$outboundSchema = z.object({
    uuid: z.string().optional(),
    active: CompanyContactActive$outboundSchema.default(1),
    companyUuid: z.string().optional(),
    first: z.string().optional(),
    last: z.string().optional(),
    phone: z.string().optional(),
    mobile: z.string().optional(),
    email: z.string().optional(),
    type: z.string().optional(),
    isPrimaryContact: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        companyUuid: "company_uuid",
        isPrimaryContact: "is_primary_contact",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CompanyContactInput$;
(function (CompanyContactInput$) {
    /** @deprecated use `CompanyContactInput$inboundSchema` instead. */
    CompanyContactInput$.inboundSchema = CompanyContactInput$inboundSchema;
    /** @deprecated use `CompanyContactInput$outboundSchema` instead. */
    CompanyContactInput$.outboundSchema = CompanyContactInput$outboundSchema;
})(CompanyContactInput$ || (CompanyContactInput$ = {}));
export function companyContactInputToJSON(companyContactInput) {
    return JSON.stringify(CompanyContactInput$outboundSchema.parse(companyContactInput));
}
export function companyContactInputFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CompanyContactInput$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CompanyContactInput' from JSON`);
}
//# sourceMappingURL=companycontact.js.map