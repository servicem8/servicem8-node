/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
/**
 * Record active/deleted flag.
 *
 * @remarks
 *
 * Valid values are [0,1]
 */
export const LocationActive = {
    Zero: 0,
    One: 1,
};
/** @internal */
export const LocationActive$inboundSchema = z.nativeEnum(LocationActive);
/** @internal */
export const LocationActive$outboundSchema = LocationActive$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var LocationActive$;
(function (LocationActive$) {
    /** @deprecated use `LocationActive$inboundSchema` instead. */
    LocationActive$.inboundSchema = LocationActive$inboundSchema;
    /** @deprecated use `LocationActive$outboundSchema` instead. */
    LocationActive$.outboundSchema = LocationActive$outboundSchema;
})(LocationActive$ || (LocationActive$ = {}));
/** @internal */
export const Location$inboundSchema = z.object({
    uuid: z.string().optional(),
    active: LocationActive$inboundSchema.default(1),
    edit_date: z.string().optional(),
    name: z.string(),
    line1: z.string().optional(),
    line2: z.string().optional(),
    line3: z.string().optional(),
    city: z.string().optional(),
    country: z.string().optional(),
    post_code: z.string().optional(),
    phone_1: z.string().optional(),
    state: z.string().optional(),
    lng: z.number().optional(),
    lat: z.number().optional(),
}).transform((v) => {
    return remap$(v, {
        "edit_date": "editDate",
        "post_code": "postCode",
        "phone_1": "phone1",
    });
});
/** @internal */
export const Location$outboundSchema = z.object({
    uuid: z.string().optional(),
    active: LocationActive$outboundSchema.default(1),
    editDate: z.string().optional(),
    name: z.string(),
    line1: z.string().optional(),
    line2: z.string().optional(),
    line3: z.string().optional(),
    city: z.string().optional(),
    country: z.string().optional(),
    postCode: z.string().optional(),
    phone1: z.string().optional(),
    state: z.string().optional(),
    lng: z.number().optional(),
    lat: z.number().optional(),
}).transform((v) => {
    return remap$(v, {
        editDate: "edit_date",
        postCode: "post_code",
        phone1: "phone_1",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Location$;
(function (Location$) {
    /** @deprecated use `Location$inboundSchema` instead. */
    Location$.inboundSchema = Location$inboundSchema;
    /** @deprecated use `Location$outboundSchema` instead. */
    Location$.outboundSchema = Location$outboundSchema;
})(Location$ || (Location$ = {}));
export function locationToJSON(location) {
    return JSON.stringify(Location$outboundSchema.parse(location));
}
export function locationFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Location$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Location' from JSON`);
}
/** @internal */
export const LocationInput$inboundSchema = z.object({
    uuid: z.string().optional(),
    active: LocationActive$inboundSchema.default(1),
    name: z.string(),
    line1: z.string().optional(),
    line2: z.string().optional(),
    line3: z.string().optional(),
    city: z.string().optional(),
    country: z.string().optional(),
    post_code: z.string().optional(),
    phone_1: z.string().optional(),
    state: z.string().optional(),
    lng: z.number().optional(),
    lat: z.number().optional(),
}).transform((v) => {
    return remap$(v, {
        "post_code": "postCode",
        "phone_1": "phone1",
    });
});
/** @internal */
export const LocationInput$outboundSchema = z.object({
    uuid: z.string().optional(),
    active: LocationActive$outboundSchema.default(1),
    name: z.string(),
    line1: z.string().optional(),
    line2: z.string().optional(),
    line3: z.string().optional(),
    city: z.string().optional(),
    country: z.string().optional(),
    postCode: z.string().optional(),
    phone1: z.string().optional(),
    state: z.string().optional(),
    lng: z.number().optional(),
    lat: z.number().optional(),
}).transform((v) => {
    return remap$(v, {
        postCode: "post_code",
        phone1: "phone_1",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var LocationInput$;
(function (LocationInput$) {
    /** @deprecated use `LocationInput$inboundSchema` instead. */
    LocationInput$.inboundSchema = LocationInput$inboundSchema;
    /** @deprecated use `LocationInput$outboundSchema` instead. */
    LocationInput$.outboundSchema = LocationInput$outboundSchema;
})(LocationInput$ || (LocationInput$ = {}));
export function locationInputToJSON(locationInput) {
    return JSON.stringify(LocationInput$outboundSchema.parse(locationInput));
}
export function locationInputFromJSON(jsonString) {
    return safeParse(jsonString, (x) => LocationInput$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'LocationInput' from JSON`);
}
//# sourceMappingURL=location.js.map