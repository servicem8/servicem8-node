/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
/**
 * Record active/deleted flag.
 *
 * @remarks
 *
 * Valid values are [0,1]
 */
export const CompanyActive = {
    Zero: 0,
    One: 1,
};
/** @internal */
export const CompanyActive$inboundSchema = z.nativeEnum(CompanyActive);
/** @internal */
export const CompanyActive$outboundSchema = CompanyActive$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CompanyActive$;
(function (CompanyActive$) {
    /** @deprecated use `CompanyActive$inboundSchema` instead. */
    CompanyActive$.inboundSchema = CompanyActive$inboundSchema;
    /** @deprecated use `CompanyActive$outboundSchema` instead. */
    CompanyActive$.outboundSchema = CompanyActive$outboundSchema;
})(CompanyActive$ || (CompanyActive$ = {}));
/** @internal */
export const Company$inboundSchema = z.object({
    uuid: z.string().optional(),
    active: CompanyActive$inboundSchema.default(1),
    edit_date: z.string().optional(),
    name: z.string(),
    website: z.string().optional(),
    abn_number: z.string().optional(),
    is_individual: z.string().optional(),
    address_street: z.string().optional(),
    address_city: z.string().optional(),
    address_state: z.string().optional(),
    address_postcode: z.string().optional(),
    address_country: z.string().optional(),
    fax_number: z.string().optional(),
    address: z.string().optional(),
    billing_address: z.string().optional(),
    badges: z.string().optional(),
    tax_rate_uuid: z.string().optional(),
    billing_attention: z.string().optional(),
    payment_terms: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "edit_date": "editDate",
        "abn_number": "abnNumber",
        "is_individual": "isIndividual",
        "address_street": "addressStreet",
        "address_city": "addressCity",
        "address_state": "addressState",
        "address_postcode": "addressPostcode",
        "address_country": "addressCountry",
        "fax_number": "faxNumber",
        "billing_address": "billingAddress",
        "tax_rate_uuid": "taxRateUuid",
        "billing_attention": "billingAttention",
        "payment_terms": "paymentTerms",
    });
});
/** @internal */
export const Company$outboundSchema = z.object({
    uuid: z.string().optional(),
    active: CompanyActive$outboundSchema.default(1),
    editDate: z.string().optional(),
    name: z.string(),
    website: z.string().optional(),
    abnNumber: z.string().optional(),
    isIndividual: z.string().optional(),
    addressStreet: z.string().optional(),
    addressCity: z.string().optional(),
    addressState: z.string().optional(),
    addressPostcode: z.string().optional(),
    addressCountry: z.string().optional(),
    faxNumber: z.string().optional(),
    address: z.string().optional(),
    billingAddress: z.string().optional(),
    badges: z.string().optional(),
    taxRateUuid: z.string().optional(),
    billingAttention: z.string().optional(),
    paymentTerms: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        editDate: "edit_date",
        abnNumber: "abn_number",
        isIndividual: "is_individual",
        addressStreet: "address_street",
        addressCity: "address_city",
        addressState: "address_state",
        addressPostcode: "address_postcode",
        addressCountry: "address_country",
        faxNumber: "fax_number",
        billingAddress: "billing_address",
        taxRateUuid: "tax_rate_uuid",
        billingAttention: "billing_attention",
        paymentTerms: "payment_terms",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Company$;
(function (Company$) {
    /** @deprecated use `Company$inboundSchema` instead. */
    Company$.inboundSchema = Company$inboundSchema;
    /** @deprecated use `Company$outboundSchema` instead. */
    Company$.outboundSchema = Company$outboundSchema;
})(Company$ || (Company$ = {}));
export function companyToJSON(company) {
    return JSON.stringify(Company$outboundSchema.parse(company));
}
export function companyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Company$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Company' from JSON`);
}
/** @internal */
export const CompanyInput$inboundSchema = z.object({
    uuid: z.string().optional(),
    active: CompanyActive$inboundSchema.default(1),
    name: z.string(),
    website: z.string().optional(),
    abn_number: z.string().optional(),
    is_individual: z.string().optional(),
    address_street: z.string().optional(),
    address_city: z.string().optional(),
    address_state: z.string().optional(),
    address_postcode: z.string().optional(),
    address_country: z.string().optional(),
    fax_number: z.string().optional(),
    address: z.string().optional(),
    billing_address: z.string().optional(),
    badges: z.string().optional(),
    tax_rate_uuid: z.string().optional(),
    billing_attention: z.string().optional(),
    payment_terms: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "abn_number": "abnNumber",
        "is_individual": "isIndividual",
        "address_street": "addressStreet",
        "address_city": "addressCity",
        "address_state": "addressState",
        "address_postcode": "addressPostcode",
        "address_country": "addressCountry",
        "fax_number": "faxNumber",
        "billing_address": "billingAddress",
        "tax_rate_uuid": "taxRateUuid",
        "billing_attention": "billingAttention",
        "payment_terms": "paymentTerms",
    });
});
/** @internal */
export const CompanyInput$outboundSchema = z.object({
    uuid: z.string().optional(),
    active: CompanyActive$outboundSchema.default(1),
    name: z.string(),
    website: z.string().optional(),
    abnNumber: z.string().optional(),
    isIndividual: z.string().optional(),
    addressStreet: z.string().optional(),
    addressCity: z.string().optional(),
    addressState: z.string().optional(),
    addressPostcode: z.string().optional(),
    addressCountry: z.string().optional(),
    faxNumber: z.string().optional(),
    address: z.string().optional(),
    billingAddress: z.string().optional(),
    badges: z.string().optional(),
    taxRateUuid: z.string().optional(),
    billingAttention: z.string().optional(),
    paymentTerms: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        abnNumber: "abn_number",
        isIndividual: "is_individual",
        addressStreet: "address_street",
        addressCity: "address_city",
        addressState: "address_state",
        addressPostcode: "address_postcode",
        addressCountry: "address_country",
        faxNumber: "fax_number",
        billingAddress: "billing_address",
        taxRateUuid: "tax_rate_uuid",
        billingAttention: "billing_attention",
        paymentTerms: "payment_terms",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CompanyInput$;
(function (CompanyInput$) {
    /** @deprecated use `CompanyInput$inboundSchema` instead. */
    CompanyInput$.inboundSchema = CompanyInput$inboundSchema;
    /** @deprecated use `CompanyInput$outboundSchema` instead. */
    CompanyInput$.outboundSchema = CompanyInput$outboundSchema;
})(CompanyInput$ || (CompanyInput$ = {}));
export function companyInputToJSON(companyInput) {
    return JSON.stringify(CompanyInput$outboundSchema.parse(companyInput));
}
export function companyInputFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CompanyInput$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CompanyInput' from JSON`);
}
//# sourceMappingURL=company.js.map