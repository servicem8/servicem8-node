/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
/**
 * Record active/deleted flag.
 *
 * @remarks
 *
 * Valid values are [0,1]
 */
export const FeedbackActive = {
    Zero: 0,
    One: 1,
};
/** @internal */
export const FeedbackActive$inboundSchema = z.nativeEnum(FeedbackActive);
/** @internal */
export const FeedbackActive$outboundSchema = FeedbackActive$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var FeedbackActive$;
(function (FeedbackActive$) {
    /** @deprecated use `FeedbackActive$inboundSchema` instead. */
    FeedbackActive$.inboundSchema = FeedbackActive$inboundSchema;
    /** @deprecated use `FeedbackActive$outboundSchema` instead. */
    FeedbackActive$.outboundSchema = FeedbackActive$outboundSchema;
})(FeedbackActive$ || (FeedbackActive$ = {}));
/** @internal */
export const Feedback$inboundSchema = z.object({
    uuid: z.string().optional(),
    active: FeedbackActive$inboundSchema.default(1),
    edit_date: z.string().optional(),
    timestamp: z.string().optional(),
    related_object: z.string().optional(),
    related_object_uuid: z.string().optional(),
    rating: z.string().optional(),
    comment: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "edit_date": "editDate",
        "related_object": "relatedObject",
        "related_object_uuid": "relatedObjectUuid",
    });
});
/** @internal */
export const Feedback$outboundSchema = z.object({
    uuid: z.string().optional(),
    active: FeedbackActive$outboundSchema.default(1),
    editDate: z.string().optional(),
    timestamp: z.string().optional(),
    relatedObject: z.string().optional(),
    relatedObjectUuid: z.string().optional(),
    rating: z.string().optional(),
    comment: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        editDate: "edit_date",
        relatedObject: "related_object",
        relatedObjectUuid: "related_object_uuid",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Feedback$;
(function (Feedback$) {
    /** @deprecated use `Feedback$inboundSchema` instead. */
    Feedback$.inboundSchema = Feedback$inboundSchema;
    /** @deprecated use `Feedback$outboundSchema` instead. */
    Feedback$.outboundSchema = Feedback$outboundSchema;
})(Feedback$ || (Feedback$ = {}));
export function feedbackToJSON(feedback) {
    return JSON.stringify(Feedback$outboundSchema.parse(feedback));
}
export function feedbackFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Feedback$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Feedback' from JSON`);
}
/** @internal */
export const FeedbackInput$inboundSchema = z.object({
    uuid: z.string().optional(),
    active: FeedbackActive$inboundSchema.default(1),
    timestamp: z.string().optional(),
    related_object: z.string().optional(),
    related_object_uuid: z.string().optional(),
    rating: z.string().optional(),
    comment: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "related_object": "relatedObject",
        "related_object_uuid": "relatedObjectUuid",
    });
});
/** @internal */
export const FeedbackInput$outboundSchema = z.object({
    uuid: z.string().optional(),
    active: FeedbackActive$outboundSchema.default(1),
    timestamp: z.string().optional(),
    relatedObject: z.string().optional(),
    relatedObjectUuid: z.string().optional(),
    rating: z.string().optional(),
    comment: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        relatedObject: "related_object",
        relatedObjectUuid: "related_object_uuid",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var FeedbackInput$;
(function (FeedbackInput$) {
    /** @deprecated use `FeedbackInput$inboundSchema` instead. */
    FeedbackInput$.inboundSchema = FeedbackInput$inboundSchema;
    /** @deprecated use `FeedbackInput$outboundSchema` instead. */
    FeedbackInput$.outboundSchema = FeedbackInput$outboundSchema;
})(FeedbackInput$ || (FeedbackInput$ = {}));
export function feedbackInputToJSON(feedbackInput) {
    return JSON.stringify(FeedbackInput$outboundSchema.parse(feedbackInput));
}
export function feedbackInputFromJSON(jsonString) {
    return safeParse(jsonString, (x) => FeedbackInput$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'FeedbackInput' from JSON`);
}
//# sourceMappingURL=feedback.js.map