/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
/**
 * Record active/deleted flag.
 *
 * @remarks
 *
 * Valid values are [0,1]
 */
export const AssetTypeActive = {
    Zero: 0,
    One: 1,
};
/** @internal */
export const AssetTypeActive$inboundSchema = z.nativeEnum(AssetTypeActive);
/** @internal */
export const AssetTypeActive$outboundSchema = AssetTypeActive$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AssetTypeActive$;
(function (AssetTypeActive$) {
    /** @deprecated use `AssetTypeActive$inboundSchema` instead. */
    AssetTypeActive$.inboundSchema = AssetTypeActive$inboundSchema;
    /** @deprecated use `AssetTypeActive$outboundSchema` instead. */
    AssetTypeActive$.outboundSchema = AssetTypeActive$outboundSchema;
})(AssetTypeActive$ || (AssetTypeActive$ = {}));
/** @internal */
export const AssetType$inboundSchema = z.object({
    uuid: z.string().optional(),
    active: AssetTypeActive$inboundSchema.default(1),
    edit_date: z.string().optional(),
    name: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "edit_date": "editDate",
    });
});
/** @internal */
export const AssetType$outboundSchema = z.object({
    uuid: z.string().optional(),
    active: AssetTypeActive$outboundSchema.default(1),
    editDate: z.string().optional(),
    name: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        editDate: "edit_date",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AssetType$;
(function (AssetType$) {
    /** @deprecated use `AssetType$inboundSchema` instead. */
    AssetType$.inboundSchema = AssetType$inboundSchema;
    /** @deprecated use `AssetType$outboundSchema` instead. */
    AssetType$.outboundSchema = AssetType$outboundSchema;
})(AssetType$ || (AssetType$ = {}));
export function assetTypeToJSON(assetType) {
    return JSON.stringify(AssetType$outboundSchema.parse(assetType));
}
export function assetTypeFromJSON(jsonString) {
    return safeParse(jsonString, (x) => AssetType$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AssetType' from JSON`);
}
/** @internal */
export const AssetTypeInput$inboundSchema = z.object({
    uuid: z.string().optional(),
    active: AssetTypeActive$inboundSchema.default(1),
    name: z.string().optional(),
});
/** @internal */
export const AssetTypeInput$outboundSchema = z.object({
    uuid: z.string().optional(),
    active: AssetTypeActive$outboundSchema.default(1),
    name: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AssetTypeInput$;
(function (AssetTypeInput$) {
    /** @deprecated use `AssetTypeInput$inboundSchema` instead. */
    AssetTypeInput$.inboundSchema = AssetTypeInput$inboundSchema;
    /** @deprecated use `AssetTypeInput$outboundSchema` instead. */
    AssetTypeInput$.outboundSchema = AssetTypeInput$outboundSchema;
})(AssetTypeInput$ || (AssetTypeInput$ = {}));
export function assetTypeInputToJSON(assetTypeInput) {
    return JSON.stringify(AssetTypeInput$outboundSchema.parse(assetTypeInput));
}
export function assetTypeInputFromJSON(jsonString) {
    return safeParse(jsonString, (x) => AssetTypeInput$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AssetTypeInput' from JSON`);
}
//# sourceMappingURL=assettype.js.map