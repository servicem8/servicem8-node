/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
/**
 * Record active/deleted flag.
 *
 * @remarks
 *
 * Valid values are [0,1]
 */
export const FormFieldActive = {
    Zero: 0,
    One: 1,
};
/** @internal */
export const FormFieldActive$inboundSchema = z.nativeEnum(FormFieldActive);
/** @internal */
export const FormFieldActive$outboundSchema = FormFieldActive$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var FormFieldActive$;
(function (FormFieldActive$) {
    /** @deprecated use `FormFieldActive$inboundSchema` instead. */
    FormFieldActive$.inboundSchema = FormFieldActive$inboundSchema;
    /** @deprecated use `FormFieldActive$outboundSchema` instead. */
    FormFieldActive$.outboundSchema = FormFieldActive$outboundSchema;
})(FormFieldActive$ || (FormFieldActive$ = {}));
/** @internal */
export const FormField$inboundSchema = z.object({
    uuid: z.string().optional(),
    active: FormFieldActive$inboundSchema.default(1),
    edit_date: z.string().optional(),
    form_uuid: z.string().optional(),
    name: z.string().optional(),
    field_data_json: z.string().optional(),
    sort_order: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "edit_date": "editDate",
        "form_uuid": "formUuid",
        "field_data_json": "fieldDataJson",
        "sort_order": "sortOrder",
    });
});
/** @internal */
export const FormField$outboundSchema = z.object({
    uuid: z.string().optional(),
    active: FormFieldActive$outboundSchema.default(1),
    editDate: z.string().optional(),
    formUuid: z.string().optional(),
    name: z.string().optional(),
    fieldDataJson: z.string().optional(),
    sortOrder: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        editDate: "edit_date",
        formUuid: "form_uuid",
        fieldDataJson: "field_data_json",
        sortOrder: "sort_order",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var FormField$;
(function (FormField$) {
    /** @deprecated use `FormField$inboundSchema` instead. */
    FormField$.inboundSchema = FormField$inboundSchema;
    /** @deprecated use `FormField$outboundSchema` instead. */
    FormField$.outboundSchema = FormField$outboundSchema;
})(FormField$ || (FormField$ = {}));
export function formFieldToJSON(formField) {
    return JSON.stringify(FormField$outboundSchema.parse(formField));
}
export function formFieldFromJSON(jsonString) {
    return safeParse(jsonString, (x) => FormField$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'FormField' from JSON`);
}
/** @internal */
export const FormFieldInput$inboundSchema = z.object({
    uuid: z.string().optional(),
    active: FormFieldActive$inboundSchema.default(1),
    form_uuid: z.string().optional(),
    name: z.string().optional(),
    field_data_json: z.string().optional(),
    sort_order: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "form_uuid": "formUuid",
        "field_data_json": "fieldDataJson",
        "sort_order": "sortOrder",
    });
});
/** @internal */
export const FormFieldInput$outboundSchema = z.object({
    uuid: z.string().optional(),
    active: FormFieldActive$outboundSchema.default(1),
    formUuid: z.string().optional(),
    name: z.string().optional(),
    fieldDataJson: z.string().optional(),
    sortOrder: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        formUuid: "form_uuid",
        fieldDataJson: "field_data_json",
        sortOrder: "sort_order",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var FormFieldInput$;
(function (FormFieldInput$) {
    /** @deprecated use `FormFieldInput$inboundSchema` instead. */
    FormFieldInput$.inboundSchema = FormFieldInput$inboundSchema;
    /** @deprecated use `FormFieldInput$outboundSchema` instead. */
    FormFieldInput$.outboundSchema = FormFieldInput$outboundSchema;
})(FormFieldInput$ || (FormFieldInput$ = {}));
export function formFieldInputToJSON(formFieldInput) {
    return JSON.stringify(FormFieldInput$outboundSchema.parse(formFieldInput));
}
export function formFieldInputFromJSON(jsonString) {
    return safeParse(jsonString, (x) => FormFieldInput$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'FormFieldInput' from JSON`);
}
//# sourceMappingURL=formfield.js.map