/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
/**
 * Record active/deleted flag.
 *
 * @remarks
 *
 * Valid values are [0,1]
 */
export const AttachmentActive = {
    Zero: 0,
    One: 1,
};
/** @internal */
export const AttachmentActive$inboundSchema = z.nativeEnum(AttachmentActive);
/** @internal */
export const AttachmentActive$outboundSchema = AttachmentActive$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AttachmentActive$;
(function (AttachmentActive$) {
    /** @deprecated use `AttachmentActive$inboundSchema` instead. */
    AttachmentActive$.inboundSchema = AttachmentActive$inboundSchema;
    /** @deprecated use `AttachmentActive$outboundSchema` instead. */
    AttachmentActive$.outboundSchema = AttachmentActive$outboundSchema;
})(AttachmentActive$ || (AttachmentActive$ = {}));
/** @internal */
export const Attachment$inboundSchema = z.object({
    uuid: z.string().optional(),
    active: AttachmentActive$inboundSchema.default(1),
    edit_date: z.string().optional(),
    related_object: z.string().optional(),
    related_object_uuid: z.string().optional(),
    attachment_name: z.string().optional(),
    file_type: z.string().optional(),
    created_by_staff_uuid: z.string().optional(),
    timestamp: z.string().optional(),
    attachment_source: z.string().optional(),
    tags: z.string().optional(),
    lng: z.number().optional(),
    lat: z.number().optional(),
    photo_width: z.string().optional(),
    photo_height: z.string().optional(),
    extracted_info: z.string().optional(),
    is_favourite: z.string().optional(),
    class_name: z.string().optional(),
    metadata: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "edit_date": "editDate",
        "related_object": "relatedObject",
        "related_object_uuid": "relatedObjectUuid",
        "attachment_name": "attachmentName",
        "file_type": "fileType",
        "created_by_staff_uuid": "createdByStaffUuid",
        "attachment_source": "attachmentSource",
        "photo_width": "photoWidth",
        "photo_height": "photoHeight",
        "extracted_info": "extractedInfo",
        "is_favourite": "isFavourite",
        "class_name": "className",
    });
});
/** @internal */
export const Attachment$outboundSchema = z.object({
    uuid: z.string().optional(),
    active: AttachmentActive$outboundSchema.default(1),
    editDate: z.string().optional(),
    relatedObject: z.string().optional(),
    relatedObjectUuid: z.string().optional(),
    attachmentName: z.string().optional(),
    fileType: z.string().optional(),
    createdByStaffUuid: z.string().optional(),
    timestamp: z.string().optional(),
    attachmentSource: z.string().optional(),
    tags: z.string().optional(),
    lng: z.number().optional(),
    lat: z.number().optional(),
    photoWidth: z.string().optional(),
    photoHeight: z.string().optional(),
    extractedInfo: z.string().optional(),
    isFavourite: z.string().optional(),
    className: z.string().optional(),
    metadata: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        editDate: "edit_date",
        relatedObject: "related_object",
        relatedObjectUuid: "related_object_uuid",
        attachmentName: "attachment_name",
        fileType: "file_type",
        createdByStaffUuid: "created_by_staff_uuid",
        attachmentSource: "attachment_source",
        photoWidth: "photo_width",
        photoHeight: "photo_height",
        extractedInfo: "extracted_info",
        isFavourite: "is_favourite",
        className: "class_name",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Attachment$;
(function (Attachment$) {
    /** @deprecated use `Attachment$inboundSchema` instead. */
    Attachment$.inboundSchema = Attachment$inboundSchema;
    /** @deprecated use `Attachment$outboundSchema` instead. */
    Attachment$.outboundSchema = Attachment$outboundSchema;
})(Attachment$ || (Attachment$ = {}));
export function attachmentToJSON(attachment) {
    return JSON.stringify(Attachment$outboundSchema.parse(attachment));
}
export function attachmentFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Attachment$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Attachment' from JSON`);
}
/** @internal */
export const AttachmentInput$inboundSchema = z.object({
    uuid: z.string().optional(),
    active: AttachmentActive$inboundSchema.default(1),
    related_object: z.string().optional(),
    related_object_uuid: z.string().optional(),
    attachment_name: z.string().optional(),
    file_type: z.string().optional(),
    created_by_staff_uuid: z.string().optional(),
    timestamp: z.string().optional(),
    attachment_source: z.string().optional(),
    tags: z.string().optional(),
    lng: z.number().optional(),
    lat: z.number().optional(),
    photo_width: z.string().optional(),
    photo_height: z.string().optional(),
    extracted_info: z.string().optional(),
    is_favourite: z.string().optional(),
    class_name: z.string().optional(),
    metadata: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "related_object": "relatedObject",
        "related_object_uuid": "relatedObjectUuid",
        "attachment_name": "attachmentName",
        "file_type": "fileType",
        "created_by_staff_uuid": "createdByStaffUuid",
        "attachment_source": "attachmentSource",
        "photo_width": "photoWidth",
        "photo_height": "photoHeight",
        "extracted_info": "extractedInfo",
        "is_favourite": "isFavourite",
        "class_name": "className",
    });
});
/** @internal */
export const AttachmentInput$outboundSchema = z.object({
    uuid: z.string().optional(),
    active: AttachmentActive$outboundSchema.default(1),
    relatedObject: z.string().optional(),
    relatedObjectUuid: z.string().optional(),
    attachmentName: z.string().optional(),
    fileType: z.string().optional(),
    createdByStaffUuid: z.string().optional(),
    timestamp: z.string().optional(),
    attachmentSource: z.string().optional(),
    tags: z.string().optional(),
    lng: z.number().optional(),
    lat: z.number().optional(),
    photoWidth: z.string().optional(),
    photoHeight: z.string().optional(),
    extractedInfo: z.string().optional(),
    isFavourite: z.string().optional(),
    className: z.string().optional(),
    metadata: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        relatedObject: "related_object",
        relatedObjectUuid: "related_object_uuid",
        attachmentName: "attachment_name",
        fileType: "file_type",
        createdByStaffUuid: "created_by_staff_uuid",
        attachmentSource: "attachment_source",
        photoWidth: "photo_width",
        photoHeight: "photo_height",
        extractedInfo: "extracted_info",
        isFavourite: "is_favourite",
        className: "class_name",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AttachmentInput$;
(function (AttachmentInput$) {
    /** @deprecated use `AttachmentInput$inboundSchema` instead. */
    AttachmentInput$.inboundSchema = AttachmentInput$inboundSchema;
    /** @deprecated use `AttachmentInput$outboundSchema` instead. */
    AttachmentInput$.outboundSchema = AttachmentInput$outboundSchema;
})(AttachmentInput$ || (AttachmentInput$ = {}));
export function attachmentInputToJSON(attachmentInput) {
    return JSON.stringify(AttachmentInput$outboundSchema.parse(attachmentInput));
}
export function attachmentInputFromJSON(jsonString) {
    return safeParse(jsonString, (x) => AttachmentInput$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AttachmentInput' from JSON`);
}
//# sourceMappingURL=attachment.js.map