/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
/**
 * Record active/deleted flag.
 *
 * @remarks
 *
 * Valid values are [0,1]
 */
export const FormResponseActive = {
    Zero: 0,
    One: 1,
};
/** @internal */
export const FormResponseActive$inboundSchema = z.nativeEnum(FormResponseActive);
/** @internal */
export const FormResponseActive$outboundSchema = FormResponseActive$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var FormResponseActive$;
(function (FormResponseActive$) {
    /** @deprecated use `FormResponseActive$inboundSchema` instead. */
    FormResponseActive$.inboundSchema = FormResponseActive$inboundSchema;
    /** @deprecated use `FormResponseActive$outboundSchema` instead. */
    FormResponseActive$.outboundSchema = FormResponseActive$outboundSchema;
})(FormResponseActive$ || (FormResponseActive$ = {}));
/** @internal */
export const FormResponse$inboundSchema = z.object({
    uuid: z.string().optional(),
    active: FormResponseActive$inboundSchema.default(1),
    edit_date: z.string().optional(),
    form_uuid: z.string().optional(),
    staff_uuid: z.string().optional(),
    regarding_object: z.string().optional(),
    regarding_object_uuid: z.string().optional(),
    field_data: z.string().optional(),
    timestamp: z.string().optional(),
    form_by_staff_uuid: z.string().optional(),
    document_attachment_uuid: z.string().optional(),
    asset_uuid: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "edit_date": "editDate",
        "form_uuid": "formUuid",
        "staff_uuid": "staffUuid",
        "regarding_object": "regardingObject",
        "regarding_object_uuid": "regardingObjectUuid",
        "field_data": "fieldData",
        "form_by_staff_uuid": "formByStaffUuid",
        "document_attachment_uuid": "documentAttachmentUuid",
        "asset_uuid": "assetUuid",
    });
});
/** @internal */
export const FormResponse$outboundSchema = z.object({
    uuid: z.string().optional(),
    active: FormResponseActive$outboundSchema.default(1),
    editDate: z.string().optional(),
    formUuid: z.string().optional(),
    staffUuid: z.string().optional(),
    regardingObject: z.string().optional(),
    regardingObjectUuid: z.string().optional(),
    fieldData: z.string().optional(),
    timestamp: z.string().optional(),
    formByStaffUuid: z.string().optional(),
    documentAttachmentUuid: z.string().optional(),
    assetUuid: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        editDate: "edit_date",
        formUuid: "form_uuid",
        staffUuid: "staff_uuid",
        regardingObject: "regarding_object",
        regardingObjectUuid: "regarding_object_uuid",
        fieldData: "field_data",
        formByStaffUuid: "form_by_staff_uuid",
        documentAttachmentUuid: "document_attachment_uuid",
        assetUuid: "asset_uuid",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var FormResponse$;
(function (FormResponse$) {
    /** @deprecated use `FormResponse$inboundSchema` instead. */
    FormResponse$.inboundSchema = FormResponse$inboundSchema;
    /** @deprecated use `FormResponse$outboundSchema` instead. */
    FormResponse$.outboundSchema = FormResponse$outboundSchema;
})(FormResponse$ || (FormResponse$ = {}));
export function formResponseToJSON(formResponse) {
    return JSON.stringify(FormResponse$outboundSchema.parse(formResponse));
}
export function formResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => FormResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'FormResponse' from JSON`);
}
/** @internal */
export const FormResponseInput$inboundSchema = z.object({
    uuid: z.string().optional(),
    active: FormResponseActive$inboundSchema.default(1),
    form_uuid: z.string().optional(),
    staff_uuid: z.string().optional(),
    regarding_object: z.string().optional(),
    regarding_object_uuid: z.string().optional(),
    field_data: z.string().optional(),
    timestamp: z.string().optional(),
    form_by_staff_uuid: z.string().optional(),
    document_attachment_uuid: z.string().optional(),
    asset_uuid: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "form_uuid": "formUuid",
        "staff_uuid": "staffUuid",
        "regarding_object": "regardingObject",
        "regarding_object_uuid": "regardingObjectUuid",
        "field_data": "fieldData",
        "form_by_staff_uuid": "formByStaffUuid",
        "document_attachment_uuid": "documentAttachmentUuid",
        "asset_uuid": "assetUuid",
    });
});
/** @internal */
export const FormResponseInput$outboundSchema = z.object({
    uuid: z.string().optional(),
    active: FormResponseActive$outboundSchema.default(1),
    formUuid: z.string().optional(),
    staffUuid: z.string().optional(),
    regardingObject: z.string().optional(),
    regardingObjectUuid: z.string().optional(),
    fieldData: z.string().optional(),
    timestamp: z.string().optional(),
    formByStaffUuid: z.string().optional(),
    documentAttachmentUuid: z.string().optional(),
    assetUuid: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        formUuid: "form_uuid",
        staffUuid: "staff_uuid",
        regardingObject: "regarding_object",
        regardingObjectUuid: "regarding_object_uuid",
        fieldData: "field_data",
        formByStaffUuid: "form_by_staff_uuid",
        documentAttachmentUuid: "document_attachment_uuid",
        assetUuid: "asset_uuid",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var FormResponseInput$;
(function (FormResponseInput$) {
    /** @deprecated use `FormResponseInput$inboundSchema` instead. */
    FormResponseInput$.inboundSchema = FormResponseInput$inboundSchema;
    /** @deprecated use `FormResponseInput$outboundSchema` instead. */
    FormResponseInput$.outboundSchema = FormResponseInput$outboundSchema;
})(FormResponseInput$ || (FormResponseInput$ = {}));
export function formResponseInputToJSON(formResponseInput) {
    return JSON.stringify(FormResponseInput$outboundSchema.parse(formResponseInput));
}
export function formResponseInputFromJSON(jsonString) {
    return safeParse(jsonString, (x) => FormResponseInput$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'FormResponseInput' from JSON`);
}
//# sourceMappingURL=formresponse.js.map