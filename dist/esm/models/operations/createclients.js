/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import * as components from "../components/index.js";
/** @internal */
export const CreateClientsResponseResult$inboundSchema = z.union([components.Result$inboundSchema, components.ErrorT$inboundSchema]);
/** @internal */
export const CreateClientsResponseResult$outboundSchema = z.union([
    components.Result$outboundSchema,
    components.ErrorT$outboundSchema,
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateClientsResponseResult$;
(function (CreateClientsResponseResult$) {
    /** @deprecated use `CreateClientsResponseResult$inboundSchema` instead. */
    CreateClientsResponseResult$.inboundSchema = CreateClientsResponseResult$inboundSchema;
    /** @deprecated use `CreateClientsResponseResult$outboundSchema` instead. */
    CreateClientsResponseResult$.outboundSchema = CreateClientsResponseResult$outboundSchema;
})(CreateClientsResponseResult$ || (CreateClientsResponseResult$ = {}));
export function createClientsResponseResultToJSON(createClientsResponseResult) {
    return JSON.stringify(CreateClientsResponseResult$outboundSchema.parse(createClientsResponseResult));
}
export function createClientsResponseResultFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateClientsResponseResult$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateClientsResponseResult' from JSON`);
}
/** @internal */
export const CreateClientsResponse$inboundSchema = z.object({
    Headers: z.record(z.array(z.string())),
    Result: z.union([
        components.Result$inboundSchema,
        components.ErrorT$inboundSchema,
    ]),
}).transform((v) => {
    return remap$(v, {
        "Headers": "headers",
        "Result": "result",
    });
});
/** @internal */
export const CreateClientsResponse$outboundSchema = z.object({
    headers: z.record(z.array(z.string())),
    result: z.union([
        components.Result$outboundSchema,
        components.ErrorT$outboundSchema,
    ]),
}).transform((v) => {
    return remap$(v, {
        headers: "Headers",
        result: "Result",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateClientsResponse$;
(function (CreateClientsResponse$) {
    /** @deprecated use `CreateClientsResponse$inboundSchema` instead. */
    CreateClientsResponse$.inboundSchema = CreateClientsResponse$inboundSchema;
    /** @deprecated use `CreateClientsResponse$outboundSchema` instead. */
    CreateClientsResponse$.outboundSchema = CreateClientsResponse$outboundSchema;
})(CreateClientsResponse$ || (CreateClientsResponse$ = {}));
export function createClientsResponseToJSON(createClientsResponse) {
    return JSON.stringify(CreateClientsResponse$outboundSchema.parse(createClientsResponse));
}
export function createClientsResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateClientsResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateClientsResponse' from JSON`);
}
//# sourceMappingURL=createclients.js.map