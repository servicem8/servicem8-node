/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import * as components from "../components/index.js";
/** @internal */
export const UpdateFormResponsesRequest$inboundSchema = z.object({
    uuid: z.string(),
    FormResponse: components.FormResponseInput$inboundSchema,
}).transform((v) => {
    return remap$(v, {
        "FormResponse": "formResponse",
    });
});
/** @internal */
export const UpdateFormResponsesRequest$outboundSchema = z.object({
    uuid: z.string(),
    formResponse: components.FormResponseInput$outboundSchema,
}).transform((v) => {
    return remap$(v, {
        formResponse: "FormResponse",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateFormResponsesRequest$;
(function (UpdateFormResponsesRequest$) {
    /** @deprecated use `UpdateFormResponsesRequest$inboundSchema` instead. */
    UpdateFormResponsesRequest$.inboundSchema = UpdateFormResponsesRequest$inboundSchema;
    /** @deprecated use `UpdateFormResponsesRequest$outboundSchema` instead. */
    UpdateFormResponsesRequest$.outboundSchema = UpdateFormResponsesRequest$outboundSchema;
})(UpdateFormResponsesRequest$ || (UpdateFormResponsesRequest$ = {}));
export function updateFormResponsesRequestToJSON(updateFormResponsesRequest) {
    return JSON.stringify(UpdateFormResponsesRequest$outboundSchema.parse(updateFormResponsesRequest));
}
export function updateFormResponsesRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateFormResponsesRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateFormResponsesRequest' from JSON`);
}
/** @internal */
export const UpdateFormResponsesResponse$inboundSchema = z.union([components.Result$inboundSchema, components.ErrorT$inboundSchema]);
/** @internal */
export const UpdateFormResponsesResponse$outboundSchema = z.union([
    components.Result$outboundSchema,
    components.ErrorT$outboundSchema,
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateFormResponsesResponse$;
(function (UpdateFormResponsesResponse$) {
    /** @deprecated use `UpdateFormResponsesResponse$inboundSchema` instead. */
    UpdateFormResponsesResponse$.inboundSchema = UpdateFormResponsesResponse$inboundSchema;
    /** @deprecated use `UpdateFormResponsesResponse$outboundSchema` instead. */
    UpdateFormResponsesResponse$.outboundSchema = UpdateFormResponsesResponse$outboundSchema;
})(UpdateFormResponsesResponse$ || (UpdateFormResponsesResponse$ = {}));
export function updateFormResponsesResponseToJSON(updateFormResponsesResponse) {
    return JSON.stringify(UpdateFormResponsesResponse$outboundSchema.parse(updateFormResponsesResponse));
}
export function updateFormResponsesResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateFormResponsesResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateFormResponsesResponse' from JSON`);
}
//# sourceMappingURL=updateformresponses.js.map