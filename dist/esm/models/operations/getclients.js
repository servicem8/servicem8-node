/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import * as components from "../components/index.js";
/** @internal */
export const GetClientsRequest$inboundSchema = z.object({
    uuid: z.string(),
});
/** @internal */
export const GetClientsRequest$outboundSchema = z.object({
    uuid: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetClientsRequest$;
(function (GetClientsRequest$) {
    /** @deprecated use `GetClientsRequest$inboundSchema` instead. */
    GetClientsRequest$.inboundSchema = GetClientsRequest$inboundSchema;
    /** @deprecated use `GetClientsRequest$outboundSchema` instead. */
    GetClientsRequest$.outboundSchema = GetClientsRequest$outboundSchema;
})(GetClientsRequest$ || (GetClientsRequest$ = {}));
export function getClientsRequestToJSON(getClientsRequest) {
    return JSON.stringify(GetClientsRequest$outboundSchema.parse(getClientsRequest));
}
export function getClientsRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetClientsRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetClientsRequest' from JSON`);
}
/** @internal */
export const GetClientsResponse$inboundSchema = z.union([
    components.ErrorT$inboundSchema,
    components.Company$inboundSchema,
]);
/** @internal */
export const GetClientsResponse$outboundSchema = z.union([
    components.ErrorT$outboundSchema,
    components.Company$outboundSchema,
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetClientsResponse$;
(function (GetClientsResponse$) {
    /** @deprecated use `GetClientsResponse$inboundSchema` instead. */
    GetClientsResponse$.inboundSchema = GetClientsResponse$inboundSchema;
    /** @deprecated use `GetClientsResponse$outboundSchema` instead. */
    GetClientsResponse$.outboundSchema = GetClientsResponse$outboundSchema;
})(GetClientsResponse$ || (GetClientsResponse$ = {}));
export function getClientsResponseToJSON(getClientsResponse) {
    return JSON.stringify(GetClientsResponse$outboundSchema.parse(getClientsResponse));
}
export function getClientsResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetClientsResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetClientsResponse' from JSON`);
}
//# sourceMappingURL=getclients.js.map