/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import * as components from "../components/index.js";
/** @internal */
export const UpdateFeedbackRequest$inboundSchema = z.object({
    uuid: z.string(),
    Feedback: components.FeedbackInput$inboundSchema,
}).transform((v) => {
    return remap$(v, {
        "Feedback": "feedback",
    });
});
/** @internal */
export const UpdateFeedbackRequest$outboundSchema = z.object({
    uuid: z.string(),
    feedback: components.FeedbackInput$outboundSchema,
}).transform((v) => {
    return remap$(v, {
        feedback: "Feedback",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateFeedbackRequest$;
(function (UpdateFeedbackRequest$) {
    /** @deprecated use `UpdateFeedbackRequest$inboundSchema` instead. */
    UpdateFeedbackRequest$.inboundSchema = UpdateFeedbackRequest$inboundSchema;
    /** @deprecated use `UpdateFeedbackRequest$outboundSchema` instead. */
    UpdateFeedbackRequest$.outboundSchema = UpdateFeedbackRequest$outboundSchema;
})(UpdateFeedbackRequest$ || (UpdateFeedbackRequest$ = {}));
export function updateFeedbackRequestToJSON(updateFeedbackRequest) {
    return JSON.stringify(UpdateFeedbackRequest$outboundSchema.parse(updateFeedbackRequest));
}
export function updateFeedbackRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateFeedbackRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateFeedbackRequest' from JSON`);
}
/** @internal */
export const UpdateFeedbackResponse$inboundSchema = z.union([components.Result$inboundSchema, components.ErrorT$inboundSchema]);
/** @internal */
export const UpdateFeedbackResponse$outboundSchema = z.union([
    components.Result$outboundSchema,
    components.ErrorT$outboundSchema,
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateFeedbackResponse$;
(function (UpdateFeedbackResponse$) {
    /** @deprecated use `UpdateFeedbackResponse$inboundSchema` instead. */
    UpdateFeedbackResponse$.inboundSchema = UpdateFeedbackResponse$inboundSchema;
    /** @deprecated use `UpdateFeedbackResponse$outboundSchema` instead. */
    UpdateFeedbackResponse$.outboundSchema = UpdateFeedbackResponse$outboundSchema;
})(UpdateFeedbackResponse$ || (UpdateFeedbackResponse$ = {}));
export function updateFeedbackResponseToJSON(updateFeedbackResponse) {
    return JSON.stringify(UpdateFeedbackResponse$outboundSchema.parse(updateFeedbackResponse));
}
export function updateFeedbackResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateFeedbackResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateFeedbackResponse' from JSON`);
}
//# sourceMappingURL=updatefeedback.js.map