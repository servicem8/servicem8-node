/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import * as components from "../components/index.js";
/** @internal */
export const GetVendorsRequest$inboundSchema = z.object({
    uuid: z.string(),
});
/** @internal */
export const GetVendorsRequest$outboundSchema = z.object({
    uuid: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetVendorsRequest$;
(function (GetVendorsRequest$) {
    /** @deprecated use `GetVendorsRequest$inboundSchema` instead. */
    GetVendorsRequest$.inboundSchema = GetVendorsRequest$inboundSchema;
    /** @deprecated use `GetVendorsRequest$outboundSchema` instead. */
    GetVendorsRequest$.outboundSchema = GetVendorsRequest$outboundSchema;
})(GetVendorsRequest$ || (GetVendorsRequest$ = {}));
export function getVendorsRequestToJSON(getVendorsRequest) {
    return JSON.stringify(GetVendorsRequest$outboundSchema.parse(getVendorsRequest));
}
export function getVendorsRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetVendorsRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetVendorsRequest' from JSON`);
}
/** @internal */
export const GetVendorsResponse$inboundSchema = z.union([components.ErrorT$inboundSchema, components.Vendor$inboundSchema]);
/** @internal */
export const GetVendorsResponse$outboundSchema = z.union([
    components.ErrorT$outboundSchema,
    components.Vendor$outboundSchema,
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetVendorsResponse$;
(function (GetVendorsResponse$) {
    /** @deprecated use `GetVendorsResponse$inboundSchema` instead. */
    GetVendorsResponse$.inboundSchema = GetVendorsResponse$inboundSchema;
    /** @deprecated use `GetVendorsResponse$outboundSchema` instead. */
    GetVendorsResponse$.outboundSchema = GetVendorsResponse$outboundSchema;
})(GetVendorsResponse$ || (GetVendorsResponse$ = {}));
export function getVendorsResponseToJSON(getVendorsResponse) {
    return JSON.stringify(GetVendorsResponse$outboundSchema.parse(getVendorsResponse));
}
export function getVendorsResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetVendorsResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetVendorsResponse' from JSON`);
}
//# sourceMappingURL=getvendors.js.map