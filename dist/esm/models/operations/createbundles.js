/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import * as components from "../components/index.js";
/** @internal */
export const CreateBundlesResponseResult$inboundSchema = z.union([components.Result$inboundSchema, components.ErrorT$inboundSchema]);
/** @internal */
export const CreateBundlesResponseResult$outboundSchema = z.union([
    components.Result$outboundSchema,
    components.ErrorT$outboundSchema,
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateBundlesResponseResult$;
(function (CreateBundlesResponseResult$) {
    /** @deprecated use `CreateBundlesResponseResult$inboundSchema` instead. */
    CreateBundlesResponseResult$.inboundSchema = CreateBundlesResponseResult$inboundSchema;
    /** @deprecated use `CreateBundlesResponseResult$outboundSchema` instead. */
    CreateBundlesResponseResult$.outboundSchema = CreateBundlesResponseResult$outboundSchema;
})(CreateBundlesResponseResult$ || (CreateBundlesResponseResult$ = {}));
export function createBundlesResponseResultToJSON(createBundlesResponseResult) {
    return JSON.stringify(CreateBundlesResponseResult$outboundSchema.parse(createBundlesResponseResult));
}
export function createBundlesResponseResultFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateBundlesResponseResult$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateBundlesResponseResult' from JSON`);
}
/** @internal */
export const CreateBundlesResponse$inboundSchema = z.object({
    Headers: z.record(z.array(z.string())),
    Result: z.union([
        components.Result$inboundSchema,
        components.ErrorT$inboundSchema,
    ]),
}).transform((v) => {
    return remap$(v, {
        "Headers": "headers",
        "Result": "result",
    });
});
/** @internal */
export const CreateBundlesResponse$outboundSchema = z.object({
    headers: z.record(z.array(z.string())),
    result: z.union([
        components.Result$outboundSchema,
        components.ErrorT$outboundSchema,
    ]),
}).transform((v) => {
    return remap$(v, {
        headers: "Headers",
        result: "Result",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateBundlesResponse$;
(function (CreateBundlesResponse$) {
    /** @deprecated use `CreateBundlesResponse$inboundSchema` instead. */
    CreateBundlesResponse$.inboundSchema = CreateBundlesResponse$inboundSchema;
    /** @deprecated use `CreateBundlesResponse$outboundSchema` instead. */
    CreateBundlesResponse$.outboundSchema = CreateBundlesResponse$outboundSchema;
})(CreateBundlesResponse$ || (CreateBundlesResponse$ = {}));
export function createBundlesResponseToJSON(createBundlesResponse) {
    return JSON.stringify(CreateBundlesResponse$outboundSchema.parse(createBundlesResponse));
}
export function createBundlesResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateBundlesResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateBundlesResponse' from JSON`);
}
//# sourceMappingURL=createbundles.js.map