/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import * as components from "../components/index.js";
/** @internal */
export const UpdateSMSTemplatesRequest$inboundSchema = z.object({
    uuid: z.string(),
    SmsTemplate: components.SmsTemplateInput$inboundSchema,
}).transform((v) => {
    return remap$(v, {
        "SmsTemplate": "smsTemplate",
    });
});
/** @internal */
export const UpdateSMSTemplatesRequest$outboundSchema = z.object({
    uuid: z.string(),
    smsTemplate: components.SmsTemplateInput$outboundSchema,
}).transform((v) => {
    return remap$(v, {
        smsTemplate: "SmsTemplate",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateSMSTemplatesRequest$;
(function (UpdateSMSTemplatesRequest$) {
    /** @deprecated use `UpdateSMSTemplatesRequest$inboundSchema` instead. */
    UpdateSMSTemplatesRequest$.inboundSchema = UpdateSMSTemplatesRequest$inboundSchema;
    /** @deprecated use `UpdateSMSTemplatesRequest$outboundSchema` instead. */
    UpdateSMSTemplatesRequest$.outboundSchema = UpdateSMSTemplatesRequest$outboundSchema;
})(UpdateSMSTemplatesRequest$ || (UpdateSMSTemplatesRequest$ = {}));
export function updateSMSTemplatesRequestToJSON(updateSMSTemplatesRequest) {
    return JSON.stringify(UpdateSMSTemplatesRequest$outboundSchema.parse(updateSMSTemplatesRequest));
}
export function updateSMSTemplatesRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateSMSTemplatesRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateSMSTemplatesRequest' from JSON`);
}
/** @internal */
export const UpdateSMSTemplatesResponse$inboundSchema = z.union([components.Result$inboundSchema, components.ErrorT$inboundSchema]);
/** @internal */
export const UpdateSMSTemplatesResponse$outboundSchema = z.union([
    components.Result$outboundSchema,
    components.ErrorT$outboundSchema,
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateSMSTemplatesResponse$;
(function (UpdateSMSTemplatesResponse$) {
    /** @deprecated use `UpdateSMSTemplatesResponse$inboundSchema` instead. */
    UpdateSMSTemplatesResponse$.inboundSchema = UpdateSMSTemplatesResponse$inboundSchema;
    /** @deprecated use `UpdateSMSTemplatesResponse$outboundSchema` instead. */
    UpdateSMSTemplatesResponse$.outboundSchema = UpdateSMSTemplatesResponse$outboundSchema;
})(UpdateSMSTemplatesResponse$ || (UpdateSMSTemplatesResponse$ = {}));
export function updateSMSTemplatesResponseToJSON(updateSMSTemplatesResponse) {
    return JSON.stringify(UpdateSMSTemplatesResponse$outboundSchema.parse(updateSMSTemplatesResponse));
}
export function updateSMSTemplatesResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateSMSTemplatesResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateSMSTemplatesResponse' from JSON`);
}
//# sourceMappingURL=updatesmstemplates.js.map