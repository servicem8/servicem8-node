/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import * as components from "../components/index.js";
/** @internal */
export const GetBadgesRequest$inboundSchema = z.object({
    uuid: z.string(),
});
/** @internal */
export const GetBadgesRequest$outboundSchema = z.object({
    uuid: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetBadgesRequest$;
(function (GetBadgesRequest$) {
    /** @deprecated use `GetBadgesRequest$inboundSchema` instead. */
    GetBadgesRequest$.inboundSchema = GetBadgesRequest$inboundSchema;
    /** @deprecated use `GetBadgesRequest$outboundSchema` instead. */
    GetBadgesRequest$.outboundSchema = GetBadgesRequest$outboundSchema;
})(GetBadgesRequest$ || (GetBadgesRequest$ = {}));
export function getBadgesRequestToJSON(getBadgesRequest) {
    return JSON.stringify(GetBadgesRequest$outboundSchema.parse(getBadgesRequest));
}
export function getBadgesRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetBadgesRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetBadgesRequest' from JSON`);
}
/** @internal */
export const GetBadgesResponse$inboundSchema = z.union([components.ErrorT$inboundSchema, components.Badge$inboundSchema]);
/** @internal */
export const GetBadgesResponse$outboundSchema = z.union([
    components.ErrorT$outboundSchema,
    components.Badge$outboundSchema,
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetBadgesResponse$;
(function (GetBadgesResponse$) {
    /** @deprecated use `GetBadgesResponse$inboundSchema` instead. */
    GetBadgesResponse$.inboundSchema = GetBadgesResponse$inboundSchema;
    /** @deprecated use `GetBadgesResponse$outboundSchema` instead. */
    GetBadgesResponse$.outboundSchema = GetBadgesResponse$outboundSchema;
})(GetBadgesResponse$ || (GetBadgesResponse$ = {}));
export function getBadgesResponseToJSON(getBadgesResponse) {
    return JSON.stringify(GetBadgesResponse$outboundSchema.parse(getBadgesResponse));
}
export function getBadgesResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetBadgesResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetBadgesResponse' from JSON`);
}
//# sourceMappingURL=getbadges.js.map