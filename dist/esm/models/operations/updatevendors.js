/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import * as components from "../components/index.js";
/** @internal */
export const UpdateVendorsRequest$inboundSchema = z.object({
    uuid: z.string(),
    Vendor: components.VendorInput$inboundSchema,
}).transform((v) => {
    return remap$(v, {
        "Vendor": "vendor",
    });
});
/** @internal */
export const UpdateVendorsRequest$outboundSchema = z.object({
    uuid: z.string(),
    vendor: components.VendorInput$outboundSchema,
}).transform((v) => {
    return remap$(v, {
        vendor: "Vendor",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateVendorsRequest$;
(function (UpdateVendorsRequest$) {
    /** @deprecated use `UpdateVendorsRequest$inboundSchema` instead. */
    UpdateVendorsRequest$.inboundSchema = UpdateVendorsRequest$inboundSchema;
    /** @deprecated use `UpdateVendorsRequest$outboundSchema` instead. */
    UpdateVendorsRequest$.outboundSchema = UpdateVendorsRequest$outboundSchema;
})(UpdateVendorsRequest$ || (UpdateVendorsRequest$ = {}));
export function updateVendorsRequestToJSON(updateVendorsRequest) {
    return JSON.stringify(UpdateVendorsRequest$outboundSchema.parse(updateVendorsRequest));
}
export function updateVendorsRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateVendorsRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateVendorsRequest' from JSON`);
}
/** @internal */
export const UpdateVendorsResponse$inboundSchema = z.union([components.Result$inboundSchema, components.ErrorT$inboundSchema]);
/** @internal */
export const UpdateVendorsResponse$outboundSchema = z.union([
    components.Result$outboundSchema,
    components.ErrorT$outboundSchema,
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateVendorsResponse$;
(function (UpdateVendorsResponse$) {
    /** @deprecated use `UpdateVendorsResponse$inboundSchema` instead. */
    UpdateVendorsResponse$.inboundSchema = UpdateVendorsResponse$inboundSchema;
    /** @deprecated use `UpdateVendorsResponse$outboundSchema` instead. */
    UpdateVendorsResponse$.outboundSchema = UpdateVendorsResponse$outboundSchema;
})(UpdateVendorsResponse$ || (UpdateVendorsResponse$ = {}));
export function updateVendorsResponseToJSON(updateVendorsResponse) {
    return JSON.stringify(UpdateVendorsResponse$outboundSchema.parse(updateVendorsResponse));
}
export function updateVendorsResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateVendorsResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateVendorsResponse' from JSON`);
}
//# sourceMappingURL=updatevendors.js.map