/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import * as components from "../components/index.js";
/** @internal */
export const DeleteLocationsRequest$inboundSchema = z.object({
    uuid: z.string(),
});
/** @internal */
export const DeleteLocationsRequest$outboundSchema = z.object({
    uuid: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var DeleteLocationsRequest$;
(function (DeleteLocationsRequest$) {
    /** @deprecated use `DeleteLocationsRequest$inboundSchema` instead. */
    DeleteLocationsRequest$.inboundSchema = DeleteLocationsRequest$inboundSchema;
    /** @deprecated use `DeleteLocationsRequest$outboundSchema` instead. */
    DeleteLocationsRequest$.outboundSchema = DeleteLocationsRequest$outboundSchema;
})(DeleteLocationsRequest$ || (DeleteLocationsRequest$ = {}));
export function deleteLocationsRequestToJSON(deleteLocationsRequest) {
    return JSON.stringify(DeleteLocationsRequest$outboundSchema.parse(deleteLocationsRequest));
}
export function deleteLocationsRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => DeleteLocationsRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'DeleteLocationsRequest' from JSON`);
}
/** @internal */
export const DeleteLocationsResponse$inboundSchema = z.union([components.Result$inboundSchema, components.ErrorT$inboundSchema]);
/** @internal */
export const DeleteLocationsResponse$outboundSchema = z.union([
    components.Result$outboundSchema,
    components.ErrorT$outboundSchema,
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var DeleteLocationsResponse$;
(function (DeleteLocationsResponse$) {
    /** @deprecated use `DeleteLocationsResponse$inboundSchema` instead. */
    DeleteLocationsResponse$.inboundSchema = DeleteLocationsResponse$inboundSchema;
    /** @deprecated use `DeleteLocationsResponse$outboundSchema` instead. */
    DeleteLocationsResponse$.outboundSchema = DeleteLocationsResponse$outboundSchema;
})(DeleteLocationsResponse$ || (DeleteLocationsResponse$ = {}));
export function deleteLocationsResponseToJSON(deleteLocationsResponse) {
    return JSON.stringify(DeleteLocationsResponse$outboundSchema.parse(deleteLocationsResponse));
}
export function deleteLocationsResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => DeleteLocationsResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'DeleteLocationsResponse' from JSON`);
}
//# sourceMappingURL=deletelocations.js.map