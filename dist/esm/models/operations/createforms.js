/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import * as components from "../components/index.js";
/** @internal */
export const CreateFormsResponseResult$inboundSchema = z.union([components.Result$inboundSchema, components.ErrorT$inboundSchema]);
/** @internal */
export const CreateFormsResponseResult$outboundSchema = z.union([
    components.Result$outboundSchema,
    components.ErrorT$outboundSchema,
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateFormsResponseResult$;
(function (CreateFormsResponseResult$) {
    /** @deprecated use `CreateFormsResponseResult$inboundSchema` instead. */
    CreateFormsResponseResult$.inboundSchema = CreateFormsResponseResult$inboundSchema;
    /** @deprecated use `CreateFormsResponseResult$outboundSchema` instead. */
    CreateFormsResponseResult$.outboundSchema = CreateFormsResponseResult$outboundSchema;
})(CreateFormsResponseResult$ || (CreateFormsResponseResult$ = {}));
export function createFormsResponseResultToJSON(createFormsResponseResult) {
    return JSON.stringify(CreateFormsResponseResult$outboundSchema.parse(createFormsResponseResult));
}
export function createFormsResponseResultFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateFormsResponseResult$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateFormsResponseResult' from JSON`);
}
/** @internal */
export const CreateFormsResponse$inboundSchema = z.object({
    Headers: z.record(z.array(z.string())),
    Result: z.union([
        components.Result$inboundSchema,
        components.ErrorT$inboundSchema,
    ]),
}).transform((v) => {
    return remap$(v, {
        "Headers": "headers",
        "Result": "result",
    });
});
/** @internal */
export const CreateFormsResponse$outboundSchema = z.object({
    headers: z.record(z.array(z.string())),
    result: z.union([
        components.Result$outboundSchema,
        components.ErrorT$outboundSchema,
    ]),
}).transform((v) => {
    return remap$(v, {
        headers: "Headers",
        result: "Result",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateFormsResponse$;
(function (CreateFormsResponse$) {
    /** @deprecated use `CreateFormsResponse$inboundSchema` instead. */
    CreateFormsResponse$.inboundSchema = CreateFormsResponse$inboundSchema;
    /** @deprecated use `CreateFormsResponse$outboundSchema` instead. */
    CreateFormsResponse$.outboundSchema = CreateFormsResponse$outboundSchema;
})(CreateFormsResponse$ || (CreateFormsResponse$ = {}));
export function createFormsResponseToJSON(createFormsResponse) {
    return JSON.stringify(CreateFormsResponse$outboundSchema.parse(createFormsResponse));
}
export function createFormsResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateFormsResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateFormsResponse' from JSON`);
}
//# sourceMappingURL=createforms.js.map