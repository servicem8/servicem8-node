/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import * as components from "../components/index.js";
/** @internal */
export const DeleteBadgesRequest$inboundSchema = z.object({
    uuid: z.string(),
});
/** @internal */
export const DeleteBadgesRequest$outboundSchema = z.object({
    uuid: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var DeleteBadgesRequest$;
(function (DeleteBadgesRequest$) {
    /** @deprecated use `DeleteBadgesRequest$inboundSchema` instead. */
    DeleteBadgesRequest$.inboundSchema = DeleteBadgesRequest$inboundSchema;
    /** @deprecated use `DeleteBadgesRequest$outboundSchema` instead. */
    DeleteBadgesRequest$.outboundSchema = DeleteBadgesRequest$outboundSchema;
})(DeleteBadgesRequest$ || (DeleteBadgesRequest$ = {}));
export function deleteBadgesRequestToJSON(deleteBadgesRequest) {
    return JSON.stringify(DeleteBadgesRequest$outboundSchema.parse(deleteBadgesRequest));
}
export function deleteBadgesRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => DeleteBadgesRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'DeleteBadgesRequest' from JSON`);
}
/** @internal */
export const DeleteBadgesResponse$inboundSchema = z.union([components.Result$inboundSchema, components.ErrorT$inboundSchema]);
/** @internal */
export const DeleteBadgesResponse$outboundSchema = z.union([
    components.Result$outboundSchema,
    components.ErrorT$outboundSchema,
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var DeleteBadgesResponse$;
(function (DeleteBadgesResponse$) {
    /** @deprecated use `DeleteBadgesResponse$inboundSchema` instead. */
    DeleteBadgesResponse$.inboundSchema = DeleteBadgesResponse$inboundSchema;
    /** @deprecated use `DeleteBadgesResponse$outboundSchema` instead. */
    DeleteBadgesResponse$.outboundSchema = DeleteBadgesResponse$outboundSchema;
})(DeleteBadgesResponse$ || (DeleteBadgesResponse$ = {}));
export function deleteBadgesResponseToJSON(deleteBadgesResponse) {
    return JSON.stringify(DeleteBadgesResponse$outboundSchema.parse(deleteBadgesResponse));
}
export function deleteBadgesResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => DeleteBadgesResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'DeleteBadgesResponse' from JSON`);
}
//# sourceMappingURL=deletebadges.js.map