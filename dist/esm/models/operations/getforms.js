/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import * as components from "../components/index.js";
/** @internal */
export const GetFormsRequest$inboundSchema = z.object({
    uuid: z.string(),
});
/** @internal */
export const GetFormsRequest$outboundSchema = z.object({
    uuid: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetFormsRequest$;
(function (GetFormsRequest$) {
    /** @deprecated use `GetFormsRequest$inboundSchema` instead. */
    GetFormsRequest$.inboundSchema = GetFormsRequest$inboundSchema;
    /** @deprecated use `GetFormsRequest$outboundSchema` instead. */
    GetFormsRequest$.outboundSchema = GetFormsRequest$outboundSchema;
})(GetFormsRequest$ || (GetFormsRequest$ = {}));
export function getFormsRequestToJSON(getFormsRequest) {
    return JSON.stringify(GetFormsRequest$outboundSchema.parse(getFormsRequest));
}
export function getFormsRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetFormsRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetFormsRequest' from JSON`);
}
/** @internal */
export const GetFormsResponse$inboundSchema = z.union([components.ErrorT$inboundSchema, components.Form$inboundSchema]);
/** @internal */
export const GetFormsResponse$outboundSchema = z.union([components.ErrorT$outboundSchema, components.Form$outboundSchema]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetFormsResponse$;
(function (GetFormsResponse$) {
    /** @deprecated use `GetFormsResponse$inboundSchema` instead. */
    GetFormsResponse$.inboundSchema = GetFormsResponse$inboundSchema;
    /** @deprecated use `GetFormsResponse$outboundSchema` instead. */
    GetFormsResponse$.outboundSchema = GetFormsResponse$outboundSchema;
})(GetFormsResponse$ || (GetFormsResponse$ = {}));
export function getFormsResponseToJSON(getFormsResponse) {
    return JSON.stringify(GetFormsResponse$outboundSchema.parse(getFormsResponse));
}
export function getFormsResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetFormsResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetFormsResponse' from JSON`);
}
//# sourceMappingURL=getforms.js.map