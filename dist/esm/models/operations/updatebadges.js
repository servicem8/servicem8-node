/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import * as components from "../components/index.js";
/** @internal */
export const UpdateBadgesRequest$inboundSchema = z.object({
    uuid: z.string(),
    Badge: components.BadgeInput$inboundSchema,
}).transform((v) => {
    return remap$(v, {
        "Badge": "badge",
    });
});
/** @internal */
export const UpdateBadgesRequest$outboundSchema = z.object({
    uuid: z.string(),
    badge: components.BadgeInput$outboundSchema,
}).transform((v) => {
    return remap$(v, {
        badge: "Badge",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateBadgesRequest$;
(function (UpdateBadgesRequest$) {
    /** @deprecated use `UpdateBadgesRequest$inboundSchema` instead. */
    UpdateBadgesRequest$.inboundSchema = UpdateBadgesRequest$inboundSchema;
    /** @deprecated use `UpdateBadgesRequest$outboundSchema` instead. */
    UpdateBadgesRequest$.outboundSchema = UpdateBadgesRequest$outboundSchema;
})(UpdateBadgesRequest$ || (UpdateBadgesRequest$ = {}));
export function updateBadgesRequestToJSON(updateBadgesRequest) {
    return JSON.stringify(UpdateBadgesRequest$outboundSchema.parse(updateBadgesRequest));
}
export function updateBadgesRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateBadgesRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateBadgesRequest' from JSON`);
}
/** @internal */
export const UpdateBadgesResponse$inboundSchema = z.union([components.Result$inboundSchema, components.ErrorT$inboundSchema]);
/** @internal */
export const UpdateBadgesResponse$outboundSchema = z.union([
    components.Result$outboundSchema,
    components.ErrorT$outboundSchema,
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateBadgesResponse$;
(function (UpdateBadgesResponse$) {
    /** @deprecated use `UpdateBadgesResponse$inboundSchema` instead. */
    UpdateBadgesResponse$.inboundSchema = UpdateBadgesResponse$inboundSchema;
    /** @deprecated use `UpdateBadgesResponse$outboundSchema` instead. */
    UpdateBadgesResponse$.outboundSchema = UpdateBadgesResponse$outboundSchema;
})(UpdateBadgesResponse$ || (UpdateBadgesResponse$ = {}));
export function updateBadgesResponseToJSON(updateBadgesResponse) {
    return JSON.stringify(UpdateBadgesResponse$outboundSchema.parse(updateBadgesResponse));
}
export function updateBadgesResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateBadgesResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateBadgesResponse' from JSON`);
}
//# sourceMappingURL=updatebadges.js.map