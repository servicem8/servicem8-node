/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import * as components from "../components/index.js";
/** @internal */
export const UpdateClientsRequest$inboundSchema = z.object({
    uuid: z.string(),
    Company: components.CompanyInput$inboundSchema,
}).transform((v) => {
    return remap$(v, {
        "Company": "company",
    });
});
/** @internal */
export const UpdateClientsRequest$outboundSchema = z.object({
    uuid: z.string(),
    company: components.CompanyInput$outboundSchema,
}).transform((v) => {
    return remap$(v, {
        company: "Company",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateClientsRequest$;
(function (UpdateClientsRequest$) {
    /** @deprecated use `UpdateClientsRequest$inboundSchema` instead. */
    UpdateClientsRequest$.inboundSchema = UpdateClientsRequest$inboundSchema;
    /** @deprecated use `UpdateClientsRequest$outboundSchema` instead. */
    UpdateClientsRequest$.outboundSchema = UpdateClientsRequest$outboundSchema;
})(UpdateClientsRequest$ || (UpdateClientsRequest$ = {}));
export function updateClientsRequestToJSON(updateClientsRequest) {
    return JSON.stringify(UpdateClientsRequest$outboundSchema.parse(updateClientsRequest));
}
export function updateClientsRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateClientsRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateClientsRequest' from JSON`);
}
/** @internal */
export const UpdateClientsResponse$inboundSchema = z.union([components.Result$inboundSchema, components.ErrorT$inboundSchema]);
/** @internal */
export const UpdateClientsResponse$outboundSchema = z.union([
    components.Result$outboundSchema,
    components.ErrorT$outboundSchema,
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateClientsResponse$;
(function (UpdateClientsResponse$) {
    /** @deprecated use `UpdateClientsResponse$inboundSchema` instead. */
    UpdateClientsResponse$.inboundSchema = UpdateClientsResponse$inboundSchema;
    /** @deprecated use `UpdateClientsResponse$outboundSchema` instead. */
    UpdateClientsResponse$.outboundSchema = UpdateClientsResponse$outboundSchema;
})(UpdateClientsResponse$ || (UpdateClientsResponse$ = {}));
export function updateClientsResponseToJSON(updateClientsResponse) {
    return JSON.stringify(UpdateClientsResponse$outboundSchema.parse(updateClientsResponse));
}
export function updateClientsResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateClientsResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateClientsResponse' from JSON`);
}
//# sourceMappingURL=updateclients.js.map