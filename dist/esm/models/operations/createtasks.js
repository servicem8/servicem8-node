/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import * as components from "../components/index.js";
/** @internal */
export const CreateTasksResponseResult$inboundSchema = z.union([components.Result$inboundSchema, components.ErrorT$inboundSchema]);
/** @internal */
export const CreateTasksResponseResult$outboundSchema = z.union([
    components.Result$outboundSchema,
    components.ErrorT$outboundSchema,
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateTasksResponseResult$;
(function (CreateTasksResponseResult$) {
    /** @deprecated use `CreateTasksResponseResult$inboundSchema` instead. */
    CreateTasksResponseResult$.inboundSchema = CreateTasksResponseResult$inboundSchema;
    /** @deprecated use `CreateTasksResponseResult$outboundSchema` instead. */
    CreateTasksResponseResult$.outboundSchema = CreateTasksResponseResult$outboundSchema;
})(CreateTasksResponseResult$ || (CreateTasksResponseResult$ = {}));
export function createTasksResponseResultToJSON(createTasksResponseResult) {
    return JSON.stringify(CreateTasksResponseResult$outboundSchema.parse(createTasksResponseResult));
}
export function createTasksResponseResultFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateTasksResponseResult$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateTasksResponseResult' from JSON`);
}
/** @internal */
export const CreateTasksResponse$inboundSchema = z.object({
    Headers: z.record(z.array(z.string())),
    Result: z.union([
        components.Result$inboundSchema,
        components.ErrorT$inboundSchema,
    ]),
}).transform((v) => {
    return remap$(v, {
        "Headers": "headers",
        "Result": "result",
    });
});
/** @internal */
export const CreateTasksResponse$outboundSchema = z.object({
    headers: z.record(z.array(z.string())),
    result: z.union([
        components.Result$outboundSchema,
        components.ErrorT$outboundSchema,
    ]),
}).transform((v) => {
    return remap$(v, {
        headers: "Headers",
        result: "Result",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateTasksResponse$;
(function (CreateTasksResponse$) {
    /** @deprecated use `CreateTasksResponse$inboundSchema` instead. */
    CreateTasksResponse$.inboundSchema = CreateTasksResponse$inboundSchema;
    /** @deprecated use `CreateTasksResponse$outboundSchema` instead. */
    CreateTasksResponse$.outboundSchema = CreateTasksResponse$outboundSchema;
})(CreateTasksResponse$ || (CreateTasksResponse$ = {}));
export function createTasksResponseToJSON(createTasksResponse) {
    return JSON.stringify(CreateTasksResponse$outboundSchema.parse(createTasksResponse));
}
export function createTasksResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateTasksResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateTasksResponse' from JSON`);
}
//# sourceMappingURL=createtasks.js.map