/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import * as components from "../components/index.js";
/** @internal */
export const DeleteClientsRequest$inboundSchema = z.object({
    uuid: z.string(),
});
/** @internal */
export const DeleteClientsRequest$outboundSchema = z.object({
    uuid: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var DeleteClientsRequest$;
(function (DeleteClientsRequest$) {
    /** @deprecated use `DeleteClientsRequest$inboundSchema` instead. */
    DeleteClientsRequest$.inboundSchema = DeleteClientsRequest$inboundSchema;
    /** @deprecated use `DeleteClientsRequest$outboundSchema` instead. */
    DeleteClientsRequest$.outboundSchema = DeleteClientsRequest$outboundSchema;
})(DeleteClientsRequest$ || (DeleteClientsRequest$ = {}));
export function deleteClientsRequestToJSON(deleteClientsRequest) {
    return JSON.stringify(DeleteClientsRequest$outboundSchema.parse(deleteClientsRequest));
}
export function deleteClientsRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => DeleteClientsRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'DeleteClientsRequest' from JSON`);
}
/** @internal */
export const DeleteClientsResponse$inboundSchema = z.union([components.Result$inboundSchema, components.ErrorT$inboundSchema]);
/** @internal */
export const DeleteClientsResponse$outboundSchema = z.union([
    components.Result$outboundSchema,
    components.ErrorT$outboundSchema,
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var DeleteClientsResponse$;
(function (DeleteClientsResponse$) {
    /** @deprecated use `DeleteClientsResponse$inboundSchema` instead. */
    DeleteClientsResponse$.inboundSchema = DeleteClientsResponse$inboundSchema;
    /** @deprecated use `DeleteClientsResponse$outboundSchema` instead. */
    DeleteClientsResponse$.outboundSchema = DeleteClientsResponse$outboundSchema;
})(DeleteClientsResponse$ || (DeleteClientsResponse$ = {}));
export function deleteClientsResponseToJSON(deleteClientsResponse) {
    return JSON.stringify(DeleteClientsResponse$outboundSchema.parse(deleteClientsResponse));
}
export function deleteClientsResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => DeleteClientsResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'DeleteClientsResponse' from JSON`);
}
//# sourceMappingURL=deleteclients.js.map