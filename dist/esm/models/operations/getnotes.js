/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import * as components from "../components/index.js";
/** @internal */
export const GetNotesRequest$inboundSchema = z.object({
    uuid: z.string(),
});
/** @internal */
export const GetNotesRequest$outboundSchema = z.object({
    uuid: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetNotesRequest$;
(function (GetNotesRequest$) {
    /** @deprecated use `GetNotesRequest$inboundSchema` instead. */
    GetNotesRequest$.inboundSchema = GetNotesRequest$inboundSchema;
    /** @deprecated use `GetNotesRequest$outboundSchema` instead. */
    GetNotesRequest$.outboundSchema = GetNotesRequest$outboundSchema;
})(GetNotesRequest$ || (GetNotesRequest$ = {}));
export function getNotesRequestToJSON(getNotesRequest) {
    return JSON.stringify(GetNotesRequest$outboundSchema.parse(getNotesRequest));
}
export function getNotesRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetNotesRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetNotesRequest' from JSON`);
}
/** @internal */
export const GetNotesResponse$inboundSchema = z.union([components.ErrorT$inboundSchema, components.Note$inboundSchema]);
/** @internal */
export const GetNotesResponse$outboundSchema = z.union([components.ErrorT$outboundSchema, components.Note$outboundSchema]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetNotesResponse$;
(function (GetNotesResponse$) {
    /** @deprecated use `GetNotesResponse$inboundSchema` instead. */
    GetNotesResponse$.inboundSchema = GetNotesResponse$inboundSchema;
    /** @deprecated use `GetNotesResponse$outboundSchema` instead. */
    GetNotesResponse$.outboundSchema = GetNotesResponse$outboundSchema;
})(GetNotesResponse$ || (GetNotesResponse$ = {}));
export function getNotesResponseToJSON(getNotesResponse) {
    return JSON.stringify(GetNotesResponse$outboundSchema.parse(getNotesResponse));
}
export function getNotesResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetNotesResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetNotesResponse' from JSON`);
}
//# sourceMappingURL=getnotes.js.map