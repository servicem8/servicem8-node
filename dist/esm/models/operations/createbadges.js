/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import * as components from "../components/index.js";
/** @internal */
export const CreateBadgesResponseResult$inboundSchema = z.union([components.Result$inboundSchema, components.ErrorT$inboundSchema]);
/** @internal */
export const CreateBadgesResponseResult$outboundSchema = z.union([
    components.Result$outboundSchema,
    components.ErrorT$outboundSchema,
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateBadgesResponseResult$;
(function (CreateBadgesResponseResult$) {
    /** @deprecated use `CreateBadgesResponseResult$inboundSchema` instead. */
    CreateBadgesResponseResult$.inboundSchema = CreateBadgesResponseResult$inboundSchema;
    /** @deprecated use `CreateBadgesResponseResult$outboundSchema` instead. */
    CreateBadgesResponseResult$.outboundSchema = CreateBadgesResponseResult$outboundSchema;
})(CreateBadgesResponseResult$ || (CreateBadgesResponseResult$ = {}));
export function createBadgesResponseResultToJSON(createBadgesResponseResult) {
    return JSON.stringify(CreateBadgesResponseResult$outboundSchema.parse(createBadgesResponseResult));
}
export function createBadgesResponseResultFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateBadgesResponseResult$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateBadgesResponseResult' from JSON`);
}
/** @internal */
export const CreateBadgesResponse$inboundSchema = z.object({
    Headers: z.record(z.array(z.string())),
    Result: z.union([
        components.Result$inboundSchema,
        components.ErrorT$inboundSchema,
    ]),
}).transform((v) => {
    return remap$(v, {
        "Headers": "headers",
        "Result": "result",
    });
});
/** @internal */
export const CreateBadgesResponse$outboundSchema = z.object({
    headers: z.record(z.array(z.string())),
    result: z.union([
        components.Result$outboundSchema,
        components.ErrorT$outboundSchema,
    ]),
}).transform((v) => {
    return remap$(v, {
        headers: "Headers",
        result: "Result",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateBadgesResponse$;
(function (CreateBadgesResponse$) {
    /** @deprecated use `CreateBadgesResponse$inboundSchema` instead. */
    CreateBadgesResponse$.inboundSchema = CreateBadgesResponse$inboundSchema;
    /** @deprecated use `CreateBadgesResponse$outboundSchema` instead. */
    CreateBadgesResponse$.outboundSchema = CreateBadgesResponse$outboundSchema;
})(CreateBadgesResponse$ || (CreateBadgesResponse$ = {}));
export function createBadgesResponseToJSON(createBadgesResponse) {
    return JSON.stringify(CreateBadgesResponse$outboundSchema.parse(createBadgesResponse));
}
export function createBadgesResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateBadgesResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateBadgesResponse' from JSON`);
}
//# sourceMappingURL=createbadges.js.map