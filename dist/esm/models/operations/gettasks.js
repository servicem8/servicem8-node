/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import * as components from "../components/index.js";
/** @internal */
export const GetTasksRequest$inboundSchema = z.object({
    uuid: z.string(),
});
/** @internal */
export const GetTasksRequest$outboundSchema = z.object({
    uuid: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetTasksRequest$;
(function (GetTasksRequest$) {
    /** @deprecated use `GetTasksRequest$inboundSchema` instead. */
    GetTasksRequest$.inboundSchema = GetTasksRequest$inboundSchema;
    /** @deprecated use `GetTasksRequest$outboundSchema` instead. */
    GetTasksRequest$.outboundSchema = GetTasksRequest$outboundSchema;
})(GetTasksRequest$ || (GetTasksRequest$ = {}));
export function getTasksRequestToJSON(getTasksRequest) {
    return JSON.stringify(GetTasksRequest$outboundSchema.parse(getTasksRequest));
}
export function getTasksRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetTasksRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetTasksRequest' from JSON`);
}
/** @internal */
export const GetTasksResponse$inboundSchema = z.union([components.ErrorT$inboundSchema, components.Task$inboundSchema]);
/** @internal */
export const GetTasksResponse$outboundSchema = z.union([components.ErrorT$outboundSchema, components.Task$outboundSchema]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetTasksResponse$;
(function (GetTasksResponse$) {
    /** @deprecated use `GetTasksResponse$inboundSchema` instead. */
    GetTasksResponse$.inboundSchema = GetTasksResponse$inboundSchema;
    /** @deprecated use `GetTasksResponse$outboundSchema` instead. */
    GetTasksResponse$.outboundSchema = GetTasksResponse$outboundSchema;
})(GetTasksResponse$ || (GetTasksResponse$ = {}));
export function getTasksResponseToJSON(getTasksResponse) {
    return JSON.stringify(GetTasksResponse$outboundSchema.parse(getTasksResponse));
}
export function getTasksResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetTasksResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetTasksResponse' from JSON`);
}
//# sourceMappingURL=gettasks.js.map