/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { ServiceM8Error } from "./servicem8error.js";

export type AuthenticationErrorData = {
  errorCode?: number | undefined;
  message?: string | undefined;
};

export class AuthenticationError extends ServiceM8Error {
  errorCode?: number | undefined;

  /** The original data that was passed to this error instance. */
  data$: AuthenticationErrorData;

  constructor(
    err: AuthenticationErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.errorCode != null) this.errorCode = err.errorCode;

    this.name = "AuthenticationError";
  }
}

/** @internal */
export const AuthenticationError$inboundSchema: z.ZodType<
  AuthenticationError,
  z.ZodTypeDef,
  unknown
> = z.object({
  errorCode: z.number().optional(),
  message: z.string().optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new AuthenticationError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type AuthenticationError$Outbound = {
  errorCode?: number | undefined;
  message?: string | undefined;
};

/** @internal */
export const AuthenticationError$outboundSchema: z.ZodType<
  AuthenticationError$Outbound,
  z.ZodTypeDef,
  AuthenticationError
> = z.instanceof(AuthenticationError)
  .transform(v => v.data$)
  .pipe(z.object({
    errorCode: z.number().optional(),
    message: z.string().optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthenticationError$ {
  /** @deprecated use `AuthenticationError$inboundSchema` instead. */
  export const inboundSchema = AuthenticationError$inboundSchema;
  /** @deprecated use `AuthenticationError$outboundSchema` instead. */
  export const outboundSchema = AuthenticationError$outboundSchema;
  /** @deprecated use `AuthenticationError$Outbound` instead. */
  export type Outbound = AuthenticationError$Outbound;
}
