/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpdateJobsRequest = {
  /**
   * UUID of the Job
   */
  uuid: string;
  /**
   * Job fields to update
   */
  jobCreate: components.JobCreate;
};

/** @internal */
export const UpdateJobsRequest$inboundSchema: z.ZodType<
  UpdateJobsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string(),
  JobCreate: components.JobCreate$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "JobCreate": "jobCreate",
  });
});

/** @internal */
export type UpdateJobsRequest$Outbound = {
  uuid: string;
  JobCreate: components.JobCreate$Outbound;
};

/** @internal */
export const UpdateJobsRequest$outboundSchema: z.ZodType<
  UpdateJobsRequest$Outbound,
  z.ZodTypeDef,
  UpdateJobsRequest
> = z.object({
  uuid: z.string(),
  jobCreate: components.JobCreate$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    jobCreate: "JobCreate",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateJobsRequest$ {
  /** @deprecated use `UpdateJobsRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateJobsRequest$inboundSchema;
  /** @deprecated use `UpdateJobsRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateJobsRequest$outboundSchema;
  /** @deprecated use `UpdateJobsRequest$Outbound` instead. */
  export type Outbound = UpdateJobsRequest$Outbound;
}

export function updateJobsRequestToJSON(
  updateJobsRequest: UpdateJobsRequest,
): string {
  return JSON.stringify(
    UpdateJobsRequest$outboundSchema.parse(updateJobsRequest),
  );
}

export function updateJobsRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateJobsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateJobsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateJobsRequest' from JSON`,
  );
}
