/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteSuppliersRequest = {
  /**
   * UUID of the Supplier
   */
  uuid: string;
};

/** @internal */
export const DeleteSuppliersRequest$inboundSchema: z.ZodType<
  DeleteSuppliersRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string(),
});

/** @internal */
export type DeleteSuppliersRequest$Outbound = {
  uuid: string;
};

/** @internal */
export const DeleteSuppliersRequest$outboundSchema: z.ZodType<
  DeleteSuppliersRequest$Outbound,
  z.ZodTypeDef,
  DeleteSuppliersRequest
> = z.object({
  uuid: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteSuppliersRequest$ {
  /** @deprecated use `DeleteSuppliersRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteSuppliersRequest$inboundSchema;
  /** @deprecated use `DeleteSuppliersRequest$outboundSchema` instead. */
  export const outboundSchema = DeleteSuppliersRequest$outboundSchema;
  /** @deprecated use `DeleteSuppliersRequest$Outbound` instead. */
  export type Outbound = DeleteSuppliersRequest$Outbound;
}

export function deleteSuppliersRequestToJSON(
  deleteSuppliersRequest: DeleteSuppliersRequest,
): string {
  return JSON.stringify(
    DeleteSuppliersRequest$outboundSchema.parse(deleteSuppliersRequest),
  );
}

export function deleteSuppliersRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteSuppliersRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteSuppliersRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteSuppliersRequest' from JSON`,
  );
}
