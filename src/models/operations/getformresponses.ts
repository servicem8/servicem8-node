/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetFormResponsesRequest = {
  /**
   * UUID of the Form Response
   */
  uuid: string;
};

export type GetFormResponsesResponse =
  | components.FormResponse
  | components.ErrorT;

/** @internal */
export const GetFormResponsesRequest$inboundSchema: z.ZodType<
  GetFormResponsesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string(),
});

/** @internal */
export type GetFormResponsesRequest$Outbound = {
  uuid: string;
};

/** @internal */
export const GetFormResponsesRequest$outboundSchema: z.ZodType<
  GetFormResponsesRequest$Outbound,
  z.ZodTypeDef,
  GetFormResponsesRequest
> = z.object({
  uuid: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetFormResponsesRequest$ {
  /** @deprecated use `GetFormResponsesRequest$inboundSchema` instead. */
  export const inboundSchema = GetFormResponsesRequest$inboundSchema;
  /** @deprecated use `GetFormResponsesRequest$outboundSchema` instead. */
  export const outboundSchema = GetFormResponsesRequest$outboundSchema;
  /** @deprecated use `GetFormResponsesRequest$Outbound` instead. */
  export type Outbound = GetFormResponsesRequest$Outbound;
}

export function getFormResponsesRequestToJSON(
  getFormResponsesRequest: GetFormResponsesRequest,
): string {
  return JSON.stringify(
    GetFormResponsesRequest$outboundSchema.parse(getFormResponsesRequest),
  );
}

export function getFormResponsesRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetFormResponsesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetFormResponsesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetFormResponsesRequest' from JSON`,
  );
}

/** @internal */
export const GetFormResponsesResponse$inboundSchema: z.ZodType<
  GetFormResponsesResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  components.FormResponse$inboundSchema,
  components.ErrorT$inboundSchema,
]);

/** @internal */
export type GetFormResponsesResponse$Outbound =
  | components.FormResponse$Outbound
  | components.ErrorT$Outbound;

/** @internal */
export const GetFormResponsesResponse$outboundSchema: z.ZodType<
  GetFormResponsesResponse$Outbound,
  z.ZodTypeDef,
  GetFormResponsesResponse
> = z.union([
  components.FormResponse$outboundSchema,
  components.ErrorT$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetFormResponsesResponse$ {
  /** @deprecated use `GetFormResponsesResponse$inboundSchema` instead. */
  export const inboundSchema = GetFormResponsesResponse$inboundSchema;
  /** @deprecated use `GetFormResponsesResponse$outboundSchema` instead. */
  export const outboundSchema = GetFormResponsesResponse$outboundSchema;
  /** @deprecated use `GetFormResponsesResponse$Outbound` instead. */
  export type Outbound = GetFormResponsesResponse$Outbound;
}

export function getFormResponsesResponseToJSON(
  getFormResponsesResponse: GetFormResponsesResponse,
): string {
  return JSON.stringify(
    GetFormResponsesResponse$outboundSchema.parse(getFormResponsesResponse),
  );
}

export function getFormResponsesResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetFormResponsesResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetFormResponsesResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetFormResponsesResponse' from JSON`,
  );
}
