/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpdateJobMaterialsSecurity = {
  apiKey?: string | undefined;
  oauth2?: string | undefined;
};

export type UpdateJobMaterialsRequest = {
  /**
   * UUID of the Job Material
   */
  uuid: string;
  /**
   * Job Material fields to update
   */
  jobMaterial: components.JobMaterialInput;
};

export type UpdateJobMaterialsResponse = components.Result | components.ErrorT;

/** @internal */
export const UpdateJobMaterialsSecurity$inboundSchema: z.ZodType<
  UpdateJobMaterialsSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  apiKey: z.string().optional(),
  oauth2: z.string().optional(),
});

/** @internal */
export type UpdateJobMaterialsSecurity$Outbound = {
  apiKey?: string | undefined;
  oauth2?: string | undefined;
};

/** @internal */
export const UpdateJobMaterialsSecurity$outboundSchema: z.ZodType<
  UpdateJobMaterialsSecurity$Outbound,
  z.ZodTypeDef,
  UpdateJobMaterialsSecurity
> = z.object({
  apiKey: z.string().optional(),
  oauth2: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateJobMaterialsSecurity$ {
  /** @deprecated use `UpdateJobMaterialsSecurity$inboundSchema` instead. */
  export const inboundSchema = UpdateJobMaterialsSecurity$inboundSchema;
  /** @deprecated use `UpdateJobMaterialsSecurity$outboundSchema` instead. */
  export const outboundSchema = UpdateJobMaterialsSecurity$outboundSchema;
  /** @deprecated use `UpdateJobMaterialsSecurity$Outbound` instead. */
  export type Outbound = UpdateJobMaterialsSecurity$Outbound;
}

export function updateJobMaterialsSecurityToJSON(
  updateJobMaterialsSecurity: UpdateJobMaterialsSecurity,
): string {
  return JSON.stringify(
    UpdateJobMaterialsSecurity$outboundSchema.parse(updateJobMaterialsSecurity),
  );
}

export function updateJobMaterialsSecurityFromJSON(
  jsonString: string,
): SafeParseResult<UpdateJobMaterialsSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateJobMaterialsSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateJobMaterialsSecurity' from JSON`,
  );
}

/** @internal */
export const UpdateJobMaterialsRequest$inboundSchema: z.ZodType<
  UpdateJobMaterialsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string(),
  JobMaterial: components.JobMaterialInput$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "JobMaterial": "jobMaterial",
  });
});

/** @internal */
export type UpdateJobMaterialsRequest$Outbound = {
  uuid: string;
  JobMaterial: components.JobMaterialInput$Outbound;
};

/** @internal */
export const UpdateJobMaterialsRequest$outboundSchema: z.ZodType<
  UpdateJobMaterialsRequest$Outbound,
  z.ZodTypeDef,
  UpdateJobMaterialsRequest
> = z.object({
  uuid: z.string(),
  jobMaterial: components.JobMaterialInput$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    jobMaterial: "JobMaterial",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateJobMaterialsRequest$ {
  /** @deprecated use `UpdateJobMaterialsRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateJobMaterialsRequest$inboundSchema;
  /** @deprecated use `UpdateJobMaterialsRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateJobMaterialsRequest$outboundSchema;
  /** @deprecated use `UpdateJobMaterialsRequest$Outbound` instead. */
  export type Outbound = UpdateJobMaterialsRequest$Outbound;
}

export function updateJobMaterialsRequestToJSON(
  updateJobMaterialsRequest: UpdateJobMaterialsRequest,
): string {
  return JSON.stringify(
    UpdateJobMaterialsRequest$outboundSchema.parse(updateJobMaterialsRequest),
  );
}

export function updateJobMaterialsRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateJobMaterialsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateJobMaterialsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateJobMaterialsRequest' from JSON`,
  );
}

/** @internal */
export const UpdateJobMaterialsResponse$inboundSchema: z.ZodType<
  UpdateJobMaterialsResponse,
  z.ZodTypeDef,
  unknown
> = z.union([components.Result$inboundSchema, components.ErrorT$inboundSchema]);

/** @internal */
export type UpdateJobMaterialsResponse$Outbound =
  | components.Result$Outbound
  | components.ErrorT$Outbound;

/** @internal */
export const UpdateJobMaterialsResponse$outboundSchema: z.ZodType<
  UpdateJobMaterialsResponse$Outbound,
  z.ZodTypeDef,
  UpdateJobMaterialsResponse
> = z.union([
  components.Result$outboundSchema,
  components.ErrorT$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateJobMaterialsResponse$ {
  /** @deprecated use `UpdateJobMaterialsResponse$inboundSchema` instead. */
  export const inboundSchema = UpdateJobMaterialsResponse$inboundSchema;
  /** @deprecated use `UpdateJobMaterialsResponse$outboundSchema` instead. */
  export const outboundSchema = UpdateJobMaterialsResponse$outboundSchema;
  /** @deprecated use `UpdateJobMaterialsResponse$Outbound` instead. */
  export type Outbound = UpdateJobMaterialsResponse$Outbound;
}

export function updateJobMaterialsResponseToJSON(
  updateJobMaterialsResponse: UpdateJobMaterialsResponse,
): string {
  return JSON.stringify(
    UpdateJobMaterialsResponse$outboundSchema.parse(updateJobMaterialsResponse),
  );
}

export function updateJobMaterialsResponseFromJSON(
  jsonString: string,
): SafeParseResult<UpdateJobMaterialsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateJobMaterialsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateJobMaterialsResponse' from JSON`,
  );
}
