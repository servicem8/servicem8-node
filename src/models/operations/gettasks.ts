/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetTasksRequest = {
  /**
   * UUID of the Task
   */
  uuid: string;
};

export type GetTasksResponse = components.ErrorT | components.Task;

/** @internal */
export const GetTasksRequest$inboundSchema: z.ZodType<
  GetTasksRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string(),
});

/** @internal */
export type GetTasksRequest$Outbound = {
  uuid: string;
};

/** @internal */
export const GetTasksRequest$outboundSchema: z.ZodType<
  GetTasksRequest$Outbound,
  z.ZodTypeDef,
  GetTasksRequest
> = z.object({
  uuid: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTasksRequest$ {
  /** @deprecated use `GetTasksRequest$inboundSchema` instead. */
  export const inboundSchema = GetTasksRequest$inboundSchema;
  /** @deprecated use `GetTasksRequest$outboundSchema` instead. */
  export const outboundSchema = GetTasksRequest$outboundSchema;
  /** @deprecated use `GetTasksRequest$Outbound` instead. */
  export type Outbound = GetTasksRequest$Outbound;
}

export function getTasksRequestToJSON(
  getTasksRequest: GetTasksRequest,
): string {
  return JSON.stringify(GetTasksRequest$outboundSchema.parse(getTasksRequest));
}

export function getTasksRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetTasksRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetTasksRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetTasksRequest' from JSON`,
  );
}

/** @internal */
export const GetTasksResponse$inboundSchema: z.ZodType<
  GetTasksResponse,
  z.ZodTypeDef,
  unknown
> = z.union([components.ErrorT$inboundSchema, components.Task$inboundSchema]);

/** @internal */
export type GetTasksResponse$Outbound =
  | components.ErrorT$Outbound
  | components.Task$Outbound;

/** @internal */
export const GetTasksResponse$outboundSchema: z.ZodType<
  GetTasksResponse$Outbound,
  z.ZodTypeDef,
  GetTasksResponse
> = z.union([components.ErrorT$outboundSchema, components.Task$outboundSchema]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTasksResponse$ {
  /** @deprecated use `GetTasksResponse$inboundSchema` instead. */
  export const inboundSchema = GetTasksResponse$inboundSchema;
  /** @deprecated use `GetTasksResponse$outboundSchema` instead. */
  export const outboundSchema = GetTasksResponse$outboundSchema;
  /** @deprecated use `GetTasksResponse$Outbound` instead. */
  export type Outbound = GetTasksResponse$Outbound;
}

export function getTasksResponseToJSON(
  getTasksResponse: GetTasksResponse,
): string {
  return JSON.stringify(
    GetTasksResponse$outboundSchema.parse(getTasksResponse),
  );
}

export function getTasksResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetTasksResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetTasksResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetTasksResponse' from JSON`,
  );
}
