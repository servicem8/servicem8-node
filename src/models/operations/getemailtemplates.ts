/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetEmailTemplatesSecurity = {
  apiKey?: string | undefined;
  oauth2?: string | undefined;
};

export type GetEmailTemplatesRequest = {
  /**
   * UUID of the Email Template
   */
  uuid: string;
};

export type GetEmailTemplatesResponse =
  | components.ErrorT
  | components.EmailTemplate;

/** @internal */
export const GetEmailTemplatesSecurity$inboundSchema: z.ZodType<
  GetEmailTemplatesSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  apiKey: z.string().optional(),
  oauth2: z.string().optional(),
});

/** @internal */
export type GetEmailTemplatesSecurity$Outbound = {
  apiKey?: string | undefined;
  oauth2?: string | undefined;
};

/** @internal */
export const GetEmailTemplatesSecurity$outboundSchema: z.ZodType<
  GetEmailTemplatesSecurity$Outbound,
  z.ZodTypeDef,
  GetEmailTemplatesSecurity
> = z.object({
  apiKey: z.string().optional(),
  oauth2: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetEmailTemplatesSecurity$ {
  /** @deprecated use `GetEmailTemplatesSecurity$inboundSchema` instead. */
  export const inboundSchema = GetEmailTemplatesSecurity$inboundSchema;
  /** @deprecated use `GetEmailTemplatesSecurity$outboundSchema` instead. */
  export const outboundSchema = GetEmailTemplatesSecurity$outboundSchema;
  /** @deprecated use `GetEmailTemplatesSecurity$Outbound` instead. */
  export type Outbound = GetEmailTemplatesSecurity$Outbound;
}

export function getEmailTemplatesSecurityToJSON(
  getEmailTemplatesSecurity: GetEmailTemplatesSecurity,
): string {
  return JSON.stringify(
    GetEmailTemplatesSecurity$outboundSchema.parse(getEmailTemplatesSecurity),
  );
}

export function getEmailTemplatesSecurityFromJSON(
  jsonString: string,
): SafeParseResult<GetEmailTemplatesSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetEmailTemplatesSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetEmailTemplatesSecurity' from JSON`,
  );
}

/** @internal */
export const GetEmailTemplatesRequest$inboundSchema: z.ZodType<
  GetEmailTemplatesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string(),
});

/** @internal */
export type GetEmailTemplatesRequest$Outbound = {
  uuid: string;
};

/** @internal */
export const GetEmailTemplatesRequest$outboundSchema: z.ZodType<
  GetEmailTemplatesRequest$Outbound,
  z.ZodTypeDef,
  GetEmailTemplatesRequest
> = z.object({
  uuid: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetEmailTemplatesRequest$ {
  /** @deprecated use `GetEmailTemplatesRequest$inboundSchema` instead. */
  export const inboundSchema = GetEmailTemplatesRequest$inboundSchema;
  /** @deprecated use `GetEmailTemplatesRequest$outboundSchema` instead. */
  export const outboundSchema = GetEmailTemplatesRequest$outboundSchema;
  /** @deprecated use `GetEmailTemplatesRequest$Outbound` instead. */
  export type Outbound = GetEmailTemplatesRequest$Outbound;
}

export function getEmailTemplatesRequestToJSON(
  getEmailTemplatesRequest: GetEmailTemplatesRequest,
): string {
  return JSON.stringify(
    GetEmailTemplatesRequest$outboundSchema.parse(getEmailTemplatesRequest),
  );
}

export function getEmailTemplatesRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetEmailTemplatesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetEmailTemplatesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetEmailTemplatesRequest' from JSON`,
  );
}

/** @internal */
export const GetEmailTemplatesResponse$inboundSchema: z.ZodType<
  GetEmailTemplatesResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  components.ErrorT$inboundSchema,
  components.EmailTemplate$inboundSchema,
]);

/** @internal */
export type GetEmailTemplatesResponse$Outbound =
  | components.ErrorT$Outbound
  | components.EmailTemplate$Outbound;

/** @internal */
export const GetEmailTemplatesResponse$outboundSchema: z.ZodType<
  GetEmailTemplatesResponse$Outbound,
  z.ZodTypeDef,
  GetEmailTemplatesResponse
> = z.union([
  components.ErrorT$outboundSchema,
  components.EmailTemplate$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetEmailTemplatesResponse$ {
  /** @deprecated use `GetEmailTemplatesResponse$inboundSchema` instead. */
  export const inboundSchema = GetEmailTemplatesResponse$inboundSchema;
  /** @deprecated use `GetEmailTemplatesResponse$outboundSchema` instead. */
  export const outboundSchema = GetEmailTemplatesResponse$outboundSchema;
  /** @deprecated use `GetEmailTemplatesResponse$Outbound` instead. */
  export type Outbound = GetEmailTemplatesResponse$Outbound;
}

export function getEmailTemplatesResponseToJSON(
  getEmailTemplatesResponse: GetEmailTemplatesResponse,
): string {
  return JSON.stringify(
    GetEmailTemplatesResponse$outboundSchema.parse(getEmailTemplatesResponse),
  );
}

export function getEmailTemplatesResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetEmailTemplatesResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetEmailTemplatesResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetEmailTemplatesResponse' from JSON`,
  );
}
