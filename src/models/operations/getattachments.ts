/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetAttachmentsSecurity = {
  apiKey?: string | undefined;
  oauth2?: string | undefined;
};

export type GetAttachmentsRequest = {
  /**
   * UUID of the Attachment
   */
  uuid: string;
};

export type GetAttachmentsResponse = components.ErrorT | components.Attachment;

/** @internal */
export const GetAttachmentsSecurity$inboundSchema: z.ZodType<
  GetAttachmentsSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  apiKey: z.string().optional(),
  oauth2: z.string().optional(),
});

/** @internal */
export type GetAttachmentsSecurity$Outbound = {
  apiKey?: string | undefined;
  oauth2?: string | undefined;
};

/** @internal */
export const GetAttachmentsSecurity$outboundSchema: z.ZodType<
  GetAttachmentsSecurity$Outbound,
  z.ZodTypeDef,
  GetAttachmentsSecurity
> = z.object({
  apiKey: z.string().optional(),
  oauth2: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAttachmentsSecurity$ {
  /** @deprecated use `GetAttachmentsSecurity$inboundSchema` instead. */
  export const inboundSchema = GetAttachmentsSecurity$inboundSchema;
  /** @deprecated use `GetAttachmentsSecurity$outboundSchema` instead. */
  export const outboundSchema = GetAttachmentsSecurity$outboundSchema;
  /** @deprecated use `GetAttachmentsSecurity$Outbound` instead. */
  export type Outbound = GetAttachmentsSecurity$Outbound;
}

export function getAttachmentsSecurityToJSON(
  getAttachmentsSecurity: GetAttachmentsSecurity,
): string {
  return JSON.stringify(
    GetAttachmentsSecurity$outboundSchema.parse(getAttachmentsSecurity),
  );
}

export function getAttachmentsSecurityFromJSON(
  jsonString: string,
): SafeParseResult<GetAttachmentsSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAttachmentsSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAttachmentsSecurity' from JSON`,
  );
}

/** @internal */
export const GetAttachmentsRequest$inboundSchema: z.ZodType<
  GetAttachmentsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string(),
});

/** @internal */
export type GetAttachmentsRequest$Outbound = {
  uuid: string;
};

/** @internal */
export const GetAttachmentsRequest$outboundSchema: z.ZodType<
  GetAttachmentsRequest$Outbound,
  z.ZodTypeDef,
  GetAttachmentsRequest
> = z.object({
  uuid: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAttachmentsRequest$ {
  /** @deprecated use `GetAttachmentsRequest$inboundSchema` instead. */
  export const inboundSchema = GetAttachmentsRequest$inboundSchema;
  /** @deprecated use `GetAttachmentsRequest$outboundSchema` instead. */
  export const outboundSchema = GetAttachmentsRequest$outboundSchema;
  /** @deprecated use `GetAttachmentsRequest$Outbound` instead. */
  export type Outbound = GetAttachmentsRequest$Outbound;
}

export function getAttachmentsRequestToJSON(
  getAttachmentsRequest: GetAttachmentsRequest,
): string {
  return JSON.stringify(
    GetAttachmentsRequest$outboundSchema.parse(getAttachmentsRequest),
  );
}

export function getAttachmentsRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetAttachmentsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAttachmentsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAttachmentsRequest' from JSON`,
  );
}

/** @internal */
export const GetAttachmentsResponse$inboundSchema: z.ZodType<
  GetAttachmentsResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  components.ErrorT$inboundSchema,
  components.Attachment$inboundSchema,
]);

/** @internal */
export type GetAttachmentsResponse$Outbound =
  | components.ErrorT$Outbound
  | components.Attachment$Outbound;

/** @internal */
export const GetAttachmentsResponse$outboundSchema: z.ZodType<
  GetAttachmentsResponse$Outbound,
  z.ZodTypeDef,
  GetAttachmentsResponse
> = z.union([
  components.ErrorT$outboundSchema,
  components.Attachment$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAttachmentsResponse$ {
  /** @deprecated use `GetAttachmentsResponse$inboundSchema` instead. */
  export const inboundSchema = GetAttachmentsResponse$inboundSchema;
  /** @deprecated use `GetAttachmentsResponse$outboundSchema` instead. */
  export const outboundSchema = GetAttachmentsResponse$outboundSchema;
  /** @deprecated use `GetAttachmentsResponse$Outbound` instead. */
  export type Outbound = GetAttachmentsResponse$Outbound;
}

export function getAttachmentsResponseToJSON(
  getAttachmentsResponse: GetAttachmentsResponse,
): string {
  return JSON.stringify(
    GetAttachmentsResponse$outboundSchema.parse(getAttachmentsResponse),
  );
}

export function getAttachmentsResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetAttachmentsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAttachmentsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAttachmentsResponse' from JSON`,
  );
}
