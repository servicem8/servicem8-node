/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListEmailTemplatesSecurity = {
  apiKey?: string | undefined;
  oauth2?: string | undefined;
};

export type ListEmailTemplatesResponse =
  | components.ErrorT
  | Array<components.EmailTemplate>;

/** @internal */
export const ListEmailTemplatesSecurity$inboundSchema: z.ZodType<
  ListEmailTemplatesSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  apiKey: z.string().optional(),
  oauth2: z.string().optional(),
});

/** @internal */
export type ListEmailTemplatesSecurity$Outbound = {
  apiKey?: string | undefined;
  oauth2?: string | undefined;
};

/** @internal */
export const ListEmailTemplatesSecurity$outboundSchema: z.ZodType<
  ListEmailTemplatesSecurity$Outbound,
  z.ZodTypeDef,
  ListEmailTemplatesSecurity
> = z.object({
  apiKey: z.string().optional(),
  oauth2: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListEmailTemplatesSecurity$ {
  /** @deprecated use `ListEmailTemplatesSecurity$inboundSchema` instead. */
  export const inboundSchema = ListEmailTemplatesSecurity$inboundSchema;
  /** @deprecated use `ListEmailTemplatesSecurity$outboundSchema` instead. */
  export const outboundSchema = ListEmailTemplatesSecurity$outboundSchema;
  /** @deprecated use `ListEmailTemplatesSecurity$Outbound` instead. */
  export type Outbound = ListEmailTemplatesSecurity$Outbound;
}

export function listEmailTemplatesSecurityToJSON(
  listEmailTemplatesSecurity: ListEmailTemplatesSecurity,
): string {
  return JSON.stringify(
    ListEmailTemplatesSecurity$outboundSchema.parse(listEmailTemplatesSecurity),
  );
}

export function listEmailTemplatesSecurityFromJSON(
  jsonString: string,
): SafeParseResult<ListEmailTemplatesSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListEmailTemplatesSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListEmailTemplatesSecurity' from JSON`,
  );
}

/** @internal */
export const ListEmailTemplatesResponse$inboundSchema: z.ZodType<
  ListEmailTemplatesResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  components.ErrorT$inboundSchema,
  z.array(components.EmailTemplate$inboundSchema),
]);

/** @internal */
export type ListEmailTemplatesResponse$Outbound =
  | components.ErrorT$Outbound
  | Array<components.EmailTemplate$Outbound>;

/** @internal */
export const ListEmailTemplatesResponse$outboundSchema: z.ZodType<
  ListEmailTemplatesResponse$Outbound,
  z.ZodTypeDef,
  ListEmailTemplatesResponse
> = z.union([
  components.ErrorT$outboundSchema,
  z.array(components.EmailTemplate$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListEmailTemplatesResponse$ {
  /** @deprecated use `ListEmailTemplatesResponse$inboundSchema` instead. */
  export const inboundSchema = ListEmailTemplatesResponse$inboundSchema;
  /** @deprecated use `ListEmailTemplatesResponse$outboundSchema` instead. */
  export const outboundSchema = ListEmailTemplatesResponse$outboundSchema;
  /** @deprecated use `ListEmailTemplatesResponse$Outbound` instead. */
  export type Outbound = ListEmailTemplatesResponse$Outbound;
}

export function listEmailTemplatesResponseToJSON(
  listEmailTemplatesResponse: ListEmailTemplatesResponse,
): string {
  return JSON.stringify(
    ListEmailTemplatesResponse$outboundSchema.parse(listEmailTemplatesResponse),
  );
}

export function listEmailTemplatesResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListEmailTemplatesResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListEmailTemplatesResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListEmailTemplatesResponse' from JSON`,
  );
}
