/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpdateMaterialsSecurity = {
  apiKey?: string | undefined;
  oauth2?: string | undefined;
};

export type UpdateMaterialsRequest = {
  /**
   * UUID of the Material
   */
  uuid: string;
  /**
   * Material fields to update
   */
  material: components.MaterialInput;
};

export type UpdateMaterialsResponse = components.Result | components.ErrorT;

/** @internal */
export const UpdateMaterialsSecurity$inboundSchema: z.ZodType<
  UpdateMaterialsSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  apiKey: z.string().optional(),
  oauth2: z.string().optional(),
});

/** @internal */
export type UpdateMaterialsSecurity$Outbound = {
  apiKey?: string | undefined;
  oauth2?: string | undefined;
};

/** @internal */
export const UpdateMaterialsSecurity$outboundSchema: z.ZodType<
  UpdateMaterialsSecurity$Outbound,
  z.ZodTypeDef,
  UpdateMaterialsSecurity
> = z.object({
  apiKey: z.string().optional(),
  oauth2: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateMaterialsSecurity$ {
  /** @deprecated use `UpdateMaterialsSecurity$inboundSchema` instead. */
  export const inboundSchema = UpdateMaterialsSecurity$inboundSchema;
  /** @deprecated use `UpdateMaterialsSecurity$outboundSchema` instead. */
  export const outboundSchema = UpdateMaterialsSecurity$outboundSchema;
  /** @deprecated use `UpdateMaterialsSecurity$Outbound` instead. */
  export type Outbound = UpdateMaterialsSecurity$Outbound;
}

export function updateMaterialsSecurityToJSON(
  updateMaterialsSecurity: UpdateMaterialsSecurity,
): string {
  return JSON.stringify(
    UpdateMaterialsSecurity$outboundSchema.parse(updateMaterialsSecurity),
  );
}

export function updateMaterialsSecurityFromJSON(
  jsonString: string,
): SafeParseResult<UpdateMaterialsSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateMaterialsSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateMaterialsSecurity' from JSON`,
  );
}

/** @internal */
export const UpdateMaterialsRequest$inboundSchema: z.ZodType<
  UpdateMaterialsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string(),
  Material: components.MaterialInput$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Material": "material",
  });
});

/** @internal */
export type UpdateMaterialsRequest$Outbound = {
  uuid: string;
  Material: components.MaterialInput$Outbound;
};

/** @internal */
export const UpdateMaterialsRequest$outboundSchema: z.ZodType<
  UpdateMaterialsRequest$Outbound,
  z.ZodTypeDef,
  UpdateMaterialsRequest
> = z.object({
  uuid: z.string(),
  material: components.MaterialInput$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    material: "Material",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateMaterialsRequest$ {
  /** @deprecated use `UpdateMaterialsRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateMaterialsRequest$inboundSchema;
  /** @deprecated use `UpdateMaterialsRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateMaterialsRequest$outboundSchema;
  /** @deprecated use `UpdateMaterialsRequest$Outbound` instead. */
  export type Outbound = UpdateMaterialsRequest$Outbound;
}

export function updateMaterialsRequestToJSON(
  updateMaterialsRequest: UpdateMaterialsRequest,
): string {
  return JSON.stringify(
    UpdateMaterialsRequest$outboundSchema.parse(updateMaterialsRequest),
  );
}

export function updateMaterialsRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateMaterialsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateMaterialsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateMaterialsRequest' from JSON`,
  );
}

/** @internal */
export const UpdateMaterialsResponse$inboundSchema: z.ZodType<
  UpdateMaterialsResponse,
  z.ZodTypeDef,
  unknown
> = z.union([components.Result$inboundSchema, components.ErrorT$inboundSchema]);

/** @internal */
export type UpdateMaterialsResponse$Outbound =
  | components.Result$Outbound
  | components.ErrorT$Outbound;

/** @internal */
export const UpdateMaterialsResponse$outboundSchema: z.ZodType<
  UpdateMaterialsResponse$Outbound,
  z.ZodTypeDef,
  UpdateMaterialsResponse
> = z.union([
  components.Result$outboundSchema,
  components.ErrorT$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateMaterialsResponse$ {
  /** @deprecated use `UpdateMaterialsResponse$inboundSchema` instead. */
  export const inboundSchema = UpdateMaterialsResponse$inboundSchema;
  /** @deprecated use `UpdateMaterialsResponse$outboundSchema` instead. */
  export const outboundSchema = UpdateMaterialsResponse$outboundSchema;
  /** @deprecated use `UpdateMaterialsResponse$Outbound` instead. */
  export type Outbound = UpdateMaterialsResponse$Outbound;
}

export function updateMaterialsResponseToJSON(
  updateMaterialsResponse: UpdateMaterialsResponse,
): string {
  return JSON.stringify(
    UpdateMaterialsResponse$outboundSchema.parse(updateMaterialsResponse),
  );
}

export function updateMaterialsResponseFromJSON(
  jsonString: string,
): SafeParseResult<UpdateMaterialsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateMaterialsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateMaterialsResponse' from JSON`,
  );
}
