/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CreateBadgesSecurity = {
  apiKey?: string | undefined;
  oauth2?: string | undefined;
};

export type CreateBadgesResponseResult = components.Result | components.ErrorT;

export type CreateBadgesResponse = {
  headers: { [k: string]: Array<string> };
  result: components.Result | components.ErrorT;
};

/** @internal */
export const CreateBadgesSecurity$inboundSchema: z.ZodType<
  CreateBadgesSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  apiKey: z.string().optional(),
  oauth2: z.string().optional(),
});

/** @internal */
export type CreateBadgesSecurity$Outbound = {
  apiKey?: string | undefined;
  oauth2?: string | undefined;
};

/** @internal */
export const CreateBadgesSecurity$outboundSchema: z.ZodType<
  CreateBadgesSecurity$Outbound,
  z.ZodTypeDef,
  CreateBadgesSecurity
> = z.object({
  apiKey: z.string().optional(),
  oauth2: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateBadgesSecurity$ {
  /** @deprecated use `CreateBadgesSecurity$inboundSchema` instead. */
  export const inboundSchema = CreateBadgesSecurity$inboundSchema;
  /** @deprecated use `CreateBadgesSecurity$outboundSchema` instead. */
  export const outboundSchema = CreateBadgesSecurity$outboundSchema;
  /** @deprecated use `CreateBadgesSecurity$Outbound` instead. */
  export type Outbound = CreateBadgesSecurity$Outbound;
}

export function createBadgesSecurityToJSON(
  createBadgesSecurity: CreateBadgesSecurity,
): string {
  return JSON.stringify(
    CreateBadgesSecurity$outboundSchema.parse(createBadgesSecurity),
  );
}

export function createBadgesSecurityFromJSON(
  jsonString: string,
): SafeParseResult<CreateBadgesSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateBadgesSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateBadgesSecurity' from JSON`,
  );
}

/** @internal */
export const CreateBadgesResponseResult$inboundSchema: z.ZodType<
  CreateBadgesResponseResult,
  z.ZodTypeDef,
  unknown
> = z.union([components.Result$inboundSchema, components.ErrorT$inboundSchema]);

/** @internal */
export type CreateBadgesResponseResult$Outbound =
  | components.Result$Outbound
  | components.ErrorT$Outbound;

/** @internal */
export const CreateBadgesResponseResult$outboundSchema: z.ZodType<
  CreateBadgesResponseResult$Outbound,
  z.ZodTypeDef,
  CreateBadgesResponseResult
> = z.union([
  components.Result$outboundSchema,
  components.ErrorT$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateBadgesResponseResult$ {
  /** @deprecated use `CreateBadgesResponseResult$inboundSchema` instead. */
  export const inboundSchema = CreateBadgesResponseResult$inboundSchema;
  /** @deprecated use `CreateBadgesResponseResult$outboundSchema` instead. */
  export const outboundSchema = CreateBadgesResponseResult$outboundSchema;
  /** @deprecated use `CreateBadgesResponseResult$Outbound` instead. */
  export type Outbound = CreateBadgesResponseResult$Outbound;
}

export function createBadgesResponseResultToJSON(
  createBadgesResponseResult: CreateBadgesResponseResult,
): string {
  return JSON.stringify(
    CreateBadgesResponseResult$outboundSchema.parse(createBadgesResponseResult),
  );
}

export function createBadgesResponseResultFromJSON(
  jsonString: string,
): SafeParseResult<CreateBadgesResponseResult, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateBadgesResponseResult$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateBadgesResponseResult' from JSON`,
  );
}

/** @internal */
export const CreateBadgesResponse$inboundSchema: z.ZodType<
  CreateBadgesResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: z.union([
    components.Result$inboundSchema,
    components.ErrorT$inboundSchema,
  ]),
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type CreateBadgesResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: components.Result$Outbound | components.ErrorT$Outbound;
};

/** @internal */
export const CreateBadgesResponse$outboundSchema: z.ZodType<
  CreateBadgesResponse$Outbound,
  z.ZodTypeDef,
  CreateBadgesResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: z.union([
    components.Result$outboundSchema,
    components.ErrorT$outboundSchema,
  ]),
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateBadgesResponse$ {
  /** @deprecated use `CreateBadgesResponse$inboundSchema` instead. */
  export const inboundSchema = CreateBadgesResponse$inboundSchema;
  /** @deprecated use `CreateBadgesResponse$outboundSchema` instead. */
  export const outboundSchema = CreateBadgesResponse$outboundSchema;
  /** @deprecated use `CreateBadgesResponse$Outbound` instead. */
  export type Outbound = CreateBadgesResponse$Outbound;
}

export function createBadgesResponseToJSON(
  createBadgesResponse: CreateBadgesResponse,
): string {
  return JSON.stringify(
    CreateBadgesResponse$outboundSchema.parse(createBadgesResponse),
  );
}

export function createBadgesResponseFromJSON(
  jsonString: string,
): SafeParseResult<CreateBadgesResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateBadgesResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateBadgesResponse' from JSON`,
  );
}
