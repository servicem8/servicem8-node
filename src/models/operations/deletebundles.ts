/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteBundlesSecurity = {
  apiKey?: string | undefined;
  oauth2?: string | undefined;
};

export type DeleteBundlesRequest = {
  /**
   * UUID of the Bundle
   */
  uuid: string;
};

export type DeleteBundlesResponse = components.Result | components.ErrorT;

/** @internal */
export const DeleteBundlesSecurity$inboundSchema: z.ZodType<
  DeleteBundlesSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  apiKey: z.string().optional(),
  oauth2: z.string().optional(),
});

/** @internal */
export type DeleteBundlesSecurity$Outbound = {
  apiKey?: string | undefined;
  oauth2?: string | undefined;
};

/** @internal */
export const DeleteBundlesSecurity$outboundSchema: z.ZodType<
  DeleteBundlesSecurity$Outbound,
  z.ZodTypeDef,
  DeleteBundlesSecurity
> = z.object({
  apiKey: z.string().optional(),
  oauth2: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteBundlesSecurity$ {
  /** @deprecated use `DeleteBundlesSecurity$inboundSchema` instead. */
  export const inboundSchema = DeleteBundlesSecurity$inboundSchema;
  /** @deprecated use `DeleteBundlesSecurity$outboundSchema` instead. */
  export const outboundSchema = DeleteBundlesSecurity$outboundSchema;
  /** @deprecated use `DeleteBundlesSecurity$Outbound` instead. */
  export type Outbound = DeleteBundlesSecurity$Outbound;
}

export function deleteBundlesSecurityToJSON(
  deleteBundlesSecurity: DeleteBundlesSecurity,
): string {
  return JSON.stringify(
    DeleteBundlesSecurity$outboundSchema.parse(deleteBundlesSecurity),
  );
}

export function deleteBundlesSecurityFromJSON(
  jsonString: string,
): SafeParseResult<DeleteBundlesSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteBundlesSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteBundlesSecurity' from JSON`,
  );
}

/** @internal */
export const DeleteBundlesRequest$inboundSchema: z.ZodType<
  DeleteBundlesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string(),
});

/** @internal */
export type DeleteBundlesRequest$Outbound = {
  uuid: string;
};

/** @internal */
export const DeleteBundlesRequest$outboundSchema: z.ZodType<
  DeleteBundlesRequest$Outbound,
  z.ZodTypeDef,
  DeleteBundlesRequest
> = z.object({
  uuid: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteBundlesRequest$ {
  /** @deprecated use `DeleteBundlesRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteBundlesRequest$inboundSchema;
  /** @deprecated use `DeleteBundlesRequest$outboundSchema` instead. */
  export const outboundSchema = DeleteBundlesRequest$outboundSchema;
  /** @deprecated use `DeleteBundlesRequest$Outbound` instead. */
  export type Outbound = DeleteBundlesRequest$Outbound;
}

export function deleteBundlesRequestToJSON(
  deleteBundlesRequest: DeleteBundlesRequest,
): string {
  return JSON.stringify(
    DeleteBundlesRequest$outboundSchema.parse(deleteBundlesRequest),
  );
}

export function deleteBundlesRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteBundlesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteBundlesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteBundlesRequest' from JSON`,
  );
}

/** @internal */
export const DeleteBundlesResponse$inboundSchema: z.ZodType<
  DeleteBundlesResponse,
  z.ZodTypeDef,
  unknown
> = z.union([components.Result$inboundSchema, components.ErrorT$inboundSchema]);

/** @internal */
export type DeleteBundlesResponse$Outbound =
  | components.Result$Outbound
  | components.ErrorT$Outbound;

/** @internal */
export const DeleteBundlesResponse$outboundSchema: z.ZodType<
  DeleteBundlesResponse$Outbound,
  z.ZodTypeDef,
  DeleteBundlesResponse
> = z.union([
  components.Result$outboundSchema,
  components.ErrorT$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteBundlesResponse$ {
  /** @deprecated use `DeleteBundlesResponse$inboundSchema` instead. */
  export const inboundSchema = DeleteBundlesResponse$inboundSchema;
  /** @deprecated use `DeleteBundlesResponse$outboundSchema` instead. */
  export const outboundSchema = DeleteBundlesResponse$outboundSchema;
  /** @deprecated use `DeleteBundlesResponse$Outbound` instead. */
  export type Outbound = DeleteBundlesResponse$Outbound;
}

export function deleteBundlesResponseToJSON(
  deleteBundlesResponse: DeleteBundlesResponse,
): string {
  return JSON.stringify(
    DeleteBundlesResponse$outboundSchema.parse(deleteBundlesResponse),
  );
}

export function deleteBundlesResponseFromJSON(
  jsonString: string,
): SafeParseResult<DeleteBundlesResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteBundlesResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteBundlesResponse' from JSON`,
  );
}
