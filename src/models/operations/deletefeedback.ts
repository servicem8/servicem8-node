/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteFeedbackSecurity = {
  apiKey?: string | undefined;
  oauth2?: string | undefined;
};

export type DeleteFeedbackRequest = {
  /**
   * UUID of the Feedback
   */
  uuid: string;
};

export type DeleteFeedbackResponse = components.Result | components.ErrorT;

/** @internal */
export const DeleteFeedbackSecurity$inboundSchema: z.ZodType<
  DeleteFeedbackSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  apiKey: z.string().optional(),
  oauth2: z.string().optional(),
});

/** @internal */
export type DeleteFeedbackSecurity$Outbound = {
  apiKey?: string | undefined;
  oauth2?: string | undefined;
};

/** @internal */
export const DeleteFeedbackSecurity$outboundSchema: z.ZodType<
  DeleteFeedbackSecurity$Outbound,
  z.ZodTypeDef,
  DeleteFeedbackSecurity
> = z.object({
  apiKey: z.string().optional(),
  oauth2: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteFeedbackSecurity$ {
  /** @deprecated use `DeleteFeedbackSecurity$inboundSchema` instead. */
  export const inboundSchema = DeleteFeedbackSecurity$inboundSchema;
  /** @deprecated use `DeleteFeedbackSecurity$outboundSchema` instead. */
  export const outboundSchema = DeleteFeedbackSecurity$outboundSchema;
  /** @deprecated use `DeleteFeedbackSecurity$Outbound` instead. */
  export type Outbound = DeleteFeedbackSecurity$Outbound;
}

export function deleteFeedbackSecurityToJSON(
  deleteFeedbackSecurity: DeleteFeedbackSecurity,
): string {
  return JSON.stringify(
    DeleteFeedbackSecurity$outboundSchema.parse(deleteFeedbackSecurity),
  );
}

export function deleteFeedbackSecurityFromJSON(
  jsonString: string,
): SafeParseResult<DeleteFeedbackSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteFeedbackSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteFeedbackSecurity' from JSON`,
  );
}

/** @internal */
export const DeleteFeedbackRequest$inboundSchema: z.ZodType<
  DeleteFeedbackRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string(),
});

/** @internal */
export type DeleteFeedbackRequest$Outbound = {
  uuid: string;
};

/** @internal */
export const DeleteFeedbackRequest$outboundSchema: z.ZodType<
  DeleteFeedbackRequest$Outbound,
  z.ZodTypeDef,
  DeleteFeedbackRequest
> = z.object({
  uuid: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteFeedbackRequest$ {
  /** @deprecated use `DeleteFeedbackRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteFeedbackRequest$inboundSchema;
  /** @deprecated use `DeleteFeedbackRequest$outboundSchema` instead. */
  export const outboundSchema = DeleteFeedbackRequest$outboundSchema;
  /** @deprecated use `DeleteFeedbackRequest$Outbound` instead. */
  export type Outbound = DeleteFeedbackRequest$Outbound;
}

export function deleteFeedbackRequestToJSON(
  deleteFeedbackRequest: DeleteFeedbackRequest,
): string {
  return JSON.stringify(
    DeleteFeedbackRequest$outboundSchema.parse(deleteFeedbackRequest),
  );
}

export function deleteFeedbackRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteFeedbackRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteFeedbackRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteFeedbackRequest' from JSON`,
  );
}

/** @internal */
export const DeleteFeedbackResponse$inboundSchema: z.ZodType<
  DeleteFeedbackResponse,
  z.ZodTypeDef,
  unknown
> = z.union([components.Result$inboundSchema, components.ErrorT$inboundSchema]);

/** @internal */
export type DeleteFeedbackResponse$Outbound =
  | components.Result$Outbound
  | components.ErrorT$Outbound;

/** @internal */
export const DeleteFeedbackResponse$outboundSchema: z.ZodType<
  DeleteFeedbackResponse$Outbound,
  z.ZodTypeDef,
  DeleteFeedbackResponse
> = z.union([
  components.Result$outboundSchema,
  components.ErrorT$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteFeedbackResponse$ {
  /** @deprecated use `DeleteFeedbackResponse$inboundSchema` instead. */
  export const inboundSchema = DeleteFeedbackResponse$inboundSchema;
  /** @deprecated use `DeleteFeedbackResponse$outboundSchema` instead. */
  export const outboundSchema = DeleteFeedbackResponse$outboundSchema;
  /** @deprecated use `DeleteFeedbackResponse$Outbound` instead. */
  export type Outbound = DeleteFeedbackResponse$Outbound;
}

export function deleteFeedbackResponseToJSON(
  deleteFeedbackResponse: DeleteFeedbackResponse,
): string {
  return JSON.stringify(
    DeleteFeedbackResponse$outboundSchema.parse(deleteFeedbackResponse),
  );
}

export function deleteFeedbackResponseFromJSON(
  jsonString: string,
): SafeParseResult<DeleteFeedbackResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteFeedbackResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteFeedbackResponse' from JSON`,
  );
}
