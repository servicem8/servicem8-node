/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpdateSuppliersRequest = {
  /**
   * UUID of the Supplier
   */
  uuid: string;
  /**
   * Supplier fields to update
   */
  supplierCreate: components.SupplierCreate;
};

/** @internal */
export const UpdateSuppliersRequest$inboundSchema: z.ZodType<
  UpdateSuppliersRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string(),
  SupplierCreate: components.SupplierCreate$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "SupplierCreate": "supplierCreate",
  });
});

/** @internal */
export type UpdateSuppliersRequest$Outbound = {
  uuid: string;
  SupplierCreate: components.SupplierCreate$Outbound;
};

/** @internal */
export const UpdateSuppliersRequest$outboundSchema: z.ZodType<
  UpdateSuppliersRequest$Outbound,
  z.ZodTypeDef,
  UpdateSuppliersRequest
> = z.object({
  uuid: z.string(),
  supplierCreate: components.SupplierCreate$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    supplierCreate: "SupplierCreate",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateSuppliersRequest$ {
  /** @deprecated use `UpdateSuppliersRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateSuppliersRequest$inboundSchema;
  /** @deprecated use `UpdateSuppliersRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateSuppliersRequest$outboundSchema;
  /** @deprecated use `UpdateSuppliersRequest$Outbound` instead. */
  export type Outbound = UpdateSuppliersRequest$Outbound;
}

export function updateSuppliersRequestToJSON(
  updateSuppliersRequest: UpdateSuppliersRequest,
): string {
  return JSON.stringify(
    UpdateSuppliersRequest$outboundSchema.parse(updateSuppliersRequest),
  );
}

export function updateSuppliersRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateSuppliersRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateSuppliersRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateSuppliersRequest' from JSON`,
  );
}
