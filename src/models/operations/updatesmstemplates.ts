/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpdateSMSTemplatesRequest = {
  /**
   * UUID of the SMS Template
   */
  uuid: string;
  /**
   * SMS Template fields to update
   */
  smsTemplateCreate: components.SmsTemplateCreate;
};

/** @internal */
export const UpdateSMSTemplatesRequest$inboundSchema: z.ZodType<
  UpdateSMSTemplatesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string(),
  SmsTemplateCreate: components.SmsTemplateCreate$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "SmsTemplateCreate": "smsTemplateCreate",
  });
});

/** @internal */
export type UpdateSMSTemplatesRequest$Outbound = {
  uuid: string;
  SmsTemplateCreate: components.SmsTemplateCreate$Outbound;
};

/** @internal */
export const UpdateSMSTemplatesRequest$outboundSchema: z.ZodType<
  UpdateSMSTemplatesRequest$Outbound,
  z.ZodTypeDef,
  UpdateSMSTemplatesRequest
> = z.object({
  uuid: z.string(),
  smsTemplateCreate: components.SmsTemplateCreate$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    smsTemplateCreate: "SmsTemplateCreate",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateSMSTemplatesRequest$ {
  /** @deprecated use `UpdateSMSTemplatesRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateSMSTemplatesRequest$inboundSchema;
  /** @deprecated use `UpdateSMSTemplatesRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateSMSTemplatesRequest$outboundSchema;
  /** @deprecated use `UpdateSMSTemplatesRequest$Outbound` instead. */
  export type Outbound = UpdateSMSTemplatesRequest$Outbound;
}

export function updateSMSTemplatesRequestToJSON(
  updateSMSTemplatesRequest: UpdateSMSTemplatesRequest,
): string {
  return JSON.stringify(
    UpdateSMSTemplatesRequest$outboundSchema.parse(updateSMSTemplatesRequest),
  );
}

export function updateSMSTemplatesRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateSMSTemplatesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateSMSTemplatesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateSMSTemplatesRequest' from JSON`,
  );
}
