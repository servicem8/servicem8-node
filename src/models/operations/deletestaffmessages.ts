/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteStaffMessagesRequest = {
  /**
   * UUID of the Staff Message
   */
  uuid: string;
};

/** @internal */
export const DeleteStaffMessagesRequest$inboundSchema: z.ZodType<
  DeleteStaffMessagesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string(),
});

/** @internal */
export type DeleteStaffMessagesRequest$Outbound = {
  uuid: string;
};

/** @internal */
export const DeleteStaffMessagesRequest$outboundSchema: z.ZodType<
  DeleteStaffMessagesRequest$Outbound,
  z.ZodTypeDef,
  DeleteStaffMessagesRequest
> = z.object({
  uuid: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteStaffMessagesRequest$ {
  /** @deprecated use `DeleteStaffMessagesRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteStaffMessagesRequest$inboundSchema;
  /** @deprecated use `DeleteStaffMessagesRequest$outboundSchema` instead. */
  export const outboundSchema = DeleteStaffMessagesRequest$outboundSchema;
  /** @deprecated use `DeleteStaffMessagesRequest$Outbound` instead. */
  export type Outbound = DeleteStaffMessagesRequest$Outbound;
}

export function deleteStaffMessagesRequestToJSON(
  deleteStaffMessagesRequest: DeleteStaffMessagesRequest,
): string {
  return JSON.stringify(
    DeleteStaffMessagesRequest$outboundSchema.parse(deleteStaffMessagesRequest),
  );
}

export function deleteStaffMessagesRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteStaffMessagesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteStaffMessagesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteStaffMessagesRequest' from JSON`,
  );
}
