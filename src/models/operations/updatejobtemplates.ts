/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpdateJobTemplatesRequest = {
  /**
   * UUID of the Job Template
   */
  uuid: string;
  /**
   * Job Template fields to update
   */
  jobTemplate: components.JobTemplateInput;
};

export type UpdateJobTemplatesResponse = components.Result | components.ErrorT;

/** @internal */
export const UpdateJobTemplatesRequest$inboundSchema: z.ZodType<
  UpdateJobTemplatesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string(),
  JobTemplate: components.JobTemplateInput$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "JobTemplate": "jobTemplate",
  });
});

/** @internal */
export type UpdateJobTemplatesRequest$Outbound = {
  uuid: string;
  JobTemplate: components.JobTemplateInput$Outbound;
};

/** @internal */
export const UpdateJobTemplatesRequest$outboundSchema: z.ZodType<
  UpdateJobTemplatesRequest$Outbound,
  z.ZodTypeDef,
  UpdateJobTemplatesRequest
> = z.object({
  uuid: z.string(),
  jobTemplate: components.JobTemplateInput$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    jobTemplate: "JobTemplate",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateJobTemplatesRequest$ {
  /** @deprecated use `UpdateJobTemplatesRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateJobTemplatesRequest$inboundSchema;
  /** @deprecated use `UpdateJobTemplatesRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateJobTemplatesRequest$outboundSchema;
  /** @deprecated use `UpdateJobTemplatesRequest$Outbound` instead. */
  export type Outbound = UpdateJobTemplatesRequest$Outbound;
}

export function updateJobTemplatesRequestToJSON(
  updateJobTemplatesRequest: UpdateJobTemplatesRequest,
): string {
  return JSON.stringify(
    UpdateJobTemplatesRequest$outboundSchema.parse(updateJobTemplatesRequest),
  );
}

export function updateJobTemplatesRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateJobTemplatesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateJobTemplatesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateJobTemplatesRequest' from JSON`,
  );
}

/** @internal */
export const UpdateJobTemplatesResponse$inboundSchema: z.ZodType<
  UpdateJobTemplatesResponse,
  z.ZodTypeDef,
  unknown
> = z.union([components.Result$inboundSchema, components.ErrorT$inboundSchema]);

/** @internal */
export type UpdateJobTemplatesResponse$Outbound =
  | components.Result$Outbound
  | components.ErrorT$Outbound;

/** @internal */
export const UpdateJobTemplatesResponse$outboundSchema: z.ZodType<
  UpdateJobTemplatesResponse$Outbound,
  z.ZodTypeDef,
  UpdateJobTemplatesResponse
> = z.union([
  components.Result$outboundSchema,
  components.ErrorT$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateJobTemplatesResponse$ {
  /** @deprecated use `UpdateJobTemplatesResponse$inboundSchema` instead. */
  export const inboundSchema = UpdateJobTemplatesResponse$inboundSchema;
  /** @deprecated use `UpdateJobTemplatesResponse$outboundSchema` instead. */
  export const outboundSchema = UpdateJobTemplatesResponse$outboundSchema;
  /** @deprecated use `UpdateJobTemplatesResponse$Outbound` instead. */
  export type Outbound = UpdateJobTemplatesResponse$Outbound;
}

export function updateJobTemplatesResponseToJSON(
  updateJobTemplatesResponse: UpdateJobTemplatesResponse,
): string {
  return JSON.stringify(
    UpdateJobTemplatesResponse$outboundSchema.parse(updateJobTemplatesResponse),
  );
}

export function updateJobTemplatesResponseFromJSON(
  jsonString: string,
): SafeParseResult<UpdateJobTemplatesResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateJobTemplatesResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateJobTemplatesResponse' from JSON`,
  );
}
