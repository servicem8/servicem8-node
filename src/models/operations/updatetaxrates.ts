/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpdateTaxRatesSecurity = {
  apiKey?: string | undefined;
  oauth2?: string | undefined;
};

export type UpdateTaxRatesRequest = {
  /**
   * UUID of the Tax Rate
   */
  uuid: string;
  /**
   * Tax Rate fields to update
   */
  taxRate: components.TaxRateInput;
};

export type UpdateTaxRatesResponse = components.Result | components.ErrorT;

/** @internal */
export const UpdateTaxRatesSecurity$inboundSchema: z.ZodType<
  UpdateTaxRatesSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  apiKey: z.string().optional(),
  oauth2: z.string().optional(),
});

/** @internal */
export type UpdateTaxRatesSecurity$Outbound = {
  apiKey?: string | undefined;
  oauth2?: string | undefined;
};

/** @internal */
export const UpdateTaxRatesSecurity$outboundSchema: z.ZodType<
  UpdateTaxRatesSecurity$Outbound,
  z.ZodTypeDef,
  UpdateTaxRatesSecurity
> = z.object({
  apiKey: z.string().optional(),
  oauth2: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateTaxRatesSecurity$ {
  /** @deprecated use `UpdateTaxRatesSecurity$inboundSchema` instead. */
  export const inboundSchema = UpdateTaxRatesSecurity$inboundSchema;
  /** @deprecated use `UpdateTaxRatesSecurity$outboundSchema` instead. */
  export const outboundSchema = UpdateTaxRatesSecurity$outboundSchema;
  /** @deprecated use `UpdateTaxRatesSecurity$Outbound` instead. */
  export type Outbound = UpdateTaxRatesSecurity$Outbound;
}

export function updateTaxRatesSecurityToJSON(
  updateTaxRatesSecurity: UpdateTaxRatesSecurity,
): string {
  return JSON.stringify(
    UpdateTaxRatesSecurity$outboundSchema.parse(updateTaxRatesSecurity),
  );
}

export function updateTaxRatesSecurityFromJSON(
  jsonString: string,
): SafeParseResult<UpdateTaxRatesSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateTaxRatesSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateTaxRatesSecurity' from JSON`,
  );
}

/** @internal */
export const UpdateTaxRatesRequest$inboundSchema: z.ZodType<
  UpdateTaxRatesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string(),
  TaxRate: components.TaxRateInput$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "TaxRate": "taxRate",
  });
});

/** @internal */
export type UpdateTaxRatesRequest$Outbound = {
  uuid: string;
  TaxRate: components.TaxRateInput$Outbound;
};

/** @internal */
export const UpdateTaxRatesRequest$outboundSchema: z.ZodType<
  UpdateTaxRatesRequest$Outbound,
  z.ZodTypeDef,
  UpdateTaxRatesRequest
> = z.object({
  uuid: z.string(),
  taxRate: components.TaxRateInput$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    taxRate: "TaxRate",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateTaxRatesRequest$ {
  /** @deprecated use `UpdateTaxRatesRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateTaxRatesRequest$inboundSchema;
  /** @deprecated use `UpdateTaxRatesRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateTaxRatesRequest$outboundSchema;
  /** @deprecated use `UpdateTaxRatesRequest$Outbound` instead. */
  export type Outbound = UpdateTaxRatesRequest$Outbound;
}

export function updateTaxRatesRequestToJSON(
  updateTaxRatesRequest: UpdateTaxRatesRequest,
): string {
  return JSON.stringify(
    UpdateTaxRatesRequest$outboundSchema.parse(updateTaxRatesRequest),
  );
}

export function updateTaxRatesRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateTaxRatesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateTaxRatesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateTaxRatesRequest' from JSON`,
  );
}

/** @internal */
export const UpdateTaxRatesResponse$inboundSchema: z.ZodType<
  UpdateTaxRatesResponse,
  z.ZodTypeDef,
  unknown
> = z.union([components.Result$inboundSchema, components.ErrorT$inboundSchema]);

/** @internal */
export type UpdateTaxRatesResponse$Outbound =
  | components.Result$Outbound
  | components.ErrorT$Outbound;

/** @internal */
export const UpdateTaxRatesResponse$outboundSchema: z.ZodType<
  UpdateTaxRatesResponse$Outbound,
  z.ZodTypeDef,
  UpdateTaxRatesResponse
> = z.union([
  components.Result$outboundSchema,
  components.ErrorT$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateTaxRatesResponse$ {
  /** @deprecated use `UpdateTaxRatesResponse$inboundSchema` instead. */
  export const inboundSchema = UpdateTaxRatesResponse$inboundSchema;
  /** @deprecated use `UpdateTaxRatesResponse$outboundSchema` instead. */
  export const outboundSchema = UpdateTaxRatesResponse$outboundSchema;
  /** @deprecated use `UpdateTaxRatesResponse$Outbound` instead. */
  export type Outbound = UpdateTaxRatesResponse$Outbound;
}

export function updateTaxRatesResponseToJSON(
  updateTaxRatesResponse: UpdateTaxRatesResponse,
): string {
  return JSON.stringify(
    UpdateTaxRatesResponse$outboundSchema.parse(updateTaxRatesResponse),
  );
}

export function updateTaxRatesResponseFromJSON(
  jsonString: string,
): SafeParseResult<UpdateTaxRatesResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateTaxRatesResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateTaxRatesResponse' from JSON`,
  );
}
