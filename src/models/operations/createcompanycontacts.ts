/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CreateCompanyContactsSecurity = {
  apiKey?: string | undefined;
  oauth2?: string | undefined;
};

export type CreateCompanyContactsResponseResult =
  | components.Result
  | components.ErrorT;

export type CreateCompanyContactsResponse = {
  headers: { [k: string]: Array<string> };
  result: components.Result | components.ErrorT;
};

/** @internal */
export const CreateCompanyContactsSecurity$inboundSchema: z.ZodType<
  CreateCompanyContactsSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  apiKey: z.string().optional(),
  oauth2: z.string().optional(),
});

/** @internal */
export type CreateCompanyContactsSecurity$Outbound = {
  apiKey?: string | undefined;
  oauth2?: string | undefined;
};

/** @internal */
export const CreateCompanyContactsSecurity$outboundSchema: z.ZodType<
  CreateCompanyContactsSecurity$Outbound,
  z.ZodTypeDef,
  CreateCompanyContactsSecurity
> = z.object({
  apiKey: z.string().optional(),
  oauth2: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCompanyContactsSecurity$ {
  /** @deprecated use `CreateCompanyContactsSecurity$inboundSchema` instead. */
  export const inboundSchema = CreateCompanyContactsSecurity$inboundSchema;
  /** @deprecated use `CreateCompanyContactsSecurity$outboundSchema` instead. */
  export const outboundSchema = CreateCompanyContactsSecurity$outboundSchema;
  /** @deprecated use `CreateCompanyContactsSecurity$Outbound` instead. */
  export type Outbound = CreateCompanyContactsSecurity$Outbound;
}

export function createCompanyContactsSecurityToJSON(
  createCompanyContactsSecurity: CreateCompanyContactsSecurity,
): string {
  return JSON.stringify(
    CreateCompanyContactsSecurity$outboundSchema.parse(
      createCompanyContactsSecurity,
    ),
  );
}

export function createCompanyContactsSecurityFromJSON(
  jsonString: string,
): SafeParseResult<CreateCompanyContactsSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateCompanyContactsSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateCompanyContactsSecurity' from JSON`,
  );
}

/** @internal */
export const CreateCompanyContactsResponseResult$inboundSchema: z.ZodType<
  CreateCompanyContactsResponseResult,
  z.ZodTypeDef,
  unknown
> = z.union([components.Result$inboundSchema, components.ErrorT$inboundSchema]);

/** @internal */
export type CreateCompanyContactsResponseResult$Outbound =
  | components.Result$Outbound
  | components.ErrorT$Outbound;

/** @internal */
export const CreateCompanyContactsResponseResult$outboundSchema: z.ZodType<
  CreateCompanyContactsResponseResult$Outbound,
  z.ZodTypeDef,
  CreateCompanyContactsResponseResult
> = z.union([
  components.Result$outboundSchema,
  components.ErrorT$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCompanyContactsResponseResult$ {
  /** @deprecated use `CreateCompanyContactsResponseResult$inboundSchema` instead. */
  export const inboundSchema =
    CreateCompanyContactsResponseResult$inboundSchema;
  /** @deprecated use `CreateCompanyContactsResponseResult$outboundSchema` instead. */
  export const outboundSchema =
    CreateCompanyContactsResponseResult$outboundSchema;
  /** @deprecated use `CreateCompanyContactsResponseResult$Outbound` instead. */
  export type Outbound = CreateCompanyContactsResponseResult$Outbound;
}

export function createCompanyContactsResponseResultToJSON(
  createCompanyContactsResponseResult: CreateCompanyContactsResponseResult,
): string {
  return JSON.stringify(
    CreateCompanyContactsResponseResult$outboundSchema.parse(
      createCompanyContactsResponseResult,
    ),
  );
}

export function createCompanyContactsResponseResultFromJSON(
  jsonString: string,
): SafeParseResult<CreateCompanyContactsResponseResult, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateCompanyContactsResponseResult$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateCompanyContactsResponseResult' from JSON`,
  );
}

/** @internal */
export const CreateCompanyContactsResponse$inboundSchema: z.ZodType<
  CreateCompanyContactsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: z.union([
    components.Result$inboundSchema,
    components.ErrorT$inboundSchema,
  ]),
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type CreateCompanyContactsResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: components.Result$Outbound | components.ErrorT$Outbound;
};

/** @internal */
export const CreateCompanyContactsResponse$outboundSchema: z.ZodType<
  CreateCompanyContactsResponse$Outbound,
  z.ZodTypeDef,
  CreateCompanyContactsResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: z.union([
    components.Result$outboundSchema,
    components.ErrorT$outboundSchema,
  ]),
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCompanyContactsResponse$ {
  /** @deprecated use `CreateCompanyContactsResponse$inboundSchema` instead. */
  export const inboundSchema = CreateCompanyContactsResponse$inboundSchema;
  /** @deprecated use `CreateCompanyContactsResponse$outboundSchema` instead. */
  export const outboundSchema = CreateCompanyContactsResponse$outboundSchema;
  /** @deprecated use `CreateCompanyContactsResponse$Outbound` instead. */
  export type Outbound = CreateCompanyContactsResponse$Outbound;
}

export function createCompanyContactsResponseToJSON(
  createCompanyContactsResponse: CreateCompanyContactsResponse,
): string {
  return JSON.stringify(
    CreateCompanyContactsResponse$outboundSchema.parse(
      createCompanyContactsResponse,
    ),
  );
}

export function createCompanyContactsResponseFromJSON(
  jsonString: string,
): SafeParseResult<CreateCompanyContactsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateCompanyContactsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateCompanyContactsResponse' from JSON`,
  );
}
