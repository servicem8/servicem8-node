/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetSecurityRolesSecurity = {
  apiKey?: string | undefined;
  oauth2?: string | undefined;
};

export type GetSecurityRolesRequest = {
  /**
   * UUID of the Security Role
   */
  uuid: string;
};

export type GetSecurityRolesResponse =
  | components.ErrorT
  | components.SecurityRole;

/** @internal */
export const GetSecurityRolesSecurity$inboundSchema: z.ZodType<
  GetSecurityRolesSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  apiKey: z.string().optional(),
  oauth2: z.string().optional(),
});

/** @internal */
export type GetSecurityRolesSecurity$Outbound = {
  apiKey?: string | undefined;
  oauth2?: string | undefined;
};

/** @internal */
export const GetSecurityRolesSecurity$outboundSchema: z.ZodType<
  GetSecurityRolesSecurity$Outbound,
  z.ZodTypeDef,
  GetSecurityRolesSecurity
> = z.object({
  apiKey: z.string().optional(),
  oauth2: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSecurityRolesSecurity$ {
  /** @deprecated use `GetSecurityRolesSecurity$inboundSchema` instead. */
  export const inboundSchema = GetSecurityRolesSecurity$inboundSchema;
  /** @deprecated use `GetSecurityRolesSecurity$outboundSchema` instead. */
  export const outboundSchema = GetSecurityRolesSecurity$outboundSchema;
  /** @deprecated use `GetSecurityRolesSecurity$Outbound` instead. */
  export type Outbound = GetSecurityRolesSecurity$Outbound;
}

export function getSecurityRolesSecurityToJSON(
  getSecurityRolesSecurity: GetSecurityRolesSecurity,
): string {
  return JSON.stringify(
    GetSecurityRolesSecurity$outboundSchema.parse(getSecurityRolesSecurity),
  );
}

export function getSecurityRolesSecurityFromJSON(
  jsonString: string,
): SafeParseResult<GetSecurityRolesSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSecurityRolesSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSecurityRolesSecurity' from JSON`,
  );
}

/** @internal */
export const GetSecurityRolesRequest$inboundSchema: z.ZodType<
  GetSecurityRolesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string(),
});

/** @internal */
export type GetSecurityRolesRequest$Outbound = {
  uuid: string;
};

/** @internal */
export const GetSecurityRolesRequest$outboundSchema: z.ZodType<
  GetSecurityRolesRequest$Outbound,
  z.ZodTypeDef,
  GetSecurityRolesRequest
> = z.object({
  uuid: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSecurityRolesRequest$ {
  /** @deprecated use `GetSecurityRolesRequest$inboundSchema` instead. */
  export const inboundSchema = GetSecurityRolesRequest$inboundSchema;
  /** @deprecated use `GetSecurityRolesRequest$outboundSchema` instead. */
  export const outboundSchema = GetSecurityRolesRequest$outboundSchema;
  /** @deprecated use `GetSecurityRolesRequest$Outbound` instead. */
  export type Outbound = GetSecurityRolesRequest$Outbound;
}

export function getSecurityRolesRequestToJSON(
  getSecurityRolesRequest: GetSecurityRolesRequest,
): string {
  return JSON.stringify(
    GetSecurityRolesRequest$outboundSchema.parse(getSecurityRolesRequest),
  );
}

export function getSecurityRolesRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetSecurityRolesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSecurityRolesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSecurityRolesRequest' from JSON`,
  );
}

/** @internal */
export const GetSecurityRolesResponse$inboundSchema: z.ZodType<
  GetSecurityRolesResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  components.ErrorT$inboundSchema,
  components.SecurityRole$inboundSchema,
]);

/** @internal */
export type GetSecurityRolesResponse$Outbound =
  | components.ErrorT$Outbound
  | components.SecurityRole$Outbound;

/** @internal */
export const GetSecurityRolesResponse$outboundSchema: z.ZodType<
  GetSecurityRolesResponse$Outbound,
  z.ZodTypeDef,
  GetSecurityRolesResponse
> = z.union([
  components.ErrorT$outboundSchema,
  components.SecurityRole$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSecurityRolesResponse$ {
  /** @deprecated use `GetSecurityRolesResponse$inboundSchema` instead. */
  export const inboundSchema = GetSecurityRolesResponse$inboundSchema;
  /** @deprecated use `GetSecurityRolesResponse$outboundSchema` instead. */
  export const outboundSchema = GetSecurityRolesResponse$outboundSchema;
  /** @deprecated use `GetSecurityRolesResponse$Outbound` instead. */
  export type Outbound = GetSecurityRolesResponse$Outbound;
}

export function getSecurityRolesResponseToJSON(
  getSecurityRolesResponse: GetSecurityRolesResponse,
): string {
  return JSON.stringify(
    GetSecurityRolesResponse$outboundSchema.parse(getSecurityRolesResponse),
  );
}

export function getSecurityRolesResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetSecurityRolesResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSecurityRolesResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSecurityRolesResponse' from JSON`,
  );
}
