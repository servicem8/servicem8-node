/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpdateFormResponsesSecurity = {
  apiKey?: string | undefined;
  oauth2?: string | undefined;
};

export type UpdateFormResponsesRequest = {
  /**
   * UUID of the Form Response
   */
  uuid: string;
  /**
   * Form Response fields to update
   */
  formResponse: components.FormResponseInput;
};

export type UpdateFormResponsesResponse = components.Result | components.ErrorT;

/** @internal */
export const UpdateFormResponsesSecurity$inboundSchema: z.ZodType<
  UpdateFormResponsesSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  apiKey: z.string().optional(),
  oauth2: z.string().optional(),
});

/** @internal */
export type UpdateFormResponsesSecurity$Outbound = {
  apiKey?: string | undefined;
  oauth2?: string | undefined;
};

/** @internal */
export const UpdateFormResponsesSecurity$outboundSchema: z.ZodType<
  UpdateFormResponsesSecurity$Outbound,
  z.ZodTypeDef,
  UpdateFormResponsesSecurity
> = z.object({
  apiKey: z.string().optional(),
  oauth2: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateFormResponsesSecurity$ {
  /** @deprecated use `UpdateFormResponsesSecurity$inboundSchema` instead. */
  export const inboundSchema = UpdateFormResponsesSecurity$inboundSchema;
  /** @deprecated use `UpdateFormResponsesSecurity$outboundSchema` instead. */
  export const outboundSchema = UpdateFormResponsesSecurity$outboundSchema;
  /** @deprecated use `UpdateFormResponsesSecurity$Outbound` instead. */
  export type Outbound = UpdateFormResponsesSecurity$Outbound;
}

export function updateFormResponsesSecurityToJSON(
  updateFormResponsesSecurity: UpdateFormResponsesSecurity,
): string {
  return JSON.stringify(
    UpdateFormResponsesSecurity$outboundSchema.parse(
      updateFormResponsesSecurity,
    ),
  );
}

export function updateFormResponsesSecurityFromJSON(
  jsonString: string,
): SafeParseResult<UpdateFormResponsesSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateFormResponsesSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateFormResponsesSecurity' from JSON`,
  );
}

/** @internal */
export const UpdateFormResponsesRequest$inboundSchema: z.ZodType<
  UpdateFormResponsesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string(),
  FormResponse: components.FormResponseInput$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "FormResponse": "formResponse",
  });
});

/** @internal */
export type UpdateFormResponsesRequest$Outbound = {
  uuid: string;
  FormResponse: components.FormResponseInput$Outbound;
};

/** @internal */
export const UpdateFormResponsesRequest$outboundSchema: z.ZodType<
  UpdateFormResponsesRequest$Outbound,
  z.ZodTypeDef,
  UpdateFormResponsesRequest
> = z.object({
  uuid: z.string(),
  formResponse: components.FormResponseInput$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    formResponse: "FormResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateFormResponsesRequest$ {
  /** @deprecated use `UpdateFormResponsesRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateFormResponsesRequest$inboundSchema;
  /** @deprecated use `UpdateFormResponsesRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateFormResponsesRequest$outboundSchema;
  /** @deprecated use `UpdateFormResponsesRequest$Outbound` instead. */
  export type Outbound = UpdateFormResponsesRequest$Outbound;
}

export function updateFormResponsesRequestToJSON(
  updateFormResponsesRequest: UpdateFormResponsesRequest,
): string {
  return JSON.stringify(
    UpdateFormResponsesRequest$outboundSchema.parse(updateFormResponsesRequest),
  );
}

export function updateFormResponsesRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateFormResponsesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateFormResponsesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateFormResponsesRequest' from JSON`,
  );
}

/** @internal */
export const UpdateFormResponsesResponse$inboundSchema: z.ZodType<
  UpdateFormResponsesResponse,
  z.ZodTypeDef,
  unknown
> = z.union([components.Result$inboundSchema, components.ErrorT$inboundSchema]);

/** @internal */
export type UpdateFormResponsesResponse$Outbound =
  | components.Result$Outbound
  | components.ErrorT$Outbound;

/** @internal */
export const UpdateFormResponsesResponse$outboundSchema: z.ZodType<
  UpdateFormResponsesResponse$Outbound,
  z.ZodTypeDef,
  UpdateFormResponsesResponse
> = z.union([
  components.Result$outboundSchema,
  components.ErrorT$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateFormResponsesResponse$ {
  /** @deprecated use `UpdateFormResponsesResponse$inboundSchema` instead. */
  export const inboundSchema = UpdateFormResponsesResponse$inboundSchema;
  /** @deprecated use `UpdateFormResponsesResponse$outboundSchema` instead. */
  export const outboundSchema = UpdateFormResponsesResponse$outboundSchema;
  /** @deprecated use `UpdateFormResponsesResponse$Outbound` instead. */
  export type Outbound = UpdateFormResponsesResponse$Outbound;
}

export function updateFormResponsesResponseToJSON(
  updateFormResponsesResponse: UpdateFormResponsesResponse,
): string {
  return JSON.stringify(
    UpdateFormResponsesResponse$outboundSchema.parse(
      updateFormResponsesResponse,
    ),
  );
}

export function updateFormResponsesResponseFromJSON(
  jsonString: string,
): SafeParseResult<UpdateFormResponsesResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateFormResponsesResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateFormResponsesResponse' from JSON`,
  );
}
