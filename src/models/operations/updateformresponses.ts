/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpdateFormResponsesRequest = {
  /**
   * UUID of the Form Response
   */
  uuid: string;
  /**
   * Form Response fields to update
   */
  formResponseCreate: components.FormResponseCreate;
};

/** @internal */
export const UpdateFormResponsesRequest$inboundSchema: z.ZodType<
  UpdateFormResponsesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string(),
  FormResponseCreate: components.FormResponseCreate$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "FormResponseCreate": "formResponseCreate",
  });
});

/** @internal */
export type UpdateFormResponsesRequest$Outbound = {
  uuid: string;
  FormResponseCreate: components.FormResponseCreate$Outbound;
};

/** @internal */
export const UpdateFormResponsesRequest$outboundSchema: z.ZodType<
  UpdateFormResponsesRequest$Outbound,
  z.ZodTypeDef,
  UpdateFormResponsesRequest
> = z.object({
  uuid: z.string(),
  formResponseCreate: components.FormResponseCreate$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    formResponseCreate: "FormResponseCreate",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateFormResponsesRequest$ {
  /** @deprecated use `UpdateFormResponsesRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateFormResponsesRequest$inboundSchema;
  /** @deprecated use `UpdateFormResponsesRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateFormResponsesRequest$outboundSchema;
  /** @deprecated use `UpdateFormResponsesRequest$Outbound` instead. */
  export type Outbound = UpdateFormResponsesRequest$Outbound;
}

export function updateFormResponsesRequestToJSON(
  updateFormResponsesRequest: UpdateFormResponsesRequest,
): string {
  return JSON.stringify(
    UpdateFormResponsesRequest$outboundSchema.parse(updateFormResponsesRequest),
  );
}

export function updateFormResponsesRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateFormResponsesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateFormResponsesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateFormResponsesRequest' from JSON`,
  );
}
