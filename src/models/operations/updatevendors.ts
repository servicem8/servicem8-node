/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpdateVendorsRequest = {
  /**
   * UUID of the Vendor
   */
  uuid: string;
  /**
   * Vendor fields to update
   */
  vendor: components.VendorInput;
};

export type UpdateVendorsResponse = components.Result | components.ErrorT;

/** @internal */
export const UpdateVendorsRequest$inboundSchema: z.ZodType<
  UpdateVendorsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string(),
  Vendor: components.VendorInput$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Vendor": "vendor",
  });
});

/** @internal */
export type UpdateVendorsRequest$Outbound = {
  uuid: string;
  Vendor: components.VendorInput$Outbound;
};

/** @internal */
export const UpdateVendorsRequest$outboundSchema: z.ZodType<
  UpdateVendorsRequest$Outbound,
  z.ZodTypeDef,
  UpdateVendorsRequest
> = z.object({
  uuid: z.string(),
  vendor: components.VendorInput$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    vendor: "Vendor",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateVendorsRequest$ {
  /** @deprecated use `UpdateVendorsRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateVendorsRequest$inboundSchema;
  /** @deprecated use `UpdateVendorsRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateVendorsRequest$outboundSchema;
  /** @deprecated use `UpdateVendorsRequest$Outbound` instead. */
  export type Outbound = UpdateVendorsRequest$Outbound;
}

export function updateVendorsRequestToJSON(
  updateVendorsRequest: UpdateVendorsRequest,
): string {
  return JSON.stringify(
    UpdateVendorsRequest$outboundSchema.parse(updateVendorsRequest),
  );
}

export function updateVendorsRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateVendorsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateVendorsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateVendorsRequest' from JSON`,
  );
}

/** @internal */
export const UpdateVendorsResponse$inboundSchema: z.ZodType<
  UpdateVendorsResponse,
  z.ZodTypeDef,
  unknown
> = z.union([components.Result$inboundSchema, components.ErrorT$inboundSchema]);

/** @internal */
export type UpdateVendorsResponse$Outbound =
  | components.Result$Outbound
  | components.ErrorT$Outbound;

/** @internal */
export const UpdateVendorsResponse$outboundSchema: z.ZodType<
  UpdateVendorsResponse$Outbound,
  z.ZodTypeDef,
  UpdateVendorsResponse
> = z.union([
  components.Result$outboundSchema,
  components.ErrorT$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateVendorsResponse$ {
  /** @deprecated use `UpdateVendorsResponse$inboundSchema` instead. */
  export const inboundSchema = UpdateVendorsResponse$inboundSchema;
  /** @deprecated use `UpdateVendorsResponse$outboundSchema` instead. */
  export const outboundSchema = UpdateVendorsResponse$outboundSchema;
  /** @deprecated use `UpdateVendorsResponse$Outbound` instead. */
  export type Outbound = UpdateVendorsResponse$Outbound;
}

export function updateVendorsResponseToJSON(
  updateVendorsResponse: UpdateVendorsResponse,
): string {
  return JSON.stringify(
    UpdateVendorsResponse$outboundSchema.parse(updateVendorsResponse),
  );
}

export function updateVendorsResponseFromJSON(
  jsonString: string,
): SafeParseResult<UpdateVendorsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateVendorsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateVendorsResponse' from JSON`,
  );
}
