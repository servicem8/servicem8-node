/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpdateAttachmentsRequest = {
  /**
   * UUID of the Attachment
   */
  uuid: string;
  /**
   * Attachment fields to update
   */
  attachmentCreate: components.AttachmentCreate;
};

/** @internal */
export const UpdateAttachmentsRequest$inboundSchema: z.ZodType<
  UpdateAttachmentsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string(),
  AttachmentCreate: components.AttachmentCreate$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "AttachmentCreate": "attachmentCreate",
  });
});

/** @internal */
export type UpdateAttachmentsRequest$Outbound = {
  uuid: string;
  AttachmentCreate: components.AttachmentCreate$Outbound;
};

/** @internal */
export const UpdateAttachmentsRequest$outboundSchema: z.ZodType<
  UpdateAttachmentsRequest$Outbound,
  z.ZodTypeDef,
  UpdateAttachmentsRequest
> = z.object({
  uuid: z.string(),
  attachmentCreate: components.AttachmentCreate$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    attachmentCreate: "AttachmentCreate",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAttachmentsRequest$ {
  /** @deprecated use `UpdateAttachmentsRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateAttachmentsRequest$inboundSchema;
  /** @deprecated use `UpdateAttachmentsRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateAttachmentsRequest$outboundSchema;
  /** @deprecated use `UpdateAttachmentsRequest$Outbound` instead. */
  export type Outbound = UpdateAttachmentsRequest$Outbound;
}

export function updateAttachmentsRequestToJSON(
  updateAttachmentsRequest: UpdateAttachmentsRequest,
): string {
  return JSON.stringify(
    UpdateAttachmentsRequest$outboundSchema.parse(updateAttachmentsRequest),
  );
}

export function updateAttachmentsRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateAttachmentsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateAttachmentsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateAttachmentsRequest' from JSON`,
  );
}
