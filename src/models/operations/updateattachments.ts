/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpdateAttachmentsSecurity = {
  apiKey?: string | undefined;
  oauth2?: string | undefined;
};

export type UpdateAttachmentsRequest = {
  /**
   * UUID of the Attachment
   */
  uuid: string;
  /**
   * Attachment fields to update
   */
  attachment: components.AttachmentInput;
};

export type UpdateAttachmentsResponse = components.Result | components.ErrorT;

/** @internal */
export const UpdateAttachmentsSecurity$inboundSchema: z.ZodType<
  UpdateAttachmentsSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  apiKey: z.string().optional(),
  oauth2: z.string().optional(),
});

/** @internal */
export type UpdateAttachmentsSecurity$Outbound = {
  apiKey?: string | undefined;
  oauth2?: string | undefined;
};

/** @internal */
export const UpdateAttachmentsSecurity$outboundSchema: z.ZodType<
  UpdateAttachmentsSecurity$Outbound,
  z.ZodTypeDef,
  UpdateAttachmentsSecurity
> = z.object({
  apiKey: z.string().optional(),
  oauth2: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAttachmentsSecurity$ {
  /** @deprecated use `UpdateAttachmentsSecurity$inboundSchema` instead. */
  export const inboundSchema = UpdateAttachmentsSecurity$inboundSchema;
  /** @deprecated use `UpdateAttachmentsSecurity$outboundSchema` instead. */
  export const outboundSchema = UpdateAttachmentsSecurity$outboundSchema;
  /** @deprecated use `UpdateAttachmentsSecurity$Outbound` instead. */
  export type Outbound = UpdateAttachmentsSecurity$Outbound;
}

export function updateAttachmentsSecurityToJSON(
  updateAttachmentsSecurity: UpdateAttachmentsSecurity,
): string {
  return JSON.stringify(
    UpdateAttachmentsSecurity$outboundSchema.parse(updateAttachmentsSecurity),
  );
}

export function updateAttachmentsSecurityFromJSON(
  jsonString: string,
): SafeParseResult<UpdateAttachmentsSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateAttachmentsSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateAttachmentsSecurity' from JSON`,
  );
}

/** @internal */
export const UpdateAttachmentsRequest$inboundSchema: z.ZodType<
  UpdateAttachmentsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string(),
  Attachment: components.AttachmentInput$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Attachment": "attachment",
  });
});

/** @internal */
export type UpdateAttachmentsRequest$Outbound = {
  uuid: string;
  Attachment: components.AttachmentInput$Outbound;
};

/** @internal */
export const UpdateAttachmentsRequest$outboundSchema: z.ZodType<
  UpdateAttachmentsRequest$Outbound,
  z.ZodTypeDef,
  UpdateAttachmentsRequest
> = z.object({
  uuid: z.string(),
  attachment: components.AttachmentInput$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    attachment: "Attachment",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAttachmentsRequest$ {
  /** @deprecated use `UpdateAttachmentsRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateAttachmentsRequest$inboundSchema;
  /** @deprecated use `UpdateAttachmentsRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateAttachmentsRequest$outboundSchema;
  /** @deprecated use `UpdateAttachmentsRequest$Outbound` instead. */
  export type Outbound = UpdateAttachmentsRequest$Outbound;
}

export function updateAttachmentsRequestToJSON(
  updateAttachmentsRequest: UpdateAttachmentsRequest,
): string {
  return JSON.stringify(
    UpdateAttachmentsRequest$outboundSchema.parse(updateAttachmentsRequest),
  );
}

export function updateAttachmentsRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateAttachmentsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateAttachmentsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateAttachmentsRequest' from JSON`,
  );
}

/** @internal */
export const UpdateAttachmentsResponse$inboundSchema: z.ZodType<
  UpdateAttachmentsResponse,
  z.ZodTypeDef,
  unknown
> = z.union([components.Result$inboundSchema, components.ErrorT$inboundSchema]);

/** @internal */
export type UpdateAttachmentsResponse$Outbound =
  | components.Result$Outbound
  | components.ErrorT$Outbound;

/** @internal */
export const UpdateAttachmentsResponse$outboundSchema: z.ZodType<
  UpdateAttachmentsResponse$Outbound,
  z.ZodTypeDef,
  UpdateAttachmentsResponse
> = z.union([
  components.Result$outboundSchema,
  components.ErrorT$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAttachmentsResponse$ {
  /** @deprecated use `UpdateAttachmentsResponse$inboundSchema` instead. */
  export const inboundSchema = UpdateAttachmentsResponse$inboundSchema;
  /** @deprecated use `UpdateAttachmentsResponse$outboundSchema` instead. */
  export const outboundSchema = UpdateAttachmentsResponse$outboundSchema;
  /** @deprecated use `UpdateAttachmentsResponse$Outbound` instead. */
  export type Outbound = UpdateAttachmentsResponse$Outbound;
}

export function updateAttachmentsResponseToJSON(
  updateAttachmentsResponse: UpdateAttachmentsResponse,
): string {
  return JSON.stringify(
    UpdateAttachmentsResponse$outboundSchema.parse(updateAttachmentsResponse),
  );
}

export function updateAttachmentsResponseFromJSON(
  jsonString: string,
): SafeParseResult<UpdateAttachmentsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateAttachmentsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateAttachmentsResponse' from JSON`,
  );
}
