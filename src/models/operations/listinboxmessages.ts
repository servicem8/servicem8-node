/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Filter messages by status
 */
export const Filter = {
  All: "all",
  Unread: "unread",
  Archived: "archived",
  Snoozed: "snoozed",
} as const;
/**
 * Filter messages by status
 */
export type Filter = ClosedEnum<typeof Filter>;

export type ListInboxMessagesRequest = {
  /**
   * Maximum number of messages to return (1-500)
   */
  limit?: number | undefined;
  /**
   * Number of messages to skip for pagination
   */
  offset?: number | undefined;
  /**
   * Filter messages by status
   */
  filter?: Filter | undefined;
  /**
   * Search messages by subject, from name, or from email
   */
  search?: string | undefined;
};

/** @internal */
export const Filter$inboundSchema: z.ZodNativeEnum<typeof Filter> = z
  .nativeEnum(Filter);

/** @internal */
export const Filter$outboundSchema: z.ZodNativeEnum<typeof Filter> =
  Filter$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Filter$ {
  /** @deprecated use `Filter$inboundSchema` instead. */
  export const inboundSchema = Filter$inboundSchema;
  /** @deprecated use `Filter$outboundSchema` instead. */
  export const outboundSchema = Filter$outboundSchema;
}

/** @internal */
export const ListInboxMessagesRequest$inboundSchema: z.ZodType<
  ListInboxMessagesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  limit: z.number().int().default(50),
  offset: z.number().int().default(0),
  filter: Filter$inboundSchema.default("all"),
  search: z.string().optional(),
});

/** @internal */
export type ListInboxMessagesRequest$Outbound = {
  limit: number;
  offset: number;
  filter: string;
  search?: string | undefined;
};

/** @internal */
export const ListInboxMessagesRequest$outboundSchema: z.ZodType<
  ListInboxMessagesRequest$Outbound,
  z.ZodTypeDef,
  ListInboxMessagesRequest
> = z.object({
  limit: z.number().int().default(50),
  offset: z.number().int().default(0),
  filter: Filter$outboundSchema.default("all"),
  search: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListInboxMessagesRequest$ {
  /** @deprecated use `ListInboxMessagesRequest$inboundSchema` instead. */
  export const inboundSchema = ListInboxMessagesRequest$inboundSchema;
  /** @deprecated use `ListInboxMessagesRequest$outboundSchema` instead. */
  export const outboundSchema = ListInboxMessagesRequest$outboundSchema;
  /** @deprecated use `ListInboxMessagesRequest$Outbound` instead. */
  export type Outbound = ListInboxMessagesRequest$Outbound;
}

export function listInboxMessagesRequestToJSON(
  listInboxMessagesRequest: ListInboxMessagesRequest,
): string {
  return JSON.stringify(
    ListInboxMessagesRequest$outboundSchema.parse(listInboxMessagesRequest),
  );
}

export function listInboxMessagesRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListInboxMessagesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListInboxMessagesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListInboxMessagesRequest' from JSON`,
  );
}
