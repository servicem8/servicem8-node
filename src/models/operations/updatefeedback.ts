/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpdateFeedbackRequest = {
  /**
   * UUID of the Feedback
   */
  uuid: string;
  /**
   * Feedback fields to update
   */
  feedback: components.FeedbackInput;
};

export type UpdateFeedbackResponse = components.Result | components.ErrorT;

/** @internal */
export const UpdateFeedbackRequest$inboundSchema: z.ZodType<
  UpdateFeedbackRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string(),
  Feedback: components.FeedbackInput$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Feedback": "feedback",
  });
});

/** @internal */
export type UpdateFeedbackRequest$Outbound = {
  uuid: string;
  Feedback: components.FeedbackInput$Outbound;
};

/** @internal */
export const UpdateFeedbackRequest$outboundSchema: z.ZodType<
  UpdateFeedbackRequest$Outbound,
  z.ZodTypeDef,
  UpdateFeedbackRequest
> = z.object({
  uuid: z.string(),
  feedback: components.FeedbackInput$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    feedback: "Feedback",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateFeedbackRequest$ {
  /** @deprecated use `UpdateFeedbackRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateFeedbackRequest$inboundSchema;
  /** @deprecated use `UpdateFeedbackRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateFeedbackRequest$outboundSchema;
  /** @deprecated use `UpdateFeedbackRequest$Outbound` instead. */
  export type Outbound = UpdateFeedbackRequest$Outbound;
}

export function updateFeedbackRequestToJSON(
  updateFeedbackRequest: UpdateFeedbackRequest,
): string {
  return JSON.stringify(
    UpdateFeedbackRequest$outboundSchema.parse(updateFeedbackRequest),
  );
}

export function updateFeedbackRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateFeedbackRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateFeedbackRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateFeedbackRequest' from JSON`,
  );
}

/** @internal */
export const UpdateFeedbackResponse$inboundSchema: z.ZodType<
  UpdateFeedbackResponse,
  z.ZodTypeDef,
  unknown
> = z.union([components.Result$inboundSchema, components.ErrorT$inboundSchema]);

/** @internal */
export type UpdateFeedbackResponse$Outbound =
  | components.Result$Outbound
  | components.ErrorT$Outbound;

/** @internal */
export const UpdateFeedbackResponse$outboundSchema: z.ZodType<
  UpdateFeedbackResponse$Outbound,
  z.ZodTypeDef,
  UpdateFeedbackResponse
> = z.union([
  components.Result$outboundSchema,
  components.ErrorT$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateFeedbackResponse$ {
  /** @deprecated use `UpdateFeedbackResponse$inboundSchema` instead. */
  export const inboundSchema = UpdateFeedbackResponse$inboundSchema;
  /** @deprecated use `UpdateFeedbackResponse$outboundSchema` instead. */
  export const outboundSchema = UpdateFeedbackResponse$outboundSchema;
  /** @deprecated use `UpdateFeedbackResponse$Outbound` instead. */
  export type Outbound = UpdateFeedbackResponse$Outbound;
}

export function updateFeedbackResponseToJSON(
  updateFeedbackResponse: UpdateFeedbackResponse,
): string {
  return JSON.stringify(
    UpdateFeedbackResponse$outboundSchema.parse(updateFeedbackResponse),
  );
}

export function updateFeedbackResponseFromJSON(
  jsonString: string,
): SafeParseResult<UpdateFeedbackResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateFeedbackResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateFeedbackResponse' from JSON`,
  );
}
