/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpdateJobPaymentsRequest = {
  /**
   * UUID of the Job Payment
   */
  uuid: string;
  /**
   * Job Payment fields to update
   */
  jobPayment: components.JobPaymentInput;
};

export type UpdateJobPaymentsResponse = components.Result | components.ErrorT;

/** @internal */
export const UpdateJobPaymentsRequest$inboundSchema: z.ZodType<
  UpdateJobPaymentsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string(),
  JobPayment: components.JobPaymentInput$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "JobPayment": "jobPayment",
  });
});

/** @internal */
export type UpdateJobPaymentsRequest$Outbound = {
  uuid: string;
  JobPayment: components.JobPaymentInput$Outbound;
};

/** @internal */
export const UpdateJobPaymentsRequest$outboundSchema: z.ZodType<
  UpdateJobPaymentsRequest$Outbound,
  z.ZodTypeDef,
  UpdateJobPaymentsRequest
> = z.object({
  uuid: z.string(),
  jobPayment: components.JobPaymentInput$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    jobPayment: "JobPayment",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateJobPaymentsRequest$ {
  /** @deprecated use `UpdateJobPaymentsRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateJobPaymentsRequest$inboundSchema;
  /** @deprecated use `UpdateJobPaymentsRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateJobPaymentsRequest$outboundSchema;
  /** @deprecated use `UpdateJobPaymentsRequest$Outbound` instead. */
  export type Outbound = UpdateJobPaymentsRequest$Outbound;
}

export function updateJobPaymentsRequestToJSON(
  updateJobPaymentsRequest: UpdateJobPaymentsRequest,
): string {
  return JSON.stringify(
    UpdateJobPaymentsRequest$outboundSchema.parse(updateJobPaymentsRequest),
  );
}

export function updateJobPaymentsRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateJobPaymentsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateJobPaymentsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateJobPaymentsRequest' from JSON`,
  );
}

/** @internal */
export const UpdateJobPaymentsResponse$inboundSchema: z.ZodType<
  UpdateJobPaymentsResponse,
  z.ZodTypeDef,
  unknown
> = z.union([components.Result$inboundSchema, components.ErrorT$inboundSchema]);

/** @internal */
export type UpdateJobPaymentsResponse$Outbound =
  | components.Result$Outbound
  | components.ErrorT$Outbound;

/** @internal */
export const UpdateJobPaymentsResponse$outboundSchema: z.ZodType<
  UpdateJobPaymentsResponse$Outbound,
  z.ZodTypeDef,
  UpdateJobPaymentsResponse
> = z.union([
  components.Result$outboundSchema,
  components.ErrorT$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateJobPaymentsResponse$ {
  /** @deprecated use `UpdateJobPaymentsResponse$inboundSchema` instead. */
  export const inboundSchema = UpdateJobPaymentsResponse$inboundSchema;
  /** @deprecated use `UpdateJobPaymentsResponse$outboundSchema` instead. */
  export const outboundSchema = UpdateJobPaymentsResponse$outboundSchema;
  /** @deprecated use `UpdateJobPaymentsResponse$Outbound` instead. */
  export type Outbound = UpdateJobPaymentsResponse$Outbound;
}

export function updateJobPaymentsResponseToJSON(
  updateJobPaymentsResponse: UpdateJobPaymentsResponse,
): string {
  return JSON.stringify(
    UpdateJobPaymentsResponse$outboundSchema.parse(updateJobPaymentsResponse),
  );
}

export function updateJobPaymentsResponseFromJSON(
  jsonString: string,
): SafeParseResult<UpdateJobPaymentsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateJobPaymentsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateJobPaymentsResponse' from JSON`,
  );
}
