/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpdateAssetsRequest = {
  /**
   * UUID of the Asset
   */
  uuid: string;
  /**
   * Asset fields to update
   */
  assetCreate: components.AssetCreate;
};

/** @internal */
export const UpdateAssetsRequest$inboundSchema: z.ZodType<
  UpdateAssetsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string(),
  AssetCreate: components.AssetCreate$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "AssetCreate": "assetCreate",
  });
});

/** @internal */
export type UpdateAssetsRequest$Outbound = {
  uuid: string;
  AssetCreate: components.AssetCreate$Outbound;
};

/** @internal */
export const UpdateAssetsRequest$outboundSchema: z.ZodType<
  UpdateAssetsRequest$Outbound,
  z.ZodTypeDef,
  UpdateAssetsRequest
> = z.object({
  uuid: z.string(),
  assetCreate: components.AssetCreate$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    assetCreate: "AssetCreate",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAssetsRequest$ {
  /** @deprecated use `UpdateAssetsRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateAssetsRequest$inboundSchema;
  /** @deprecated use `UpdateAssetsRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateAssetsRequest$outboundSchema;
  /** @deprecated use `UpdateAssetsRequest$Outbound` instead. */
  export type Outbound = UpdateAssetsRequest$Outbound;
}

export function updateAssetsRequestToJSON(
  updateAssetsRequest: UpdateAssetsRequest,
): string {
  return JSON.stringify(
    UpdateAssetsRequest$outboundSchema.parse(updateAssetsRequest),
  );
}

export function updateAssetsRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateAssetsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateAssetsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateAssetsRequest' from JSON`,
  );
}
