/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpdateBundlesRequest = {
  /**
   * UUID of the Bundle
   */
  uuid: string;
  /**
   * Bundle fields to update
   */
  materialBundleCreate: components.MaterialBundleCreate;
};

/** @internal */
export const UpdateBundlesRequest$inboundSchema: z.ZodType<
  UpdateBundlesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string(),
  MaterialBundleCreate: components.MaterialBundleCreate$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "MaterialBundleCreate": "materialBundleCreate",
  });
});

/** @internal */
export type UpdateBundlesRequest$Outbound = {
  uuid: string;
  MaterialBundleCreate: components.MaterialBundleCreate$Outbound;
};

/** @internal */
export const UpdateBundlesRequest$outboundSchema: z.ZodType<
  UpdateBundlesRequest$Outbound,
  z.ZodTypeDef,
  UpdateBundlesRequest
> = z.object({
  uuid: z.string(),
  materialBundleCreate: components.MaterialBundleCreate$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    materialBundleCreate: "MaterialBundleCreate",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateBundlesRequest$ {
  /** @deprecated use `UpdateBundlesRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateBundlesRequest$inboundSchema;
  /** @deprecated use `UpdateBundlesRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateBundlesRequest$outboundSchema;
  /** @deprecated use `UpdateBundlesRequest$Outbound` instead. */
  export type Outbound = UpdateBundlesRequest$Outbound;
}

export function updateBundlesRequestToJSON(
  updateBundlesRequest: UpdateBundlesRequest,
): string {
  return JSON.stringify(
    UpdateBundlesRequest$outboundSchema.parse(updateBundlesRequest),
  );
}

export function updateBundlesRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateBundlesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateBundlesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateBundlesRequest' from JSON`,
  );
}
