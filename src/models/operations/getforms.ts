/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetFormsRequest = {
  /**
   * UUID of the Form
   */
  uuid: string;
};

export type GetFormsResponse = components.ErrorT | components.Form;

/** @internal */
export const GetFormsRequest$inboundSchema: z.ZodType<
  GetFormsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string(),
});

/** @internal */
export type GetFormsRequest$Outbound = {
  uuid: string;
};

/** @internal */
export const GetFormsRequest$outboundSchema: z.ZodType<
  GetFormsRequest$Outbound,
  z.ZodTypeDef,
  GetFormsRequest
> = z.object({
  uuid: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetFormsRequest$ {
  /** @deprecated use `GetFormsRequest$inboundSchema` instead. */
  export const inboundSchema = GetFormsRequest$inboundSchema;
  /** @deprecated use `GetFormsRequest$outboundSchema` instead. */
  export const outboundSchema = GetFormsRequest$outboundSchema;
  /** @deprecated use `GetFormsRequest$Outbound` instead. */
  export type Outbound = GetFormsRequest$Outbound;
}

export function getFormsRequestToJSON(
  getFormsRequest: GetFormsRequest,
): string {
  return JSON.stringify(GetFormsRequest$outboundSchema.parse(getFormsRequest));
}

export function getFormsRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetFormsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetFormsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetFormsRequest' from JSON`,
  );
}

/** @internal */
export const GetFormsResponse$inboundSchema: z.ZodType<
  GetFormsResponse,
  z.ZodTypeDef,
  unknown
> = z.union([components.ErrorT$inboundSchema, components.Form$inboundSchema]);

/** @internal */
export type GetFormsResponse$Outbound =
  | components.ErrorT$Outbound
  | components.Form$Outbound;

/** @internal */
export const GetFormsResponse$outboundSchema: z.ZodType<
  GetFormsResponse$Outbound,
  z.ZodTypeDef,
  GetFormsResponse
> = z.union([components.ErrorT$outboundSchema, components.Form$outboundSchema]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetFormsResponse$ {
  /** @deprecated use `GetFormsResponse$inboundSchema` instead. */
  export const inboundSchema = GetFormsResponse$inboundSchema;
  /** @deprecated use `GetFormsResponse$outboundSchema` instead. */
  export const outboundSchema = GetFormsResponse$outboundSchema;
  /** @deprecated use `GetFormsResponse$Outbound` instead. */
  export type Outbound = GetFormsResponse$Outbound;
}

export function getFormsResponseToJSON(
  getFormsResponse: GetFormsResponse,
): string {
  return JSON.stringify(
    GetFormsResponse$outboundSchema.parse(getFormsResponse),
  );
}

export function getFormsResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetFormsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetFormsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetFormsResponse' from JSON`,
  );
}
