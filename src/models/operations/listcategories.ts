/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListCategoriesResponse =
  | components.ErrorT
  | Array<components.Category>;

/** @internal */
export const ListCategoriesResponse$inboundSchema: z.ZodType<
  ListCategoriesResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  components.ErrorT$inboundSchema,
  z.array(components.Category$inboundSchema),
]);

/** @internal */
export type ListCategoriesResponse$Outbound =
  | components.ErrorT$Outbound
  | Array<components.Category$Outbound>;

/** @internal */
export const ListCategoriesResponse$outboundSchema: z.ZodType<
  ListCategoriesResponse$Outbound,
  z.ZodTypeDef,
  ListCategoriesResponse
> = z.union([
  components.ErrorT$outboundSchema,
  z.array(components.Category$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListCategoriesResponse$ {
  /** @deprecated use `ListCategoriesResponse$inboundSchema` instead. */
  export const inboundSchema = ListCategoriesResponse$inboundSchema;
  /** @deprecated use `ListCategoriesResponse$outboundSchema` instead. */
  export const outboundSchema = ListCategoriesResponse$outboundSchema;
  /** @deprecated use `ListCategoriesResponse$Outbound` instead. */
  export type Outbound = ListCategoriesResponse$Outbound;
}

export function listCategoriesResponseToJSON(
  listCategoriesResponse: ListCategoriesResponse,
): string {
  return JSON.stringify(
    ListCategoriesResponse$outboundSchema.parse(listCategoriesResponse),
  );
}

export function listCategoriesResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListCategoriesResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListCategoriesResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListCategoriesResponse' from JSON`,
  );
}
