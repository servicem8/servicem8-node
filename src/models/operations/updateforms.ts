/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpdateFormsRequest = {
  /**
   * UUID of the Form
   */
  uuid: string;
  /**
   * Form fields to update
   */
  form: components.FormInput;
};

/** @internal */
export const UpdateFormsRequest$inboundSchema: z.ZodType<
  UpdateFormsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string(),
  Form: components.FormInput$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Form": "form",
  });
});

/** @internal */
export type UpdateFormsRequest$Outbound = {
  uuid: string;
  Form: components.FormInput$Outbound;
};

/** @internal */
export const UpdateFormsRequest$outboundSchema: z.ZodType<
  UpdateFormsRequest$Outbound,
  z.ZodTypeDef,
  UpdateFormsRequest
> = z.object({
  uuid: z.string(),
  form: components.FormInput$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    form: "Form",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateFormsRequest$ {
  /** @deprecated use `UpdateFormsRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateFormsRequest$inboundSchema;
  /** @deprecated use `UpdateFormsRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateFormsRequest$outboundSchema;
  /** @deprecated use `UpdateFormsRequest$Outbound` instead. */
  export type Outbound = UpdateFormsRequest$Outbound;
}

export function updateFormsRequestToJSON(
  updateFormsRequest: UpdateFormsRequest,
): string {
  return JSON.stringify(
    UpdateFormsRequest$outboundSchema.parse(updateFormsRequest),
  );
}

export function updateFormsRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateFormsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateFormsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateFormsRequest' from JSON`,
  );
}
