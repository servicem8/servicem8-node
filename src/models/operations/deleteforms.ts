/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteFormsSecurity = {
  apiKey?: string | undefined;
  oauth2?: string | undefined;
};

export type DeleteFormsRequest = {
  /**
   * UUID of the Form
   */
  uuid: string;
};

export type DeleteFormsResponse = components.Result | components.ErrorT;

/** @internal */
export const DeleteFormsSecurity$inboundSchema: z.ZodType<
  DeleteFormsSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  apiKey: z.string().optional(),
  oauth2: z.string().optional(),
});

/** @internal */
export type DeleteFormsSecurity$Outbound = {
  apiKey?: string | undefined;
  oauth2?: string | undefined;
};

/** @internal */
export const DeleteFormsSecurity$outboundSchema: z.ZodType<
  DeleteFormsSecurity$Outbound,
  z.ZodTypeDef,
  DeleteFormsSecurity
> = z.object({
  apiKey: z.string().optional(),
  oauth2: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteFormsSecurity$ {
  /** @deprecated use `DeleteFormsSecurity$inboundSchema` instead. */
  export const inboundSchema = DeleteFormsSecurity$inboundSchema;
  /** @deprecated use `DeleteFormsSecurity$outboundSchema` instead. */
  export const outboundSchema = DeleteFormsSecurity$outboundSchema;
  /** @deprecated use `DeleteFormsSecurity$Outbound` instead. */
  export type Outbound = DeleteFormsSecurity$Outbound;
}

export function deleteFormsSecurityToJSON(
  deleteFormsSecurity: DeleteFormsSecurity,
): string {
  return JSON.stringify(
    DeleteFormsSecurity$outboundSchema.parse(deleteFormsSecurity),
  );
}

export function deleteFormsSecurityFromJSON(
  jsonString: string,
): SafeParseResult<DeleteFormsSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteFormsSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteFormsSecurity' from JSON`,
  );
}

/** @internal */
export const DeleteFormsRequest$inboundSchema: z.ZodType<
  DeleteFormsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string(),
});

/** @internal */
export type DeleteFormsRequest$Outbound = {
  uuid: string;
};

/** @internal */
export const DeleteFormsRequest$outboundSchema: z.ZodType<
  DeleteFormsRequest$Outbound,
  z.ZodTypeDef,
  DeleteFormsRequest
> = z.object({
  uuid: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteFormsRequest$ {
  /** @deprecated use `DeleteFormsRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteFormsRequest$inboundSchema;
  /** @deprecated use `DeleteFormsRequest$outboundSchema` instead. */
  export const outboundSchema = DeleteFormsRequest$outboundSchema;
  /** @deprecated use `DeleteFormsRequest$Outbound` instead. */
  export type Outbound = DeleteFormsRequest$Outbound;
}

export function deleteFormsRequestToJSON(
  deleteFormsRequest: DeleteFormsRequest,
): string {
  return JSON.stringify(
    DeleteFormsRequest$outboundSchema.parse(deleteFormsRequest),
  );
}

export function deleteFormsRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteFormsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteFormsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteFormsRequest' from JSON`,
  );
}

/** @internal */
export const DeleteFormsResponse$inboundSchema: z.ZodType<
  DeleteFormsResponse,
  z.ZodTypeDef,
  unknown
> = z.union([components.Result$inboundSchema, components.ErrorT$inboundSchema]);

/** @internal */
export type DeleteFormsResponse$Outbound =
  | components.Result$Outbound
  | components.ErrorT$Outbound;

/** @internal */
export const DeleteFormsResponse$outboundSchema: z.ZodType<
  DeleteFormsResponse$Outbound,
  z.ZodTypeDef,
  DeleteFormsResponse
> = z.union([
  components.Result$outboundSchema,
  components.ErrorT$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteFormsResponse$ {
  /** @deprecated use `DeleteFormsResponse$inboundSchema` instead. */
  export const inboundSchema = DeleteFormsResponse$inboundSchema;
  /** @deprecated use `DeleteFormsResponse$outboundSchema` instead. */
  export const outboundSchema = DeleteFormsResponse$outboundSchema;
  /** @deprecated use `DeleteFormsResponse$Outbound` instead. */
  export type Outbound = DeleteFormsResponse$Outbound;
}

export function deleteFormsResponseToJSON(
  deleteFormsResponse: DeleteFormsResponse,
): string {
  return JSON.stringify(
    DeleteFormsResponse$outboundSchema.parse(deleteFormsResponse),
  );
}

export function deleteFormsResponseFromJSON(
  jsonString: string,
): SafeParseResult<DeleteFormsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteFormsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteFormsResponse' from JSON`,
  );
}
