/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteTasksSecurity = {
  apiKey?: string | undefined;
  oauth2?: string | undefined;
};

export type DeleteTasksRequest = {
  /**
   * UUID of the Task
   */
  uuid: string;
};

export type DeleteTasksResponse = components.Result | components.ErrorT;

/** @internal */
export const DeleteTasksSecurity$inboundSchema: z.ZodType<
  DeleteTasksSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  apiKey: z.string().optional(),
  oauth2: z.string().optional(),
});

/** @internal */
export type DeleteTasksSecurity$Outbound = {
  apiKey?: string | undefined;
  oauth2?: string | undefined;
};

/** @internal */
export const DeleteTasksSecurity$outboundSchema: z.ZodType<
  DeleteTasksSecurity$Outbound,
  z.ZodTypeDef,
  DeleteTasksSecurity
> = z.object({
  apiKey: z.string().optional(),
  oauth2: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteTasksSecurity$ {
  /** @deprecated use `DeleteTasksSecurity$inboundSchema` instead. */
  export const inboundSchema = DeleteTasksSecurity$inboundSchema;
  /** @deprecated use `DeleteTasksSecurity$outboundSchema` instead. */
  export const outboundSchema = DeleteTasksSecurity$outboundSchema;
  /** @deprecated use `DeleteTasksSecurity$Outbound` instead. */
  export type Outbound = DeleteTasksSecurity$Outbound;
}

export function deleteTasksSecurityToJSON(
  deleteTasksSecurity: DeleteTasksSecurity,
): string {
  return JSON.stringify(
    DeleteTasksSecurity$outboundSchema.parse(deleteTasksSecurity),
  );
}

export function deleteTasksSecurityFromJSON(
  jsonString: string,
): SafeParseResult<DeleteTasksSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteTasksSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteTasksSecurity' from JSON`,
  );
}

/** @internal */
export const DeleteTasksRequest$inboundSchema: z.ZodType<
  DeleteTasksRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string(),
});

/** @internal */
export type DeleteTasksRequest$Outbound = {
  uuid: string;
};

/** @internal */
export const DeleteTasksRequest$outboundSchema: z.ZodType<
  DeleteTasksRequest$Outbound,
  z.ZodTypeDef,
  DeleteTasksRequest
> = z.object({
  uuid: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteTasksRequest$ {
  /** @deprecated use `DeleteTasksRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteTasksRequest$inboundSchema;
  /** @deprecated use `DeleteTasksRequest$outboundSchema` instead. */
  export const outboundSchema = DeleteTasksRequest$outboundSchema;
  /** @deprecated use `DeleteTasksRequest$Outbound` instead. */
  export type Outbound = DeleteTasksRequest$Outbound;
}

export function deleteTasksRequestToJSON(
  deleteTasksRequest: DeleteTasksRequest,
): string {
  return JSON.stringify(
    DeleteTasksRequest$outboundSchema.parse(deleteTasksRequest),
  );
}

export function deleteTasksRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteTasksRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteTasksRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteTasksRequest' from JSON`,
  );
}

/** @internal */
export const DeleteTasksResponse$inboundSchema: z.ZodType<
  DeleteTasksResponse,
  z.ZodTypeDef,
  unknown
> = z.union([components.Result$inboundSchema, components.ErrorT$inboundSchema]);

/** @internal */
export type DeleteTasksResponse$Outbound =
  | components.Result$Outbound
  | components.ErrorT$Outbound;

/** @internal */
export const DeleteTasksResponse$outboundSchema: z.ZodType<
  DeleteTasksResponse$Outbound,
  z.ZodTypeDef,
  DeleteTasksResponse
> = z.union([
  components.Result$outboundSchema,
  components.ErrorT$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteTasksResponse$ {
  /** @deprecated use `DeleteTasksResponse$inboundSchema` instead. */
  export const inboundSchema = DeleteTasksResponse$inboundSchema;
  /** @deprecated use `DeleteTasksResponse$outboundSchema` instead. */
  export const outboundSchema = DeleteTasksResponse$outboundSchema;
  /** @deprecated use `DeleteTasksResponse$Outbound` instead. */
  export type Outbound = DeleteTasksResponse$Outbound;
}

export function deleteTasksResponseToJSON(
  deleteTasksResponse: DeleteTasksResponse,
): string {
  return JSON.stringify(
    DeleteTasksResponse$outboundSchema.parse(deleteTasksResponse),
  );
}

export function deleteTasksResponseFromJSON(
  jsonString: string,
): SafeParseResult<DeleteTasksResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteTasksResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteTasksResponse' from JSON`,
  );
}
