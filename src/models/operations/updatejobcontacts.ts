/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpdateJobContactsRequest = {
  /**
   * UUID of the Job Contact
   */
  uuid: string;
  /**
   * Job Contact fields to update
   */
  jobContact: components.JobContactInput;
};

/** @internal */
export const UpdateJobContactsRequest$inboundSchema: z.ZodType<
  UpdateJobContactsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string(),
  JobContact: components.JobContactInput$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "JobContact": "jobContact",
  });
});

/** @internal */
export type UpdateJobContactsRequest$Outbound = {
  uuid: string;
  JobContact: components.JobContactInput$Outbound;
};

/** @internal */
export const UpdateJobContactsRequest$outboundSchema: z.ZodType<
  UpdateJobContactsRequest$Outbound,
  z.ZodTypeDef,
  UpdateJobContactsRequest
> = z.object({
  uuid: z.string(),
  jobContact: components.JobContactInput$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    jobContact: "JobContact",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateJobContactsRequest$ {
  /** @deprecated use `UpdateJobContactsRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateJobContactsRequest$inboundSchema;
  /** @deprecated use `UpdateJobContactsRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateJobContactsRequest$outboundSchema;
  /** @deprecated use `UpdateJobContactsRequest$Outbound` instead. */
  export type Outbound = UpdateJobContactsRequest$Outbound;
}

export function updateJobContactsRequestToJSON(
  updateJobContactsRequest: UpdateJobContactsRequest,
): string {
  return JSON.stringify(
    UpdateJobContactsRequest$outboundSchema.parse(updateJobContactsRequest),
  );
}

export function updateJobContactsRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateJobContactsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateJobContactsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateJobContactsRequest' from JSON`,
  );
}
