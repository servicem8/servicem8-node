/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpdateJobContactsSecurity = {
  apiKey?: string | undefined;
  oauth2?: string | undefined;
};

export type UpdateJobContactsRequest = {
  /**
   * UUID of the Job Contact
   */
  uuid: string;
  /**
   * Job Contact fields to update
   */
  jobContact: components.JobContactInput;
};

export type UpdateJobContactsResponse = components.Result | components.ErrorT;

/** @internal */
export const UpdateJobContactsSecurity$inboundSchema: z.ZodType<
  UpdateJobContactsSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  apiKey: z.string().optional(),
  oauth2: z.string().optional(),
});

/** @internal */
export type UpdateJobContactsSecurity$Outbound = {
  apiKey?: string | undefined;
  oauth2?: string | undefined;
};

/** @internal */
export const UpdateJobContactsSecurity$outboundSchema: z.ZodType<
  UpdateJobContactsSecurity$Outbound,
  z.ZodTypeDef,
  UpdateJobContactsSecurity
> = z.object({
  apiKey: z.string().optional(),
  oauth2: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateJobContactsSecurity$ {
  /** @deprecated use `UpdateJobContactsSecurity$inboundSchema` instead. */
  export const inboundSchema = UpdateJobContactsSecurity$inboundSchema;
  /** @deprecated use `UpdateJobContactsSecurity$outboundSchema` instead. */
  export const outboundSchema = UpdateJobContactsSecurity$outboundSchema;
  /** @deprecated use `UpdateJobContactsSecurity$Outbound` instead. */
  export type Outbound = UpdateJobContactsSecurity$Outbound;
}

export function updateJobContactsSecurityToJSON(
  updateJobContactsSecurity: UpdateJobContactsSecurity,
): string {
  return JSON.stringify(
    UpdateJobContactsSecurity$outboundSchema.parse(updateJobContactsSecurity),
  );
}

export function updateJobContactsSecurityFromJSON(
  jsonString: string,
): SafeParseResult<UpdateJobContactsSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateJobContactsSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateJobContactsSecurity' from JSON`,
  );
}

/** @internal */
export const UpdateJobContactsRequest$inboundSchema: z.ZodType<
  UpdateJobContactsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string(),
  JobContact: components.JobContactInput$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "JobContact": "jobContact",
  });
});

/** @internal */
export type UpdateJobContactsRequest$Outbound = {
  uuid: string;
  JobContact: components.JobContactInput$Outbound;
};

/** @internal */
export const UpdateJobContactsRequest$outboundSchema: z.ZodType<
  UpdateJobContactsRequest$Outbound,
  z.ZodTypeDef,
  UpdateJobContactsRequest
> = z.object({
  uuid: z.string(),
  jobContact: components.JobContactInput$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    jobContact: "JobContact",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateJobContactsRequest$ {
  /** @deprecated use `UpdateJobContactsRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateJobContactsRequest$inboundSchema;
  /** @deprecated use `UpdateJobContactsRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateJobContactsRequest$outboundSchema;
  /** @deprecated use `UpdateJobContactsRequest$Outbound` instead. */
  export type Outbound = UpdateJobContactsRequest$Outbound;
}

export function updateJobContactsRequestToJSON(
  updateJobContactsRequest: UpdateJobContactsRequest,
): string {
  return JSON.stringify(
    UpdateJobContactsRequest$outboundSchema.parse(updateJobContactsRequest),
  );
}

export function updateJobContactsRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateJobContactsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateJobContactsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateJobContactsRequest' from JSON`,
  );
}

/** @internal */
export const UpdateJobContactsResponse$inboundSchema: z.ZodType<
  UpdateJobContactsResponse,
  z.ZodTypeDef,
  unknown
> = z.union([components.Result$inboundSchema, components.ErrorT$inboundSchema]);

/** @internal */
export type UpdateJobContactsResponse$Outbound =
  | components.Result$Outbound
  | components.ErrorT$Outbound;

/** @internal */
export const UpdateJobContactsResponse$outboundSchema: z.ZodType<
  UpdateJobContactsResponse$Outbound,
  z.ZodTypeDef,
  UpdateJobContactsResponse
> = z.union([
  components.Result$outboundSchema,
  components.ErrorT$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateJobContactsResponse$ {
  /** @deprecated use `UpdateJobContactsResponse$inboundSchema` instead. */
  export const inboundSchema = UpdateJobContactsResponse$inboundSchema;
  /** @deprecated use `UpdateJobContactsResponse$outboundSchema` instead. */
  export const outboundSchema = UpdateJobContactsResponse$outboundSchema;
  /** @deprecated use `UpdateJobContactsResponse$Outbound` instead. */
  export type Outbound = UpdateJobContactsResponse$Outbound;
}

export function updateJobContactsResponseToJSON(
  updateJobContactsResponse: UpdateJobContactsResponse,
): string {
  return JSON.stringify(
    UpdateJobContactsResponse$outboundSchema.parse(updateJobContactsResponse),
  );
}

export function updateJobContactsResponseFromJSON(
  jsonString: string,
): SafeParseResult<UpdateJobContactsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateJobContactsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateJobContactsResponse' from JSON`,
  );
}
