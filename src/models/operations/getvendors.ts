/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetVendorsRequest = {
  /**
   * UUID of the Vendor
   */
  uuid: string;
};

/** @internal */
export const GetVendorsRequest$inboundSchema: z.ZodType<
  GetVendorsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string(),
});

/** @internal */
export type GetVendorsRequest$Outbound = {
  uuid: string;
};

/** @internal */
export const GetVendorsRequest$outboundSchema: z.ZodType<
  GetVendorsRequest$Outbound,
  z.ZodTypeDef,
  GetVendorsRequest
> = z.object({
  uuid: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetVendorsRequest$ {
  /** @deprecated use `GetVendorsRequest$inboundSchema` instead. */
  export const inboundSchema = GetVendorsRequest$inboundSchema;
  /** @deprecated use `GetVendorsRequest$outboundSchema` instead. */
  export const outboundSchema = GetVendorsRequest$outboundSchema;
  /** @deprecated use `GetVendorsRequest$Outbound` instead. */
  export type Outbound = GetVendorsRequest$Outbound;
}

export function getVendorsRequestToJSON(
  getVendorsRequest: GetVendorsRequest,
): string {
  return JSON.stringify(
    GetVendorsRequest$outboundSchema.parse(getVendorsRequest),
  );
}

export function getVendorsRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetVendorsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetVendorsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetVendorsRequest' from JSON`,
  );
}
