/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetVendorsSecurity = {
  apiKey?: string | undefined;
  oauth2?: string | undefined;
};

export type GetVendorsRequest = {
  /**
   * UUID of the Vendor
   */
  uuid: string;
};

export type GetVendorsResponse = components.ErrorT | components.Vendor;

/** @internal */
export const GetVendorsSecurity$inboundSchema: z.ZodType<
  GetVendorsSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  apiKey: z.string().optional(),
  oauth2: z.string().optional(),
});

/** @internal */
export type GetVendorsSecurity$Outbound = {
  apiKey?: string | undefined;
  oauth2?: string | undefined;
};

/** @internal */
export const GetVendorsSecurity$outboundSchema: z.ZodType<
  GetVendorsSecurity$Outbound,
  z.ZodTypeDef,
  GetVendorsSecurity
> = z.object({
  apiKey: z.string().optional(),
  oauth2: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetVendorsSecurity$ {
  /** @deprecated use `GetVendorsSecurity$inboundSchema` instead. */
  export const inboundSchema = GetVendorsSecurity$inboundSchema;
  /** @deprecated use `GetVendorsSecurity$outboundSchema` instead. */
  export const outboundSchema = GetVendorsSecurity$outboundSchema;
  /** @deprecated use `GetVendorsSecurity$Outbound` instead. */
  export type Outbound = GetVendorsSecurity$Outbound;
}

export function getVendorsSecurityToJSON(
  getVendorsSecurity: GetVendorsSecurity,
): string {
  return JSON.stringify(
    GetVendorsSecurity$outboundSchema.parse(getVendorsSecurity),
  );
}

export function getVendorsSecurityFromJSON(
  jsonString: string,
): SafeParseResult<GetVendorsSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetVendorsSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetVendorsSecurity' from JSON`,
  );
}

/** @internal */
export const GetVendorsRequest$inboundSchema: z.ZodType<
  GetVendorsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string(),
});

/** @internal */
export type GetVendorsRequest$Outbound = {
  uuid: string;
};

/** @internal */
export const GetVendorsRequest$outboundSchema: z.ZodType<
  GetVendorsRequest$Outbound,
  z.ZodTypeDef,
  GetVendorsRequest
> = z.object({
  uuid: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetVendorsRequest$ {
  /** @deprecated use `GetVendorsRequest$inboundSchema` instead. */
  export const inboundSchema = GetVendorsRequest$inboundSchema;
  /** @deprecated use `GetVendorsRequest$outboundSchema` instead. */
  export const outboundSchema = GetVendorsRequest$outboundSchema;
  /** @deprecated use `GetVendorsRequest$Outbound` instead. */
  export type Outbound = GetVendorsRequest$Outbound;
}

export function getVendorsRequestToJSON(
  getVendorsRequest: GetVendorsRequest,
): string {
  return JSON.stringify(
    GetVendorsRequest$outboundSchema.parse(getVendorsRequest),
  );
}

export function getVendorsRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetVendorsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetVendorsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetVendorsRequest' from JSON`,
  );
}

/** @internal */
export const GetVendorsResponse$inboundSchema: z.ZodType<
  GetVendorsResponse,
  z.ZodTypeDef,
  unknown
> = z.union([components.ErrorT$inboundSchema, components.Vendor$inboundSchema]);

/** @internal */
export type GetVendorsResponse$Outbound =
  | components.ErrorT$Outbound
  | components.Vendor$Outbound;

/** @internal */
export const GetVendorsResponse$outboundSchema: z.ZodType<
  GetVendorsResponse$Outbound,
  z.ZodTypeDef,
  GetVendorsResponse
> = z.union([
  components.ErrorT$outboundSchema,
  components.Vendor$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetVendorsResponse$ {
  /** @deprecated use `GetVendorsResponse$inboundSchema` instead. */
  export const inboundSchema = GetVendorsResponse$inboundSchema;
  /** @deprecated use `GetVendorsResponse$outboundSchema` instead. */
  export const outboundSchema = GetVendorsResponse$outboundSchema;
  /** @deprecated use `GetVendorsResponse$Outbound` instead. */
  export type Outbound = GetVendorsResponse$Outbound;
}

export function getVendorsResponseToJSON(
  getVendorsResponse: GetVendorsResponse,
): string {
  return JSON.stringify(
    GetVendorsResponse$outboundSchema.parse(getVendorsResponse),
  );
}

export function getVendorsResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetVendorsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetVendorsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetVendorsResponse' from JSON`,
  );
}
