/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Type of object to search
 */
export const ObjectType = {
  Job: "job",
  Company: "company",
  Material: "material",
  Knowledgearticle: "knowledgearticle",
  Attachment: "attachment",
  Formresponse: "formresponse",
  Asset: "asset",
  Materialbundle: "materialbundle",
} as const;
/**
 * Type of object to search
 */
export type ObjectType = ClosedEnum<typeof ObjectType>;

/** @internal */
export const ObjectType$inboundSchema: z.ZodNativeEnum<typeof ObjectType> = z
  .nativeEnum(ObjectType);

/** @internal */
export const ObjectType$outboundSchema: z.ZodNativeEnum<typeof ObjectType> =
  ObjectType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ObjectType$ {
  /** @deprecated use `ObjectType$inboundSchema` instead. */
  export const inboundSchema = ObjectType$inboundSchema;
  /** @deprecated use `ObjectType$outboundSchema` instead. */
  export const outboundSchema = ObjectType$outboundSchema;
}

export type ObjectSearchRequest = {
  /**
   * Type of object to search
   */
  objectType: ObjectType;
  /**
   * Search query string
   */
  q: string;
  /**
   * Maximum number of results to return (max 100)
   */
  limit?: number | undefined;
};

/** @internal */
export const ObjectSearchRequest$inboundSchema: z.ZodType<
  ObjectSearchRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  objectType: ObjectType$inboundSchema,
  q: z.string(),
  limit: z.number().int().default(50),
});

/** @internal */
export type ObjectSearchRequest$Outbound = {
  objectType: string;
  q: string;
  limit: number;
};

/** @internal */
export const ObjectSearchRequest$outboundSchema: z.ZodType<
  ObjectSearchRequest$Outbound,
  z.ZodTypeDef,
  ObjectSearchRequest
> = z.object({
  objectType: ObjectType$outboundSchema,
  q: z.string(),
  limit: z.number().int().default(50),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ObjectSearchRequest$ {
  /** @deprecated use `ObjectSearchRequest$inboundSchema` instead. */
  export const inboundSchema = ObjectSearchRequest$inboundSchema;
  /** @deprecated use `ObjectSearchRequest$outboundSchema` instead. */
  export const outboundSchema = ObjectSearchRequest$outboundSchema;
  /** @deprecated use `ObjectSearchRequest$Outbound` instead. */
  export type Outbound = ObjectSearchRequest$Outbound;
}

export function objectSearchRequestToJSON(
  objectSearchRequest: ObjectSearchRequest,
): string {
  return JSON.stringify(
    ObjectSearchRequest$outboundSchema.parse(objectSearchRequest),
  );
}

export function objectSearchRequestFromJSON(
  jsonString: string,
): SafeParseResult<ObjectSearchRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ObjectSearchRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ObjectSearchRequest' from JSON`,
  );
}
