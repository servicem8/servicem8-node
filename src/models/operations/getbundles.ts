/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetBundlesRequest = {
  /**
   * UUID of the Bundle
   */
  uuid: string;
};

export type GetBundlesResponse = components.ErrorT | components.MaterialBundle;

/** @internal */
export const GetBundlesRequest$inboundSchema: z.ZodType<
  GetBundlesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string(),
});

/** @internal */
export type GetBundlesRequest$Outbound = {
  uuid: string;
};

/** @internal */
export const GetBundlesRequest$outboundSchema: z.ZodType<
  GetBundlesRequest$Outbound,
  z.ZodTypeDef,
  GetBundlesRequest
> = z.object({
  uuid: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetBundlesRequest$ {
  /** @deprecated use `GetBundlesRequest$inboundSchema` instead. */
  export const inboundSchema = GetBundlesRequest$inboundSchema;
  /** @deprecated use `GetBundlesRequest$outboundSchema` instead. */
  export const outboundSchema = GetBundlesRequest$outboundSchema;
  /** @deprecated use `GetBundlesRequest$Outbound` instead. */
  export type Outbound = GetBundlesRequest$Outbound;
}

export function getBundlesRequestToJSON(
  getBundlesRequest: GetBundlesRequest,
): string {
  return JSON.stringify(
    GetBundlesRequest$outboundSchema.parse(getBundlesRequest),
  );
}

export function getBundlesRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetBundlesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetBundlesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetBundlesRequest' from JSON`,
  );
}

/** @internal */
export const GetBundlesResponse$inboundSchema: z.ZodType<
  GetBundlesResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  components.ErrorT$inboundSchema,
  components.MaterialBundle$inboundSchema,
]);

/** @internal */
export type GetBundlesResponse$Outbound =
  | components.ErrorT$Outbound
  | components.MaterialBundle$Outbound;

/** @internal */
export const GetBundlesResponse$outboundSchema: z.ZodType<
  GetBundlesResponse$Outbound,
  z.ZodTypeDef,
  GetBundlesResponse
> = z.union([
  components.ErrorT$outboundSchema,
  components.MaterialBundle$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetBundlesResponse$ {
  /** @deprecated use `GetBundlesResponse$inboundSchema` instead. */
  export const inboundSchema = GetBundlesResponse$inboundSchema;
  /** @deprecated use `GetBundlesResponse$outboundSchema` instead. */
  export const outboundSchema = GetBundlesResponse$outboundSchema;
  /** @deprecated use `GetBundlesResponse$Outbound` instead. */
  export type Outbound = GetBundlesResponse$Outbound;
}

export function getBundlesResponseToJSON(
  getBundlesResponse: GetBundlesResponse,
): string {
  return JSON.stringify(
    GetBundlesResponse$outboundSchema.parse(getBundlesResponse),
  );
}

export function getBundlesResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetBundlesResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetBundlesResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetBundlesResponse' from JSON`,
  );
}
