/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetFeedbackRequest = {
  /**
   * UUID of the Feedback
   */
  uuid: string;
};

export type GetFeedbackResponse = components.ErrorT | components.Feedback;

/** @internal */
export const GetFeedbackRequest$inboundSchema: z.ZodType<
  GetFeedbackRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string(),
});

/** @internal */
export type GetFeedbackRequest$Outbound = {
  uuid: string;
};

/** @internal */
export const GetFeedbackRequest$outboundSchema: z.ZodType<
  GetFeedbackRequest$Outbound,
  z.ZodTypeDef,
  GetFeedbackRequest
> = z.object({
  uuid: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetFeedbackRequest$ {
  /** @deprecated use `GetFeedbackRequest$inboundSchema` instead. */
  export const inboundSchema = GetFeedbackRequest$inboundSchema;
  /** @deprecated use `GetFeedbackRequest$outboundSchema` instead. */
  export const outboundSchema = GetFeedbackRequest$outboundSchema;
  /** @deprecated use `GetFeedbackRequest$Outbound` instead. */
  export type Outbound = GetFeedbackRequest$Outbound;
}

export function getFeedbackRequestToJSON(
  getFeedbackRequest: GetFeedbackRequest,
): string {
  return JSON.stringify(
    GetFeedbackRequest$outboundSchema.parse(getFeedbackRequest),
  );
}

export function getFeedbackRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetFeedbackRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetFeedbackRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetFeedbackRequest' from JSON`,
  );
}

/** @internal */
export const GetFeedbackResponse$inboundSchema: z.ZodType<
  GetFeedbackResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  components.ErrorT$inboundSchema,
  components.Feedback$inboundSchema,
]);

/** @internal */
export type GetFeedbackResponse$Outbound =
  | components.ErrorT$Outbound
  | components.Feedback$Outbound;

/** @internal */
export const GetFeedbackResponse$outboundSchema: z.ZodType<
  GetFeedbackResponse$Outbound,
  z.ZodTypeDef,
  GetFeedbackResponse
> = z.union([
  components.ErrorT$outboundSchema,
  components.Feedback$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetFeedbackResponse$ {
  /** @deprecated use `GetFeedbackResponse$inboundSchema` instead. */
  export const inboundSchema = GetFeedbackResponse$inboundSchema;
  /** @deprecated use `GetFeedbackResponse$outboundSchema` instead. */
  export const outboundSchema = GetFeedbackResponse$outboundSchema;
  /** @deprecated use `GetFeedbackResponse$Outbound` instead. */
  export type Outbound = GetFeedbackResponse$Outbound;
}

export function getFeedbackResponseToJSON(
  getFeedbackResponse: GetFeedbackResponse,
): string {
  return JSON.stringify(
    GetFeedbackResponse$outboundSchema.parse(getFeedbackResponse),
  );
}

export function getFeedbackResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetFeedbackResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetFeedbackResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetFeedbackResponse' from JSON`,
  );
}
