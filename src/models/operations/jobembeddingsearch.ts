/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type JobEmbeddingSearchRequest = {
  /**
   * Search query string
   */
  q: string;
  /**
   * Maximum number of results to return (max 50)
   */
  limit?: number | undefined;
  /**
   * Minimum similarity score (0.0 to 1.0)
   */
  similarityThreshold?: number | undefined;
};

/** @internal */
export const JobEmbeddingSearchRequest$inboundSchema: z.ZodType<
  JobEmbeddingSearchRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  q: z.string(),
  limit: z.number().int().default(10),
  similarity_threshold: z.number().default(0.7),
}).transform((v) => {
  return remap$(v, {
    "similarity_threshold": "similarityThreshold",
  });
});

/** @internal */
export type JobEmbeddingSearchRequest$Outbound = {
  q: string;
  limit: number;
  similarity_threshold: number;
};

/** @internal */
export const JobEmbeddingSearchRequest$outboundSchema: z.ZodType<
  JobEmbeddingSearchRequest$Outbound,
  z.ZodTypeDef,
  JobEmbeddingSearchRequest
> = z.object({
  q: z.string(),
  limit: z.number().int().default(10),
  similarityThreshold: z.number().default(0.7),
}).transform((v) => {
  return remap$(v, {
    similarityThreshold: "similarity_threshold",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace JobEmbeddingSearchRequest$ {
  /** @deprecated use `JobEmbeddingSearchRequest$inboundSchema` instead. */
  export const inboundSchema = JobEmbeddingSearchRequest$inboundSchema;
  /** @deprecated use `JobEmbeddingSearchRequest$outboundSchema` instead. */
  export const outboundSchema = JobEmbeddingSearchRequest$outboundSchema;
  /** @deprecated use `JobEmbeddingSearchRequest$Outbound` instead. */
  export type Outbound = JobEmbeddingSearchRequest$Outbound;
}

export function jobEmbeddingSearchRequestToJSON(
  jobEmbeddingSearchRequest: JobEmbeddingSearchRequest,
): string {
  return JSON.stringify(
    JobEmbeddingSearchRequest$outboundSchema.parse(jobEmbeddingSearchRequest),
  );
}

export function jobEmbeddingSearchRequestFromJSON(
  jsonString: string,
): SafeParseResult<JobEmbeddingSearchRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => JobEmbeddingSearchRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'JobEmbeddingSearchRequest' from JSON`,
  );
}
