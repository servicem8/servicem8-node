/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteLocationsRequest = {
  /**
   * UUID of the Location
   */
  uuid: string;
};

export type DeleteLocationsResponse = components.Result | components.ErrorT;

/** @internal */
export const DeleteLocationsRequest$inboundSchema: z.ZodType<
  DeleteLocationsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string(),
});

/** @internal */
export type DeleteLocationsRequest$Outbound = {
  uuid: string;
};

/** @internal */
export const DeleteLocationsRequest$outboundSchema: z.ZodType<
  DeleteLocationsRequest$Outbound,
  z.ZodTypeDef,
  DeleteLocationsRequest
> = z.object({
  uuid: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteLocationsRequest$ {
  /** @deprecated use `DeleteLocationsRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteLocationsRequest$inboundSchema;
  /** @deprecated use `DeleteLocationsRequest$outboundSchema` instead. */
  export const outboundSchema = DeleteLocationsRequest$outboundSchema;
  /** @deprecated use `DeleteLocationsRequest$Outbound` instead. */
  export type Outbound = DeleteLocationsRequest$Outbound;
}

export function deleteLocationsRequestToJSON(
  deleteLocationsRequest: DeleteLocationsRequest,
): string {
  return JSON.stringify(
    DeleteLocationsRequest$outboundSchema.parse(deleteLocationsRequest),
  );
}

export function deleteLocationsRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteLocationsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteLocationsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteLocationsRequest' from JSON`,
  );
}

/** @internal */
export const DeleteLocationsResponse$inboundSchema: z.ZodType<
  DeleteLocationsResponse,
  z.ZodTypeDef,
  unknown
> = z.union([components.Result$inboundSchema, components.ErrorT$inboundSchema]);

/** @internal */
export type DeleteLocationsResponse$Outbound =
  | components.Result$Outbound
  | components.ErrorT$Outbound;

/** @internal */
export const DeleteLocationsResponse$outboundSchema: z.ZodType<
  DeleteLocationsResponse$Outbound,
  z.ZodTypeDef,
  DeleteLocationsResponse
> = z.union([
  components.Result$outboundSchema,
  components.ErrorT$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteLocationsResponse$ {
  /** @deprecated use `DeleteLocationsResponse$inboundSchema` instead. */
  export const inboundSchema = DeleteLocationsResponse$inboundSchema;
  /** @deprecated use `DeleteLocationsResponse$outboundSchema` instead. */
  export const outboundSchema = DeleteLocationsResponse$outboundSchema;
  /** @deprecated use `DeleteLocationsResponse$Outbound` instead. */
  export type Outbound = DeleteLocationsResponse$Outbound;
}

export function deleteLocationsResponseToJSON(
  deleteLocationsResponse: DeleteLocationsResponse,
): string {
  return JSON.stringify(
    DeleteLocationsResponse$outboundSchema.parse(deleteLocationsResponse),
  );
}

export function deleteLocationsResponseFromJSON(
  jsonString: string,
): SafeParseResult<DeleteLocationsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteLocationsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteLocationsResponse' from JSON`,
  );
}
