/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpdateSecurityRolesRequest = {
  /**
   * UUID of the Security Role
   */
  uuid: string;
  /**
   * Security Role fields to update
   */
  securityRole: components.SecurityRoleInput;
};

export type UpdateSecurityRolesResponse = components.Result | components.ErrorT;

/** @internal */
export const UpdateSecurityRolesRequest$inboundSchema: z.ZodType<
  UpdateSecurityRolesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string(),
  SecurityRole: components.SecurityRoleInput$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "SecurityRole": "securityRole",
  });
});

/** @internal */
export type UpdateSecurityRolesRequest$Outbound = {
  uuid: string;
  SecurityRole: components.SecurityRoleInput$Outbound;
};

/** @internal */
export const UpdateSecurityRolesRequest$outboundSchema: z.ZodType<
  UpdateSecurityRolesRequest$Outbound,
  z.ZodTypeDef,
  UpdateSecurityRolesRequest
> = z.object({
  uuid: z.string(),
  securityRole: components.SecurityRoleInput$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    securityRole: "SecurityRole",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateSecurityRolesRequest$ {
  /** @deprecated use `UpdateSecurityRolesRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateSecurityRolesRequest$inboundSchema;
  /** @deprecated use `UpdateSecurityRolesRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateSecurityRolesRequest$outboundSchema;
  /** @deprecated use `UpdateSecurityRolesRequest$Outbound` instead. */
  export type Outbound = UpdateSecurityRolesRequest$Outbound;
}

export function updateSecurityRolesRequestToJSON(
  updateSecurityRolesRequest: UpdateSecurityRolesRequest,
): string {
  return JSON.stringify(
    UpdateSecurityRolesRequest$outboundSchema.parse(updateSecurityRolesRequest),
  );
}

export function updateSecurityRolesRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateSecurityRolesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateSecurityRolesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateSecurityRolesRequest' from JSON`,
  );
}

/** @internal */
export const UpdateSecurityRolesResponse$inboundSchema: z.ZodType<
  UpdateSecurityRolesResponse,
  z.ZodTypeDef,
  unknown
> = z.union([components.Result$inboundSchema, components.ErrorT$inboundSchema]);

/** @internal */
export type UpdateSecurityRolesResponse$Outbound =
  | components.Result$Outbound
  | components.ErrorT$Outbound;

/** @internal */
export const UpdateSecurityRolesResponse$outboundSchema: z.ZodType<
  UpdateSecurityRolesResponse$Outbound,
  z.ZodTypeDef,
  UpdateSecurityRolesResponse
> = z.union([
  components.Result$outboundSchema,
  components.ErrorT$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateSecurityRolesResponse$ {
  /** @deprecated use `UpdateSecurityRolesResponse$inboundSchema` instead. */
  export const inboundSchema = UpdateSecurityRolesResponse$inboundSchema;
  /** @deprecated use `UpdateSecurityRolesResponse$outboundSchema` instead. */
  export const outboundSchema = UpdateSecurityRolesResponse$outboundSchema;
  /** @deprecated use `UpdateSecurityRolesResponse$Outbound` instead. */
  export type Outbound = UpdateSecurityRolesResponse$Outbound;
}

export function updateSecurityRolesResponseToJSON(
  updateSecurityRolesResponse: UpdateSecurityRolesResponse,
): string {
  return JSON.stringify(
    UpdateSecurityRolesResponse$outboundSchema.parse(
      updateSecurityRolesResponse,
    ),
  );
}

export function updateSecurityRolesResponseFromJSON(
  jsonString: string,
): SafeParseResult<UpdateSecurityRolesResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateSecurityRolesResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateSecurityRolesResponse' from JSON`,
  );
}
