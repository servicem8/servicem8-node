/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpdateCompanyContactsSecurity = {
  apiKey?: string | undefined;
  oauth2?: string | undefined;
};

export type UpdateCompanyContactsRequest = {
  /**
   * UUID of the Company Contact
   */
  uuid: string;
  /**
   * Company Contact fields to update
   */
  companyContact: components.CompanyContactInput;
};

export type UpdateCompanyContactsResponse =
  | components.Result
  | components.ErrorT;

/** @internal */
export const UpdateCompanyContactsSecurity$inboundSchema: z.ZodType<
  UpdateCompanyContactsSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  apiKey: z.string().optional(),
  oauth2: z.string().optional(),
});

/** @internal */
export type UpdateCompanyContactsSecurity$Outbound = {
  apiKey?: string | undefined;
  oauth2?: string | undefined;
};

/** @internal */
export const UpdateCompanyContactsSecurity$outboundSchema: z.ZodType<
  UpdateCompanyContactsSecurity$Outbound,
  z.ZodTypeDef,
  UpdateCompanyContactsSecurity
> = z.object({
  apiKey: z.string().optional(),
  oauth2: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateCompanyContactsSecurity$ {
  /** @deprecated use `UpdateCompanyContactsSecurity$inboundSchema` instead. */
  export const inboundSchema = UpdateCompanyContactsSecurity$inboundSchema;
  /** @deprecated use `UpdateCompanyContactsSecurity$outboundSchema` instead. */
  export const outboundSchema = UpdateCompanyContactsSecurity$outboundSchema;
  /** @deprecated use `UpdateCompanyContactsSecurity$Outbound` instead. */
  export type Outbound = UpdateCompanyContactsSecurity$Outbound;
}

export function updateCompanyContactsSecurityToJSON(
  updateCompanyContactsSecurity: UpdateCompanyContactsSecurity,
): string {
  return JSON.stringify(
    UpdateCompanyContactsSecurity$outboundSchema.parse(
      updateCompanyContactsSecurity,
    ),
  );
}

export function updateCompanyContactsSecurityFromJSON(
  jsonString: string,
): SafeParseResult<UpdateCompanyContactsSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateCompanyContactsSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateCompanyContactsSecurity' from JSON`,
  );
}

/** @internal */
export const UpdateCompanyContactsRequest$inboundSchema: z.ZodType<
  UpdateCompanyContactsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string(),
  CompanyContact: components.CompanyContactInput$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "CompanyContact": "companyContact",
  });
});

/** @internal */
export type UpdateCompanyContactsRequest$Outbound = {
  uuid: string;
  CompanyContact: components.CompanyContactInput$Outbound;
};

/** @internal */
export const UpdateCompanyContactsRequest$outboundSchema: z.ZodType<
  UpdateCompanyContactsRequest$Outbound,
  z.ZodTypeDef,
  UpdateCompanyContactsRequest
> = z.object({
  uuid: z.string(),
  companyContact: components.CompanyContactInput$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    companyContact: "CompanyContact",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateCompanyContactsRequest$ {
  /** @deprecated use `UpdateCompanyContactsRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateCompanyContactsRequest$inboundSchema;
  /** @deprecated use `UpdateCompanyContactsRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateCompanyContactsRequest$outboundSchema;
  /** @deprecated use `UpdateCompanyContactsRequest$Outbound` instead. */
  export type Outbound = UpdateCompanyContactsRequest$Outbound;
}

export function updateCompanyContactsRequestToJSON(
  updateCompanyContactsRequest: UpdateCompanyContactsRequest,
): string {
  return JSON.stringify(
    UpdateCompanyContactsRequest$outboundSchema.parse(
      updateCompanyContactsRequest,
    ),
  );
}

export function updateCompanyContactsRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateCompanyContactsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateCompanyContactsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateCompanyContactsRequest' from JSON`,
  );
}

/** @internal */
export const UpdateCompanyContactsResponse$inboundSchema: z.ZodType<
  UpdateCompanyContactsResponse,
  z.ZodTypeDef,
  unknown
> = z.union([components.Result$inboundSchema, components.ErrorT$inboundSchema]);

/** @internal */
export type UpdateCompanyContactsResponse$Outbound =
  | components.Result$Outbound
  | components.ErrorT$Outbound;

/** @internal */
export const UpdateCompanyContactsResponse$outboundSchema: z.ZodType<
  UpdateCompanyContactsResponse$Outbound,
  z.ZodTypeDef,
  UpdateCompanyContactsResponse
> = z.union([
  components.Result$outboundSchema,
  components.ErrorT$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateCompanyContactsResponse$ {
  /** @deprecated use `UpdateCompanyContactsResponse$inboundSchema` instead. */
  export const inboundSchema = UpdateCompanyContactsResponse$inboundSchema;
  /** @deprecated use `UpdateCompanyContactsResponse$outboundSchema` instead. */
  export const outboundSchema = UpdateCompanyContactsResponse$outboundSchema;
  /** @deprecated use `UpdateCompanyContactsResponse$Outbound` instead. */
  export type Outbound = UpdateCompanyContactsResponse$Outbound;
}

export function updateCompanyContactsResponseToJSON(
  updateCompanyContactsResponse: UpdateCompanyContactsResponse,
): string {
  return JSON.stringify(
    UpdateCompanyContactsResponse$outboundSchema.parse(
      updateCompanyContactsResponse,
    ),
  );
}

export function updateCompanyContactsResponseFromJSON(
  jsonString: string,
): SafeParseResult<UpdateCompanyContactsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateCompanyContactsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateCompanyContactsResponse' from JSON`,
  );
}
