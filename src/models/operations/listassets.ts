/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListAssetsSecurity = {
  apiKey?: string | undefined;
  oauth2?: string | undefined;
};

export type ListAssetsResponse = components.ErrorT | Array<components.Asset>;

/** @internal */
export const ListAssetsSecurity$inboundSchema: z.ZodType<
  ListAssetsSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  apiKey: z.string().optional(),
  oauth2: z.string().optional(),
});

/** @internal */
export type ListAssetsSecurity$Outbound = {
  apiKey?: string | undefined;
  oauth2?: string | undefined;
};

/** @internal */
export const ListAssetsSecurity$outboundSchema: z.ZodType<
  ListAssetsSecurity$Outbound,
  z.ZodTypeDef,
  ListAssetsSecurity
> = z.object({
  apiKey: z.string().optional(),
  oauth2: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAssetsSecurity$ {
  /** @deprecated use `ListAssetsSecurity$inboundSchema` instead. */
  export const inboundSchema = ListAssetsSecurity$inboundSchema;
  /** @deprecated use `ListAssetsSecurity$outboundSchema` instead. */
  export const outboundSchema = ListAssetsSecurity$outboundSchema;
  /** @deprecated use `ListAssetsSecurity$Outbound` instead. */
  export type Outbound = ListAssetsSecurity$Outbound;
}

export function listAssetsSecurityToJSON(
  listAssetsSecurity: ListAssetsSecurity,
): string {
  return JSON.stringify(
    ListAssetsSecurity$outboundSchema.parse(listAssetsSecurity),
  );
}

export function listAssetsSecurityFromJSON(
  jsonString: string,
): SafeParseResult<ListAssetsSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAssetsSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAssetsSecurity' from JSON`,
  );
}

/** @internal */
export const ListAssetsResponse$inboundSchema: z.ZodType<
  ListAssetsResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  components.ErrorT$inboundSchema,
  z.array(components.Asset$inboundSchema),
]);

/** @internal */
export type ListAssetsResponse$Outbound =
  | components.ErrorT$Outbound
  | Array<components.Asset$Outbound>;

/** @internal */
export const ListAssetsResponse$outboundSchema: z.ZodType<
  ListAssetsResponse$Outbound,
  z.ZodTypeDef,
  ListAssetsResponse
> = z.union([
  components.ErrorT$outboundSchema,
  z.array(components.Asset$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAssetsResponse$ {
  /** @deprecated use `ListAssetsResponse$inboundSchema` instead. */
  export const inboundSchema = ListAssetsResponse$inboundSchema;
  /** @deprecated use `ListAssetsResponse$outboundSchema` instead. */
  export const outboundSchema = ListAssetsResponse$outboundSchema;
  /** @deprecated use `ListAssetsResponse$Outbound` instead. */
  export type Outbound = ListAssetsResponse$Outbound;
}

export function listAssetsResponseToJSON(
  listAssetsResponse: ListAssetsResponse,
): string {
  return JSON.stringify(
    ListAssetsResponse$outboundSchema.parse(listAssetsResponse),
  );
}

export function listAssetsResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListAssetsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAssetsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAssetsResponse' from JSON`,
  );
}
