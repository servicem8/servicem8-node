/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetMaterialsSecurity = {
  apiKey?: string | undefined;
  oauth2?: string | undefined;
};

export type GetMaterialsRequest = {
  /**
   * UUID of the Material
   */
  uuid: string;
};

export type GetMaterialsResponse = components.ErrorT | components.Material;

/** @internal */
export const GetMaterialsSecurity$inboundSchema: z.ZodType<
  GetMaterialsSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  apiKey: z.string().optional(),
  oauth2: z.string().optional(),
});

/** @internal */
export type GetMaterialsSecurity$Outbound = {
  apiKey?: string | undefined;
  oauth2?: string | undefined;
};

/** @internal */
export const GetMaterialsSecurity$outboundSchema: z.ZodType<
  GetMaterialsSecurity$Outbound,
  z.ZodTypeDef,
  GetMaterialsSecurity
> = z.object({
  apiKey: z.string().optional(),
  oauth2: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetMaterialsSecurity$ {
  /** @deprecated use `GetMaterialsSecurity$inboundSchema` instead. */
  export const inboundSchema = GetMaterialsSecurity$inboundSchema;
  /** @deprecated use `GetMaterialsSecurity$outboundSchema` instead. */
  export const outboundSchema = GetMaterialsSecurity$outboundSchema;
  /** @deprecated use `GetMaterialsSecurity$Outbound` instead. */
  export type Outbound = GetMaterialsSecurity$Outbound;
}

export function getMaterialsSecurityToJSON(
  getMaterialsSecurity: GetMaterialsSecurity,
): string {
  return JSON.stringify(
    GetMaterialsSecurity$outboundSchema.parse(getMaterialsSecurity),
  );
}

export function getMaterialsSecurityFromJSON(
  jsonString: string,
): SafeParseResult<GetMaterialsSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetMaterialsSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetMaterialsSecurity' from JSON`,
  );
}

/** @internal */
export const GetMaterialsRequest$inboundSchema: z.ZodType<
  GetMaterialsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string(),
});

/** @internal */
export type GetMaterialsRequest$Outbound = {
  uuid: string;
};

/** @internal */
export const GetMaterialsRequest$outboundSchema: z.ZodType<
  GetMaterialsRequest$Outbound,
  z.ZodTypeDef,
  GetMaterialsRequest
> = z.object({
  uuid: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetMaterialsRequest$ {
  /** @deprecated use `GetMaterialsRequest$inboundSchema` instead. */
  export const inboundSchema = GetMaterialsRequest$inboundSchema;
  /** @deprecated use `GetMaterialsRequest$outboundSchema` instead. */
  export const outboundSchema = GetMaterialsRequest$outboundSchema;
  /** @deprecated use `GetMaterialsRequest$Outbound` instead. */
  export type Outbound = GetMaterialsRequest$Outbound;
}

export function getMaterialsRequestToJSON(
  getMaterialsRequest: GetMaterialsRequest,
): string {
  return JSON.stringify(
    GetMaterialsRequest$outboundSchema.parse(getMaterialsRequest),
  );
}

export function getMaterialsRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetMaterialsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetMaterialsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetMaterialsRequest' from JSON`,
  );
}

/** @internal */
export const GetMaterialsResponse$inboundSchema: z.ZodType<
  GetMaterialsResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  components.ErrorT$inboundSchema,
  components.Material$inboundSchema,
]);

/** @internal */
export type GetMaterialsResponse$Outbound =
  | components.ErrorT$Outbound
  | components.Material$Outbound;

/** @internal */
export const GetMaterialsResponse$outboundSchema: z.ZodType<
  GetMaterialsResponse$Outbound,
  z.ZodTypeDef,
  GetMaterialsResponse
> = z.union([
  components.ErrorT$outboundSchema,
  components.Material$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetMaterialsResponse$ {
  /** @deprecated use `GetMaterialsResponse$inboundSchema` instead. */
  export const inboundSchema = GetMaterialsResponse$inboundSchema;
  /** @deprecated use `GetMaterialsResponse$outboundSchema` instead. */
  export const outboundSchema = GetMaterialsResponse$outboundSchema;
  /** @deprecated use `GetMaterialsResponse$Outbound` instead. */
  export type Outbound = GetMaterialsResponse$Outbound;
}

export function getMaterialsResponseToJSON(
  getMaterialsResponse: GetMaterialsResponse,
): string {
  return JSON.stringify(
    GetMaterialsResponse$outboundSchema.parse(getMaterialsResponse),
  );
}

export function getMaterialsResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetMaterialsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetMaterialsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetMaterialsResponse' from JSON`,
  );
}
