/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CreateJobFromTemplateRequest = {
  /**
   * UUID of the job template to clone from
   */
  uuid: string;
  /**
   * Field overrides for the new job (send an empty object to use template defaults)
   */
  jobTemplateOverrides: components.JobTemplateOverrides;
};

/**
 * Job created successfully
 */
export type CreateJobFromTemplateResponseBody = {
  /**
   * UUID of the created job
   */
  jobUUID: string;
  /**
   * API path to the created job resource
   */
  location: string;
  /**
   * Success message
   */
  message: string;
};

export type CreateJobFromTemplateResponse = {
  headers: { [k: string]: Array<string> };
  result: CreateJobFromTemplateResponseBody;
};

/** @internal */
export const CreateJobFromTemplateRequest$inboundSchema: z.ZodType<
  CreateJobFromTemplateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string(),
  JobTemplateOverrides: components.JobTemplateOverrides$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "JobTemplateOverrides": "jobTemplateOverrides",
  });
});

/** @internal */
export type CreateJobFromTemplateRequest$Outbound = {
  uuid: string;
  JobTemplateOverrides: components.JobTemplateOverrides$Outbound;
};

/** @internal */
export const CreateJobFromTemplateRequest$outboundSchema: z.ZodType<
  CreateJobFromTemplateRequest$Outbound,
  z.ZodTypeDef,
  CreateJobFromTemplateRequest
> = z.object({
  uuid: z.string(),
  jobTemplateOverrides: components.JobTemplateOverrides$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    jobTemplateOverrides: "JobTemplateOverrides",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateJobFromTemplateRequest$ {
  /** @deprecated use `CreateJobFromTemplateRequest$inboundSchema` instead. */
  export const inboundSchema = CreateJobFromTemplateRequest$inboundSchema;
  /** @deprecated use `CreateJobFromTemplateRequest$outboundSchema` instead. */
  export const outboundSchema = CreateJobFromTemplateRequest$outboundSchema;
  /** @deprecated use `CreateJobFromTemplateRequest$Outbound` instead. */
  export type Outbound = CreateJobFromTemplateRequest$Outbound;
}

export function createJobFromTemplateRequestToJSON(
  createJobFromTemplateRequest: CreateJobFromTemplateRequest,
): string {
  return JSON.stringify(
    CreateJobFromTemplateRequest$outboundSchema.parse(
      createJobFromTemplateRequest,
    ),
  );
}

export function createJobFromTemplateRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateJobFromTemplateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateJobFromTemplateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateJobFromTemplateRequest' from JSON`,
  );
}

/** @internal */
export const CreateJobFromTemplateResponseBody$inboundSchema: z.ZodType<
  CreateJobFromTemplateResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  jobUUID: z.string(),
  location: z.string(),
  message: z.string(),
});

/** @internal */
export type CreateJobFromTemplateResponseBody$Outbound = {
  jobUUID: string;
  location: string;
  message: string;
};

/** @internal */
export const CreateJobFromTemplateResponseBody$outboundSchema: z.ZodType<
  CreateJobFromTemplateResponseBody$Outbound,
  z.ZodTypeDef,
  CreateJobFromTemplateResponseBody
> = z.object({
  jobUUID: z.string(),
  location: z.string(),
  message: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateJobFromTemplateResponseBody$ {
  /** @deprecated use `CreateJobFromTemplateResponseBody$inboundSchema` instead. */
  export const inboundSchema = CreateJobFromTemplateResponseBody$inboundSchema;
  /** @deprecated use `CreateJobFromTemplateResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    CreateJobFromTemplateResponseBody$outboundSchema;
  /** @deprecated use `CreateJobFromTemplateResponseBody$Outbound` instead. */
  export type Outbound = CreateJobFromTemplateResponseBody$Outbound;
}

export function createJobFromTemplateResponseBodyToJSON(
  createJobFromTemplateResponseBody: CreateJobFromTemplateResponseBody,
): string {
  return JSON.stringify(
    CreateJobFromTemplateResponseBody$outboundSchema.parse(
      createJobFromTemplateResponseBody,
    ),
  );
}

export function createJobFromTemplateResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<CreateJobFromTemplateResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateJobFromTemplateResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateJobFromTemplateResponseBody' from JSON`,
  );
}

/** @internal */
export const CreateJobFromTemplateResponse$inboundSchema: z.ZodType<
  CreateJobFromTemplateResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: z.lazy(() => CreateJobFromTemplateResponseBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type CreateJobFromTemplateResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: CreateJobFromTemplateResponseBody$Outbound;
};

/** @internal */
export const CreateJobFromTemplateResponse$outboundSchema: z.ZodType<
  CreateJobFromTemplateResponse$Outbound,
  z.ZodTypeDef,
  CreateJobFromTemplateResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: z.lazy(() => CreateJobFromTemplateResponseBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateJobFromTemplateResponse$ {
  /** @deprecated use `CreateJobFromTemplateResponse$inboundSchema` instead. */
  export const inboundSchema = CreateJobFromTemplateResponse$inboundSchema;
  /** @deprecated use `CreateJobFromTemplateResponse$outboundSchema` instead. */
  export const outboundSchema = CreateJobFromTemplateResponse$outboundSchema;
  /** @deprecated use `CreateJobFromTemplateResponse$Outbound` instead. */
  export type Outbound = CreateJobFromTemplateResponse$Outbound;
}

export function createJobFromTemplateResponseToJSON(
  createJobFromTemplateResponse: CreateJobFromTemplateResponse,
): string {
  return JSON.stringify(
    CreateJobFromTemplateResponse$outboundSchema.parse(
      createJobFromTemplateResponse,
    ),
  );
}

export function createJobFromTemplateResponseFromJSON(
  jsonString: string,
): SafeParseResult<CreateJobFromTemplateResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateJobFromTemplateResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateJobFromTemplateResponse' from JSON`,
  );
}
