/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CreateSecurityRolesSecurity = {
  apiKey?: string | undefined;
  oauth2?: string | undefined;
};

export type CreateSecurityRolesResponseResult =
  | components.Result
  | components.ErrorT;

export type CreateSecurityRolesResponse = {
  headers: { [k: string]: Array<string> };
  result: components.Result | components.ErrorT;
};

/** @internal */
export const CreateSecurityRolesSecurity$inboundSchema: z.ZodType<
  CreateSecurityRolesSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  apiKey: z.string().optional(),
  oauth2: z.string().optional(),
});

/** @internal */
export type CreateSecurityRolesSecurity$Outbound = {
  apiKey?: string | undefined;
  oauth2?: string | undefined;
};

/** @internal */
export const CreateSecurityRolesSecurity$outboundSchema: z.ZodType<
  CreateSecurityRolesSecurity$Outbound,
  z.ZodTypeDef,
  CreateSecurityRolesSecurity
> = z.object({
  apiKey: z.string().optional(),
  oauth2: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateSecurityRolesSecurity$ {
  /** @deprecated use `CreateSecurityRolesSecurity$inboundSchema` instead. */
  export const inboundSchema = CreateSecurityRolesSecurity$inboundSchema;
  /** @deprecated use `CreateSecurityRolesSecurity$outboundSchema` instead. */
  export const outboundSchema = CreateSecurityRolesSecurity$outboundSchema;
  /** @deprecated use `CreateSecurityRolesSecurity$Outbound` instead. */
  export type Outbound = CreateSecurityRolesSecurity$Outbound;
}

export function createSecurityRolesSecurityToJSON(
  createSecurityRolesSecurity: CreateSecurityRolesSecurity,
): string {
  return JSON.stringify(
    CreateSecurityRolesSecurity$outboundSchema.parse(
      createSecurityRolesSecurity,
    ),
  );
}

export function createSecurityRolesSecurityFromJSON(
  jsonString: string,
): SafeParseResult<CreateSecurityRolesSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateSecurityRolesSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateSecurityRolesSecurity' from JSON`,
  );
}

/** @internal */
export const CreateSecurityRolesResponseResult$inboundSchema: z.ZodType<
  CreateSecurityRolesResponseResult,
  z.ZodTypeDef,
  unknown
> = z.union([components.Result$inboundSchema, components.ErrorT$inboundSchema]);

/** @internal */
export type CreateSecurityRolesResponseResult$Outbound =
  | components.Result$Outbound
  | components.ErrorT$Outbound;

/** @internal */
export const CreateSecurityRolesResponseResult$outboundSchema: z.ZodType<
  CreateSecurityRolesResponseResult$Outbound,
  z.ZodTypeDef,
  CreateSecurityRolesResponseResult
> = z.union([
  components.Result$outboundSchema,
  components.ErrorT$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateSecurityRolesResponseResult$ {
  /** @deprecated use `CreateSecurityRolesResponseResult$inboundSchema` instead. */
  export const inboundSchema = CreateSecurityRolesResponseResult$inboundSchema;
  /** @deprecated use `CreateSecurityRolesResponseResult$outboundSchema` instead. */
  export const outboundSchema =
    CreateSecurityRolesResponseResult$outboundSchema;
  /** @deprecated use `CreateSecurityRolesResponseResult$Outbound` instead. */
  export type Outbound = CreateSecurityRolesResponseResult$Outbound;
}

export function createSecurityRolesResponseResultToJSON(
  createSecurityRolesResponseResult: CreateSecurityRolesResponseResult,
): string {
  return JSON.stringify(
    CreateSecurityRolesResponseResult$outboundSchema.parse(
      createSecurityRolesResponseResult,
    ),
  );
}

export function createSecurityRolesResponseResultFromJSON(
  jsonString: string,
): SafeParseResult<CreateSecurityRolesResponseResult, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateSecurityRolesResponseResult$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateSecurityRolesResponseResult' from JSON`,
  );
}

/** @internal */
export const CreateSecurityRolesResponse$inboundSchema: z.ZodType<
  CreateSecurityRolesResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: z.union([
    components.Result$inboundSchema,
    components.ErrorT$inboundSchema,
  ]),
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type CreateSecurityRolesResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: components.Result$Outbound | components.ErrorT$Outbound;
};

/** @internal */
export const CreateSecurityRolesResponse$outboundSchema: z.ZodType<
  CreateSecurityRolesResponse$Outbound,
  z.ZodTypeDef,
  CreateSecurityRolesResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: z.union([
    components.Result$outboundSchema,
    components.ErrorT$outboundSchema,
  ]),
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateSecurityRolesResponse$ {
  /** @deprecated use `CreateSecurityRolesResponse$inboundSchema` instead. */
  export const inboundSchema = CreateSecurityRolesResponse$inboundSchema;
  /** @deprecated use `CreateSecurityRolesResponse$outboundSchema` instead. */
  export const outboundSchema = CreateSecurityRolesResponse$outboundSchema;
  /** @deprecated use `CreateSecurityRolesResponse$Outbound` instead. */
  export type Outbound = CreateSecurityRolesResponse$Outbound;
}

export function createSecurityRolesResponseToJSON(
  createSecurityRolesResponse: CreateSecurityRolesResponse,
): string {
  return JSON.stringify(
    CreateSecurityRolesResponse$outboundSchema.parse(
      createSecurityRolesResponse,
    ),
  );
}

export function createSecurityRolesResponseFromJSON(
  jsonString: string,
): SafeParseResult<CreateSecurityRolesResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateSecurityRolesResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateSecurityRolesResponse' from JSON`,
  );
}
