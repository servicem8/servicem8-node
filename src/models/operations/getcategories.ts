/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetCategoriesSecurity = {
  apiKey?: string | undefined;
  oauth2?: string | undefined;
};

export type GetCategoriesRequest = {
  /**
   * UUID of the Category
   */
  uuid: string;
};

export type GetCategoriesResponse = components.ErrorT | components.Category;

/** @internal */
export const GetCategoriesSecurity$inboundSchema: z.ZodType<
  GetCategoriesSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  apiKey: z.string().optional(),
  oauth2: z.string().optional(),
});

/** @internal */
export type GetCategoriesSecurity$Outbound = {
  apiKey?: string | undefined;
  oauth2?: string | undefined;
};

/** @internal */
export const GetCategoriesSecurity$outboundSchema: z.ZodType<
  GetCategoriesSecurity$Outbound,
  z.ZodTypeDef,
  GetCategoriesSecurity
> = z.object({
  apiKey: z.string().optional(),
  oauth2: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetCategoriesSecurity$ {
  /** @deprecated use `GetCategoriesSecurity$inboundSchema` instead. */
  export const inboundSchema = GetCategoriesSecurity$inboundSchema;
  /** @deprecated use `GetCategoriesSecurity$outboundSchema` instead. */
  export const outboundSchema = GetCategoriesSecurity$outboundSchema;
  /** @deprecated use `GetCategoriesSecurity$Outbound` instead. */
  export type Outbound = GetCategoriesSecurity$Outbound;
}

export function getCategoriesSecurityToJSON(
  getCategoriesSecurity: GetCategoriesSecurity,
): string {
  return JSON.stringify(
    GetCategoriesSecurity$outboundSchema.parse(getCategoriesSecurity),
  );
}

export function getCategoriesSecurityFromJSON(
  jsonString: string,
): SafeParseResult<GetCategoriesSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetCategoriesSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetCategoriesSecurity' from JSON`,
  );
}

/** @internal */
export const GetCategoriesRequest$inboundSchema: z.ZodType<
  GetCategoriesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string(),
});

/** @internal */
export type GetCategoriesRequest$Outbound = {
  uuid: string;
};

/** @internal */
export const GetCategoriesRequest$outboundSchema: z.ZodType<
  GetCategoriesRequest$Outbound,
  z.ZodTypeDef,
  GetCategoriesRequest
> = z.object({
  uuid: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetCategoriesRequest$ {
  /** @deprecated use `GetCategoriesRequest$inboundSchema` instead. */
  export const inboundSchema = GetCategoriesRequest$inboundSchema;
  /** @deprecated use `GetCategoriesRequest$outboundSchema` instead. */
  export const outboundSchema = GetCategoriesRequest$outboundSchema;
  /** @deprecated use `GetCategoriesRequest$Outbound` instead. */
  export type Outbound = GetCategoriesRequest$Outbound;
}

export function getCategoriesRequestToJSON(
  getCategoriesRequest: GetCategoriesRequest,
): string {
  return JSON.stringify(
    GetCategoriesRequest$outboundSchema.parse(getCategoriesRequest),
  );
}

export function getCategoriesRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetCategoriesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetCategoriesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetCategoriesRequest' from JSON`,
  );
}

/** @internal */
export const GetCategoriesResponse$inboundSchema: z.ZodType<
  GetCategoriesResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  components.ErrorT$inboundSchema,
  components.Category$inboundSchema,
]);

/** @internal */
export type GetCategoriesResponse$Outbound =
  | components.ErrorT$Outbound
  | components.Category$Outbound;

/** @internal */
export const GetCategoriesResponse$outboundSchema: z.ZodType<
  GetCategoriesResponse$Outbound,
  z.ZodTypeDef,
  GetCategoriesResponse
> = z.union([
  components.ErrorT$outboundSchema,
  components.Category$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetCategoriesResponse$ {
  /** @deprecated use `GetCategoriesResponse$inboundSchema` instead. */
  export const inboundSchema = GetCategoriesResponse$inboundSchema;
  /** @deprecated use `GetCategoriesResponse$outboundSchema` instead. */
  export const outboundSchema = GetCategoriesResponse$outboundSchema;
  /** @deprecated use `GetCategoriesResponse$Outbound` instead. */
  export type Outbound = GetCategoriesResponse$Outbound;
}

export function getCategoriesResponseToJSON(
  getCategoriesResponse: GetCategoriesResponse,
): string {
  return JSON.stringify(
    GetCategoriesResponse$outboundSchema.parse(getCategoriesResponse),
  );
}

export function getCategoriesResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetCategoriesResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetCategoriesResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetCategoriesResponse' from JSON`,
  );
}
