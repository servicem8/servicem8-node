/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetFormFieldsSecurity = {
  apiKey?: string | undefined;
  oauth2?: string | undefined;
};

export type GetFormFieldsRequest = {
  /**
   * UUID of the Form Field
   */
  uuid: string;
};

export type GetFormFieldsResponse = components.ErrorT | components.FormField;

/** @internal */
export const GetFormFieldsSecurity$inboundSchema: z.ZodType<
  GetFormFieldsSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  apiKey: z.string().optional(),
  oauth2: z.string().optional(),
});

/** @internal */
export type GetFormFieldsSecurity$Outbound = {
  apiKey?: string | undefined;
  oauth2?: string | undefined;
};

/** @internal */
export const GetFormFieldsSecurity$outboundSchema: z.ZodType<
  GetFormFieldsSecurity$Outbound,
  z.ZodTypeDef,
  GetFormFieldsSecurity
> = z.object({
  apiKey: z.string().optional(),
  oauth2: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetFormFieldsSecurity$ {
  /** @deprecated use `GetFormFieldsSecurity$inboundSchema` instead. */
  export const inboundSchema = GetFormFieldsSecurity$inboundSchema;
  /** @deprecated use `GetFormFieldsSecurity$outboundSchema` instead. */
  export const outboundSchema = GetFormFieldsSecurity$outboundSchema;
  /** @deprecated use `GetFormFieldsSecurity$Outbound` instead. */
  export type Outbound = GetFormFieldsSecurity$Outbound;
}

export function getFormFieldsSecurityToJSON(
  getFormFieldsSecurity: GetFormFieldsSecurity,
): string {
  return JSON.stringify(
    GetFormFieldsSecurity$outboundSchema.parse(getFormFieldsSecurity),
  );
}

export function getFormFieldsSecurityFromJSON(
  jsonString: string,
): SafeParseResult<GetFormFieldsSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetFormFieldsSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetFormFieldsSecurity' from JSON`,
  );
}

/** @internal */
export const GetFormFieldsRequest$inboundSchema: z.ZodType<
  GetFormFieldsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string(),
});

/** @internal */
export type GetFormFieldsRequest$Outbound = {
  uuid: string;
};

/** @internal */
export const GetFormFieldsRequest$outboundSchema: z.ZodType<
  GetFormFieldsRequest$Outbound,
  z.ZodTypeDef,
  GetFormFieldsRequest
> = z.object({
  uuid: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetFormFieldsRequest$ {
  /** @deprecated use `GetFormFieldsRequest$inboundSchema` instead. */
  export const inboundSchema = GetFormFieldsRequest$inboundSchema;
  /** @deprecated use `GetFormFieldsRequest$outboundSchema` instead. */
  export const outboundSchema = GetFormFieldsRequest$outboundSchema;
  /** @deprecated use `GetFormFieldsRequest$Outbound` instead. */
  export type Outbound = GetFormFieldsRequest$Outbound;
}

export function getFormFieldsRequestToJSON(
  getFormFieldsRequest: GetFormFieldsRequest,
): string {
  return JSON.stringify(
    GetFormFieldsRequest$outboundSchema.parse(getFormFieldsRequest),
  );
}

export function getFormFieldsRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetFormFieldsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetFormFieldsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetFormFieldsRequest' from JSON`,
  );
}

/** @internal */
export const GetFormFieldsResponse$inboundSchema: z.ZodType<
  GetFormFieldsResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  components.ErrorT$inboundSchema,
  components.FormField$inboundSchema,
]);

/** @internal */
export type GetFormFieldsResponse$Outbound =
  | components.ErrorT$Outbound
  | components.FormField$Outbound;

/** @internal */
export const GetFormFieldsResponse$outboundSchema: z.ZodType<
  GetFormFieldsResponse$Outbound,
  z.ZodTypeDef,
  GetFormFieldsResponse
> = z.union([
  components.ErrorT$outboundSchema,
  components.FormField$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetFormFieldsResponse$ {
  /** @deprecated use `GetFormFieldsResponse$inboundSchema` instead. */
  export const inboundSchema = GetFormFieldsResponse$inboundSchema;
  /** @deprecated use `GetFormFieldsResponse$outboundSchema` instead. */
  export const outboundSchema = GetFormFieldsResponse$outboundSchema;
  /** @deprecated use `GetFormFieldsResponse$Outbound` instead. */
  export type Outbound = GetFormFieldsResponse$Outbound;
}

export function getFormFieldsResponseToJSON(
  getFormFieldsResponse: GetFormFieldsResponse,
): string {
  return JSON.stringify(
    GetFormFieldsResponse$outboundSchema.parse(getFormFieldsResponse),
  );
}

export function getFormFieldsResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetFormFieldsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetFormFieldsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetFormFieldsResponse' from JSON`,
  );
}
