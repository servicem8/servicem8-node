/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListSMSTemplatesResponse =
  | components.ErrorT
  | Array<components.SmsTemplate>;

/** @internal */
export const ListSMSTemplatesResponse$inboundSchema: z.ZodType<
  ListSMSTemplatesResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  components.ErrorT$inboundSchema,
  z.array(components.SmsTemplate$inboundSchema),
]);

/** @internal */
export type ListSMSTemplatesResponse$Outbound =
  | components.ErrorT$Outbound
  | Array<components.SmsTemplate$Outbound>;

/** @internal */
export const ListSMSTemplatesResponse$outboundSchema: z.ZodType<
  ListSMSTemplatesResponse$Outbound,
  z.ZodTypeDef,
  ListSMSTemplatesResponse
> = z.union([
  components.ErrorT$outboundSchema,
  z.array(components.SmsTemplate$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSMSTemplatesResponse$ {
  /** @deprecated use `ListSMSTemplatesResponse$inboundSchema` instead. */
  export const inboundSchema = ListSMSTemplatesResponse$inboundSchema;
  /** @deprecated use `ListSMSTemplatesResponse$outboundSchema` instead. */
  export const outboundSchema = ListSMSTemplatesResponse$outboundSchema;
  /** @deprecated use `ListSMSTemplatesResponse$Outbound` instead. */
  export type Outbound = ListSMSTemplatesResponse$Outbound;
}

export function listSMSTemplatesResponseToJSON(
  listSMSTemplatesResponse: ListSMSTemplatesResponse,
): string {
  return JSON.stringify(
    ListSMSTemplatesResponse$outboundSchema.parse(listSMSTemplatesResponse),
  );
}

export function listSMSTemplatesResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListSMSTemplatesResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListSMSTemplatesResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSMSTemplatesResponse' from JSON`,
  );
}
