/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpdateEmailTemplatesRequest = {
  /**
   * UUID of the Email Template
   */
  uuid: string;
  /**
   * Email Template fields to update
   */
  emailTemplateCreate: components.EmailTemplateCreate;
};

/** @internal */
export const UpdateEmailTemplatesRequest$inboundSchema: z.ZodType<
  UpdateEmailTemplatesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string(),
  EmailTemplateCreate: components.EmailTemplateCreate$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "EmailTemplateCreate": "emailTemplateCreate",
  });
});

/** @internal */
export type UpdateEmailTemplatesRequest$Outbound = {
  uuid: string;
  EmailTemplateCreate: components.EmailTemplateCreate$Outbound;
};

/** @internal */
export const UpdateEmailTemplatesRequest$outboundSchema: z.ZodType<
  UpdateEmailTemplatesRequest$Outbound,
  z.ZodTypeDef,
  UpdateEmailTemplatesRequest
> = z.object({
  uuid: z.string(),
  emailTemplateCreate: components.EmailTemplateCreate$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    emailTemplateCreate: "EmailTemplateCreate",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateEmailTemplatesRequest$ {
  /** @deprecated use `UpdateEmailTemplatesRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateEmailTemplatesRequest$inboundSchema;
  /** @deprecated use `UpdateEmailTemplatesRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateEmailTemplatesRequest$outboundSchema;
  /** @deprecated use `UpdateEmailTemplatesRequest$Outbound` instead. */
  export type Outbound = UpdateEmailTemplatesRequest$Outbound;
}

export function updateEmailTemplatesRequestToJSON(
  updateEmailTemplatesRequest: UpdateEmailTemplatesRequest,
): string {
  return JSON.stringify(
    UpdateEmailTemplatesRequest$outboundSchema.parse(
      updateEmailTemplatesRequest,
    ),
  );
}

export function updateEmailTemplatesRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateEmailTemplatesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateEmailTemplatesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateEmailTemplatesRequest' from JSON`,
  );
}
