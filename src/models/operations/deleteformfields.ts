/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteFormFieldsSecurity = {
  apiKey?: string | undefined;
  oauth2?: string | undefined;
};

export type DeleteFormFieldsRequest = {
  /**
   * UUID of the Form Field
   */
  uuid: string;
};

export type DeleteFormFieldsResponse = components.Result | components.ErrorT;

/** @internal */
export const DeleteFormFieldsSecurity$inboundSchema: z.ZodType<
  DeleteFormFieldsSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  apiKey: z.string().optional(),
  oauth2: z.string().optional(),
});

/** @internal */
export type DeleteFormFieldsSecurity$Outbound = {
  apiKey?: string | undefined;
  oauth2?: string | undefined;
};

/** @internal */
export const DeleteFormFieldsSecurity$outboundSchema: z.ZodType<
  DeleteFormFieldsSecurity$Outbound,
  z.ZodTypeDef,
  DeleteFormFieldsSecurity
> = z.object({
  apiKey: z.string().optional(),
  oauth2: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteFormFieldsSecurity$ {
  /** @deprecated use `DeleteFormFieldsSecurity$inboundSchema` instead. */
  export const inboundSchema = DeleteFormFieldsSecurity$inboundSchema;
  /** @deprecated use `DeleteFormFieldsSecurity$outboundSchema` instead. */
  export const outboundSchema = DeleteFormFieldsSecurity$outboundSchema;
  /** @deprecated use `DeleteFormFieldsSecurity$Outbound` instead. */
  export type Outbound = DeleteFormFieldsSecurity$Outbound;
}

export function deleteFormFieldsSecurityToJSON(
  deleteFormFieldsSecurity: DeleteFormFieldsSecurity,
): string {
  return JSON.stringify(
    DeleteFormFieldsSecurity$outboundSchema.parse(deleteFormFieldsSecurity),
  );
}

export function deleteFormFieldsSecurityFromJSON(
  jsonString: string,
): SafeParseResult<DeleteFormFieldsSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteFormFieldsSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteFormFieldsSecurity' from JSON`,
  );
}

/** @internal */
export const DeleteFormFieldsRequest$inboundSchema: z.ZodType<
  DeleteFormFieldsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string(),
});

/** @internal */
export type DeleteFormFieldsRequest$Outbound = {
  uuid: string;
};

/** @internal */
export const DeleteFormFieldsRequest$outboundSchema: z.ZodType<
  DeleteFormFieldsRequest$Outbound,
  z.ZodTypeDef,
  DeleteFormFieldsRequest
> = z.object({
  uuid: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteFormFieldsRequest$ {
  /** @deprecated use `DeleteFormFieldsRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteFormFieldsRequest$inboundSchema;
  /** @deprecated use `DeleteFormFieldsRequest$outboundSchema` instead. */
  export const outboundSchema = DeleteFormFieldsRequest$outboundSchema;
  /** @deprecated use `DeleteFormFieldsRequest$Outbound` instead. */
  export type Outbound = DeleteFormFieldsRequest$Outbound;
}

export function deleteFormFieldsRequestToJSON(
  deleteFormFieldsRequest: DeleteFormFieldsRequest,
): string {
  return JSON.stringify(
    DeleteFormFieldsRequest$outboundSchema.parse(deleteFormFieldsRequest),
  );
}

export function deleteFormFieldsRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteFormFieldsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteFormFieldsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteFormFieldsRequest' from JSON`,
  );
}

/** @internal */
export const DeleteFormFieldsResponse$inboundSchema: z.ZodType<
  DeleteFormFieldsResponse,
  z.ZodTypeDef,
  unknown
> = z.union([components.Result$inboundSchema, components.ErrorT$inboundSchema]);

/** @internal */
export type DeleteFormFieldsResponse$Outbound =
  | components.Result$Outbound
  | components.ErrorT$Outbound;

/** @internal */
export const DeleteFormFieldsResponse$outboundSchema: z.ZodType<
  DeleteFormFieldsResponse$Outbound,
  z.ZodTypeDef,
  DeleteFormFieldsResponse
> = z.union([
  components.Result$outboundSchema,
  components.ErrorT$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteFormFieldsResponse$ {
  /** @deprecated use `DeleteFormFieldsResponse$inboundSchema` instead. */
  export const inboundSchema = DeleteFormFieldsResponse$inboundSchema;
  /** @deprecated use `DeleteFormFieldsResponse$outboundSchema` instead. */
  export const outboundSchema = DeleteFormFieldsResponse$outboundSchema;
  /** @deprecated use `DeleteFormFieldsResponse$Outbound` instead. */
  export type Outbound = DeleteFormFieldsResponse$Outbound;
}

export function deleteFormFieldsResponseToJSON(
  deleteFormFieldsResponse: DeleteFormFieldsResponse,
): string {
  return JSON.stringify(
    DeleteFormFieldsResponse$outboundSchema.parse(deleteFormFieldsResponse),
  );
}

export function deleteFormFieldsResponseFromJSON(
  jsonString: string,
): SafeParseResult<DeleteFormFieldsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteFormFieldsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteFormFieldsResponse' from JSON`,
  );
}
