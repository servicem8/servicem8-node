/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteNotesRequest = {
  /**
   * UUID of the Note
   */
  uuid: string;
};

export type DeleteNotesResponse = components.Result | components.ErrorT;

/** @internal */
export const DeleteNotesRequest$inboundSchema: z.ZodType<
  DeleteNotesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string(),
});

/** @internal */
export type DeleteNotesRequest$Outbound = {
  uuid: string;
};

/** @internal */
export const DeleteNotesRequest$outboundSchema: z.ZodType<
  DeleteNotesRequest$Outbound,
  z.ZodTypeDef,
  DeleteNotesRequest
> = z.object({
  uuid: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteNotesRequest$ {
  /** @deprecated use `DeleteNotesRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteNotesRequest$inboundSchema;
  /** @deprecated use `DeleteNotesRequest$outboundSchema` instead. */
  export const outboundSchema = DeleteNotesRequest$outboundSchema;
  /** @deprecated use `DeleteNotesRequest$Outbound` instead. */
  export type Outbound = DeleteNotesRequest$Outbound;
}

export function deleteNotesRequestToJSON(
  deleteNotesRequest: DeleteNotesRequest,
): string {
  return JSON.stringify(
    DeleteNotesRequest$outboundSchema.parse(deleteNotesRequest),
  );
}

export function deleteNotesRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteNotesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteNotesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteNotesRequest' from JSON`,
  );
}

/** @internal */
export const DeleteNotesResponse$inboundSchema: z.ZodType<
  DeleteNotesResponse,
  z.ZodTypeDef,
  unknown
> = z.union([components.Result$inboundSchema, components.ErrorT$inboundSchema]);

/** @internal */
export type DeleteNotesResponse$Outbound =
  | components.Result$Outbound
  | components.ErrorT$Outbound;

/** @internal */
export const DeleteNotesResponse$outboundSchema: z.ZodType<
  DeleteNotesResponse$Outbound,
  z.ZodTypeDef,
  DeleteNotesResponse
> = z.union([
  components.Result$outboundSchema,
  components.ErrorT$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteNotesResponse$ {
  /** @deprecated use `DeleteNotesResponse$inboundSchema` instead. */
  export const inboundSchema = DeleteNotesResponse$inboundSchema;
  /** @deprecated use `DeleteNotesResponse$outboundSchema` instead. */
  export const outboundSchema = DeleteNotesResponse$outboundSchema;
  /** @deprecated use `DeleteNotesResponse$Outbound` instead. */
  export type Outbound = DeleteNotesResponse$Outbound;
}

export function deleteNotesResponseToJSON(
  deleteNotesResponse: DeleteNotesResponse,
): string {
  return JSON.stringify(
    DeleteNotesResponse$outboundSchema.parse(deleteNotesResponse),
  );
}

export function deleteNotesResponseFromJSON(
  jsonString: string,
): SafeParseResult<DeleteNotesResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteNotesResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteNotesResponse' from JSON`,
  );
}
