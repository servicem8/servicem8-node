/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteBadgesRequest = {
  /**
   * UUID of the Badge
   */
  uuid: string;
};

export type DeleteBadgesResponse = components.Result | components.ErrorT;

/** @internal */
export const DeleteBadgesRequest$inboundSchema: z.ZodType<
  DeleteBadgesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string(),
});

/** @internal */
export type DeleteBadgesRequest$Outbound = {
  uuid: string;
};

/** @internal */
export const DeleteBadgesRequest$outboundSchema: z.ZodType<
  DeleteBadgesRequest$Outbound,
  z.ZodTypeDef,
  DeleteBadgesRequest
> = z.object({
  uuid: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteBadgesRequest$ {
  /** @deprecated use `DeleteBadgesRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteBadgesRequest$inboundSchema;
  /** @deprecated use `DeleteBadgesRequest$outboundSchema` instead. */
  export const outboundSchema = DeleteBadgesRequest$outboundSchema;
  /** @deprecated use `DeleteBadgesRequest$Outbound` instead. */
  export type Outbound = DeleteBadgesRequest$Outbound;
}

export function deleteBadgesRequestToJSON(
  deleteBadgesRequest: DeleteBadgesRequest,
): string {
  return JSON.stringify(
    DeleteBadgesRequest$outboundSchema.parse(deleteBadgesRequest),
  );
}

export function deleteBadgesRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteBadgesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteBadgesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteBadgesRequest' from JSON`,
  );
}

/** @internal */
export const DeleteBadgesResponse$inboundSchema: z.ZodType<
  DeleteBadgesResponse,
  z.ZodTypeDef,
  unknown
> = z.union([components.Result$inboundSchema, components.ErrorT$inboundSchema]);

/** @internal */
export type DeleteBadgesResponse$Outbound =
  | components.Result$Outbound
  | components.ErrorT$Outbound;

/** @internal */
export const DeleteBadgesResponse$outboundSchema: z.ZodType<
  DeleteBadgesResponse$Outbound,
  z.ZodTypeDef,
  DeleteBadgesResponse
> = z.union([
  components.Result$outboundSchema,
  components.ErrorT$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteBadgesResponse$ {
  /** @deprecated use `DeleteBadgesResponse$inboundSchema` instead. */
  export const inboundSchema = DeleteBadgesResponse$inboundSchema;
  /** @deprecated use `DeleteBadgesResponse$outboundSchema` instead. */
  export const outboundSchema = DeleteBadgesResponse$outboundSchema;
  /** @deprecated use `DeleteBadgesResponse$Outbound` instead. */
  export type Outbound = DeleteBadgesResponse$Outbound;
}

export function deleteBadgesResponseToJSON(
  deleteBadgesResponse: DeleteBadgesResponse,
): string {
  return JSON.stringify(
    DeleteBadgesResponse$outboundSchema.parse(deleteBadgesResponse),
  );
}

export function deleteBadgesResponseFromJSON(
  jsonString: string,
): SafeParseResult<DeleteBadgesResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteBadgesResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteBadgesResponse' from JSON`,
  );
}
