/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpdateClientsRequest = {
  /**
   * UUID of the Client
   */
  uuid: string;
  /**
   * Client fields to update
   */
  companyCreate: components.CompanyCreate;
};

/** @internal */
export const UpdateClientsRequest$inboundSchema: z.ZodType<
  UpdateClientsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string(),
  CompanyCreate: components.CompanyCreate$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "CompanyCreate": "companyCreate",
  });
});

/** @internal */
export type UpdateClientsRequest$Outbound = {
  uuid: string;
  CompanyCreate: components.CompanyCreate$Outbound;
};

/** @internal */
export const UpdateClientsRequest$outboundSchema: z.ZodType<
  UpdateClientsRequest$Outbound,
  z.ZodTypeDef,
  UpdateClientsRequest
> = z.object({
  uuid: z.string(),
  companyCreate: components.CompanyCreate$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    companyCreate: "CompanyCreate",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateClientsRequest$ {
  /** @deprecated use `UpdateClientsRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateClientsRequest$inboundSchema;
  /** @deprecated use `UpdateClientsRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateClientsRequest$outboundSchema;
  /** @deprecated use `UpdateClientsRequest$Outbound` instead. */
  export type Outbound = UpdateClientsRequest$Outbound;
}

export function updateClientsRequestToJSON(
  updateClientsRequest: UpdateClientsRequest,
): string {
  return JSON.stringify(
    UpdateClientsRequest$outboundSchema.parse(updateClientsRequest),
  );
}

export function updateClientsRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateClientsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateClientsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateClientsRequest' from JSON`,
  );
}
