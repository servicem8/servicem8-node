/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpdateClientsSecurity = {
  apiKey?: string | undefined;
  oauth2?: string | undefined;
};

export type UpdateClientsRequest = {
  /**
   * UUID of the Client
   */
  uuid: string;
  /**
   * Client fields to update
   */
  company: components.CompanyInput;
};

export type UpdateClientsResponse = components.Result | components.ErrorT;

/** @internal */
export const UpdateClientsSecurity$inboundSchema: z.ZodType<
  UpdateClientsSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  apiKey: z.string().optional(),
  oauth2: z.string().optional(),
});

/** @internal */
export type UpdateClientsSecurity$Outbound = {
  apiKey?: string | undefined;
  oauth2?: string | undefined;
};

/** @internal */
export const UpdateClientsSecurity$outboundSchema: z.ZodType<
  UpdateClientsSecurity$Outbound,
  z.ZodTypeDef,
  UpdateClientsSecurity
> = z.object({
  apiKey: z.string().optional(),
  oauth2: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateClientsSecurity$ {
  /** @deprecated use `UpdateClientsSecurity$inboundSchema` instead. */
  export const inboundSchema = UpdateClientsSecurity$inboundSchema;
  /** @deprecated use `UpdateClientsSecurity$outboundSchema` instead. */
  export const outboundSchema = UpdateClientsSecurity$outboundSchema;
  /** @deprecated use `UpdateClientsSecurity$Outbound` instead. */
  export type Outbound = UpdateClientsSecurity$Outbound;
}

export function updateClientsSecurityToJSON(
  updateClientsSecurity: UpdateClientsSecurity,
): string {
  return JSON.stringify(
    UpdateClientsSecurity$outboundSchema.parse(updateClientsSecurity),
  );
}

export function updateClientsSecurityFromJSON(
  jsonString: string,
): SafeParseResult<UpdateClientsSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateClientsSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateClientsSecurity' from JSON`,
  );
}

/** @internal */
export const UpdateClientsRequest$inboundSchema: z.ZodType<
  UpdateClientsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string(),
  Company: components.CompanyInput$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Company": "company",
  });
});

/** @internal */
export type UpdateClientsRequest$Outbound = {
  uuid: string;
  Company: components.CompanyInput$Outbound;
};

/** @internal */
export const UpdateClientsRequest$outboundSchema: z.ZodType<
  UpdateClientsRequest$Outbound,
  z.ZodTypeDef,
  UpdateClientsRequest
> = z.object({
  uuid: z.string(),
  company: components.CompanyInput$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    company: "Company",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateClientsRequest$ {
  /** @deprecated use `UpdateClientsRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateClientsRequest$inboundSchema;
  /** @deprecated use `UpdateClientsRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateClientsRequest$outboundSchema;
  /** @deprecated use `UpdateClientsRequest$Outbound` instead. */
  export type Outbound = UpdateClientsRequest$Outbound;
}

export function updateClientsRequestToJSON(
  updateClientsRequest: UpdateClientsRequest,
): string {
  return JSON.stringify(
    UpdateClientsRequest$outboundSchema.parse(updateClientsRequest),
  );
}

export function updateClientsRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateClientsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateClientsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateClientsRequest' from JSON`,
  );
}

/** @internal */
export const UpdateClientsResponse$inboundSchema: z.ZodType<
  UpdateClientsResponse,
  z.ZodTypeDef,
  unknown
> = z.union([components.Result$inboundSchema, components.ErrorT$inboundSchema]);

/** @internal */
export type UpdateClientsResponse$Outbound =
  | components.Result$Outbound
  | components.ErrorT$Outbound;

/** @internal */
export const UpdateClientsResponse$outboundSchema: z.ZodType<
  UpdateClientsResponse$Outbound,
  z.ZodTypeDef,
  UpdateClientsResponse
> = z.union([
  components.Result$outboundSchema,
  components.ErrorT$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateClientsResponse$ {
  /** @deprecated use `UpdateClientsResponse$inboundSchema` instead. */
  export const inboundSchema = UpdateClientsResponse$inboundSchema;
  /** @deprecated use `UpdateClientsResponse$outboundSchema` instead. */
  export const outboundSchema = UpdateClientsResponse$outboundSchema;
  /** @deprecated use `UpdateClientsResponse$Outbound` instead. */
  export type Outbound = UpdateClientsResponse$Outbound;
}

export function updateClientsResponseToJSON(
  updateClientsResponse: UpdateClientsResponse,
): string {
  return JSON.stringify(
    UpdateClientsResponse$outboundSchema.parse(updateClientsResponse),
  );
}

export function updateClientsResponseFromJSON(
  jsonString: string,
): SafeParseResult<UpdateClientsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateClientsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateClientsResponse' from JSON`,
  );
}
