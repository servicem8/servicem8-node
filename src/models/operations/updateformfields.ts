/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpdateFormFieldsRequest = {
  /**
   * UUID of the Form Field
   */
  uuid: string;
  /**
   * Form Field fields to update
   */
  formField: components.FormFieldInput;
};

export type UpdateFormFieldsResponse = components.Result | components.ErrorT;

/** @internal */
export const UpdateFormFieldsRequest$inboundSchema: z.ZodType<
  UpdateFormFieldsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string(),
  FormField: components.FormFieldInput$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "FormField": "formField",
  });
});

/** @internal */
export type UpdateFormFieldsRequest$Outbound = {
  uuid: string;
  FormField: components.FormFieldInput$Outbound;
};

/** @internal */
export const UpdateFormFieldsRequest$outboundSchema: z.ZodType<
  UpdateFormFieldsRequest$Outbound,
  z.ZodTypeDef,
  UpdateFormFieldsRequest
> = z.object({
  uuid: z.string(),
  formField: components.FormFieldInput$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    formField: "FormField",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateFormFieldsRequest$ {
  /** @deprecated use `UpdateFormFieldsRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateFormFieldsRequest$inboundSchema;
  /** @deprecated use `UpdateFormFieldsRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateFormFieldsRequest$outboundSchema;
  /** @deprecated use `UpdateFormFieldsRequest$Outbound` instead. */
  export type Outbound = UpdateFormFieldsRequest$Outbound;
}

export function updateFormFieldsRequestToJSON(
  updateFormFieldsRequest: UpdateFormFieldsRequest,
): string {
  return JSON.stringify(
    UpdateFormFieldsRequest$outboundSchema.parse(updateFormFieldsRequest),
  );
}

export function updateFormFieldsRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateFormFieldsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateFormFieldsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateFormFieldsRequest' from JSON`,
  );
}

/** @internal */
export const UpdateFormFieldsResponse$inboundSchema: z.ZodType<
  UpdateFormFieldsResponse,
  z.ZodTypeDef,
  unknown
> = z.union([components.Result$inboundSchema, components.ErrorT$inboundSchema]);

/** @internal */
export type UpdateFormFieldsResponse$Outbound =
  | components.Result$Outbound
  | components.ErrorT$Outbound;

/** @internal */
export const UpdateFormFieldsResponse$outboundSchema: z.ZodType<
  UpdateFormFieldsResponse$Outbound,
  z.ZodTypeDef,
  UpdateFormFieldsResponse
> = z.union([
  components.Result$outboundSchema,
  components.ErrorT$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateFormFieldsResponse$ {
  /** @deprecated use `UpdateFormFieldsResponse$inboundSchema` instead. */
  export const inboundSchema = UpdateFormFieldsResponse$inboundSchema;
  /** @deprecated use `UpdateFormFieldsResponse$outboundSchema` instead. */
  export const outboundSchema = UpdateFormFieldsResponse$outboundSchema;
  /** @deprecated use `UpdateFormFieldsResponse$Outbound` instead. */
  export type Outbound = UpdateFormFieldsResponse$Outbound;
}

export function updateFormFieldsResponseToJSON(
  updateFormFieldsResponse: UpdateFormFieldsResponse,
): string {
  return JSON.stringify(
    UpdateFormFieldsResponse$outboundSchema.parse(updateFormFieldsResponse),
  );
}

export function updateFormFieldsResponseFromJSON(
  jsonString: string,
): SafeParseResult<UpdateFormFieldsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateFormFieldsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateFormFieldsResponse' from JSON`,
  );
}
