/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteAssetsSecurity = {
  apiKey?: string | undefined;
  oauth2?: string | undefined;
};

export type DeleteAssetsRequest = {
  /**
   * UUID of the Asset
   */
  uuid: string;
};

export type DeleteAssetsResponse = components.Result | components.ErrorT;

/** @internal */
export const DeleteAssetsSecurity$inboundSchema: z.ZodType<
  DeleteAssetsSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  apiKey: z.string().optional(),
  oauth2: z.string().optional(),
});

/** @internal */
export type DeleteAssetsSecurity$Outbound = {
  apiKey?: string | undefined;
  oauth2?: string | undefined;
};

/** @internal */
export const DeleteAssetsSecurity$outboundSchema: z.ZodType<
  DeleteAssetsSecurity$Outbound,
  z.ZodTypeDef,
  DeleteAssetsSecurity
> = z.object({
  apiKey: z.string().optional(),
  oauth2: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteAssetsSecurity$ {
  /** @deprecated use `DeleteAssetsSecurity$inboundSchema` instead. */
  export const inboundSchema = DeleteAssetsSecurity$inboundSchema;
  /** @deprecated use `DeleteAssetsSecurity$outboundSchema` instead. */
  export const outboundSchema = DeleteAssetsSecurity$outboundSchema;
  /** @deprecated use `DeleteAssetsSecurity$Outbound` instead. */
  export type Outbound = DeleteAssetsSecurity$Outbound;
}

export function deleteAssetsSecurityToJSON(
  deleteAssetsSecurity: DeleteAssetsSecurity,
): string {
  return JSON.stringify(
    DeleteAssetsSecurity$outboundSchema.parse(deleteAssetsSecurity),
  );
}

export function deleteAssetsSecurityFromJSON(
  jsonString: string,
): SafeParseResult<DeleteAssetsSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteAssetsSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteAssetsSecurity' from JSON`,
  );
}

/** @internal */
export const DeleteAssetsRequest$inboundSchema: z.ZodType<
  DeleteAssetsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string(),
});

/** @internal */
export type DeleteAssetsRequest$Outbound = {
  uuid: string;
};

/** @internal */
export const DeleteAssetsRequest$outboundSchema: z.ZodType<
  DeleteAssetsRequest$Outbound,
  z.ZodTypeDef,
  DeleteAssetsRequest
> = z.object({
  uuid: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteAssetsRequest$ {
  /** @deprecated use `DeleteAssetsRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteAssetsRequest$inboundSchema;
  /** @deprecated use `DeleteAssetsRequest$outboundSchema` instead. */
  export const outboundSchema = DeleteAssetsRequest$outboundSchema;
  /** @deprecated use `DeleteAssetsRequest$Outbound` instead. */
  export type Outbound = DeleteAssetsRequest$Outbound;
}

export function deleteAssetsRequestToJSON(
  deleteAssetsRequest: DeleteAssetsRequest,
): string {
  return JSON.stringify(
    DeleteAssetsRequest$outboundSchema.parse(deleteAssetsRequest),
  );
}

export function deleteAssetsRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteAssetsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteAssetsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteAssetsRequest' from JSON`,
  );
}

/** @internal */
export const DeleteAssetsResponse$inboundSchema: z.ZodType<
  DeleteAssetsResponse,
  z.ZodTypeDef,
  unknown
> = z.union([components.Result$inboundSchema, components.ErrorT$inboundSchema]);

/** @internal */
export type DeleteAssetsResponse$Outbound =
  | components.Result$Outbound
  | components.ErrorT$Outbound;

/** @internal */
export const DeleteAssetsResponse$outboundSchema: z.ZodType<
  DeleteAssetsResponse$Outbound,
  z.ZodTypeDef,
  DeleteAssetsResponse
> = z.union([
  components.Result$outboundSchema,
  components.ErrorT$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteAssetsResponse$ {
  /** @deprecated use `DeleteAssetsResponse$inboundSchema` instead. */
  export const inboundSchema = DeleteAssetsResponse$inboundSchema;
  /** @deprecated use `DeleteAssetsResponse$outboundSchema` instead. */
  export const outboundSchema = DeleteAssetsResponse$outboundSchema;
  /** @deprecated use `DeleteAssetsResponse$Outbound` instead. */
  export type Outbound = DeleteAssetsResponse$Outbound;
}

export function deleteAssetsResponseToJSON(
  deleteAssetsResponse: DeleteAssetsResponse,
): string {
  return JSON.stringify(
    DeleteAssetsResponse$outboundSchema.parse(deleteAssetsResponse),
  );
}

export function deleteAssetsResponseFromJSON(
  jsonString: string,
): SafeParseResult<DeleteAssetsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteAssetsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteAssetsResponse' from JSON`,
  );
}
