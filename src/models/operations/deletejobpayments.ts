/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteJobPaymentsSecurity = {
  apiKey?: string | undefined;
  oauth2?: string | undefined;
};

export type DeleteJobPaymentsRequest = {
  /**
   * UUID of the Job Payment
   */
  uuid: string;
};

export type DeleteJobPaymentsResponse = components.Result | components.ErrorT;

/** @internal */
export const DeleteJobPaymentsSecurity$inboundSchema: z.ZodType<
  DeleteJobPaymentsSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  apiKey: z.string().optional(),
  oauth2: z.string().optional(),
});

/** @internal */
export type DeleteJobPaymentsSecurity$Outbound = {
  apiKey?: string | undefined;
  oauth2?: string | undefined;
};

/** @internal */
export const DeleteJobPaymentsSecurity$outboundSchema: z.ZodType<
  DeleteJobPaymentsSecurity$Outbound,
  z.ZodTypeDef,
  DeleteJobPaymentsSecurity
> = z.object({
  apiKey: z.string().optional(),
  oauth2: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteJobPaymentsSecurity$ {
  /** @deprecated use `DeleteJobPaymentsSecurity$inboundSchema` instead. */
  export const inboundSchema = DeleteJobPaymentsSecurity$inboundSchema;
  /** @deprecated use `DeleteJobPaymentsSecurity$outboundSchema` instead. */
  export const outboundSchema = DeleteJobPaymentsSecurity$outboundSchema;
  /** @deprecated use `DeleteJobPaymentsSecurity$Outbound` instead. */
  export type Outbound = DeleteJobPaymentsSecurity$Outbound;
}

export function deleteJobPaymentsSecurityToJSON(
  deleteJobPaymentsSecurity: DeleteJobPaymentsSecurity,
): string {
  return JSON.stringify(
    DeleteJobPaymentsSecurity$outboundSchema.parse(deleteJobPaymentsSecurity),
  );
}

export function deleteJobPaymentsSecurityFromJSON(
  jsonString: string,
): SafeParseResult<DeleteJobPaymentsSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteJobPaymentsSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteJobPaymentsSecurity' from JSON`,
  );
}

/** @internal */
export const DeleteJobPaymentsRequest$inboundSchema: z.ZodType<
  DeleteJobPaymentsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string(),
});

/** @internal */
export type DeleteJobPaymentsRequest$Outbound = {
  uuid: string;
};

/** @internal */
export const DeleteJobPaymentsRequest$outboundSchema: z.ZodType<
  DeleteJobPaymentsRequest$Outbound,
  z.ZodTypeDef,
  DeleteJobPaymentsRequest
> = z.object({
  uuid: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteJobPaymentsRequest$ {
  /** @deprecated use `DeleteJobPaymentsRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteJobPaymentsRequest$inboundSchema;
  /** @deprecated use `DeleteJobPaymentsRequest$outboundSchema` instead. */
  export const outboundSchema = DeleteJobPaymentsRequest$outboundSchema;
  /** @deprecated use `DeleteJobPaymentsRequest$Outbound` instead. */
  export type Outbound = DeleteJobPaymentsRequest$Outbound;
}

export function deleteJobPaymentsRequestToJSON(
  deleteJobPaymentsRequest: DeleteJobPaymentsRequest,
): string {
  return JSON.stringify(
    DeleteJobPaymentsRequest$outboundSchema.parse(deleteJobPaymentsRequest),
  );
}

export function deleteJobPaymentsRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteJobPaymentsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteJobPaymentsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteJobPaymentsRequest' from JSON`,
  );
}

/** @internal */
export const DeleteJobPaymentsResponse$inboundSchema: z.ZodType<
  DeleteJobPaymentsResponse,
  z.ZodTypeDef,
  unknown
> = z.union([components.Result$inboundSchema, components.ErrorT$inboundSchema]);

/** @internal */
export type DeleteJobPaymentsResponse$Outbound =
  | components.Result$Outbound
  | components.ErrorT$Outbound;

/** @internal */
export const DeleteJobPaymentsResponse$outboundSchema: z.ZodType<
  DeleteJobPaymentsResponse$Outbound,
  z.ZodTypeDef,
  DeleteJobPaymentsResponse
> = z.union([
  components.Result$outboundSchema,
  components.ErrorT$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteJobPaymentsResponse$ {
  /** @deprecated use `DeleteJobPaymentsResponse$inboundSchema` instead. */
  export const inboundSchema = DeleteJobPaymentsResponse$inboundSchema;
  /** @deprecated use `DeleteJobPaymentsResponse$outboundSchema` instead. */
  export const outboundSchema = DeleteJobPaymentsResponse$outboundSchema;
  /** @deprecated use `DeleteJobPaymentsResponse$Outbound` instead. */
  export type Outbound = DeleteJobPaymentsResponse$Outbound;
}

export function deleteJobPaymentsResponseToJSON(
  deleteJobPaymentsResponse: DeleteJobPaymentsResponse,
): string {
  return JSON.stringify(
    DeleteJobPaymentsResponse$outboundSchema.parse(deleteJobPaymentsResponse),
  );
}

export function deleteJobPaymentsResponseFromJSON(
  jsonString: string,
): SafeParseResult<DeleteJobPaymentsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteJobPaymentsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteJobPaymentsResponse' from JSON`,
  );
}
