/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpdateBadgesSecurity = {
  apiKey?: string | undefined;
  oauth2?: string | undefined;
};

export type UpdateBadgesRequest = {
  /**
   * UUID of the Badge
   */
  uuid: string;
  /**
   * Badge fields to update
   */
  badge: components.BadgeInput;
};

export type UpdateBadgesResponse = components.Result | components.ErrorT;

/** @internal */
export const UpdateBadgesSecurity$inboundSchema: z.ZodType<
  UpdateBadgesSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  apiKey: z.string().optional(),
  oauth2: z.string().optional(),
});

/** @internal */
export type UpdateBadgesSecurity$Outbound = {
  apiKey?: string | undefined;
  oauth2?: string | undefined;
};

/** @internal */
export const UpdateBadgesSecurity$outboundSchema: z.ZodType<
  UpdateBadgesSecurity$Outbound,
  z.ZodTypeDef,
  UpdateBadgesSecurity
> = z.object({
  apiKey: z.string().optional(),
  oauth2: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateBadgesSecurity$ {
  /** @deprecated use `UpdateBadgesSecurity$inboundSchema` instead. */
  export const inboundSchema = UpdateBadgesSecurity$inboundSchema;
  /** @deprecated use `UpdateBadgesSecurity$outboundSchema` instead. */
  export const outboundSchema = UpdateBadgesSecurity$outboundSchema;
  /** @deprecated use `UpdateBadgesSecurity$Outbound` instead. */
  export type Outbound = UpdateBadgesSecurity$Outbound;
}

export function updateBadgesSecurityToJSON(
  updateBadgesSecurity: UpdateBadgesSecurity,
): string {
  return JSON.stringify(
    UpdateBadgesSecurity$outboundSchema.parse(updateBadgesSecurity),
  );
}

export function updateBadgesSecurityFromJSON(
  jsonString: string,
): SafeParseResult<UpdateBadgesSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateBadgesSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateBadgesSecurity' from JSON`,
  );
}

/** @internal */
export const UpdateBadgesRequest$inboundSchema: z.ZodType<
  UpdateBadgesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string(),
  Badge: components.BadgeInput$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Badge": "badge",
  });
});

/** @internal */
export type UpdateBadgesRequest$Outbound = {
  uuid: string;
  Badge: components.BadgeInput$Outbound;
};

/** @internal */
export const UpdateBadgesRequest$outboundSchema: z.ZodType<
  UpdateBadgesRequest$Outbound,
  z.ZodTypeDef,
  UpdateBadgesRequest
> = z.object({
  uuid: z.string(),
  badge: components.BadgeInput$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    badge: "Badge",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateBadgesRequest$ {
  /** @deprecated use `UpdateBadgesRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateBadgesRequest$inboundSchema;
  /** @deprecated use `UpdateBadgesRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateBadgesRequest$outboundSchema;
  /** @deprecated use `UpdateBadgesRequest$Outbound` instead. */
  export type Outbound = UpdateBadgesRequest$Outbound;
}

export function updateBadgesRequestToJSON(
  updateBadgesRequest: UpdateBadgesRequest,
): string {
  return JSON.stringify(
    UpdateBadgesRequest$outboundSchema.parse(updateBadgesRequest),
  );
}

export function updateBadgesRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateBadgesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateBadgesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateBadgesRequest' from JSON`,
  );
}

/** @internal */
export const UpdateBadgesResponse$inboundSchema: z.ZodType<
  UpdateBadgesResponse,
  z.ZodTypeDef,
  unknown
> = z.union([components.Result$inboundSchema, components.ErrorT$inboundSchema]);

/** @internal */
export type UpdateBadgesResponse$Outbound =
  | components.Result$Outbound
  | components.ErrorT$Outbound;

/** @internal */
export const UpdateBadgesResponse$outboundSchema: z.ZodType<
  UpdateBadgesResponse$Outbound,
  z.ZodTypeDef,
  UpdateBadgesResponse
> = z.union([
  components.Result$outboundSchema,
  components.ErrorT$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateBadgesResponse$ {
  /** @deprecated use `UpdateBadgesResponse$inboundSchema` instead. */
  export const inboundSchema = UpdateBadgesResponse$inboundSchema;
  /** @deprecated use `UpdateBadgesResponse$outboundSchema` instead. */
  export const outboundSchema = UpdateBadgesResponse$outboundSchema;
  /** @deprecated use `UpdateBadgesResponse$Outbound` instead. */
  export type Outbound = UpdateBadgesResponse$Outbound;
}

export function updateBadgesResponseToJSON(
  updateBadgesResponse: UpdateBadgesResponse,
): string {
  return JSON.stringify(
    UpdateBadgesResponse$outboundSchema.parse(updateBadgesResponse),
  );
}

export function updateBadgesResponseFromJSON(
  jsonString: string,
): SafeParseResult<UpdateBadgesResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateBadgesResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateBadgesResponse' from JSON`,
  );
}
