/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListFormFieldsSecurity = {
  apiKey?: string | undefined;
  oauth2?: string | undefined;
};

export type ListFormFieldsResponse =
  | components.ErrorT
  | Array<components.FormField>;

/** @internal */
export const ListFormFieldsSecurity$inboundSchema: z.ZodType<
  ListFormFieldsSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  apiKey: z.string().optional(),
  oauth2: z.string().optional(),
});

/** @internal */
export type ListFormFieldsSecurity$Outbound = {
  apiKey?: string | undefined;
  oauth2?: string | undefined;
};

/** @internal */
export const ListFormFieldsSecurity$outboundSchema: z.ZodType<
  ListFormFieldsSecurity$Outbound,
  z.ZodTypeDef,
  ListFormFieldsSecurity
> = z.object({
  apiKey: z.string().optional(),
  oauth2: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListFormFieldsSecurity$ {
  /** @deprecated use `ListFormFieldsSecurity$inboundSchema` instead. */
  export const inboundSchema = ListFormFieldsSecurity$inboundSchema;
  /** @deprecated use `ListFormFieldsSecurity$outboundSchema` instead. */
  export const outboundSchema = ListFormFieldsSecurity$outboundSchema;
  /** @deprecated use `ListFormFieldsSecurity$Outbound` instead. */
  export type Outbound = ListFormFieldsSecurity$Outbound;
}

export function listFormFieldsSecurityToJSON(
  listFormFieldsSecurity: ListFormFieldsSecurity,
): string {
  return JSON.stringify(
    ListFormFieldsSecurity$outboundSchema.parse(listFormFieldsSecurity),
  );
}

export function listFormFieldsSecurityFromJSON(
  jsonString: string,
): SafeParseResult<ListFormFieldsSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListFormFieldsSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListFormFieldsSecurity' from JSON`,
  );
}

/** @internal */
export const ListFormFieldsResponse$inboundSchema: z.ZodType<
  ListFormFieldsResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  components.ErrorT$inboundSchema,
  z.array(components.FormField$inboundSchema),
]);

/** @internal */
export type ListFormFieldsResponse$Outbound =
  | components.ErrorT$Outbound
  | Array<components.FormField$Outbound>;

/** @internal */
export const ListFormFieldsResponse$outboundSchema: z.ZodType<
  ListFormFieldsResponse$Outbound,
  z.ZodTypeDef,
  ListFormFieldsResponse
> = z.union([
  components.ErrorT$outboundSchema,
  z.array(components.FormField$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListFormFieldsResponse$ {
  /** @deprecated use `ListFormFieldsResponse$inboundSchema` instead. */
  export const inboundSchema = ListFormFieldsResponse$inboundSchema;
  /** @deprecated use `ListFormFieldsResponse$outboundSchema` instead. */
  export const outboundSchema = ListFormFieldsResponse$outboundSchema;
  /** @deprecated use `ListFormFieldsResponse$Outbound` instead. */
  export type Outbound = ListFormFieldsResponse$Outbound;
}

export function listFormFieldsResponseToJSON(
  listFormFieldsResponse: ListFormFieldsResponse,
): string {
  return JSON.stringify(
    ListFormFieldsResponse$outboundSchema.parse(listFormFieldsResponse),
  );
}

export function listFormFieldsResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListFormFieldsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListFormFieldsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListFormFieldsResponse' from JSON`,
  );
}
