/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpdateTasksRequest = {
  /**
   * UUID of the Task
   */
  uuid: string;
  /**
   * Task fields to update
   */
  taskCreate: components.TaskCreate;
};

/** @internal */
export const UpdateTasksRequest$inboundSchema: z.ZodType<
  UpdateTasksRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string(),
  TaskCreate: components.TaskCreate$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "TaskCreate": "taskCreate",
  });
});

/** @internal */
export type UpdateTasksRequest$Outbound = {
  uuid: string;
  TaskCreate: components.TaskCreate$Outbound;
};

/** @internal */
export const UpdateTasksRequest$outboundSchema: z.ZodType<
  UpdateTasksRequest$Outbound,
  z.ZodTypeDef,
  UpdateTasksRequest
> = z.object({
  uuid: z.string(),
  taskCreate: components.TaskCreate$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    taskCreate: "TaskCreate",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateTasksRequest$ {
  /** @deprecated use `UpdateTasksRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateTasksRequest$inboundSchema;
  /** @deprecated use `UpdateTasksRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateTasksRequest$outboundSchema;
  /** @deprecated use `UpdateTasksRequest$Outbound` instead. */
  export type Outbound = UpdateTasksRequest$Outbound;
}

export function updateTasksRequestToJSON(
  updateTasksRequest: UpdateTasksRequest,
): string {
  return JSON.stringify(
    UpdateTasksRequest$outboundSchema.parse(updateTasksRequest),
  );
}

export function updateTasksRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateTasksRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateTasksRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateTasksRequest' from JSON`,
  );
}
