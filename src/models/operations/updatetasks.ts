/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpdateTasksSecurity = {
  apiKey?: string | undefined;
  oauth2?: string | undefined;
};

export type UpdateTasksRequest = {
  /**
   * UUID of the Task
   */
  uuid: string;
  /**
   * Task fields to update
   */
  task: components.TaskInput;
};

export type UpdateTasksResponse = components.Result | components.ErrorT;

/** @internal */
export const UpdateTasksSecurity$inboundSchema: z.ZodType<
  UpdateTasksSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  apiKey: z.string().optional(),
  oauth2: z.string().optional(),
});

/** @internal */
export type UpdateTasksSecurity$Outbound = {
  apiKey?: string | undefined;
  oauth2?: string | undefined;
};

/** @internal */
export const UpdateTasksSecurity$outboundSchema: z.ZodType<
  UpdateTasksSecurity$Outbound,
  z.ZodTypeDef,
  UpdateTasksSecurity
> = z.object({
  apiKey: z.string().optional(),
  oauth2: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateTasksSecurity$ {
  /** @deprecated use `UpdateTasksSecurity$inboundSchema` instead. */
  export const inboundSchema = UpdateTasksSecurity$inboundSchema;
  /** @deprecated use `UpdateTasksSecurity$outboundSchema` instead. */
  export const outboundSchema = UpdateTasksSecurity$outboundSchema;
  /** @deprecated use `UpdateTasksSecurity$Outbound` instead. */
  export type Outbound = UpdateTasksSecurity$Outbound;
}

export function updateTasksSecurityToJSON(
  updateTasksSecurity: UpdateTasksSecurity,
): string {
  return JSON.stringify(
    UpdateTasksSecurity$outboundSchema.parse(updateTasksSecurity),
  );
}

export function updateTasksSecurityFromJSON(
  jsonString: string,
): SafeParseResult<UpdateTasksSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateTasksSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateTasksSecurity' from JSON`,
  );
}

/** @internal */
export const UpdateTasksRequest$inboundSchema: z.ZodType<
  UpdateTasksRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string(),
  Task: components.TaskInput$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Task": "task",
  });
});

/** @internal */
export type UpdateTasksRequest$Outbound = {
  uuid: string;
  Task: components.TaskInput$Outbound;
};

/** @internal */
export const UpdateTasksRequest$outboundSchema: z.ZodType<
  UpdateTasksRequest$Outbound,
  z.ZodTypeDef,
  UpdateTasksRequest
> = z.object({
  uuid: z.string(),
  task: components.TaskInput$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    task: "Task",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateTasksRequest$ {
  /** @deprecated use `UpdateTasksRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateTasksRequest$inboundSchema;
  /** @deprecated use `UpdateTasksRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateTasksRequest$outboundSchema;
  /** @deprecated use `UpdateTasksRequest$Outbound` instead. */
  export type Outbound = UpdateTasksRequest$Outbound;
}

export function updateTasksRequestToJSON(
  updateTasksRequest: UpdateTasksRequest,
): string {
  return JSON.stringify(
    UpdateTasksRequest$outboundSchema.parse(updateTasksRequest),
  );
}

export function updateTasksRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateTasksRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateTasksRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateTasksRequest' from JSON`,
  );
}

/** @internal */
export const UpdateTasksResponse$inboundSchema: z.ZodType<
  UpdateTasksResponse,
  z.ZodTypeDef,
  unknown
> = z.union([components.Result$inboundSchema, components.ErrorT$inboundSchema]);

/** @internal */
export type UpdateTasksResponse$Outbound =
  | components.Result$Outbound
  | components.ErrorT$Outbound;

/** @internal */
export const UpdateTasksResponse$outboundSchema: z.ZodType<
  UpdateTasksResponse$Outbound,
  z.ZodTypeDef,
  UpdateTasksResponse
> = z.union([
  components.Result$outboundSchema,
  components.ErrorT$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateTasksResponse$ {
  /** @deprecated use `UpdateTasksResponse$inboundSchema` instead. */
  export const inboundSchema = UpdateTasksResponse$inboundSchema;
  /** @deprecated use `UpdateTasksResponse$outboundSchema` instead. */
  export const outboundSchema = UpdateTasksResponse$outboundSchema;
  /** @deprecated use `UpdateTasksResponse$Outbound` instead. */
  export type Outbound = UpdateTasksResponse$Outbound;
}

export function updateTasksResponseToJSON(
  updateTasksResponse: UpdateTasksResponse,
): string {
  return JSON.stringify(
    UpdateTasksResponse$outboundSchema.parse(updateTasksResponse),
  );
}

export function updateTasksResponseFromJSON(
  jsonString: string,
): SafeParseResult<UpdateTasksResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateTasksResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateTasksResponse' from JSON`,
  );
}
