/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpdateJobActivitiesRequest = {
  /**
   * UUID of the Job Activity
   */
  uuid: string;
  /**
   * Job Activity fields to update
   */
  jobActivity: components.JobActivityInput;
};

export type UpdateJobActivitiesResponse = components.Result | components.ErrorT;

/** @internal */
export const UpdateJobActivitiesRequest$inboundSchema: z.ZodType<
  UpdateJobActivitiesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string(),
  JobActivity: components.JobActivityInput$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "JobActivity": "jobActivity",
  });
});

/** @internal */
export type UpdateJobActivitiesRequest$Outbound = {
  uuid: string;
  JobActivity: components.JobActivityInput$Outbound;
};

/** @internal */
export const UpdateJobActivitiesRequest$outboundSchema: z.ZodType<
  UpdateJobActivitiesRequest$Outbound,
  z.ZodTypeDef,
  UpdateJobActivitiesRequest
> = z.object({
  uuid: z.string(),
  jobActivity: components.JobActivityInput$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    jobActivity: "JobActivity",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateJobActivitiesRequest$ {
  /** @deprecated use `UpdateJobActivitiesRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateJobActivitiesRequest$inboundSchema;
  /** @deprecated use `UpdateJobActivitiesRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateJobActivitiesRequest$outboundSchema;
  /** @deprecated use `UpdateJobActivitiesRequest$Outbound` instead. */
  export type Outbound = UpdateJobActivitiesRequest$Outbound;
}

export function updateJobActivitiesRequestToJSON(
  updateJobActivitiesRequest: UpdateJobActivitiesRequest,
): string {
  return JSON.stringify(
    UpdateJobActivitiesRequest$outboundSchema.parse(updateJobActivitiesRequest),
  );
}

export function updateJobActivitiesRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateJobActivitiesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateJobActivitiesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateJobActivitiesRequest' from JSON`,
  );
}

/** @internal */
export const UpdateJobActivitiesResponse$inboundSchema: z.ZodType<
  UpdateJobActivitiesResponse,
  z.ZodTypeDef,
  unknown
> = z.union([components.Result$inboundSchema, components.ErrorT$inboundSchema]);

/** @internal */
export type UpdateJobActivitiesResponse$Outbound =
  | components.Result$Outbound
  | components.ErrorT$Outbound;

/** @internal */
export const UpdateJobActivitiesResponse$outboundSchema: z.ZodType<
  UpdateJobActivitiesResponse$Outbound,
  z.ZodTypeDef,
  UpdateJobActivitiesResponse
> = z.union([
  components.Result$outboundSchema,
  components.ErrorT$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateJobActivitiesResponse$ {
  /** @deprecated use `UpdateJobActivitiesResponse$inboundSchema` instead. */
  export const inboundSchema = UpdateJobActivitiesResponse$inboundSchema;
  /** @deprecated use `UpdateJobActivitiesResponse$outboundSchema` instead. */
  export const outboundSchema = UpdateJobActivitiesResponse$outboundSchema;
  /** @deprecated use `UpdateJobActivitiesResponse$Outbound` instead. */
  export type Outbound = UpdateJobActivitiesResponse$Outbound;
}

export function updateJobActivitiesResponseToJSON(
  updateJobActivitiesResponse: UpdateJobActivitiesResponse,
): string {
  return JSON.stringify(
    UpdateJobActivitiesResponse$outboundSchema.parse(
      updateJobActivitiesResponse,
    ),
  );
}

export function updateJobActivitiesResponseFromJSON(
  jsonString: string,
): SafeParseResult<UpdateJobActivitiesResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateJobActivitiesResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateJobActivitiesResponse' from JSON`,
  );
}
