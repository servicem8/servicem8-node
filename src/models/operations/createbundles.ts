/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CreateBundlesSecurity = {
  apiKey?: string | undefined;
  oauth2?: string | undefined;
};

export type CreateBundlesResponseResult = components.Result | components.ErrorT;

export type CreateBundlesResponse = {
  headers: { [k: string]: Array<string> };
  result: components.Result | components.ErrorT;
};

/** @internal */
export const CreateBundlesSecurity$inboundSchema: z.ZodType<
  CreateBundlesSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  apiKey: z.string().optional(),
  oauth2: z.string().optional(),
});

/** @internal */
export type CreateBundlesSecurity$Outbound = {
  apiKey?: string | undefined;
  oauth2?: string | undefined;
};

/** @internal */
export const CreateBundlesSecurity$outboundSchema: z.ZodType<
  CreateBundlesSecurity$Outbound,
  z.ZodTypeDef,
  CreateBundlesSecurity
> = z.object({
  apiKey: z.string().optional(),
  oauth2: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateBundlesSecurity$ {
  /** @deprecated use `CreateBundlesSecurity$inboundSchema` instead. */
  export const inboundSchema = CreateBundlesSecurity$inboundSchema;
  /** @deprecated use `CreateBundlesSecurity$outboundSchema` instead. */
  export const outboundSchema = CreateBundlesSecurity$outboundSchema;
  /** @deprecated use `CreateBundlesSecurity$Outbound` instead. */
  export type Outbound = CreateBundlesSecurity$Outbound;
}

export function createBundlesSecurityToJSON(
  createBundlesSecurity: CreateBundlesSecurity,
): string {
  return JSON.stringify(
    CreateBundlesSecurity$outboundSchema.parse(createBundlesSecurity),
  );
}

export function createBundlesSecurityFromJSON(
  jsonString: string,
): SafeParseResult<CreateBundlesSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateBundlesSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateBundlesSecurity' from JSON`,
  );
}

/** @internal */
export const CreateBundlesResponseResult$inboundSchema: z.ZodType<
  CreateBundlesResponseResult,
  z.ZodTypeDef,
  unknown
> = z.union([components.Result$inboundSchema, components.ErrorT$inboundSchema]);

/** @internal */
export type CreateBundlesResponseResult$Outbound =
  | components.Result$Outbound
  | components.ErrorT$Outbound;

/** @internal */
export const CreateBundlesResponseResult$outboundSchema: z.ZodType<
  CreateBundlesResponseResult$Outbound,
  z.ZodTypeDef,
  CreateBundlesResponseResult
> = z.union([
  components.Result$outboundSchema,
  components.ErrorT$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateBundlesResponseResult$ {
  /** @deprecated use `CreateBundlesResponseResult$inboundSchema` instead. */
  export const inboundSchema = CreateBundlesResponseResult$inboundSchema;
  /** @deprecated use `CreateBundlesResponseResult$outboundSchema` instead. */
  export const outboundSchema = CreateBundlesResponseResult$outboundSchema;
  /** @deprecated use `CreateBundlesResponseResult$Outbound` instead. */
  export type Outbound = CreateBundlesResponseResult$Outbound;
}

export function createBundlesResponseResultToJSON(
  createBundlesResponseResult: CreateBundlesResponseResult,
): string {
  return JSON.stringify(
    CreateBundlesResponseResult$outboundSchema.parse(
      createBundlesResponseResult,
    ),
  );
}

export function createBundlesResponseResultFromJSON(
  jsonString: string,
): SafeParseResult<CreateBundlesResponseResult, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateBundlesResponseResult$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateBundlesResponseResult' from JSON`,
  );
}

/** @internal */
export const CreateBundlesResponse$inboundSchema: z.ZodType<
  CreateBundlesResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: z.union([
    components.Result$inboundSchema,
    components.ErrorT$inboundSchema,
  ]),
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type CreateBundlesResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: components.Result$Outbound | components.ErrorT$Outbound;
};

/** @internal */
export const CreateBundlesResponse$outboundSchema: z.ZodType<
  CreateBundlesResponse$Outbound,
  z.ZodTypeDef,
  CreateBundlesResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: z.union([
    components.Result$outboundSchema,
    components.ErrorT$outboundSchema,
  ]),
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateBundlesResponse$ {
  /** @deprecated use `CreateBundlesResponse$inboundSchema` instead. */
  export const inboundSchema = CreateBundlesResponse$inboundSchema;
  /** @deprecated use `CreateBundlesResponse$outboundSchema` instead. */
  export const outboundSchema = CreateBundlesResponse$outboundSchema;
  /** @deprecated use `CreateBundlesResponse$Outbound` instead. */
  export type Outbound = CreateBundlesResponse$Outbound;
}

export function createBundlesResponseToJSON(
  createBundlesResponse: CreateBundlesResponse,
): string {
  return JSON.stringify(
    CreateBundlesResponse$outboundSchema.parse(createBundlesResponse),
  );
}

export function createBundlesResponseFromJSON(
  jsonString: string,
): SafeParseResult<CreateBundlesResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateBundlesResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateBundlesResponse' from JSON`,
  );
}
