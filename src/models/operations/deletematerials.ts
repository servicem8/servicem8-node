/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteMaterialsSecurity = {
  apiKey?: string | undefined;
  oauth2?: string | undefined;
};

export type DeleteMaterialsRequest = {
  /**
   * UUID of the Material
   */
  uuid: string;
};

export type DeleteMaterialsResponse = components.Result | components.ErrorT;

/** @internal */
export const DeleteMaterialsSecurity$inboundSchema: z.ZodType<
  DeleteMaterialsSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  apiKey: z.string().optional(),
  oauth2: z.string().optional(),
});

/** @internal */
export type DeleteMaterialsSecurity$Outbound = {
  apiKey?: string | undefined;
  oauth2?: string | undefined;
};

/** @internal */
export const DeleteMaterialsSecurity$outboundSchema: z.ZodType<
  DeleteMaterialsSecurity$Outbound,
  z.ZodTypeDef,
  DeleteMaterialsSecurity
> = z.object({
  apiKey: z.string().optional(),
  oauth2: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteMaterialsSecurity$ {
  /** @deprecated use `DeleteMaterialsSecurity$inboundSchema` instead. */
  export const inboundSchema = DeleteMaterialsSecurity$inboundSchema;
  /** @deprecated use `DeleteMaterialsSecurity$outboundSchema` instead. */
  export const outboundSchema = DeleteMaterialsSecurity$outboundSchema;
  /** @deprecated use `DeleteMaterialsSecurity$Outbound` instead. */
  export type Outbound = DeleteMaterialsSecurity$Outbound;
}

export function deleteMaterialsSecurityToJSON(
  deleteMaterialsSecurity: DeleteMaterialsSecurity,
): string {
  return JSON.stringify(
    DeleteMaterialsSecurity$outboundSchema.parse(deleteMaterialsSecurity),
  );
}

export function deleteMaterialsSecurityFromJSON(
  jsonString: string,
): SafeParseResult<DeleteMaterialsSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteMaterialsSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteMaterialsSecurity' from JSON`,
  );
}

/** @internal */
export const DeleteMaterialsRequest$inboundSchema: z.ZodType<
  DeleteMaterialsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string(),
});

/** @internal */
export type DeleteMaterialsRequest$Outbound = {
  uuid: string;
};

/** @internal */
export const DeleteMaterialsRequest$outboundSchema: z.ZodType<
  DeleteMaterialsRequest$Outbound,
  z.ZodTypeDef,
  DeleteMaterialsRequest
> = z.object({
  uuid: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteMaterialsRequest$ {
  /** @deprecated use `DeleteMaterialsRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteMaterialsRequest$inboundSchema;
  /** @deprecated use `DeleteMaterialsRequest$outboundSchema` instead. */
  export const outboundSchema = DeleteMaterialsRequest$outboundSchema;
  /** @deprecated use `DeleteMaterialsRequest$Outbound` instead. */
  export type Outbound = DeleteMaterialsRequest$Outbound;
}

export function deleteMaterialsRequestToJSON(
  deleteMaterialsRequest: DeleteMaterialsRequest,
): string {
  return JSON.stringify(
    DeleteMaterialsRequest$outboundSchema.parse(deleteMaterialsRequest),
  );
}

export function deleteMaterialsRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteMaterialsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteMaterialsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteMaterialsRequest' from JSON`,
  );
}

/** @internal */
export const DeleteMaterialsResponse$inboundSchema: z.ZodType<
  DeleteMaterialsResponse,
  z.ZodTypeDef,
  unknown
> = z.union([components.Result$inboundSchema, components.ErrorT$inboundSchema]);

/** @internal */
export type DeleteMaterialsResponse$Outbound =
  | components.Result$Outbound
  | components.ErrorT$Outbound;

/** @internal */
export const DeleteMaterialsResponse$outboundSchema: z.ZodType<
  DeleteMaterialsResponse$Outbound,
  z.ZodTypeDef,
  DeleteMaterialsResponse
> = z.union([
  components.Result$outboundSchema,
  components.ErrorT$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteMaterialsResponse$ {
  /** @deprecated use `DeleteMaterialsResponse$inboundSchema` instead. */
  export const inboundSchema = DeleteMaterialsResponse$inboundSchema;
  /** @deprecated use `DeleteMaterialsResponse$outboundSchema` instead. */
  export const outboundSchema = DeleteMaterialsResponse$outboundSchema;
  /** @deprecated use `DeleteMaterialsResponse$Outbound` instead. */
  export type Outbound = DeleteMaterialsResponse$Outbound;
}

export function deleteMaterialsResponseToJSON(
  deleteMaterialsResponse: DeleteMaterialsResponse,
): string {
  return JSON.stringify(
    DeleteMaterialsResponse$outboundSchema.parse(deleteMaterialsResponse),
  );
}

export function deleteMaterialsResponseFromJSON(
  jsonString: string,
): SafeParseResult<DeleteMaterialsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteMaterialsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteMaterialsResponse' from JSON`,
  );
}
