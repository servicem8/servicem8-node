/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpdateNotesSecurity = {
  apiKey?: string | undefined;
  oauth2?: string | undefined;
};

export type UpdateNotesRequest = {
  /**
   * UUID of the Note
   */
  uuid: string;
  /**
   * Note fields to update
   */
  note: components.NoteInput;
};

export type UpdateNotesResponse = components.Result | components.ErrorT;

/** @internal */
export const UpdateNotesSecurity$inboundSchema: z.ZodType<
  UpdateNotesSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  apiKey: z.string().optional(),
  oauth2: z.string().optional(),
});

/** @internal */
export type UpdateNotesSecurity$Outbound = {
  apiKey?: string | undefined;
  oauth2?: string | undefined;
};

/** @internal */
export const UpdateNotesSecurity$outboundSchema: z.ZodType<
  UpdateNotesSecurity$Outbound,
  z.ZodTypeDef,
  UpdateNotesSecurity
> = z.object({
  apiKey: z.string().optional(),
  oauth2: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateNotesSecurity$ {
  /** @deprecated use `UpdateNotesSecurity$inboundSchema` instead. */
  export const inboundSchema = UpdateNotesSecurity$inboundSchema;
  /** @deprecated use `UpdateNotesSecurity$outboundSchema` instead. */
  export const outboundSchema = UpdateNotesSecurity$outboundSchema;
  /** @deprecated use `UpdateNotesSecurity$Outbound` instead. */
  export type Outbound = UpdateNotesSecurity$Outbound;
}

export function updateNotesSecurityToJSON(
  updateNotesSecurity: UpdateNotesSecurity,
): string {
  return JSON.stringify(
    UpdateNotesSecurity$outboundSchema.parse(updateNotesSecurity),
  );
}

export function updateNotesSecurityFromJSON(
  jsonString: string,
): SafeParseResult<UpdateNotesSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateNotesSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateNotesSecurity' from JSON`,
  );
}

/** @internal */
export const UpdateNotesRequest$inboundSchema: z.ZodType<
  UpdateNotesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string(),
  Note: components.NoteInput$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Note": "note",
  });
});

/** @internal */
export type UpdateNotesRequest$Outbound = {
  uuid: string;
  Note: components.NoteInput$Outbound;
};

/** @internal */
export const UpdateNotesRequest$outboundSchema: z.ZodType<
  UpdateNotesRequest$Outbound,
  z.ZodTypeDef,
  UpdateNotesRequest
> = z.object({
  uuid: z.string(),
  note: components.NoteInput$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    note: "Note",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateNotesRequest$ {
  /** @deprecated use `UpdateNotesRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateNotesRequest$inboundSchema;
  /** @deprecated use `UpdateNotesRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateNotesRequest$outboundSchema;
  /** @deprecated use `UpdateNotesRequest$Outbound` instead. */
  export type Outbound = UpdateNotesRequest$Outbound;
}

export function updateNotesRequestToJSON(
  updateNotesRequest: UpdateNotesRequest,
): string {
  return JSON.stringify(
    UpdateNotesRequest$outboundSchema.parse(updateNotesRequest),
  );
}

export function updateNotesRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateNotesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateNotesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateNotesRequest' from JSON`,
  );
}

/** @internal */
export const UpdateNotesResponse$inboundSchema: z.ZodType<
  UpdateNotesResponse,
  z.ZodTypeDef,
  unknown
> = z.union([components.Result$inboundSchema, components.ErrorT$inboundSchema]);

/** @internal */
export type UpdateNotesResponse$Outbound =
  | components.Result$Outbound
  | components.ErrorT$Outbound;

/** @internal */
export const UpdateNotesResponse$outboundSchema: z.ZodType<
  UpdateNotesResponse$Outbound,
  z.ZodTypeDef,
  UpdateNotesResponse
> = z.union([
  components.Result$outboundSchema,
  components.ErrorT$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateNotesResponse$ {
  /** @deprecated use `UpdateNotesResponse$inboundSchema` instead. */
  export const inboundSchema = UpdateNotesResponse$inboundSchema;
  /** @deprecated use `UpdateNotesResponse$outboundSchema` instead. */
  export const outboundSchema = UpdateNotesResponse$outboundSchema;
  /** @deprecated use `UpdateNotesResponse$Outbound` instead. */
  export type Outbound = UpdateNotesResponse$Outbound;
}

export function updateNotesResponseToJSON(
  updateNotesResponse: UpdateNotesResponse,
): string {
  return JSON.stringify(
    UpdateNotesResponse$outboundSchema.parse(updateNotesResponse),
  );
}

export function updateNotesResponseFromJSON(
  jsonString: string,
): SafeParseResult<UpdateNotesResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateNotesResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateNotesResponse' from JSON`,
  );
}
