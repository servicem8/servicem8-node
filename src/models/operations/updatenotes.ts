/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpdateNotesRequest = {
  /**
   * UUID of the Note
   */
  uuid: string;
  /**
   * Note fields to update
   */
  noteCreate: components.NoteCreate;
};

/** @internal */
export const UpdateNotesRequest$inboundSchema: z.ZodType<
  UpdateNotesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string(),
  NoteCreate: components.NoteCreate$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "NoteCreate": "noteCreate",
  });
});

/** @internal */
export type UpdateNotesRequest$Outbound = {
  uuid: string;
  NoteCreate: components.NoteCreate$Outbound;
};

/** @internal */
export const UpdateNotesRequest$outboundSchema: z.ZodType<
  UpdateNotesRequest$Outbound,
  z.ZodTypeDef,
  UpdateNotesRequest
> = z.object({
  uuid: z.string(),
  noteCreate: components.NoteCreate$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    noteCreate: "NoteCreate",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateNotesRequest$ {
  /** @deprecated use `UpdateNotesRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateNotesRequest$inboundSchema;
  /** @deprecated use `UpdateNotesRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateNotesRequest$outboundSchema;
  /** @deprecated use `UpdateNotesRequest$Outbound` instead. */
  export type Outbound = UpdateNotesRequest$Outbound;
}

export function updateNotesRequestToJSON(
  updateNotesRequest: UpdateNotesRequest,
): string {
  return JSON.stringify(
    UpdateNotesRequest$outboundSchema.parse(updateNotesRequest),
  );
}

export function updateNotesRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateNotesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateNotesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateNotesRequest' from JSON`,
  );
}
