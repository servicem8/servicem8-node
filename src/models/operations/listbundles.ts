/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListBundlesSecurity = {
  apiKey?: string | undefined;
  oauth2?: string | undefined;
};

export type ListBundlesResponse =
  | components.ErrorT
  | Array<components.MaterialBundle>;

/** @internal */
export const ListBundlesSecurity$inboundSchema: z.ZodType<
  ListBundlesSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  apiKey: z.string().optional(),
  oauth2: z.string().optional(),
});

/** @internal */
export type ListBundlesSecurity$Outbound = {
  apiKey?: string | undefined;
  oauth2?: string | undefined;
};

/** @internal */
export const ListBundlesSecurity$outboundSchema: z.ZodType<
  ListBundlesSecurity$Outbound,
  z.ZodTypeDef,
  ListBundlesSecurity
> = z.object({
  apiKey: z.string().optional(),
  oauth2: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListBundlesSecurity$ {
  /** @deprecated use `ListBundlesSecurity$inboundSchema` instead. */
  export const inboundSchema = ListBundlesSecurity$inboundSchema;
  /** @deprecated use `ListBundlesSecurity$outboundSchema` instead. */
  export const outboundSchema = ListBundlesSecurity$outboundSchema;
  /** @deprecated use `ListBundlesSecurity$Outbound` instead. */
  export type Outbound = ListBundlesSecurity$Outbound;
}

export function listBundlesSecurityToJSON(
  listBundlesSecurity: ListBundlesSecurity,
): string {
  return JSON.stringify(
    ListBundlesSecurity$outboundSchema.parse(listBundlesSecurity),
  );
}

export function listBundlesSecurityFromJSON(
  jsonString: string,
): SafeParseResult<ListBundlesSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListBundlesSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListBundlesSecurity' from JSON`,
  );
}

/** @internal */
export const ListBundlesResponse$inboundSchema: z.ZodType<
  ListBundlesResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  components.ErrorT$inboundSchema,
  z.array(components.MaterialBundle$inboundSchema),
]);

/** @internal */
export type ListBundlesResponse$Outbound =
  | components.ErrorT$Outbound
  | Array<components.MaterialBundle$Outbound>;

/** @internal */
export const ListBundlesResponse$outboundSchema: z.ZodType<
  ListBundlesResponse$Outbound,
  z.ZodTypeDef,
  ListBundlesResponse
> = z.union([
  components.ErrorT$outboundSchema,
  z.array(components.MaterialBundle$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListBundlesResponse$ {
  /** @deprecated use `ListBundlesResponse$inboundSchema` instead. */
  export const inboundSchema = ListBundlesResponse$inboundSchema;
  /** @deprecated use `ListBundlesResponse$outboundSchema` instead. */
  export const outboundSchema = ListBundlesResponse$outboundSchema;
  /** @deprecated use `ListBundlesResponse$Outbound` instead. */
  export type Outbound = ListBundlesResponse$Outbound;
}

export function listBundlesResponseToJSON(
  listBundlesResponse: ListBundlesResponse,
): string {
  return JSON.stringify(
    ListBundlesResponse$outboundSchema.parse(listBundlesResponse),
  );
}

export function listBundlesResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListBundlesResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListBundlesResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListBundlesResponse' from JSON`,
  );
}
