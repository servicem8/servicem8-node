/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteCompanyContactsSecurity = {
  apiKey?: string | undefined;
  oauth2?: string | undefined;
};

export type DeleteCompanyContactsRequest = {
  /**
   * UUID of the Company Contact
   */
  uuid: string;
};

export type DeleteCompanyContactsResponse =
  | components.Result
  | components.ErrorT;

/** @internal */
export const DeleteCompanyContactsSecurity$inboundSchema: z.ZodType<
  DeleteCompanyContactsSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  apiKey: z.string().optional(),
  oauth2: z.string().optional(),
});

/** @internal */
export type DeleteCompanyContactsSecurity$Outbound = {
  apiKey?: string | undefined;
  oauth2?: string | undefined;
};

/** @internal */
export const DeleteCompanyContactsSecurity$outboundSchema: z.ZodType<
  DeleteCompanyContactsSecurity$Outbound,
  z.ZodTypeDef,
  DeleteCompanyContactsSecurity
> = z.object({
  apiKey: z.string().optional(),
  oauth2: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteCompanyContactsSecurity$ {
  /** @deprecated use `DeleteCompanyContactsSecurity$inboundSchema` instead. */
  export const inboundSchema = DeleteCompanyContactsSecurity$inboundSchema;
  /** @deprecated use `DeleteCompanyContactsSecurity$outboundSchema` instead. */
  export const outboundSchema = DeleteCompanyContactsSecurity$outboundSchema;
  /** @deprecated use `DeleteCompanyContactsSecurity$Outbound` instead. */
  export type Outbound = DeleteCompanyContactsSecurity$Outbound;
}

export function deleteCompanyContactsSecurityToJSON(
  deleteCompanyContactsSecurity: DeleteCompanyContactsSecurity,
): string {
  return JSON.stringify(
    DeleteCompanyContactsSecurity$outboundSchema.parse(
      deleteCompanyContactsSecurity,
    ),
  );
}

export function deleteCompanyContactsSecurityFromJSON(
  jsonString: string,
): SafeParseResult<DeleteCompanyContactsSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteCompanyContactsSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteCompanyContactsSecurity' from JSON`,
  );
}

/** @internal */
export const DeleteCompanyContactsRequest$inboundSchema: z.ZodType<
  DeleteCompanyContactsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string(),
});

/** @internal */
export type DeleteCompanyContactsRequest$Outbound = {
  uuid: string;
};

/** @internal */
export const DeleteCompanyContactsRequest$outboundSchema: z.ZodType<
  DeleteCompanyContactsRequest$Outbound,
  z.ZodTypeDef,
  DeleteCompanyContactsRequest
> = z.object({
  uuid: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteCompanyContactsRequest$ {
  /** @deprecated use `DeleteCompanyContactsRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteCompanyContactsRequest$inboundSchema;
  /** @deprecated use `DeleteCompanyContactsRequest$outboundSchema` instead. */
  export const outboundSchema = DeleteCompanyContactsRequest$outboundSchema;
  /** @deprecated use `DeleteCompanyContactsRequest$Outbound` instead. */
  export type Outbound = DeleteCompanyContactsRequest$Outbound;
}

export function deleteCompanyContactsRequestToJSON(
  deleteCompanyContactsRequest: DeleteCompanyContactsRequest,
): string {
  return JSON.stringify(
    DeleteCompanyContactsRequest$outboundSchema.parse(
      deleteCompanyContactsRequest,
    ),
  );
}

export function deleteCompanyContactsRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteCompanyContactsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteCompanyContactsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteCompanyContactsRequest' from JSON`,
  );
}

/** @internal */
export const DeleteCompanyContactsResponse$inboundSchema: z.ZodType<
  DeleteCompanyContactsResponse,
  z.ZodTypeDef,
  unknown
> = z.union([components.Result$inboundSchema, components.ErrorT$inboundSchema]);

/** @internal */
export type DeleteCompanyContactsResponse$Outbound =
  | components.Result$Outbound
  | components.ErrorT$Outbound;

/** @internal */
export const DeleteCompanyContactsResponse$outboundSchema: z.ZodType<
  DeleteCompanyContactsResponse$Outbound,
  z.ZodTypeDef,
  DeleteCompanyContactsResponse
> = z.union([
  components.Result$outboundSchema,
  components.ErrorT$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteCompanyContactsResponse$ {
  /** @deprecated use `DeleteCompanyContactsResponse$inboundSchema` instead. */
  export const inboundSchema = DeleteCompanyContactsResponse$inboundSchema;
  /** @deprecated use `DeleteCompanyContactsResponse$outboundSchema` instead. */
  export const outboundSchema = DeleteCompanyContactsResponse$outboundSchema;
  /** @deprecated use `DeleteCompanyContactsResponse$Outbound` instead. */
  export type Outbound = DeleteCompanyContactsResponse$Outbound;
}

export function deleteCompanyContactsResponseToJSON(
  deleteCompanyContactsResponse: DeleteCompanyContactsResponse,
): string {
  return JSON.stringify(
    DeleteCompanyContactsResponse$outboundSchema.parse(
      deleteCompanyContactsResponse,
    ),
  );
}

export function deleteCompanyContactsResponseFromJSON(
  jsonString: string,
): SafeParseResult<DeleteCompanyContactsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteCompanyContactsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteCompanyContactsResponse' from JSON`,
  );
}
