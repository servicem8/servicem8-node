/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetBadgesRequest = {
  /**
   * UUID of the Badge
   */
  uuid: string;
};

export type GetBadgesResponse = components.Badge | components.ErrorT;

/** @internal */
export const GetBadgesRequest$inboundSchema: z.ZodType<
  GetBadgesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string(),
});

/** @internal */
export type GetBadgesRequest$Outbound = {
  uuid: string;
};

/** @internal */
export const GetBadgesRequest$outboundSchema: z.ZodType<
  GetBadgesRequest$Outbound,
  z.ZodTypeDef,
  GetBadgesRequest
> = z.object({
  uuid: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetBadgesRequest$ {
  /** @deprecated use `GetBadgesRequest$inboundSchema` instead. */
  export const inboundSchema = GetBadgesRequest$inboundSchema;
  /** @deprecated use `GetBadgesRequest$outboundSchema` instead. */
  export const outboundSchema = GetBadgesRequest$outboundSchema;
  /** @deprecated use `GetBadgesRequest$Outbound` instead. */
  export type Outbound = GetBadgesRequest$Outbound;
}

export function getBadgesRequestToJSON(
  getBadgesRequest: GetBadgesRequest,
): string {
  return JSON.stringify(
    GetBadgesRequest$outboundSchema.parse(getBadgesRequest),
  );
}

export function getBadgesRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetBadgesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetBadgesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetBadgesRequest' from JSON`,
  );
}

/** @internal */
export const GetBadgesResponse$inboundSchema: z.ZodType<
  GetBadgesResponse,
  z.ZodTypeDef,
  unknown
> = z.union([components.Badge$inboundSchema, components.ErrorT$inboundSchema]);

/** @internal */
export type GetBadgesResponse$Outbound =
  | components.Badge$Outbound
  | components.ErrorT$Outbound;

/** @internal */
export const GetBadgesResponse$outboundSchema: z.ZodType<
  GetBadgesResponse$Outbound,
  z.ZodTypeDef,
  GetBadgesResponse
> = z.union([
  components.Badge$outboundSchema,
  components.ErrorT$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetBadgesResponse$ {
  /** @deprecated use `GetBadgesResponse$inboundSchema` instead. */
  export const inboundSchema = GetBadgesResponse$inboundSchema;
  /** @deprecated use `GetBadgesResponse$outboundSchema` instead. */
  export const outboundSchema = GetBadgesResponse$outboundSchema;
  /** @deprecated use `GetBadgesResponse$Outbound` instead. */
  export type Outbound = GetBadgesResponse$Outbound;
}

export function getBadgesResponseToJSON(
  getBadgesResponse: GetBadgesResponse,
): string {
  return JSON.stringify(
    GetBadgesResponse$outboundSchema.parse(getBadgesResponse),
  );
}

export function getBadgesResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetBadgesResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetBadgesResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetBadgesResponse' from JSON`,
  );
}
