/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Optional field overrides when creating a job from a template. Only the following fields can be overridden: job_description, company_uuid, company_name, and job_address. Note: You cannot specify both company_uuid and company_name.
 */
export type JobTemplateOverrides = {
  /**
   * Job description
   */
  jobDescription?: string | undefined;
  /**
   * UUID of the company/client. Cannot be used together with company_name.
   */
  companyUuid?: string | undefined;
  /**
   * Name of the company/client. If a company with this name exists, it will be used. Otherwise, a new company will be created. Cannot be used together with company_uuid.
   */
  companyName?: string | undefined;
  /**
   * Street address for the job
   */
  jobAddress?: string | undefined;
};

/** @internal */
export const JobTemplateOverrides$inboundSchema: z.ZodType<
  JobTemplateOverrides,
  z.ZodTypeDef,
  unknown
> = z.object({
  job_description: z.string().optional(),
  company_uuid: z.string().optional(),
  company_name: z.string().optional(),
  job_address: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "job_description": "jobDescription",
    "company_uuid": "companyUuid",
    "company_name": "companyName",
    "job_address": "jobAddress",
  });
});

/** @internal */
export type JobTemplateOverrides$Outbound = {
  job_description?: string | undefined;
  company_uuid?: string | undefined;
  company_name?: string | undefined;
  job_address?: string | undefined;
};

/** @internal */
export const JobTemplateOverrides$outboundSchema: z.ZodType<
  JobTemplateOverrides$Outbound,
  z.ZodTypeDef,
  JobTemplateOverrides
> = z.object({
  jobDescription: z.string().optional(),
  companyUuid: z.string().optional(),
  companyName: z.string().optional(),
  jobAddress: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    jobDescription: "job_description",
    companyUuid: "company_uuid",
    companyName: "company_name",
    jobAddress: "job_address",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace JobTemplateOverrides$ {
  /** @deprecated use `JobTemplateOverrides$inboundSchema` instead. */
  export const inboundSchema = JobTemplateOverrides$inboundSchema;
  /** @deprecated use `JobTemplateOverrides$outboundSchema` instead. */
  export const outboundSchema = JobTemplateOverrides$outboundSchema;
  /** @deprecated use `JobTemplateOverrides$Outbound` instead. */
  export type Outbound = JobTemplateOverrides$Outbound;
}

export function jobTemplateOverridesToJSON(
  jobTemplateOverrides: JobTemplateOverrides,
): string {
  return JSON.stringify(
    JobTemplateOverrides$outboundSchema.parse(jobTemplateOverrides),
  );
}

export function jobTemplateOverridesFromJSON(
  jsonString: string,
): SafeParseResult<JobTemplateOverrides, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => JobTemplateOverrides$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'JobTemplateOverrides' from JSON`,
  );
}
