/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const AssetTypeFieldCreateFieldType = {
  Text: "Text",
  Number: "Number",
  Date: "Date",
  MultipleChoice: "Multiple Choice",
} as const;
export type AssetTypeFieldCreateFieldType = ClosedEnum<
  typeof AssetTypeFieldCreateFieldType
>;

/**
 * Configuration data for the field
 */
export type AssetTypeFieldCreateFieldData = {
  fieldType: AssetTypeFieldCreateFieldType;
  mandatory: boolean;
  choices?: Array<string> | undefined;
};

export type AssetTypeFieldCreate = {
  /**
   * Unique identifier for this record
   */
  uuid?: string | undefined;
  /**
   * Name of the field that will be displayed to users. Used as a label for the input field when managing assets.
   */
  name: string;
  /**
   * Configuration data for the field
   */
  fieldData?: AssetTypeFieldCreateFieldData | undefined;
  /**
   * The order in which this field should be displayed relative to other fields of the same asset type. Lower values display first.
   */
  sortOrder?: number | undefined;
};

/** @internal */
export const AssetTypeFieldCreateFieldType$inboundSchema: z.ZodNativeEnum<
  typeof AssetTypeFieldCreateFieldType
> = z.nativeEnum(AssetTypeFieldCreateFieldType);

/** @internal */
export const AssetTypeFieldCreateFieldType$outboundSchema: z.ZodNativeEnum<
  typeof AssetTypeFieldCreateFieldType
> = AssetTypeFieldCreateFieldType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AssetTypeFieldCreateFieldType$ {
  /** @deprecated use `AssetTypeFieldCreateFieldType$inboundSchema` instead. */
  export const inboundSchema = AssetTypeFieldCreateFieldType$inboundSchema;
  /** @deprecated use `AssetTypeFieldCreateFieldType$outboundSchema` instead. */
  export const outboundSchema = AssetTypeFieldCreateFieldType$outboundSchema;
}

/** @internal */
export const AssetTypeFieldCreateFieldData$inboundSchema: z.ZodType<
  AssetTypeFieldCreateFieldData,
  z.ZodTypeDef,
  unknown
> = z.object({
  fieldType: AssetTypeFieldCreateFieldType$inboundSchema,
  mandatory: z.boolean(),
  choices: z.array(z.string()).optional(),
});

/** @internal */
export type AssetTypeFieldCreateFieldData$Outbound = {
  fieldType: string;
  mandatory: boolean;
  choices?: Array<string> | undefined;
};

/** @internal */
export const AssetTypeFieldCreateFieldData$outboundSchema: z.ZodType<
  AssetTypeFieldCreateFieldData$Outbound,
  z.ZodTypeDef,
  AssetTypeFieldCreateFieldData
> = z.object({
  fieldType: AssetTypeFieldCreateFieldType$outboundSchema,
  mandatory: z.boolean(),
  choices: z.array(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AssetTypeFieldCreateFieldData$ {
  /** @deprecated use `AssetTypeFieldCreateFieldData$inboundSchema` instead. */
  export const inboundSchema = AssetTypeFieldCreateFieldData$inboundSchema;
  /** @deprecated use `AssetTypeFieldCreateFieldData$outboundSchema` instead. */
  export const outboundSchema = AssetTypeFieldCreateFieldData$outboundSchema;
  /** @deprecated use `AssetTypeFieldCreateFieldData$Outbound` instead. */
  export type Outbound = AssetTypeFieldCreateFieldData$Outbound;
}

export function assetTypeFieldCreateFieldDataToJSON(
  assetTypeFieldCreateFieldData: AssetTypeFieldCreateFieldData,
): string {
  return JSON.stringify(
    AssetTypeFieldCreateFieldData$outboundSchema.parse(
      assetTypeFieldCreateFieldData,
    ),
  );
}

export function assetTypeFieldCreateFieldDataFromJSON(
  jsonString: string,
): SafeParseResult<AssetTypeFieldCreateFieldData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AssetTypeFieldCreateFieldData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AssetTypeFieldCreateFieldData' from JSON`,
  );
}

/** @internal */
export const AssetTypeFieldCreate$inboundSchema: z.ZodType<
  AssetTypeFieldCreate,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string().optional(),
  name: z.string(),
  field_data: z.lazy(() => AssetTypeFieldCreateFieldData$inboundSchema)
    .optional(),
  sort_order: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    "field_data": "fieldData",
    "sort_order": "sortOrder",
  });
});

/** @internal */
export type AssetTypeFieldCreate$Outbound = {
  uuid?: string | undefined;
  name: string;
  field_data?: AssetTypeFieldCreateFieldData$Outbound | undefined;
  sort_order?: number | undefined;
};

/** @internal */
export const AssetTypeFieldCreate$outboundSchema: z.ZodType<
  AssetTypeFieldCreate$Outbound,
  z.ZodTypeDef,
  AssetTypeFieldCreate
> = z.object({
  uuid: z.string().optional(),
  name: z.string(),
  fieldData: z.lazy(() => AssetTypeFieldCreateFieldData$outboundSchema)
    .optional(),
  sortOrder: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    fieldData: "field_data",
    sortOrder: "sort_order",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AssetTypeFieldCreate$ {
  /** @deprecated use `AssetTypeFieldCreate$inboundSchema` instead. */
  export const inboundSchema = AssetTypeFieldCreate$inboundSchema;
  /** @deprecated use `AssetTypeFieldCreate$outboundSchema` instead. */
  export const outboundSchema = AssetTypeFieldCreate$outboundSchema;
  /** @deprecated use `AssetTypeFieldCreate$Outbound` instead. */
  export type Outbound = AssetTypeFieldCreate$Outbound;
}

export function assetTypeFieldCreateToJSON(
  assetTypeFieldCreate: AssetTypeFieldCreate,
): string {
  return JSON.stringify(
    AssetTypeFieldCreate$outboundSchema.parse(assetTypeFieldCreate),
  );
}

export function assetTypeFieldCreateFromJSON(
  jsonString: string,
): SafeParseResult<AssetTypeFieldCreate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AssetTypeFieldCreate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AssetTypeFieldCreate' from JSON`,
  );
}
