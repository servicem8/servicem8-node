/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Record active/deleted flag.  Valid values are [0,1]
 */
export const SupplierActive = {
  Zero: 0,
  One: 1,
} as const;
/**
 * Record active/deleted flag.  Valid values are [0,1]
 */
export type SupplierActive = ClosedEnum<typeof SupplierActive>;

/**
 * Whether the geocoded coordinates are valid (Read only).  Valid values are [0,1]
 */
export const SupplierGeoIsValid = {
  Zero: 0,
  One: 1,
} as const;
/**
 * Whether the geocoded coordinates are valid (Read only).  Valid values are [0,1]
 */
export type SupplierGeoIsValid = ClosedEnum<typeof SupplierGeoIsValid>;

export type Supplier = {
  /**
   * Unique identifier for this record
   */
  uuid?: string | undefined;
  /**
   * Record active/deleted flag.  Valid values are [0,1]
   */
  active?: SupplierActive | undefined;
  /**
   * Timestamp at which record was last modified
   */
  editDate?: any | undefined;
  /**
   * The name of the supplier company
   */
  name?: string | undefined;
  /**
   * Business registration number (e.g., ABN, EIN)
   */
  businessNumber?: string | undefined;
  /**
   * Physical address of the supplier store
   */
  address?: string | undefined;
  /**
   * Primary contact email address
   */
  email?: string | undefined;
  /**
   * Primary contact phone number
   */
  phone?: string | undefined;
  /**
   * Your account number with this supplier
   */
  accountNumber?: string | undefined;
  /**
   * Longitude coordinate of the supplier's address (Read only)
   */
  lng?: number | undefined;
  /**
   * Latitude coordinate of the supplier's address (Read only)
   */
  lat?: number | undefined;
  /**
   * Whether the geocoded coordinates are valid (Read only).  Valid values are [0,1]
   */
  geoIsValid?: SupplierGeoIsValid | undefined;
  /**
   * Country from geocoded address (Read only)
   */
  geoCountry?: string | undefined;
  /**
   * Postcode from geocoded address (Read only)
   */
  geoPostcode?: string | undefined;
  /**
   * State from geocoded address (Read only)
   */
  geoState?: string | undefined;
  /**
   * City from geocoded address (Read only)
   */
  geoCity?: string | undefined;
  /**
   * Street name from geocoded address (Read only)
   */
  geoStreet?: string | undefined;
  /**
   * Street number from geocoded address (Read only)
   */
  geoNumber?: string | undefined;
};

/** @internal */
export const SupplierActive$inboundSchema: z.ZodNativeEnum<
  typeof SupplierActive
> = z.nativeEnum(SupplierActive);

/** @internal */
export const SupplierActive$outboundSchema: z.ZodNativeEnum<
  typeof SupplierActive
> = SupplierActive$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SupplierActive$ {
  /** @deprecated use `SupplierActive$inboundSchema` instead. */
  export const inboundSchema = SupplierActive$inboundSchema;
  /** @deprecated use `SupplierActive$outboundSchema` instead. */
  export const outboundSchema = SupplierActive$outboundSchema;
}

/** @internal */
export const SupplierGeoIsValid$inboundSchema: z.ZodNativeEnum<
  typeof SupplierGeoIsValid
> = z.nativeEnum(SupplierGeoIsValid);

/** @internal */
export const SupplierGeoIsValid$outboundSchema: z.ZodNativeEnum<
  typeof SupplierGeoIsValid
> = SupplierGeoIsValid$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SupplierGeoIsValid$ {
  /** @deprecated use `SupplierGeoIsValid$inboundSchema` instead. */
  export const inboundSchema = SupplierGeoIsValid$inboundSchema;
  /** @deprecated use `SupplierGeoIsValid$outboundSchema` instead. */
  export const outboundSchema = SupplierGeoIsValid$outboundSchema;
}

/** @internal */
export const Supplier$inboundSchema: z.ZodType<
  Supplier,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string().optional(),
  active: SupplierActive$inboundSchema.default(1),
  edit_date: z.any().optional(),
  name: z.string().optional(),
  business_number: z.string().optional(),
  address: z.string().optional(),
  email: z.string().optional(),
  phone: z.string().optional(),
  account_number: z.string().optional(),
  lng: z.number().optional(),
  lat: z.number().optional(),
  geo_is_valid: SupplierGeoIsValid$inboundSchema.optional(),
  geo_country: z.string().optional(),
  geo_postcode: z.string().optional(),
  geo_state: z.string().optional(),
  geo_city: z.string().optional(),
  geo_street: z.string().optional(),
  geo_number: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "edit_date": "editDate",
    "business_number": "businessNumber",
    "account_number": "accountNumber",
    "geo_is_valid": "geoIsValid",
    "geo_country": "geoCountry",
    "geo_postcode": "geoPostcode",
    "geo_state": "geoState",
    "geo_city": "geoCity",
    "geo_street": "geoStreet",
    "geo_number": "geoNumber",
  });
});

/** @internal */
export type Supplier$Outbound = {
  uuid?: string | undefined;
  active: number;
  edit_date?: any | undefined;
  name?: string | undefined;
  business_number?: string | undefined;
  address?: string | undefined;
  email?: string | undefined;
  phone?: string | undefined;
  account_number?: string | undefined;
  lng?: number | undefined;
  lat?: number | undefined;
  geo_is_valid?: number | undefined;
  geo_country?: string | undefined;
  geo_postcode?: string | undefined;
  geo_state?: string | undefined;
  geo_city?: string | undefined;
  geo_street?: string | undefined;
  geo_number?: string | undefined;
};

/** @internal */
export const Supplier$outboundSchema: z.ZodType<
  Supplier$Outbound,
  z.ZodTypeDef,
  Supplier
> = z.object({
  uuid: z.string().optional(),
  active: SupplierActive$outboundSchema.default(1),
  editDate: z.any().optional(),
  name: z.string().optional(),
  businessNumber: z.string().optional(),
  address: z.string().optional(),
  email: z.string().optional(),
  phone: z.string().optional(),
  accountNumber: z.string().optional(),
  lng: z.number().optional(),
  lat: z.number().optional(),
  geoIsValid: SupplierGeoIsValid$outboundSchema.optional(),
  geoCountry: z.string().optional(),
  geoPostcode: z.string().optional(),
  geoState: z.string().optional(),
  geoCity: z.string().optional(),
  geoStreet: z.string().optional(),
  geoNumber: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    editDate: "edit_date",
    businessNumber: "business_number",
    accountNumber: "account_number",
    geoIsValid: "geo_is_valid",
    geoCountry: "geo_country",
    geoPostcode: "geo_postcode",
    geoState: "geo_state",
    geoCity: "geo_city",
    geoStreet: "geo_street",
    geoNumber: "geo_number",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Supplier$ {
  /** @deprecated use `Supplier$inboundSchema` instead. */
  export const inboundSchema = Supplier$inboundSchema;
  /** @deprecated use `Supplier$outboundSchema` instead. */
  export const outboundSchema = Supplier$outboundSchema;
  /** @deprecated use `Supplier$Outbound` instead. */
  export type Outbound = Supplier$Outbound;
}

export function supplierToJSON(supplier: Supplier): string {
  return JSON.stringify(Supplier$outboundSchema.parse(supplier));
}

export function supplierFromJSON(
  jsonString: string,
): SafeParseResult<Supplier, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Supplier$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Supplier' from JSON`,
  );
}
