/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ConvertToJobRequest = {
  templateUuid?: string | null | undefined;
  note?: string | null | undefined;
};

/** @internal */
export const ConvertToJobRequest$inboundSchema: z.ZodType<
  ConvertToJobRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  template_uuid: z.nullable(z.string()).optional(),
  note: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "template_uuid": "templateUuid",
  });
});

/** @internal */
export type ConvertToJobRequest$Outbound = {
  template_uuid?: string | null | undefined;
  note?: string | null | undefined;
};

/** @internal */
export const ConvertToJobRequest$outboundSchema: z.ZodType<
  ConvertToJobRequest$Outbound,
  z.ZodTypeDef,
  ConvertToJobRequest
> = z.object({
  templateUuid: z.nullable(z.string()).optional(),
  note: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    templateUuid: "template_uuid",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConvertToJobRequest$ {
  /** @deprecated use `ConvertToJobRequest$inboundSchema` instead. */
  export const inboundSchema = ConvertToJobRequest$inboundSchema;
  /** @deprecated use `ConvertToJobRequest$outboundSchema` instead. */
  export const outboundSchema = ConvertToJobRequest$outboundSchema;
  /** @deprecated use `ConvertToJobRequest$Outbound` instead. */
  export type Outbound = ConvertToJobRequest$Outbound;
}

export function convertToJobRequestToJSON(
  convertToJobRequest: ConvertToJobRequest,
): string {
  return JSON.stringify(
    ConvertToJobRequest$outboundSchema.parse(convertToJobRequest),
  );
}

export function convertToJobRequestFromJSON(
  jsonString: string,
): SafeParseResult<ConvertToJobRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ConvertToJobRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ConvertToJobRequest' from JSON`,
  );
}
