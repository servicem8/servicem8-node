/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Record active/deleted flag.  Valid values are [0,1]
 */
export const StaffMessageActive = {
  Zero: 0,
  One: 1,
} as const;
/**
 * Record active/deleted flag.  Valid values are [0,1]
 */
export type StaffMessageActive = ClosedEnum<typeof StaffMessageActive>;

export type StaffMessage = {
  /**
   * Unique identifier (UUID) of the staff member who sent this message. Identifies the sender of the communication within the system.
   */
  fromStaffUuid?: string | undefined;
  /**
   * Unique identifier (UUID) of the staff member who received this message. Identifies the intended recipient of the communication.
   */
  toStaffUuid?: string | undefined;
  /**
   * The date and time when the message was sent. Format is YYYY-MM-DD HH:MM:SS. This field is automatically set to the current time when a new message is created.
   */
  sentTimestamp?: string | undefined;
  /**
   * The date and time when the message was delivered to the recipient's device. Format is YYYY-MM-DD HH:MM:SS. This field may be null if delivery confirmation is not available.
   */
  deliveredTimestamp?: string | undefined;
  /**
   * The date and time when the message was read by the recipient. Format is YYYY-MM-DD HH:MM:SS. This field may be null if the message has not been read or if read receipts are not available.
   */
  readTimestamp?: string | undefined;
  /**
   * The text content of the message. Supports Unicode characters for international language support. This field contains the actual message being sent between staff members.
   */
  message?: string | undefined;
  /**
   * Unique identifier (UUID) of the job this message is related to. Optional field that links the message to a specific job for context. This field may be null if the message is not related to a specific job.
   */
  regardingJobUuid?: string | undefined;
  /**
   * Unique identifier for this record
   */
  uuid?: string | undefined;
  /**
   * Record active/deleted flag.  Valid values are [0,1]
   */
  active?: StaffMessageActive | undefined;
  /**
   * Timestamp at which record was last modified
   */
  editDate?: any | undefined;
  attachedJson?: string | undefined;
};

/** @internal */
export const StaffMessageActive$inboundSchema: z.ZodNativeEnum<
  typeof StaffMessageActive
> = z.nativeEnum(StaffMessageActive);

/** @internal */
export const StaffMessageActive$outboundSchema: z.ZodNativeEnum<
  typeof StaffMessageActive
> = StaffMessageActive$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StaffMessageActive$ {
  /** @deprecated use `StaffMessageActive$inboundSchema` instead. */
  export const inboundSchema = StaffMessageActive$inboundSchema;
  /** @deprecated use `StaffMessageActive$outboundSchema` instead. */
  export const outboundSchema = StaffMessageActive$outboundSchema;
}

/** @internal */
export const StaffMessage$inboundSchema: z.ZodType<
  StaffMessage,
  z.ZodTypeDef,
  unknown
> = z.object({
  from_staff_uuid: z.string().optional(),
  to_staff_uuid: z.string().optional(),
  sent_timestamp: z.string().optional(),
  delivered_timestamp: z.string().optional(),
  read_timestamp: z.string().optional(),
  message: z.string().optional(),
  regarding_job_uuid: z.string().optional(),
  uuid: z.string().optional(),
  active: StaffMessageActive$inboundSchema.default(1),
  edit_date: z.any().optional(),
  attached_json: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "from_staff_uuid": "fromStaffUuid",
    "to_staff_uuid": "toStaffUuid",
    "sent_timestamp": "sentTimestamp",
    "delivered_timestamp": "deliveredTimestamp",
    "read_timestamp": "readTimestamp",
    "regarding_job_uuid": "regardingJobUuid",
    "edit_date": "editDate",
    "attached_json": "attachedJson",
  });
});

/** @internal */
export type StaffMessage$Outbound = {
  from_staff_uuid?: string | undefined;
  to_staff_uuid?: string | undefined;
  sent_timestamp?: string | undefined;
  delivered_timestamp?: string | undefined;
  read_timestamp?: string | undefined;
  message?: string | undefined;
  regarding_job_uuid?: string | undefined;
  uuid?: string | undefined;
  active: number;
  edit_date?: any | undefined;
  attached_json?: string | undefined;
};

/** @internal */
export const StaffMessage$outboundSchema: z.ZodType<
  StaffMessage$Outbound,
  z.ZodTypeDef,
  StaffMessage
> = z.object({
  fromStaffUuid: z.string().optional(),
  toStaffUuid: z.string().optional(),
  sentTimestamp: z.string().optional(),
  deliveredTimestamp: z.string().optional(),
  readTimestamp: z.string().optional(),
  message: z.string().optional(),
  regardingJobUuid: z.string().optional(),
  uuid: z.string().optional(),
  active: StaffMessageActive$outboundSchema.default(1),
  editDate: z.any().optional(),
  attachedJson: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    fromStaffUuid: "from_staff_uuid",
    toStaffUuid: "to_staff_uuid",
    sentTimestamp: "sent_timestamp",
    deliveredTimestamp: "delivered_timestamp",
    readTimestamp: "read_timestamp",
    regardingJobUuid: "regarding_job_uuid",
    editDate: "edit_date",
    attachedJson: "attached_json",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StaffMessage$ {
  /** @deprecated use `StaffMessage$inboundSchema` instead. */
  export const inboundSchema = StaffMessage$inboundSchema;
  /** @deprecated use `StaffMessage$outboundSchema` instead. */
  export const outboundSchema = StaffMessage$outboundSchema;
  /** @deprecated use `StaffMessage$Outbound` instead. */
  export type Outbound = StaffMessage$Outbound;
}

export function staffMessageToJSON(staffMessage: StaffMessage): string {
  return JSON.stringify(StaffMessage$outboundSchema.parse(staffMessage));
}

export function staffMessageFromJSON(
  jsonString: string,
): SafeParseResult<StaffMessage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StaffMessage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StaffMessage' from JSON`,
  );
}
