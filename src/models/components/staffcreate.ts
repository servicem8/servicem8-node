/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Boolean flag controlling whether this staff member appears in the schedule view. When true (1), the staff member is hidden from the schedule. When false (0), they appear normally in scheduling interfaces..  Valid values are [0,1]
 */
export const StaffCreateHideFromSchedule = {
  Zero: 0,
  One: 1,
} as const;
/**
 * Boolean flag controlling whether this staff member appears in the schedule view. When true (1), the staff member is hidden from the schedule. When false (0), they appear normally in scheduling interfaces..  Valid values are [0,1]
 */
export type StaffCreateHideFromSchedule = ClosedEnum<
  typeof StaffCreateHideFromSchedule
>;

export type StaffCreate = {
  /**
   * Staff First Name
   */
  first: string;
  /**
   * Staff Last Name
   */
  last: string;
  /**
   * Staff Email Address. This is also your login name.
   */
  email: string;
  /**
   * Mobile phone number of the staff member. Used for SMS communications and identification when calling.
   */
  mobile?: string | undefined;
  /**
   * Longitude coordinate of the staff member's current or last known location. Used for tracking staff locations and calculating routes and travel distances.
   */
  lng?: number | undefined;
  /**
   * Latitude coordinate of the staff member's current or last known location. Used for tracking staff locations and calculating routes and travel distances.
   */
  lat?: number | undefined;
  /**
   * The date and time when the staff member's geographic location (lat/lng) was last updated. Format is YYYY-MM-DD HH:MM:SS. Used to determine how recent the location data is.
   */
  geoTimestamp?: string | undefined;
  /**
   * The staff member's job title or role within the organization. Used for organizational purposes and displayed in various places throughout the system.
   */
  jobTitle?: string | undefined;
  /**
   * UUID of the job the staff member is currently navigating to. Used to track which job a staff member is traveling toward.
   */
  navigatingToJobUuid?: string | undefined;
  /**
   * The date and time when the staff member started navigating to a job. Format is YYYY-MM-DD HH:MM:SS. Used to track when navigation began.
   */
  navigatingTimestamp?: string | undefined;
  /**
   * The date and time when navigation to a job is expected to complete or expire. Format is YYYY-MM-DD HH:MM:SS. Used to determine if navigation is still active.
   */
  navigatingExpiryTimestamp?: string | undefined;
  /**
   * The color assigned to this staff member, represented as a hex color code. Used for visual identification in the schedule, dispatch board, and other interfaces.
   */
  color?: string | undefined;
  /**
   * DEPRECATED
   */
  customIconUrl?: any | undefined;
  /**
   * Short message summarising the staff's current status.
   */
  statusMessage?: string | undefined;
  /**
   * The date and time when the staff member's status message was last updated. Format is YYYY-MM-DD HH:MM:SS. Used to determine how recent the status message is.
   */
  statusMessageTimestamp?: string | undefined;
  /**
   * Boolean flag controlling whether this staff member appears in the schedule view. When true (1), the staff member is hidden from the schedule. When false (0), they appear normally in scheduling interfaces..  Valid values are [0,1]
   */
  hideFromSchedule?: StaffCreateHideFromSchedule | undefined;
  /**
   * Unique identifier for this record
   */
  uuid?: string | undefined;
  canReceivePushNotification?: string | undefined;
  securityRoleUuid?: string | undefined;
  labourMaterialUuid?: string | undefined;
};

/** @internal */
export const StaffCreateHideFromSchedule$inboundSchema: z.ZodNativeEnum<
  typeof StaffCreateHideFromSchedule
> = z.nativeEnum(StaffCreateHideFromSchedule);

/** @internal */
export const StaffCreateHideFromSchedule$outboundSchema: z.ZodNativeEnum<
  typeof StaffCreateHideFromSchedule
> = StaffCreateHideFromSchedule$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StaffCreateHideFromSchedule$ {
  /** @deprecated use `StaffCreateHideFromSchedule$inboundSchema` instead. */
  export const inboundSchema = StaffCreateHideFromSchedule$inboundSchema;
  /** @deprecated use `StaffCreateHideFromSchedule$outboundSchema` instead. */
  export const outboundSchema = StaffCreateHideFromSchedule$outboundSchema;
}

/** @internal */
export const StaffCreate$inboundSchema: z.ZodType<
  StaffCreate,
  z.ZodTypeDef,
  unknown
> = z.object({
  first: z.string(),
  last: z.string(),
  email: z.string(),
  mobile: z.string().optional(),
  lng: z.number().optional(),
  lat: z.number().optional(),
  geo_timestamp: z.string().optional(),
  job_title: z.string().optional(),
  navigating_to_job_uuid: z.string().optional(),
  navigating_timestamp: z.string().optional(),
  navigating_expiry_timestamp: z.string().optional(),
  color: z.string().optional(),
  custom_icon_url: z.any().optional(),
  status_message: z.string().optional(),
  status_message_timestamp: z.string().optional(),
  hide_from_schedule: StaffCreateHideFromSchedule$inboundSchema.optional(),
  uuid: z.string().optional(),
  can_receive_push_notification: z.string().optional(),
  security_role_uuid: z.string().optional(),
  labour_material_uuid: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "geo_timestamp": "geoTimestamp",
    "job_title": "jobTitle",
    "navigating_to_job_uuid": "navigatingToJobUuid",
    "navigating_timestamp": "navigatingTimestamp",
    "navigating_expiry_timestamp": "navigatingExpiryTimestamp",
    "custom_icon_url": "customIconUrl",
    "status_message": "statusMessage",
    "status_message_timestamp": "statusMessageTimestamp",
    "hide_from_schedule": "hideFromSchedule",
    "can_receive_push_notification": "canReceivePushNotification",
    "security_role_uuid": "securityRoleUuid",
    "labour_material_uuid": "labourMaterialUuid",
  });
});

/** @internal */
export type StaffCreate$Outbound = {
  first: string;
  last: string;
  email: string;
  mobile?: string | undefined;
  lng?: number | undefined;
  lat?: number | undefined;
  geo_timestamp?: string | undefined;
  job_title?: string | undefined;
  navigating_to_job_uuid?: string | undefined;
  navigating_timestamp?: string | undefined;
  navigating_expiry_timestamp?: string | undefined;
  color?: string | undefined;
  custom_icon_url?: any | undefined;
  status_message?: string | undefined;
  status_message_timestamp?: string | undefined;
  hide_from_schedule?: number | undefined;
  uuid?: string | undefined;
  can_receive_push_notification?: string | undefined;
  security_role_uuid?: string | undefined;
  labour_material_uuid?: string | undefined;
};

/** @internal */
export const StaffCreate$outboundSchema: z.ZodType<
  StaffCreate$Outbound,
  z.ZodTypeDef,
  StaffCreate
> = z.object({
  first: z.string(),
  last: z.string(),
  email: z.string(),
  mobile: z.string().optional(),
  lng: z.number().optional(),
  lat: z.number().optional(),
  geoTimestamp: z.string().optional(),
  jobTitle: z.string().optional(),
  navigatingToJobUuid: z.string().optional(),
  navigatingTimestamp: z.string().optional(),
  navigatingExpiryTimestamp: z.string().optional(),
  color: z.string().optional(),
  customIconUrl: z.any().optional(),
  statusMessage: z.string().optional(),
  statusMessageTimestamp: z.string().optional(),
  hideFromSchedule: StaffCreateHideFromSchedule$outboundSchema.optional(),
  uuid: z.string().optional(),
  canReceivePushNotification: z.string().optional(),
  securityRoleUuid: z.string().optional(),
  labourMaterialUuid: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    geoTimestamp: "geo_timestamp",
    jobTitle: "job_title",
    navigatingToJobUuid: "navigating_to_job_uuid",
    navigatingTimestamp: "navigating_timestamp",
    navigatingExpiryTimestamp: "navigating_expiry_timestamp",
    customIconUrl: "custom_icon_url",
    statusMessage: "status_message",
    statusMessageTimestamp: "status_message_timestamp",
    hideFromSchedule: "hide_from_schedule",
    canReceivePushNotification: "can_receive_push_notification",
    securityRoleUuid: "security_role_uuid",
    labourMaterialUuid: "labour_material_uuid",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StaffCreate$ {
  /** @deprecated use `StaffCreate$inboundSchema` instead. */
  export const inboundSchema = StaffCreate$inboundSchema;
  /** @deprecated use `StaffCreate$outboundSchema` instead. */
  export const outboundSchema = StaffCreate$outboundSchema;
  /** @deprecated use `StaffCreate$Outbound` instead. */
  export type Outbound = StaffCreate$Outbound;
}

export function staffCreateToJSON(staffCreate: StaffCreate): string {
  return JSON.stringify(StaffCreate$outboundSchema.parse(staffCreate));
}

export function staffCreateFromJSON(
  jsonString: string,
): SafeParseResult<StaffCreate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StaffCreate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StaffCreate' from JSON`,
  );
}
