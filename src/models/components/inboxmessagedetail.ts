/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const InboxMessageDetailMessageType = {
  Email: "email",
  Sms: "sms",
  OnlineBooking: "online_booking",
  PhoneCall: "phone_call",
  Reminder: "reminder",
  Form: "form",
  NetworkRequest: "network_request",
  SupplierInvoice: "supplier_invoice",
  Asset: "asset",
  PartnerLead: "partner_lead",
  Automation: "automation",
} as const;
export type InboxMessageDetailMessageType = ClosedEnum<
  typeof InboxMessageDetailMessageType
>;

export type InboxMessageDetail = {
  uuid?: string | undefined;
  active?: boolean | undefined;
  editDate?: Date | undefined;
  timestamp?: Date | undefined;
  readTimestamp?: Date | null | undefined;
  lastReplyTimestamp?: Date | null | undefined;
  snoozeUntilTimestamp?: Date | null | undefined;
  readByStaffUuid?: string | null | undefined;
  fromName?: string | undefined;
  fromEmail?: string | undefined;
  toEmail?: string | undefined;
  subject?: string | undefined;
  messageText?: string | undefined;
  messageHtml?: string | undefined;
  isArchived?: boolean | undefined;
  archivedTimestamp?: Date | null | undefined;
  archivedByStaffUuid?: string | null | undefined;
  regardingCompanyUuid?: string | null | undefined;
  convertedToJobUuid?: string | null | undefined;
  jobTemplateUuid?: string | null | undefined;
  messageType?: InboxMessageDetailMessageType | undefined;
};

/** @internal */
export const InboxMessageDetailMessageType$inboundSchema: z.ZodNativeEnum<
  typeof InboxMessageDetailMessageType
> = z.nativeEnum(InboxMessageDetailMessageType);

/** @internal */
export const InboxMessageDetailMessageType$outboundSchema: z.ZodNativeEnum<
  typeof InboxMessageDetailMessageType
> = InboxMessageDetailMessageType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InboxMessageDetailMessageType$ {
  /** @deprecated use `InboxMessageDetailMessageType$inboundSchema` instead. */
  export const inboundSchema = InboxMessageDetailMessageType$inboundSchema;
  /** @deprecated use `InboxMessageDetailMessageType$outboundSchema` instead. */
  export const outboundSchema = InboxMessageDetailMessageType$outboundSchema;
}

/** @internal */
export const InboxMessageDetail$inboundSchema: z.ZodType<
  InboxMessageDetail,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string().optional(),
  active: z.boolean().optional(),
  edit_date: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  timestamp: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  read_timestamp: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  last_reply_timestamp: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  snooze_until_timestamp: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  read_by_staff_uuid: z.nullable(z.string()).optional(),
  from_name: z.string().optional(),
  from_email: z.string().optional(),
  to_email: z.string().optional(),
  subject: z.string().optional(),
  message_text: z.string().optional(),
  message_html: z.string().optional(),
  is_archived: z.boolean().optional(),
  archived_timestamp: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  archived_by_staff_uuid: z.nullable(z.string()).optional(),
  regarding_company_uuid: z.nullable(z.string()).optional(),
  converted_to_job_uuid: z.nullable(z.string()).optional(),
  job_template_uuid: z.nullable(z.string()).optional(),
  message_type: InboxMessageDetailMessageType$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "edit_date": "editDate",
    "read_timestamp": "readTimestamp",
    "last_reply_timestamp": "lastReplyTimestamp",
    "snooze_until_timestamp": "snoozeUntilTimestamp",
    "read_by_staff_uuid": "readByStaffUuid",
    "from_name": "fromName",
    "from_email": "fromEmail",
    "to_email": "toEmail",
    "message_text": "messageText",
    "message_html": "messageHtml",
    "is_archived": "isArchived",
    "archived_timestamp": "archivedTimestamp",
    "archived_by_staff_uuid": "archivedByStaffUuid",
    "regarding_company_uuid": "regardingCompanyUuid",
    "converted_to_job_uuid": "convertedToJobUuid",
    "job_template_uuid": "jobTemplateUuid",
    "message_type": "messageType",
  });
});

/** @internal */
export type InboxMessageDetail$Outbound = {
  uuid?: string | undefined;
  active?: boolean | undefined;
  edit_date?: string | undefined;
  timestamp?: string | undefined;
  read_timestamp?: string | null | undefined;
  last_reply_timestamp?: string | null | undefined;
  snooze_until_timestamp?: string | null | undefined;
  read_by_staff_uuid?: string | null | undefined;
  from_name?: string | undefined;
  from_email?: string | undefined;
  to_email?: string | undefined;
  subject?: string | undefined;
  message_text?: string | undefined;
  message_html?: string | undefined;
  is_archived?: boolean | undefined;
  archived_timestamp?: string | null | undefined;
  archived_by_staff_uuid?: string | null | undefined;
  regarding_company_uuid?: string | null | undefined;
  converted_to_job_uuid?: string | null | undefined;
  job_template_uuid?: string | null | undefined;
  message_type?: string | undefined;
};

/** @internal */
export const InboxMessageDetail$outboundSchema: z.ZodType<
  InboxMessageDetail$Outbound,
  z.ZodTypeDef,
  InboxMessageDetail
> = z.object({
  uuid: z.string().optional(),
  active: z.boolean().optional(),
  editDate: z.date().transform(v => v.toISOString()).optional(),
  timestamp: z.date().transform(v => v.toISOString()).optional(),
  readTimestamp: z.nullable(z.date().transform(v => v.toISOString()))
    .optional(),
  lastReplyTimestamp: z.nullable(z.date().transform(v => v.toISOString()))
    .optional(),
  snoozeUntilTimestamp: z.nullable(z.date().transform(v => v.toISOString()))
    .optional(),
  readByStaffUuid: z.nullable(z.string()).optional(),
  fromName: z.string().optional(),
  fromEmail: z.string().optional(),
  toEmail: z.string().optional(),
  subject: z.string().optional(),
  messageText: z.string().optional(),
  messageHtml: z.string().optional(),
  isArchived: z.boolean().optional(),
  archivedTimestamp: z.nullable(z.date().transform(v => v.toISOString()))
    .optional(),
  archivedByStaffUuid: z.nullable(z.string()).optional(),
  regardingCompanyUuid: z.nullable(z.string()).optional(),
  convertedToJobUuid: z.nullable(z.string()).optional(),
  jobTemplateUuid: z.nullable(z.string()).optional(),
  messageType: InboxMessageDetailMessageType$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    editDate: "edit_date",
    readTimestamp: "read_timestamp",
    lastReplyTimestamp: "last_reply_timestamp",
    snoozeUntilTimestamp: "snooze_until_timestamp",
    readByStaffUuid: "read_by_staff_uuid",
    fromName: "from_name",
    fromEmail: "from_email",
    toEmail: "to_email",
    messageText: "message_text",
    messageHtml: "message_html",
    isArchived: "is_archived",
    archivedTimestamp: "archived_timestamp",
    archivedByStaffUuid: "archived_by_staff_uuid",
    regardingCompanyUuid: "regarding_company_uuid",
    convertedToJobUuid: "converted_to_job_uuid",
    jobTemplateUuid: "job_template_uuid",
    messageType: "message_type",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InboxMessageDetail$ {
  /** @deprecated use `InboxMessageDetail$inboundSchema` instead. */
  export const inboundSchema = InboxMessageDetail$inboundSchema;
  /** @deprecated use `InboxMessageDetail$outboundSchema` instead. */
  export const outboundSchema = InboxMessageDetail$outboundSchema;
  /** @deprecated use `InboxMessageDetail$Outbound` instead. */
  export type Outbound = InboxMessageDetail$Outbound;
}

export function inboxMessageDetailToJSON(
  inboxMessageDetail: InboxMessageDetail,
): string {
  return JSON.stringify(
    InboxMessageDetail$outboundSchema.parse(inboxMessageDetail),
  );
}

export function inboxMessageDetailFromJSON(
  jsonString: string,
): SafeParseResult<InboxMessageDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InboxMessageDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InboxMessageDetail' from JSON`,
  );
}
