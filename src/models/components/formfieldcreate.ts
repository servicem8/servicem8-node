/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type FormFieldCreate = {
  /**
   * The UUID of the form this field belongs to.
   */
  formUuid?: string | undefined;
  /**
   * The name of the form field.
   */
  name?: string | undefined;
  /**
   * JSON configuration for this question, including type, mandatory, choices and conditions.
   */
  fieldDataJson?: string | undefined;
  /**
   * The sort order of the form field.
   */
  sortOrder?: number | undefined;
  /**
   * Unique identifier for this record
   */
  uuid?: string | undefined;
};

/** @internal */
export const FormFieldCreate$inboundSchema: z.ZodType<
  FormFieldCreate,
  z.ZodTypeDef,
  unknown
> = z.object({
  form_uuid: z.string().optional(),
  name: z.string().optional(),
  field_data_json: z.string().optional(),
  sort_order: z.number().int().optional(),
  uuid: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "form_uuid": "formUuid",
    "field_data_json": "fieldDataJson",
    "sort_order": "sortOrder",
  });
});

/** @internal */
export type FormFieldCreate$Outbound = {
  form_uuid?: string | undefined;
  name?: string | undefined;
  field_data_json?: string | undefined;
  sort_order?: number | undefined;
  uuid?: string | undefined;
};

/** @internal */
export const FormFieldCreate$outboundSchema: z.ZodType<
  FormFieldCreate$Outbound,
  z.ZodTypeDef,
  FormFieldCreate
> = z.object({
  formUuid: z.string().optional(),
  name: z.string().optional(),
  fieldDataJson: z.string().optional(),
  sortOrder: z.number().int().optional(),
  uuid: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    formUuid: "form_uuid",
    fieldDataJson: "field_data_json",
    sortOrder: "sort_order",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FormFieldCreate$ {
  /** @deprecated use `FormFieldCreate$inboundSchema` instead. */
  export const inboundSchema = FormFieldCreate$inboundSchema;
  /** @deprecated use `FormFieldCreate$outboundSchema` instead. */
  export const outboundSchema = FormFieldCreate$outboundSchema;
  /** @deprecated use `FormFieldCreate$Outbound` instead. */
  export type Outbound = FormFieldCreate$Outbound;
}

export function formFieldCreateToJSON(
  formFieldCreate: FormFieldCreate,
): string {
  return JSON.stringify(FormFieldCreate$outboundSchema.parse(formFieldCreate));
}

export function formFieldCreateFromJSON(
  jsonString: string,
): SafeParseResult<FormFieldCreate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FormFieldCreate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FormFieldCreate' from JSON`,
  );
}
