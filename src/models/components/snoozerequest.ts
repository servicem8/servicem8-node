/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type SnoozeRequest = {
  /**
   * ISO 8601 datetime to snooze until, or null to unsnooze
   */
  snoozeUntil?: Date | null | undefined;
  note?: string | null | undefined;
};

/** @internal */
export const SnoozeRequest$inboundSchema: z.ZodType<
  SnoozeRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  snooze_until: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  note: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "snooze_until": "snoozeUntil",
  });
});

/** @internal */
export type SnoozeRequest$Outbound = {
  snooze_until?: string | null | undefined;
  note?: string | null | undefined;
};

/** @internal */
export const SnoozeRequest$outboundSchema: z.ZodType<
  SnoozeRequest$Outbound,
  z.ZodTypeDef,
  SnoozeRequest
> = z.object({
  snoozeUntil: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  note: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    snoozeUntil: "snooze_until",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SnoozeRequest$ {
  /** @deprecated use `SnoozeRequest$inboundSchema` instead. */
  export const inboundSchema = SnoozeRequest$inboundSchema;
  /** @deprecated use `SnoozeRequest$outboundSchema` instead. */
  export const outboundSchema = SnoozeRequest$outboundSchema;
  /** @deprecated use `SnoozeRequest$Outbound` instead. */
  export type Outbound = SnoozeRequest$Outbound;
}

export function snoozeRequestToJSON(snoozeRequest: SnoozeRequest): string {
  return JSON.stringify(SnoozeRequest$outboundSchema.parse(snoozeRequest));
}

export function snoozeRequestFromJSON(
  jsonString: string,
): SafeParseResult<SnoozeRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SnoozeRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SnoozeRequest' from JSON`,
  );
}
