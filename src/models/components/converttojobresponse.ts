/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ConvertToJobResponseJob = {
  uuid?: string | undefined;
  id?: number | undefined;
  jobNumber?: string | undefined;
  location?: string | undefined;
};

export type ConvertToJobResponse = {
  success?: boolean | undefined;
  job?: ConvertToJobResponseJob | undefined;
  message?: string | undefined;
};

/** @internal */
export const ConvertToJobResponseJob$inboundSchema: z.ZodType<
  ConvertToJobResponseJob,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string().optional(),
  id: z.number().int().optional(),
  job_number: z.string().optional(),
  location: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "job_number": "jobNumber",
  });
});

/** @internal */
export type ConvertToJobResponseJob$Outbound = {
  uuid?: string | undefined;
  id?: number | undefined;
  job_number?: string | undefined;
  location?: string | undefined;
};

/** @internal */
export const ConvertToJobResponseJob$outboundSchema: z.ZodType<
  ConvertToJobResponseJob$Outbound,
  z.ZodTypeDef,
  ConvertToJobResponseJob
> = z.object({
  uuid: z.string().optional(),
  id: z.number().int().optional(),
  jobNumber: z.string().optional(),
  location: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    jobNumber: "job_number",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConvertToJobResponseJob$ {
  /** @deprecated use `ConvertToJobResponseJob$inboundSchema` instead. */
  export const inboundSchema = ConvertToJobResponseJob$inboundSchema;
  /** @deprecated use `ConvertToJobResponseJob$outboundSchema` instead. */
  export const outboundSchema = ConvertToJobResponseJob$outboundSchema;
  /** @deprecated use `ConvertToJobResponseJob$Outbound` instead. */
  export type Outbound = ConvertToJobResponseJob$Outbound;
}

export function convertToJobResponseJobToJSON(
  convertToJobResponseJob: ConvertToJobResponseJob,
): string {
  return JSON.stringify(
    ConvertToJobResponseJob$outboundSchema.parse(convertToJobResponseJob),
  );
}

export function convertToJobResponseJobFromJSON(
  jsonString: string,
): SafeParseResult<ConvertToJobResponseJob, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ConvertToJobResponseJob$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ConvertToJobResponseJob' from JSON`,
  );
}

/** @internal */
export const ConvertToJobResponse$inboundSchema: z.ZodType<
  ConvertToJobResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  success: z.boolean().optional(),
  job: z.lazy(() => ConvertToJobResponseJob$inboundSchema).optional(),
  message: z.string().optional(),
});

/** @internal */
export type ConvertToJobResponse$Outbound = {
  success?: boolean | undefined;
  job?: ConvertToJobResponseJob$Outbound | undefined;
  message?: string | undefined;
};

/** @internal */
export const ConvertToJobResponse$outboundSchema: z.ZodType<
  ConvertToJobResponse$Outbound,
  z.ZodTypeDef,
  ConvertToJobResponse
> = z.object({
  success: z.boolean().optional(),
  job: z.lazy(() => ConvertToJobResponseJob$outboundSchema).optional(),
  message: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConvertToJobResponse$ {
  /** @deprecated use `ConvertToJobResponse$inboundSchema` instead. */
  export const inboundSchema = ConvertToJobResponse$inboundSchema;
  /** @deprecated use `ConvertToJobResponse$outboundSchema` instead. */
  export const outboundSchema = ConvertToJobResponse$outboundSchema;
  /** @deprecated use `ConvertToJobResponse$Outbound` instead. */
  export type Outbound = ConvertToJobResponse$Outbound;
}

export function convertToJobResponseToJSON(
  convertToJobResponse: ConvertToJobResponse,
): string {
  return JSON.stringify(
    ConvertToJobResponse$outboundSchema.parse(convertToJobResponse),
  );
}

export function convertToJobResponseFromJSON(
  jsonString: string,
): SafeParseResult<ConvertToJobResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ConvertToJobResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ConvertToJobResponse' from JSON`,
  );
}
