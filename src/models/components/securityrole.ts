/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Record active/deleted flag.  Valid values are [0,1]
 */
export const SecurityRoleActive = {
  Zero: 0,
  One: 1,
} as const;
/**
 * Record active/deleted flag.  Valid values are [0,1]
 */
export type SecurityRoleActive = ClosedEnum<typeof SecurityRoleActive>;

/** @internal */
export const SecurityRoleActive$inboundSchema: z.ZodNativeEnum<
  typeof SecurityRoleActive
> = z.nativeEnum(SecurityRoleActive);

/** @internal */
export const SecurityRoleActive$outboundSchema: z.ZodNativeEnum<
  typeof SecurityRoleActive
> = SecurityRoleActive$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SecurityRoleActive$ {
  /** @deprecated use `SecurityRoleActive$inboundSchema` instead. */
  export const inboundSchema = SecurityRoleActive$inboundSchema;
  /** @deprecated use `SecurityRoleActive$outboundSchema` instead. */
  export const outboundSchema = SecurityRoleActive$outboundSchema;
}

export type SecurityRole = {
  /**
   * The name given to the security role
   */
  name: string;
  /**
   * A detailed description of the security role's purpose and permissions. This field provides information about what access and capabilities are granted to users assigned this role.
   */
  roleDescription?: string | undefined;
  /**
   * Unique identifier for this record
   */
  uuid?: string | undefined;
  /**
   * Record active/deleted flag.  Valid values are [0,1]
   */
  active?: SecurityRoleActive | undefined;
  /**
   * Timestamp at which record was last modified
   */
  editDate?: any | undefined;
};

export type SecurityRoleInput = {
  /**
   * The name given to the security role
   */
  name: string;
  /**
   * A detailed description of the security role's purpose and permissions. This field provides information about what access and capabilities are granted to users assigned this role.
   */
  roleDescription?: string | undefined;
  /**
   * Unique identifier for this record
   */
  uuid?: string | undefined;
  /**
   * Record active/deleted flag.  Valid values are [0,1]
   */
  active?: SecurityRoleActive | undefined;
};

/** @internal */
export const SecurityRole$inboundSchema: z.ZodType<
  SecurityRole,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  role_description: z.string().optional(),
  uuid: z.string().optional(),
  active: SecurityRoleActive$inboundSchema.default(1),
  edit_date: z.any().optional(),
}).transform((v) => {
  return remap$(v, {
    "role_description": "roleDescription",
    "edit_date": "editDate",
  });
});

/** @internal */
export type SecurityRole$Outbound = {
  name: string;
  role_description?: string | undefined;
  uuid?: string | undefined;
  active: number;
  edit_date?: any | undefined;
};

/** @internal */
export const SecurityRole$outboundSchema: z.ZodType<
  SecurityRole$Outbound,
  z.ZodTypeDef,
  SecurityRole
> = z.object({
  name: z.string(),
  roleDescription: z.string().optional(),
  uuid: z.string().optional(),
  active: SecurityRoleActive$outboundSchema.default(1),
  editDate: z.any().optional(),
}).transform((v) => {
  return remap$(v, {
    roleDescription: "role_description",
    editDate: "edit_date",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SecurityRole$ {
  /** @deprecated use `SecurityRole$inboundSchema` instead. */
  export const inboundSchema = SecurityRole$inboundSchema;
  /** @deprecated use `SecurityRole$outboundSchema` instead. */
  export const outboundSchema = SecurityRole$outboundSchema;
  /** @deprecated use `SecurityRole$Outbound` instead. */
  export type Outbound = SecurityRole$Outbound;
}

export function securityRoleToJSON(securityRole: SecurityRole): string {
  return JSON.stringify(SecurityRole$outboundSchema.parse(securityRole));
}

export function securityRoleFromJSON(
  jsonString: string,
): SafeParseResult<SecurityRole, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SecurityRole$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SecurityRole' from JSON`,
  );
}

/** @internal */
export const SecurityRoleInput$inboundSchema: z.ZodType<
  SecurityRoleInput,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  role_description: z.string().optional(),
  uuid: z.string().optional(),
  active: SecurityRoleActive$inboundSchema.default(1),
}).transform((v) => {
  return remap$(v, {
    "role_description": "roleDescription",
  });
});

/** @internal */
export type SecurityRoleInput$Outbound = {
  name: string;
  role_description?: string | undefined;
  uuid?: string | undefined;
  active: number;
};

/** @internal */
export const SecurityRoleInput$outboundSchema: z.ZodType<
  SecurityRoleInput$Outbound,
  z.ZodTypeDef,
  SecurityRoleInput
> = z.object({
  name: z.string(),
  roleDescription: z.string().optional(),
  uuid: z.string().optional(),
  active: SecurityRoleActive$outboundSchema.default(1),
}).transform((v) => {
  return remap$(v, {
    roleDescription: "role_description",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SecurityRoleInput$ {
  /** @deprecated use `SecurityRoleInput$inboundSchema` instead. */
  export const inboundSchema = SecurityRoleInput$inboundSchema;
  /** @deprecated use `SecurityRoleInput$outboundSchema` instead. */
  export const outboundSchema = SecurityRoleInput$outboundSchema;
  /** @deprecated use `SecurityRoleInput$Outbound` instead. */
  export type Outbound = SecurityRoleInput$Outbound;
}

export function securityRoleInputToJSON(
  securityRoleInput: SecurityRoleInput,
): string {
  return JSON.stringify(
    SecurityRoleInput$outboundSchema.parse(securityRoleInput),
  );
}

export function securityRoleInputFromJSON(
  jsonString: string,
): SafeParseResult<SecurityRoleInput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SecurityRoleInput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SecurityRoleInput' from JSON`,
  );
}
