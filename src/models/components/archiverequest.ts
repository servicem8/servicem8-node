/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ArchiveRequest = {
  archived?: boolean | undefined;
  reason?: string | null | undefined;
};

/** @internal */
export const ArchiveRequest$inboundSchema: z.ZodType<
  ArchiveRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  archived: z.boolean().default(true),
  reason: z.nullable(z.string()).optional(),
});

/** @internal */
export type ArchiveRequest$Outbound = {
  archived: boolean;
  reason?: string | null | undefined;
};

/** @internal */
export const ArchiveRequest$outboundSchema: z.ZodType<
  ArchiveRequest$Outbound,
  z.ZodTypeDef,
  ArchiveRequest
> = z.object({
  archived: z.boolean().default(true),
  reason: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ArchiveRequest$ {
  /** @deprecated use `ArchiveRequest$inboundSchema` instead. */
  export const inboundSchema = ArchiveRequest$inboundSchema;
  /** @deprecated use `ArchiveRequest$outboundSchema` instead. */
  export const outboundSchema = ArchiveRequest$outboundSchema;
  /** @deprecated use `ArchiveRequest$Outbound` instead. */
  export type Outbound = ArchiveRequest$Outbound;
}

export function archiveRequestToJSON(archiveRequest: ArchiveRequest): string {
  return JSON.stringify(ArchiveRequest$outboundSchema.parse(archiveRequest));
}

export function archiveRequestFromJSON(
  jsonString: string,
): SafeParseResult<ArchiveRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ArchiveRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ArchiveRequest' from JSON`,
  );
}
