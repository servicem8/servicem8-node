/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  SearchResult,
  SearchResult$inboundSchema,
  SearchResult$Outbound,
  SearchResult$outboundSchema,
} from "./searchresult.js";

export type SearchResponse = {
  results: Array<SearchResult>;
  /**
   * The search query that was used
   */
  query: string;
  /**
   * Number of results returned
   */
  count: number;
};

/** @internal */
export const SearchResponse$inboundSchema: z.ZodType<
  SearchResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  results: z.array(SearchResult$inboundSchema),
  query: z.string(),
  count: z.number().int(),
});

/** @internal */
export type SearchResponse$Outbound = {
  results: Array<SearchResult$Outbound>;
  query: string;
  count: number;
};

/** @internal */
export const SearchResponse$outboundSchema: z.ZodType<
  SearchResponse$Outbound,
  z.ZodTypeDef,
  SearchResponse
> = z.object({
  results: z.array(SearchResult$outboundSchema),
  query: z.string(),
  count: z.number().int(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchResponse$ {
  /** @deprecated use `SearchResponse$inboundSchema` instead. */
  export const inboundSchema = SearchResponse$inboundSchema;
  /** @deprecated use `SearchResponse$outboundSchema` instead. */
  export const outboundSchema = SearchResponse$outboundSchema;
  /** @deprecated use `SearchResponse$Outbound` instead. */
  export type Outbound = SearchResponse$Outbound;
}

export function searchResponseToJSON(searchResponse: SearchResponse): string {
  return JSON.stringify(SearchResponse$outboundSchema.parse(searchResponse));
}

export function searchResponseFromJSON(
  jsonString: string,
): SafeParseResult<SearchResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SearchResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchResponse' from JSON`,
  );
}
