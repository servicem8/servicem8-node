/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Record active/deleted flag.
 *
 * @remarks
 *
 * Valid values are [0,1]
 */
export const JobMaterialBundleActive = {
  Zero: 0,
  One: 1,
} as const;
/**
 * Record active/deleted flag.
 *
 * @remarks
 *
 * Valid values are [0,1]
 */
export type JobMaterialBundleActive = ClosedEnum<
  typeof JobMaterialBundleActive
>;

export type JobMaterialBundle = {
  /**
   * Record UUID key
   */
  uuid?: string | undefined;
  /**
   * Record active/deleted flag.
   *
   * @remarks
   *
   * Valid values are [0,1]
   */
  active?: JobMaterialBundleActive | undefined;
  /**
   * Record last modified timestamp
   */
  editDate?: string | undefined;
  itemNumber?: string | undefined;
  name?: string | undefined;
  quantity?: string | undefined;
  sortOrder?: number | undefined;
  /**
   * UUID of the MaterialBundle which this JobMaterialBundle was originally created from.
   */
  materialBundleUuid?: string | undefined;
  jobUuid?: string | undefined;
};

export type JobMaterialBundleInput = {
  /**
   * Record UUID key
   */
  uuid?: string | undefined;
  /**
   * Record active/deleted flag.
   *
   * @remarks
   *
   * Valid values are [0,1]
   */
  active?: JobMaterialBundleActive | undefined;
  itemNumber?: string | undefined;
  name?: string | undefined;
  quantity?: string | undefined;
  sortOrder?: number | undefined;
  /**
   * UUID of the MaterialBundle which this JobMaterialBundle was originally created from.
   */
  materialBundleUuid?: string | undefined;
  jobUuid?: string | undefined;
};

/** @internal */
export const JobMaterialBundleActive$inboundSchema: z.ZodNativeEnum<
  typeof JobMaterialBundleActive
> = z.nativeEnum(JobMaterialBundleActive);

/** @internal */
export const JobMaterialBundleActive$outboundSchema: z.ZodNativeEnum<
  typeof JobMaterialBundleActive
> = JobMaterialBundleActive$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace JobMaterialBundleActive$ {
  /** @deprecated use `JobMaterialBundleActive$inboundSchema` instead. */
  export const inboundSchema = JobMaterialBundleActive$inboundSchema;
  /** @deprecated use `JobMaterialBundleActive$outboundSchema` instead. */
  export const outboundSchema = JobMaterialBundleActive$outboundSchema;
}

/** @internal */
export const JobMaterialBundle$inboundSchema: z.ZodType<
  JobMaterialBundle,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string().optional(),
  active: JobMaterialBundleActive$inboundSchema.default(1),
  edit_date: z.string().optional(),
  item_number: z.string().optional(),
  name: z.string().optional(),
  quantity: z.string().optional(),
  sort_order: z.number().int().optional(),
  material_bundle_uuid: z.string().optional(),
  job_uuid: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "edit_date": "editDate",
    "item_number": "itemNumber",
    "sort_order": "sortOrder",
    "material_bundle_uuid": "materialBundleUuid",
    "job_uuid": "jobUuid",
  });
});

/** @internal */
export type JobMaterialBundle$Outbound = {
  uuid?: string | undefined;
  active: number;
  edit_date?: string | undefined;
  item_number?: string | undefined;
  name?: string | undefined;
  quantity?: string | undefined;
  sort_order?: number | undefined;
  material_bundle_uuid?: string | undefined;
  job_uuid?: string | undefined;
};

/** @internal */
export const JobMaterialBundle$outboundSchema: z.ZodType<
  JobMaterialBundle$Outbound,
  z.ZodTypeDef,
  JobMaterialBundle
> = z.object({
  uuid: z.string().optional(),
  active: JobMaterialBundleActive$outboundSchema.default(1),
  editDate: z.string().optional(),
  itemNumber: z.string().optional(),
  name: z.string().optional(),
  quantity: z.string().optional(),
  sortOrder: z.number().int().optional(),
  materialBundleUuid: z.string().optional(),
  jobUuid: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    editDate: "edit_date",
    itemNumber: "item_number",
    sortOrder: "sort_order",
    materialBundleUuid: "material_bundle_uuid",
    jobUuid: "job_uuid",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace JobMaterialBundle$ {
  /** @deprecated use `JobMaterialBundle$inboundSchema` instead. */
  export const inboundSchema = JobMaterialBundle$inboundSchema;
  /** @deprecated use `JobMaterialBundle$outboundSchema` instead. */
  export const outboundSchema = JobMaterialBundle$outboundSchema;
  /** @deprecated use `JobMaterialBundle$Outbound` instead. */
  export type Outbound = JobMaterialBundle$Outbound;
}

export function jobMaterialBundleToJSON(
  jobMaterialBundle: JobMaterialBundle,
): string {
  return JSON.stringify(
    JobMaterialBundle$outboundSchema.parse(jobMaterialBundle),
  );
}

export function jobMaterialBundleFromJSON(
  jsonString: string,
): SafeParseResult<JobMaterialBundle, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => JobMaterialBundle$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'JobMaterialBundle' from JSON`,
  );
}

/** @internal */
export const JobMaterialBundleInput$inboundSchema: z.ZodType<
  JobMaterialBundleInput,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string().optional(),
  active: JobMaterialBundleActive$inboundSchema.default(1),
  item_number: z.string().optional(),
  name: z.string().optional(),
  quantity: z.string().optional(),
  sort_order: z.number().int().optional(),
  material_bundle_uuid: z.string().optional(),
  job_uuid: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "item_number": "itemNumber",
    "sort_order": "sortOrder",
    "material_bundle_uuid": "materialBundleUuid",
    "job_uuid": "jobUuid",
  });
});

/** @internal */
export type JobMaterialBundleInput$Outbound = {
  uuid?: string | undefined;
  active: number;
  item_number?: string | undefined;
  name?: string | undefined;
  quantity?: string | undefined;
  sort_order?: number | undefined;
  material_bundle_uuid?: string | undefined;
  job_uuid?: string | undefined;
};

/** @internal */
export const JobMaterialBundleInput$outboundSchema: z.ZodType<
  JobMaterialBundleInput$Outbound,
  z.ZodTypeDef,
  JobMaterialBundleInput
> = z.object({
  uuid: z.string().optional(),
  active: JobMaterialBundleActive$outboundSchema.default(1),
  itemNumber: z.string().optional(),
  name: z.string().optional(),
  quantity: z.string().optional(),
  sortOrder: z.number().int().optional(),
  materialBundleUuid: z.string().optional(),
  jobUuid: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    itemNumber: "item_number",
    sortOrder: "sort_order",
    materialBundleUuid: "material_bundle_uuid",
    jobUuid: "job_uuid",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace JobMaterialBundleInput$ {
  /** @deprecated use `JobMaterialBundleInput$inboundSchema` instead. */
  export const inboundSchema = JobMaterialBundleInput$inboundSchema;
  /** @deprecated use `JobMaterialBundleInput$outboundSchema` instead. */
  export const outboundSchema = JobMaterialBundleInput$outboundSchema;
  /** @deprecated use `JobMaterialBundleInput$Outbound` instead. */
  export type Outbound = JobMaterialBundleInput$Outbound;
}

export function jobMaterialBundleInputToJSON(
  jobMaterialBundleInput: JobMaterialBundleInput,
): string {
  return JSON.stringify(
    JobMaterialBundleInput$outboundSchema.parse(jobMaterialBundleInput),
  );
}

export function jobMaterialBundleInputFromJSON(
  jsonString: string,
): SafeParseResult<JobMaterialBundleInput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => JobMaterialBundleInput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'JobMaterialBundleInput' from JSON`,
  );
}
