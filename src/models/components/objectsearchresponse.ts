/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  SearchResult,
  SearchResult$inboundSchema,
  SearchResult$Outbound,
  SearchResult$outboundSchema,
} from "./searchresult.js";

export type ObjectSearchResponse = {
  results: Array<SearchResult>;
  /**
   * The search query that was used
   */
  query: string;
  /**
   * The object type that was searched
   */
  objectType: string;
  /**
   * Number of results returned
   */
  count: number;
};

/** @internal */
export const ObjectSearchResponse$inboundSchema: z.ZodType<
  ObjectSearchResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  results: z.array(SearchResult$inboundSchema),
  query: z.string(),
  objectType: z.string(),
  count: z.number().int(),
});

/** @internal */
export type ObjectSearchResponse$Outbound = {
  results: Array<SearchResult$Outbound>;
  query: string;
  objectType: string;
  count: number;
};

/** @internal */
export const ObjectSearchResponse$outboundSchema: z.ZodType<
  ObjectSearchResponse$Outbound,
  z.ZodTypeDef,
  ObjectSearchResponse
> = z.object({
  results: z.array(SearchResult$outboundSchema),
  query: z.string(),
  objectType: z.string(),
  count: z.number().int(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ObjectSearchResponse$ {
  /** @deprecated use `ObjectSearchResponse$inboundSchema` instead. */
  export const inboundSchema = ObjectSearchResponse$inboundSchema;
  /** @deprecated use `ObjectSearchResponse$outboundSchema` instead. */
  export const outboundSchema = ObjectSearchResponse$outboundSchema;
  /** @deprecated use `ObjectSearchResponse$Outbound` instead. */
  export type Outbound = ObjectSearchResponse$Outbound;
}

export function objectSearchResponseToJSON(
  objectSearchResponse: ObjectSearchResponse,
): string {
  return JSON.stringify(
    ObjectSearchResponse$outboundSchema.parse(objectSearchResponse),
  );
}

export function objectSearchResponseFromJSON(
  jsonString: string,
): SafeParseResult<ObjectSearchResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ObjectSearchResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ObjectSearchResponse' from JSON`,
  );
}
