/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  InboxMessage,
  InboxMessage$inboundSchema,
  InboxMessage$Outbound,
  InboxMessage$outboundSchema,
} from "./inboxmessage.js";

export type Pagination = {
  offset?: number | undefined;
  limit?: number | undefined;
  total?: number | undefined;
  hasMore?: boolean | undefined;
};

export type InboxMessagesResponse = {
  messages?: Array<InboxMessage> | undefined;
  pagination?: Pagination | undefined;
};

/** @internal */
export const Pagination$inboundSchema: z.ZodType<
  Pagination,
  z.ZodTypeDef,
  unknown
> = z.object({
  offset: z.number().int().optional(),
  limit: z.number().int().optional(),
  total: z.number().int().optional(),
  has_more: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    "has_more": "hasMore",
  });
});

/** @internal */
export type Pagination$Outbound = {
  offset?: number | undefined;
  limit?: number | undefined;
  total?: number | undefined;
  has_more?: boolean | undefined;
};

/** @internal */
export const Pagination$outboundSchema: z.ZodType<
  Pagination$Outbound,
  z.ZodTypeDef,
  Pagination
> = z.object({
  offset: z.number().int().optional(),
  limit: z.number().int().optional(),
  total: z.number().int().optional(),
  hasMore: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    hasMore: "has_more",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Pagination$ {
  /** @deprecated use `Pagination$inboundSchema` instead. */
  export const inboundSchema = Pagination$inboundSchema;
  /** @deprecated use `Pagination$outboundSchema` instead. */
  export const outboundSchema = Pagination$outboundSchema;
  /** @deprecated use `Pagination$Outbound` instead. */
  export type Outbound = Pagination$Outbound;
}

export function paginationToJSON(pagination: Pagination): string {
  return JSON.stringify(Pagination$outboundSchema.parse(pagination));
}

export function paginationFromJSON(
  jsonString: string,
): SafeParseResult<Pagination, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Pagination$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Pagination' from JSON`,
  );
}

/** @internal */
export const InboxMessagesResponse$inboundSchema: z.ZodType<
  InboxMessagesResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  messages: z.array(InboxMessage$inboundSchema).optional(),
  pagination: z.lazy(() => Pagination$inboundSchema).optional(),
});

/** @internal */
export type InboxMessagesResponse$Outbound = {
  messages?: Array<InboxMessage$Outbound> | undefined;
  pagination?: Pagination$Outbound | undefined;
};

/** @internal */
export const InboxMessagesResponse$outboundSchema: z.ZodType<
  InboxMessagesResponse$Outbound,
  z.ZodTypeDef,
  InboxMessagesResponse
> = z.object({
  messages: z.array(InboxMessage$outboundSchema).optional(),
  pagination: z.lazy(() => Pagination$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InboxMessagesResponse$ {
  /** @deprecated use `InboxMessagesResponse$inboundSchema` instead. */
  export const inboundSchema = InboxMessagesResponse$inboundSchema;
  /** @deprecated use `InboxMessagesResponse$outboundSchema` instead. */
  export const outboundSchema = InboxMessagesResponse$outboundSchema;
  /** @deprecated use `InboxMessagesResponse$Outbound` instead. */
  export type Outbound = InboxMessagesResponse$Outbound;
}

export function inboxMessagesResponseToJSON(
  inboxMessagesResponse: InboxMessagesResponse,
): string {
  return JSON.stringify(
    InboxMessagesResponse$outboundSchema.parse(inboxMessagesResponse),
  );
}

export function inboxMessagesResponseFromJSON(
  jsonString: string,
): SafeParseResult<InboxMessagesResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InboxMessagesResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InboxMessagesResponse' from JSON`,
  );
}
