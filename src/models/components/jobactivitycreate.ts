/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type JobActivityCreate = {
  /**
   * The UUID of the job this activity belongs to
   */
  jobUuid?: string | undefined;
  /**
   * The UUID of the staff member assigned to this activity
   */
  staffUuid?: string | undefined;
  /**
   * The scheduled start date and time of the activity
   */
  startDate?: string | undefined;
  /**
   * The scheduled end date and time of the activity
   */
  endDate?: string | undefined;
  /**
   * Boolean flag indicating whether this activity was scheduled in advance. Cannot be true if activity_was_recorded is true.
   */
  activityWasScheduled?: string | undefined;
  /**
   * Boolean flag indicating whether this activity was recorded after completion rather than scheduled in advance. Cannot be true if activity_was_scheduled is true.
   */
  activityWasRecorded?: string | undefined;
  /**
   * Integer flag indicating if the activity was automated: 0
   */
  activityWasAutomated?: string | undefined;
  /**
   * Boolean flag indicating whether the assigned staff member has viewed this job activity. Resets to false if the staff member or start time is changed. Only relevant when activity_was_scheduled is true.
   */
  hasBeenOpened?: string | undefined;
  /**
   * The date and time when the assigned staff member first viewed this job activity. Format is YYYY-MM-DD HH:MM:SS. Resets when staff member or start time is changed. Only relevant when activity_was_scheduled is true.
   */
  hasBeenOpenedTimestamp?: string | undefined;
  /**
   * The estimated travel time to reach this activity location in seconds
   */
  travelTimeInSeconds?: number | undefined;
  /**
   * The estimated travel distance to reach this activity location in meters
   */
  travelDistanceInMeters?: number | undefined;
  /**
   * DEPRECATED
   */
  allocatedByStaffUuid?: any | undefined;
  /**
   * DEPRECATED
   */
  allocatedTimestamp?: any | undefined;
  /**
   * The UUID of the material associated with this activity. Used to determine the cost of the activity.
   */
  materialUuid?: string | undefined;
  /**
   * Unique identifier for this record
   */
  uuid?: string | undefined;
};

/** @internal */
export const JobActivityCreate$inboundSchema: z.ZodType<
  JobActivityCreate,
  z.ZodTypeDef,
  unknown
> = z.object({
  job_uuid: z.string().optional(),
  staff_uuid: z.string().optional(),
  start_date: z.string().optional(),
  end_date: z.string().optional(),
  activity_was_scheduled: z.string().optional(),
  activity_was_recorded: z.string().optional(),
  activity_was_automated: z.string().optional(),
  has_been_opened: z.string().optional(),
  has_been_opened_timestamp: z.string().optional(),
  travel_time_in_seconds: z.number().int().optional(),
  travel_distance_in_meters: z.number().int().optional(),
  allocated_by_staff_uuid: z.any().optional(),
  allocated_timestamp: z.any().optional(),
  material_uuid: z.string().optional(),
  uuid: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "job_uuid": "jobUuid",
    "staff_uuid": "staffUuid",
    "start_date": "startDate",
    "end_date": "endDate",
    "activity_was_scheduled": "activityWasScheduled",
    "activity_was_recorded": "activityWasRecorded",
    "activity_was_automated": "activityWasAutomated",
    "has_been_opened": "hasBeenOpened",
    "has_been_opened_timestamp": "hasBeenOpenedTimestamp",
    "travel_time_in_seconds": "travelTimeInSeconds",
    "travel_distance_in_meters": "travelDistanceInMeters",
    "allocated_by_staff_uuid": "allocatedByStaffUuid",
    "allocated_timestamp": "allocatedTimestamp",
    "material_uuid": "materialUuid",
  });
});

/** @internal */
export type JobActivityCreate$Outbound = {
  job_uuid?: string | undefined;
  staff_uuid?: string | undefined;
  start_date?: string | undefined;
  end_date?: string | undefined;
  activity_was_scheduled?: string | undefined;
  activity_was_recorded?: string | undefined;
  activity_was_automated?: string | undefined;
  has_been_opened?: string | undefined;
  has_been_opened_timestamp?: string | undefined;
  travel_time_in_seconds?: number | undefined;
  travel_distance_in_meters?: number | undefined;
  allocated_by_staff_uuid?: any | undefined;
  allocated_timestamp?: any | undefined;
  material_uuid?: string | undefined;
  uuid?: string | undefined;
};

/** @internal */
export const JobActivityCreate$outboundSchema: z.ZodType<
  JobActivityCreate$Outbound,
  z.ZodTypeDef,
  JobActivityCreate
> = z.object({
  jobUuid: z.string().optional(),
  staffUuid: z.string().optional(),
  startDate: z.string().optional(),
  endDate: z.string().optional(),
  activityWasScheduled: z.string().optional(),
  activityWasRecorded: z.string().optional(),
  activityWasAutomated: z.string().optional(),
  hasBeenOpened: z.string().optional(),
  hasBeenOpenedTimestamp: z.string().optional(),
  travelTimeInSeconds: z.number().int().optional(),
  travelDistanceInMeters: z.number().int().optional(),
  allocatedByStaffUuid: z.any().optional(),
  allocatedTimestamp: z.any().optional(),
  materialUuid: z.string().optional(),
  uuid: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    jobUuid: "job_uuid",
    staffUuid: "staff_uuid",
    startDate: "start_date",
    endDate: "end_date",
    activityWasScheduled: "activity_was_scheduled",
    activityWasRecorded: "activity_was_recorded",
    activityWasAutomated: "activity_was_automated",
    hasBeenOpened: "has_been_opened",
    hasBeenOpenedTimestamp: "has_been_opened_timestamp",
    travelTimeInSeconds: "travel_time_in_seconds",
    travelDistanceInMeters: "travel_distance_in_meters",
    allocatedByStaffUuid: "allocated_by_staff_uuid",
    allocatedTimestamp: "allocated_timestamp",
    materialUuid: "material_uuid",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace JobActivityCreate$ {
  /** @deprecated use `JobActivityCreate$inboundSchema` instead. */
  export const inboundSchema = JobActivityCreate$inboundSchema;
  /** @deprecated use `JobActivityCreate$outboundSchema` instead. */
  export const outboundSchema = JobActivityCreate$outboundSchema;
  /** @deprecated use `JobActivityCreate$Outbound` instead. */
  export type Outbound = JobActivityCreate$Outbound;
}

export function jobActivityCreateToJSON(
  jobActivityCreate: JobActivityCreate,
): string {
  return JSON.stringify(
    JobActivityCreate$outboundSchema.parse(jobActivityCreate),
  );
}

export function jobActivityCreateFromJSON(
  jsonString: string,
): SafeParseResult<JobActivityCreate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => JobActivityCreate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'JobActivityCreate' from JSON`,
  );
}
