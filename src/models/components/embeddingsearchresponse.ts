/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  EmbeddingSearchResult,
  EmbeddingSearchResult$inboundSchema,
  EmbeddingSearchResult$Outbound,
  EmbeddingSearchResult$outboundSchema,
} from "./embeddingsearchresult.js";

export type EmbeddingSearchResponse = {
  results: Array<EmbeddingSearchResult>;
  /**
   * The search query that was used
   */
  query: string;
  /**
   * Number of results returned
   */
  count: number;
  /**
   * Type of search performed
   */
  searchType: string;
};

/** @internal */
export const EmbeddingSearchResponse$inboundSchema: z.ZodType<
  EmbeddingSearchResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  results: z.array(EmbeddingSearchResult$inboundSchema),
  query: z.string(),
  count: z.number().int(),
  searchType: z.string(),
});

/** @internal */
export type EmbeddingSearchResponse$Outbound = {
  results: Array<EmbeddingSearchResult$Outbound>;
  query: string;
  count: number;
  searchType: string;
};

/** @internal */
export const EmbeddingSearchResponse$outboundSchema: z.ZodType<
  EmbeddingSearchResponse$Outbound,
  z.ZodTypeDef,
  EmbeddingSearchResponse
> = z.object({
  results: z.array(EmbeddingSearchResult$outboundSchema),
  query: z.string(),
  count: z.number().int(),
  searchType: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmbeddingSearchResponse$ {
  /** @deprecated use `EmbeddingSearchResponse$inboundSchema` instead. */
  export const inboundSchema = EmbeddingSearchResponse$inboundSchema;
  /** @deprecated use `EmbeddingSearchResponse$outboundSchema` instead. */
  export const outboundSchema = EmbeddingSearchResponse$outboundSchema;
  /** @deprecated use `EmbeddingSearchResponse$Outbound` instead. */
  export type Outbound = EmbeddingSearchResponse$Outbound;
}

export function embeddingSearchResponseToJSON(
  embeddingSearchResponse: EmbeddingSearchResponse,
): string {
  return JSON.stringify(
    EmbeddingSearchResponse$outboundSchema.parse(embeddingSearchResponse),
  );
}

export function embeddingSearchResponseFromJSON(
  jsonString: string,
): SafeParseResult<EmbeddingSearchResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EmbeddingSearchResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EmbeddingSearchResponse' from JSON`,
  );
}
