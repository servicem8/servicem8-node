/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Record active/deleted flag.
 *
 * @remarks
 *
 * Valid values are [0,1]
 */
export const JobMaterialActive = {
  Zero: 0,
  One: 1,
} as const;
/**
 * Record active/deleted flag.
 *
 * @remarks
 *
 * Valid values are [0,1]
 */
export type JobMaterialActive = ClosedEnum<typeof JobMaterialActive>;

export type JobMaterial = {
  /**
   * Record UUID key
   */
  uuid?: string | undefined;
  /**
   * Record active/deleted flag.
   *
   * @remarks
   *
   * Valid values are [0,1]
   */
  active?: JobMaterialActive | undefined;
  /**
   * Record last modified timestamp
   */
  editDate?: string | undefined;
  jobUuid?: string | undefined;
  materialUuid?: string | undefined;
  name?: string | undefined;
  quantity: string;
  price?: string | undefined;
  displayedAmount?: string | undefined;
  displayedAmountIsTaxInclusive?: string | undefined;
  taxRateUuid?: string | undefined;
  sortOrder?: string | undefined;
  cost?: string | undefined;
  displayedCost?: string | undefined;
  /**
   * UUID of a JobMaterialBundle which this JobMaterial belongs to. The default value is blank, which means that the JobMaterial is not part of a JobMaterialBundle.
   */
  jobMaterialBundleUuid?: string | undefined;
};

export type JobMaterialInput = {
  /**
   * Record UUID key
   */
  uuid?: string | undefined;
  /**
   * Record active/deleted flag.
   *
   * @remarks
   *
   * Valid values are [0,1]
   */
  active?: JobMaterialActive | undefined;
  jobUuid?: string | undefined;
  materialUuid?: string | undefined;
  name?: string | undefined;
  quantity: string;
  price?: string | undefined;
  displayedAmount?: string | undefined;
  displayedAmountIsTaxInclusive?: string | undefined;
  taxRateUuid?: string | undefined;
  sortOrder?: string | undefined;
  cost?: string | undefined;
  displayedCost?: string | undefined;
  /**
   * UUID of a JobMaterialBundle which this JobMaterial belongs to. The default value is blank, which means that the JobMaterial is not part of a JobMaterialBundle.
   */
  jobMaterialBundleUuid?: string | undefined;
};

/** @internal */
export const JobMaterialActive$inboundSchema: z.ZodNativeEnum<
  typeof JobMaterialActive
> = z.nativeEnum(JobMaterialActive);

/** @internal */
export const JobMaterialActive$outboundSchema: z.ZodNativeEnum<
  typeof JobMaterialActive
> = JobMaterialActive$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace JobMaterialActive$ {
  /** @deprecated use `JobMaterialActive$inboundSchema` instead. */
  export const inboundSchema = JobMaterialActive$inboundSchema;
  /** @deprecated use `JobMaterialActive$outboundSchema` instead. */
  export const outboundSchema = JobMaterialActive$outboundSchema;
}

/** @internal */
export const JobMaterial$inboundSchema: z.ZodType<
  JobMaterial,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string().optional(),
  active: JobMaterialActive$inboundSchema.default(1),
  edit_date: z.string().optional(),
  job_uuid: z.string().optional(),
  material_uuid: z.string().optional(),
  name: z.string().optional(),
  quantity: z.string(),
  price: z.string().optional(),
  displayed_amount: z.string().optional(),
  displayed_amount_is_tax_inclusive: z.string().optional(),
  tax_rate_uuid: z.string().optional(),
  sort_order: z.string().optional(),
  cost: z.string().optional(),
  displayed_cost: z.string().optional(),
  job_material_bundle_uuid: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "edit_date": "editDate",
    "job_uuid": "jobUuid",
    "material_uuid": "materialUuid",
    "displayed_amount": "displayedAmount",
    "displayed_amount_is_tax_inclusive": "displayedAmountIsTaxInclusive",
    "tax_rate_uuid": "taxRateUuid",
    "sort_order": "sortOrder",
    "displayed_cost": "displayedCost",
    "job_material_bundle_uuid": "jobMaterialBundleUuid",
  });
});

/** @internal */
export type JobMaterial$Outbound = {
  uuid?: string | undefined;
  active: number;
  edit_date?: string | undefined;
  job_uuid?: string | undefined;
  material_uuid?: string | undefined;
  name?: string | undefined;
  quantity: string;
  price?: string | undefined;
  displayed_amount?: string | undefined;
  displayed_amount_is_tax_inclusive?: string | undefined;
  tax_rate_uuid?: string | undefined;
  sort_order?: string | undefined;
  cost?: string | undefined;
  displayed_cost?: string | undefined;
  job_material_bundle_uuid?: string | undefined;
};

/** @internal */
export const JobMaterial$outboundSchema: z.ZodType<
  JobMaterial$Outbound,
  z.ZodTypeDef,
  JobMaterial
> = z.object({
  uuid: z.string().optional(),
  active: JobMaterialActive$outboundSchema.default(1),
  editDate: z.string().optional(),
  jobUuid: z.string().optional(),
  materialUuid: z.string().optional(),
  name: z.string().optional(),
  quantity: z.string(),
  price: z.string().optional(),
  displayedAmount: z.string().optional(),
  displayedAmountIsTaxInclusive: z.string().optional(),
  taxRateUuid: z.string().optional(),
  sortOrder: z.string().optional(),
  cost: z.string().optional(),
  displayedCost: z.string().optional(),
  jobMaterialBundleUuid: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    editDate: "edit_date",
    jobUuid: "job_uuid",
    materialUuid: "material_uuid",
    displayedAmount: "displayed_amount",
    displayedAmountIsTaxInclusive: "displayed_amount_is_tax_inclusive",
    taxRateUuid: "tax_rate_uuid",
    sortOrder: "sort_order",
    displayedCost: "displayed_cost",
    jobMaterialBundleUuid: "job_material_bundle_uuid",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace JobMaterial$ {
  /** @deprecated use `JobMaterial$inboundSchema` instead. */
  export const inboundSchema = JobMaterial$inboundSchema;
  /** @deprecated use `JobMaterial$outboundSchema` instead. */
  export const outboundSchema = JobMaterial$outboundSchema;
  /** @deprecated use `JobMaterial$Outbound` instead. */
  export type Outbound = JobMaterial$Outbound;
}

export function jobMaterialToJSON(jobMaterial: JobMaterial): string {
  return JSON.stringify(JobMaterial$outboundSchema.parse(jobMaterial));
}

export function jobMaterialFromJSON(
  jsonString: string,
): SafeParseResult<JobMaterial, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => JobMaterial$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'JobMaterial' from JSON`,
  );
}

/** @internal */
export const JobMaterialInput$inboundSchema: z.ZodType<
  JobMaterialInput,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string().optional(),
  active: JobMaterialActive$inboundSchema.default(1),
  job_uuid: z.string().optional(),
  material_uuid: z.string().optional(),
  name: z.string().optional(),
  quantity: z.string(),
  price: z.string().optional(),
  displayed_amount: z.string().optional(),
  displayed_amount_is_tax_inclusive: z.string().optional(),
  tax_rate_uuid: z.string().optional(),
  sort_order: z.string().optional(),
  cost: z.string().optional(),
  displayed_cost: z.string().optional(),
  job_material_bundle_uuid: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "job_uuid": "jobUuid",
    "material_uuid": "materialUuid",
    "displayed_amount": "displayedAmount",
    "displayed_amount_is_tax_inclusive": "displayedAmountIsTaxInclusive",
    "tax_rate_uuid": "taxRateUuid",
    "sort_order": "sortOrder",
    "displayed_cost": "displayedCost",
    "job_material_bundle_uuid": "jobMaterialBundleUuid",
  });
});

/** @internal */
export type JobMaterialInput$Outbound = {
  uuid?: string | undefined;
  active: number;
  job_uuid?: string | undefined;
  material_uuid?: string | undefined;
  name?: string | undefined;
  quantity: string;
  price?: string | undefined;
  displayed_amount?: string | undefined;
  displayed_amount_is_tax_inclusive?: string | undefined;
  tax_rate_uuid?: string | undefined;
  sort_order?: string | undefined;
  cost?: string | undefined;
  displayed_cost?: string | undefined;
  job_material_bundle_uuid?: string | undefined;
};

/** @internal */
export const JobMaterialInput$outboundSchema: z.ZodType<
  JobMaterialInput$Outbound,
  z.ZodTypeDef,
  JobMaterialInput
> = z.object({
  uuid: z.string().optional(),
  active: JobMaterialActive$outboundSchema.default(1),
  jobUuid: z.string().optional(),
  materialUuid: z.string().optional(),
  name: z.string().optional(),
  quantity: z.string(),
  price: z.string().optional(),
  displayedAmount: z.string().optional(),
  displayedAmountIsTaxInclusive: z.string().optional(),
  taxRateUuid: z.string().optional(),
  sortOrder: z.string().optional(),
  cost: z.string().optional(),
  displayedCost: z.string().optional(),
  jobMaterialBundleUuid: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    jobUuid: "job_uuid",
    materialUuid: "material_uuid",
    displayedAmount: "displayed_amount",
    displayedAmountIsTaxInclusive: "displayed_amount_is_tax_inclusive",
    taxRateUuid: "tax_rate_uuid",
    sortOrder: "sort_order",
    displayedCost: "displayed_cost",
    jobMaterialBundleUuid: "job_material_bundle_uuid",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace JobMaterialInput$ {
  /** @deprecated use `JobMaterialInput$inboundSchema` instead. */
  export const inboundSchema = JobMaterialInput$inboundSchema;
  /** @deprecated use `JobMaterialInput$outboundSchema` instead. */
  export const outboundSchema = JobMaterialInput$outboundSchema;
  /** @deprecated use `JobMaterialInput$Outbound` instead. */
  export type Outbound = JobMaterialInput$Outbound;
}

export function jobMaterialInputToJSON(
  jobMaterialInput: JobMaterialInput,
): string {
  return JSON.stringify(
    JobMaterialInput$outboundSchema.parse(jobMaterialInput),
  );
}

export function jobMaterialInputFromJSON(
  jsonString: string,
): SafeParseResult<JobMaterialInput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => JobMaterialInput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'JobMaterialInput' from JSON`,
  );
}
