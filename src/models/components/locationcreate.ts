/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type LocationCreate = {
  /**
   * Location's name
   */
  name: string;
  /**
   * First line of the location's address. Contains the street number and street name.
   */
  line1?: string | undefined;
  /**
   * Second line of the location's address. Used for additional address information such as building/suite numbers or street details.
   */
  line2?: string | undefined;
  /**
   * Third line of the location's address. Used for additional address details when line1 and line2 are not sufficient.
   */
  line3?: string | undefined;
  /**
   * Email Address
   */
  city?: string | undefined;
  /**
   * Email Address
   */
  country?: string | undefined;
  /**
   * Email Address
   */
  postCode?: string | undefined;
  /**
   * Primary contact phone number for the location. Can include formatting characters.
   */
  phone1?: string | undefined;
  /**
   * Address State
   */
  state?: string | undefined;
  /**
   * Longitude coordinate of the location in decimal degrees format. Used for geolocation and distance calculations. Expected range is between -180 and 180 degrees.
   */
  lng?: number | undefined;
  /**
   * Latitude coordinate of the location in decimal degrees format. Used for geolocation and distance calculations. Expected range is between -90 and 90 degrees.
   */
  lat?: number | undefined;
  /**
   * Unique identifier for this record
   */
  uuid?: string | undefined;
};

/** @internal */
export const LocationCreate$inboundSchema: z.ZodType<
  LocationCreate,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  line1: z.string().optional(),
  line2: z.string().optional(),
  line3: z.string().optional(),
  city: z.string().optional(),
  country: z.string().optional(),
  post_code: z.string().optional(),
  phone_1: z.string().optional(),
  state: z.string().optional(),
  lng: z.number().optional(),
  lat: z.number().optional(),
  uuid: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "post_code": "postCode",
    "phone_1": "phone1",
  });
});

/** @internal */
export type LocationCreate$Outbound = {
  name: string;
  line1?: string | undefined;
  line2?: string | undefined;
  line3?: string | undefined;
  city?: string | undefined;
  country?: string | undefined;
  post_code?: string | undefined;
  phone_1?: string | undefined;
  state?: string | undefined;
  lng?: number | undefined;
  lat?: number | undefined;
  uuid?: string | undefined;
};

/** @internal */
export const LocationCreate$outboundSchema: z.ZodType<
  LocationCreate$Outbound,
  z.ZodTypeDef,
  LocationCreate
> = z.object({
  name: z.string(),
  line1: z.string().optional(),
  line2: z.string().optional(),
  line3: z.string().optional(),
  city: z.string().optional(),
  country: z.string().optional(),
  postCode: z.string().optional(),
  phone1: z.string().optional(),
  state: z.string().optional(),
  lng: z.number().optional(),
  lat: z.number().optional(),
  uuid: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    postCode: "post_code",
    phone1: "phone_1",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LocationCreate$ {
  /** @deprecated use `LocationCreate$inboundSchema` instead. */
  export const inboundSchema = LocationCreate$inboundSchema;
  /** @deprecated use `LocationCreate$outboundSchema` instead. */
  export const outboundSchema = LocationCreate$outboundSchema;
  /** @deprecated use `LocationCreate$Outbound` instead. */
  export type Outbound = LocationCreate$Outbound;
}

export function locationCreateToJSON(locationCreate: LocationCreate): string {
  return JSON.stringify(LocationCreate$outboundSchema.parse(locationCreate));
}

export function locationCreateFromJSON(
  jsonString: string,
): SafeParseResult<LocationCreate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LocationCreate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LocationCreate' from JSON`,
  );
}
