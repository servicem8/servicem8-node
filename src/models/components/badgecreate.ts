/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type BadgeCreate = {
  /**
   * Unique identifier for this record
   */
  uuid?: string | undefined;
  /**
   * The display name of the badge. Used to identify the badge in the system. Examples include 'Warranty', 'VIP', 'Take Payment Facilities', etc.
   */
  name: string;
  automaticallyAllocated?: string | undefined;
  fileName?: string | undefined;
  regardingFormUuid?: string | undefined;
  /**
   * UUID of the asset type that this badge is associated with. Only applicable for asset-based badges. When set, the badge represents a specific asset type in the system and will appear on assets of this type.
   */
  regardingAssetTypeUuid?: string | undefined;
};

/** @internal */
export const BadgeCreate$inboundSchema: z.ZodType<
  BadgeCreate,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string().optional(),
  name: z.string(),
  automatically_allocated: z.string().optional(),
  file_name: z.string().optional(),
  regarding_form_uuid: z.string().optional(),
  regarding_asset_type_uuid: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "automatically_allocated": "automaticallyAllocated",
    "file_name": "fileName",
    "regarding_form_uuid": "regardingFormUuid",
    "regarding_asset_type_uuid": "regardingAssetTypeUuid",
  });
});

/** @internal */
export type BadgeCreate$Outbound = {
  uuid?: string | undefined;
  name: string;
  automatically_allocated?: string | undefined;
  file_name?: string | undefined;
  regarding_form_uuid?: string | undefined;
  regarding_asset_type_uuid?: string | undefined;
};

/** @internal */
export const BadgeCreate$outboundSchema: z.ZodType<
  BadgeCreate$Outbound,
  z.ZodTypeDef,
  BadgeCreate
> = z.object({
  uuid: z.string().optional(),
  name: z.string(),
  automaticallyAllocated: z.string().optional(),
  fileName: z.string().optional(),
  regardingFormUuid: z.string().optional(),
  regardingAssetTypeUuid: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    automaticallyAllocated: "automatically_allocated",
    fileName: "file_name",
    regardingFormUuid: "regarding_form_uuid",
    regardingAssetTypeUuid: "regarding_asset_type_uuid",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BadgeCreate$ {
  /** @deprecated use `BadgeCreate$inboundSchema` instead. */
  export const inboundSchema = BadgeCreate$inboundSchema;
  /** @deprecated use `BadgeCreate$outboundSchema` instead. */
  export const outboundSchema = BadgeCreate$outboundSchema;
  /** @deprecated use `BadgeCreate$Outbound` instead. */
  export type Outbound = BadgeCreate$Outbound;
}

export function badgeCreateToJSON(badgeCreate: BadgeCreate): string {
  return JSON.stringify(BadgeCreate$outboundSchema.parse(badgeCreate));
}

export function badgeCreateFromJSON(
  jsonString: string,
): SafeParseResult<BadgeCreate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BadgeCreate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BadgeCreate' from JSON`,
  );
}
