/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Record active/deleted flag.
 *
 * @remarks
 *
 * Valid values are [0,1]
 */
export const CategoryActive = {
  Zero: 0,
  One: 1,
} as const;
/**
 * Record active/deleted flag.
 *
 * @remarks
 *
 * Valid values are [0,1]
 */
export type CategoryActive = ClosedEnum<typeof CategoryActive>;

export type Category = {
  /**
   * Record UUID key
   */
  uuid?: string | undefined;
  /**
   * Record active/deleted flag.
   *
   * @remarks
   *
   * Valid values are [0,1]
   */
  active?: CategoryActive | undefined;
  /**
   * Record last modified timestamp
   */
  editDate?: string | undefined;
  name: string;
  colour?: string | undefined;
};

export type CategoryInput = {
  /**
   * Record UUID key
   */
  uuid?: string | undefined;
  /**
   * Record active/deleted flag.
   *
   * @remarks
   *
   * Valid values are [0,1]
   */
  active?: CategoryActive | undefined;
  name: string;
  colour?: string | undefined;
};

/** @internal */
export const CategoryActive$inboundSchema: z.ZodNativeEnum<
  typeof CategoryActive
> = z.nativeEnum(CategoryActive);

/** @internal */
export const CategoryActive$outboundSchema: z.ZodNativeEnum<
  typeof CategoryActive
> = CategoryActive$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CategoryActive$ {
  /** @deprecated use `CategoryActive$inboundSchema` instead. */
  export const inboundSchema = CategoryActive$inboundSchema;
  /** @deprecated use `CategoryActive$outboundSchema` instead. */
  export const outboundSchema = CategoryActive$outboundSchema;
}

/** @internal */
export const Category$inboundSchema: z.ZodType<
  Category,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string().optional(),
  active: CategoryActive$inboundSchema.default(1),
  edit_date: z.string().optional(),
  name: z.string(),
  colour: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "edit_date": "editDate",
  });
});

/** @internal */
export type Category$Outbound = {
  uuid?: string | undefined;
  active: number;
  edit_date?: string | undefined;
  name: string;
  colour?: string | undefined;
};

/** @internal */
export const Category$outboundSchema: z.ZodType<
  Category$Outbound,
  z.ZodTypeDef,
  Category
> = z.object({
  uuid: z.string().optional(),
  active: CategoryActive$outboundSchema.default(1),
  editDate: z.string().optional(),
  name: z.string(),
  colour: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    editDate: "edit_date",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Category$ {
  /** @deprecated use `Category$inboundSchema` instead. */
  export const inboundSchema = Category$inboundSchema;
  /** @deprecated use `Category$outboundSchema` instead. */
  export const outboundSchema = Category$outboundSchema;
  /** @deprecated use `Category$Outbound` instead. */
  export type Outbound = Category$Outbound;
}

export function categoryToJSON(category: Category): string {
  return JSON.stringify(Category$outboundSchema.parse(category));
}

export function categoryFromJSON(
  jsonString: string,
): SafeParseResult<Category, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Category$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Category' from JSON`,
  );
}

/** @internal */
export const CategoryInput$inboundSchema: z.ZodType<
  CategoryInput,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string().optional(),
  active: CategoryActive$inboundSchema.default(1),
  name: z.string(),
  colour: z.string().optional(),
});

/** @internal */
export type CategoryInput$Outbound = {
  uuid?: string | undefined;
  active: number;
  name: string;
  colour?: string | undefined;
};

/** @internal */
export const CategoryInput$outboundSchema: z.ZodType<
  CategoryInput$Outbound,
  z.ZodTypeDef,
  CategoryInput
> = z.object({
  uuid: z.string().optional(),
  active: CategoryActive$outboundSchema.default(1),
  name: z.string(),
  colour: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CategoryInput$ {
  /** @deprecated use `CategoryInput$inboundSchema` instead. */
  export const inboundSchema = CategoryInput$inboundSchema;
  /** @deprecated use `CategoryInput$outboundSchema` instead. */
  export const outboundSchema = CategoryInput$outboundSchema;
  /** @deprecated use `CategoryInput$Outbound` instead. */
  export type Outbound = CategoryInput$Outbound;
}

export function categoryInputToJSON(categoryInput: CategoryInput): string {
  return JSON.stringify(CategoryInput$outboundSchema.parse(categoryInput));
}

export function categoryInputFromJSON(
  jsonString: string,
): SafeParseResult<CategoryInput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CategoryInput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CategoryInput' from JSON`,
  );
}
