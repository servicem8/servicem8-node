/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type FeedbackCreate = {
  /**
   * Date and time when the feedback was submitted
   */
  timestamp?: string | undefined;
  /**
   * Type of object this feedback relates to (usually 'job' or 'vendor')
   */
  relatedObject?: string | undefined;
  /**
   * UUID of the specific object this feedback is about, corresponding to the object type specified in related_object
   */
  relatedObjectUuid?: string | undefined;
  /**
   * Numeric rating value for the feedback, between 1-5 where higher values represent more positive feedback
   */
  rating?: string | undefined;
  /**
   * Text comments provided with the feedback
   */
  comment?: string | undefined;
  /**
   * Unique identifier for this record
   */
  uuid?: string | undefined;
};

/** @internal */
export const FeedbackCreate$inboundSchema: z.ZodType<
  FeedbackCreate,
  z.ZodTypeDef,
  unknown
> = z.object({
  timestamp: z.string().optional(),
  related_object: z.string().optional(),
  related_object_uuid: z.string().optional(),
  rating: z.string().optional(),
  comment: z.string().optional(),
  uuid: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "related_object": "relatedObject",
    "related_object_uuid": "relatedObjectUuid",
  });
});

/** @internal */
export type FeedbackCreate$Outbound = {
  timestamp?: string | undefined;
  related_object?: string | undefined;
  related_object_uuid?: string | undefined;
  rating?: string | undefined;
  comment?: string | undefined;
  uuid?: string | undefined;
};

/** @internal */
export const FeedbackCreate$outboundSchema: z.ZodType<
  FeedbackCreate$Outbound,
  z.ZodTypeDef,
  FeedbackCreate
> = z.object({
  timestamp: z.string().optional(),
  relatedObject: z.string().optional(),
  relatedObjectUuid: z.string().optional(),
  rating: z.string().optional(),
  comment: z.string().optional(),
  uuid: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    relatedObject: "related_object",
    relatedObjectUuid: "related_object_uuid",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FeedbackCreate$ {
  /** @deprecated use `FeedbackCreate$inboundSchema` instead. */
  export const inboundSchema = FeedbackCreate$inboundSchema;
  /** @deprecated use `FeedbackCreate$outboundSchema` instead. */
  export const outboundSchema = FeedbackCreate$outboundSchema;
  /** @deprecated use `FeedbackCreate$Outbound` instead. */
  export type Outbound = FeedbackCreate$Outbound;
}

export function feedbackCreateToJSON(feedbackCreate: FeedbackCreate): string {
  return JSON.stringify(FeedbackCreate$outboundSchema.parse(feedbackCreate));
}

export function feedbackCreateFromJSON(
  jsonString: string,
): SafeParseResult<FeedbackCreate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FeedbackCreate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FeedbackCreate' from JSON`,
  );
}
