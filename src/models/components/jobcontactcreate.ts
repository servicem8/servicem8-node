/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type JobContactCreate = {
  /**
   * UUID of the job this contact is associated with. Each job contact must be linked to a valid job in the system. This field cannot be changed once set.
   */
  jobUuid?: string | undefined;
  /**
   * First name of the job contact. This information is synced with the job's contact information fields depending on the contact type.
   */
  first?: string | undefined;
  /**
   * Last name of the job contact. This information is synced with the job's contact information fields depending on the contact type.
   */
  last?: string | undefined;
  /**
   * Landline or office phone number of the job contact. Format is flexible but should represent a valid phone number. This field syncs with the job's phone_1 field for job contacts or phone_2 field for billing contacts.
   */
  phone?: string | undefined;
  /**
   * Mobile phone number of the job contact. Format is flexible but should represent a valid mobile number. This field syncs with the job's mobile field for job contacts or billing_mobile field for billing contacts.
   */
  mobile?: string | undefined;
  /**
   * Email address of the job contact. Should be a valid email format. Used for sending job-related communications. This field syncs with the job's email field for job contacts or billing_email field for billing contacts.
   */
  email?: string | undefined;
  /**
   * Type of contact relationship to the job. Valid values are: 'JOB' (or 'Job Contact'), 'BILLING' (or 'Billing Contact'), or 'Property Manager'. Controls which job fields are updated when this contact record changes.
   */
  type?: string | undefined;
  /**
   * DEPRECATED
   */
  isPrimaryContact?: any | undefined;
  /**
   * Unique identifier for this record
   */
  uuid?: string | undefined;
};

/** @internal */
export const JobContactCreate$inboundSchema: z.ZodType<
  JobContactCreate,
  z.ZodTypeDef,
  unknown
> = z.object({
  job_uuid: z.string().optional(),
  first: z.string().optional(),
  last: z.string().optional(),
  phone: z.string().optional(),
  mobile: z.string().optional(),
  email: z.string().optional(),
  type: z.string().optional(),
  is_primary_contact: z.any().optional(),
  uuid: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "job_uuid": "jobUuid",
    "is_primary_contact": "isPrimaryContact",
  });
});

/** @internal */
export type JobContactCreate$Outbound = {
  job_uuid?: string | undefined;
  first?: string | undefined;
  last?: string | undefined;
  phone?: string | undefined;
  mobile?: string | undefined;
  email?: string | undefined;
  type?: string | undefined;
  is_primary_contact?: any | undefined;
  uuid?: string | undefined;
};

/** @internal */
export const JobContactCreate$outboundSchema: z.ZodType<
  JobContactCreate$Outbound,
  z.ZodTypeDef,
  JobContactCreate
> = z.object({
  jobUuid: z.string().optional(),
  first: z.string().optional(),
  last: z.string().optional(),
  phone: z.string().optional(),
  mobile: z.string().optional(),
  email: z.string().optional(),
  type: z.string().optional(),
  isPrimaryContact: z.any().optional(),
  uuid: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    jobUuid: "job_uuid",
    isPrimaryContact: "is_primary_contact",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace JobContactCreate$ {
  /** @deprecated use `JobContactCreate$inboundSchema` instead. */
  export const inboundSchema = JobContactCreate$inboundSchema;
  /** @deprecated use `JobContactCreate$outboundSchema` instead. */
  export const outboundSchema = JobContactCreate$outboundSchema;
  /** @deprecated use `JobContactCreate$Outbound` instead. */
  export type Outbound = JobContactCreate$Outbound;
}

export function jobContactCreateToJSON(
  jobContactCreate: JobContactCreate,
): string {
  return JSON.stringify(
    JobContactCreate$outboundSchema.parse(jobContactCreate),
  );
}

export function jobContactCreateFromJSON(
  jsonString: string,
): SafeParseResult<JobContactCreate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => JobContactCreate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'JobContactCreate' from JSON`,
  );
}
