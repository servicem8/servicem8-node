/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type SupplierCreate = {
  /**
   * Unique identifier for this record
   */
  uuid?: string | undefined;
  /**
   * The name of the supplier company
   */
  name?: string | undefined;
  /**
   * Business registration number (e.g., ABN, EIN)
   */
  businessNumber?: string | undefined;
  /**
   * Physical address of the supplier store
   */
  address?: string | undefined;
  /**
   * Primary contact email address
   */
  email?: string | undefined;
  /**
   * Primary contact phone number
   */
  phone?: string | undefined;
  /**
   * Your account number with this supplier
   */
  accountNumber?: string | undefined;
};

/** @internal */
export const SupplierCreate$inboundSchema: z.ZodType<
  SupplierCreate,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string().optional(),
  name: z.string().optional(),
  business_number: z.string().optional(),
  address: z.string().optional(),
  email: z.string().optional(),
  phone: z.string().optional(),
  account_number: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "business_number": "businessNumber",
    "account_number": "accountNumber",
  });
});

/** @internal */
export type SupplierCreate$Outbound = {
  uuid?: string | undefined;
  name?: string | undefined;
  business_number?: string | undefined;
  address?: string | undefined;
  email?: string | undefined;
  phone?: string | undefined;
  account_number?: string | undefined;
};

/** @internal */
export const SupplierCreate$outboundSchema: z.ZodType<
  SupplierCreate$Outbound,
  z.ZodTypeDef,
  SupplierCreate
> = z.object({
  uuid: z.string().optional(),
  name: z.string().optional(),
  businessNumber: z.string().optional(),
  address: z.string().optional(),
  email: z.string().optional(),
  phone: z.string().optional(),
  accountNumber: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    businessNumber: "business_number",
    accountNumber: "account_number",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SupplierCreate$ {
  /** @deprecated use `SupplierCreate$inboundSchema` instead. */
  export const inboundSchema = SupplierCreate$inboundSchema;
  /** @deprecated use `SupplierCreate$outboundSchema` instead. */
  export const outboundSchema = SupplierCreate$outboundSchema;
  /** @deprecated use `SupplierCreate$Outbound` instead. */
  export type Outbound = SupplierCreate$Outbound;
}

export function supplierCreateToJSON(supplierCreate: SupplierCreate): string {
  return JSON.stringify(SupplierCreate$outboundSchema.parse(supplierCreate));
}

export function supplierCreateFromJSON(
  jsonString: string,
): SafeParseResult<SupplierCreate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SupplierCreate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SupplierCreate' from JSON`,
  );
}
