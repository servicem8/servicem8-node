/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Record active/deleted flag.  Valid values are [0,1]
 */
export const EmailTemplateActive = {
  Zero: 0,
  One: 1,
} as const;
/**
 * Record active/deleted flag.  Valid values are [0,1]
 */
export type EmailTemplateActive = ClosedEnum<typeof EmailTemplateActive>;

export type EmailTemplate = {
  /**
   * Unique name of the email template. Used to identify and select the template in the system. This field is mandatory and must be unique among all email templates in the account.
   */
  name: string;
  /**
   * Subject line for the email template. Supports variable placeholders like {job.job_address} which are replaced with actual values when the email is generated. This field defines what appears in the subject line of emails sent using this template.
   */
  subject?: string | undefined;
  /**
   * The HTML body content of the email template. Supports rich text formatting and variable placeholders like {job.contact_first}, {document}, {vendor.name}, etc., which are replaced with actual values when the email is generated.
   */
  message?: string | undefined;
  /**
   * Unique identifier for this record
   */
  uuid?: string | undefined;
  /**
   * Record active/deleted flag.  Valid values are [0,1]
   */
  active?: EmailTemplateActive | undefined;
  /**
   * Timestamp at which record was last modified
   */
  editDate?: any | undefined;
};

/** @internal */
export const EmailTemplateActive$inboundSchema: z.ZodNativeEnum<
  typeof EmailTemplateActive
> = z.nativeEnum(EmailTemplateActive);

/** @internal */
export const EmailTemplateActive$outboundSchema: z.ZodNativeEnum<
  typeof EmailTemplateActive
> = EmailTemplateActive$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmailTemplateActive$ {
  /** @deprecated use `EmailTemplateActive$inboundSchema` instead. */
  export const inboundSchema = EmailTemplateActive$inboundSchema;
  /** @deprecated use `EmailTemplateActive$outboundSchema` instead. */
  export const outboundSchema = EmailTemplateActive$outboundSchema;
}

/** @internal */
export const EmailTemplate$inboundSchema: z.ZodType<
  EmailTemplate,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  subject: z.string().optional(),
  message: z.string().optional(),
  uuid: z.string().optional(),
  active: EmailTemplateActive$inboundSchema.default(1),
  edit_date: z.any().optional(),
}).transform((v) => {
  return remap$(v, {
    "edit_date": "editDate",
  });
});

/** @internal */
export type EmailTemplate$Outbound = {
  name: string;
  subject?: string | undefined;
  message?: string | undefined;
  uuid?: string | undefined;
  active: number;
  edit_date?: any | undefined;
};

/** @internal */
export const EmailTemplate$outboundSchema: z.ZodType<
  EmailTemplate$Outbound,
  z.ZodTypeDef,
  EmailTemplate
> = z.object({
  name: z.string(),
  subject: z.string().optional(),
  message: z.string().optional(),
  uuid: z.string().optional(),
  active: EmailTemplateActive$outboundSchema.default(1),
  editDate: z.any().optional(),
}).transform((v) => {
  return remap$(v, {
    editDate: "edit_date",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmailTemplate$ {
  /** @deprecated use `EmailTemplate$inboundSchema` instead. */
  export const inboundSchema = EmailTemplate$inboundSchema;
  /** @deprecated use `EmailTemplate$outboundSchema` instead. */
  export const outboundSchema = EmailTemplate$outboundSchema;
  /** @deprecated use `EmailTemplate$Outbound` instead. */
  export type Outbound = EmailTemplate$Outbound;
}

export function emailTemplateToJSON(emailTemplate: EmailTemplate): string {
  return JSON.stringify(EmailTemplate$outboundSchema.parse(emailTemplate));
}

export function emailTemplateFromJSON(
  jsonString: string,
): SafeParseResult<EmailTemplate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EmailTemplate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EmailTemplate' from JSON`,
  );
}
