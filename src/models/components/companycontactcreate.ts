/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CompanyContactCreate = {
  /**
   * The UUID of the company this contact belongs to
   */
  companyUuid?: string | undefined;
  /**
   * First name of the company contact. Used for identifying and addressing the contact in communications.
   */
  first?: string | undefined;
  /**
   * Last name of the company contact. Used together with the first name to identify the contact.
   */
  last?: string | undefined;
  /**
   * Primary phone number for the contact. Used for voice communications with the contact. Should include area code and can include international code.
   */
  phone?: string | undefined;
  /**
   * Mobile phone number for the contact. Used for SMS communications and alternative voice contact. Should include area code and can include international code.
   */
  mobile?: string | undefined;
  /**
   * Email address of the contact. Used for sending email communications, quotes, invoices, and other electronic correspondence.
   */
  email?: string | undefined;
  /**
   * Specifies the type of contact. Common values include 'BILLING' for billing contacts and 'JOB' for job contacts. This field determines how the contact is used in the system.
   */
  type?: string | undefined;
  /**
   * Indicates whether this contact is the primary contact for the company. Value of 1 means this is the primary contact, 0 means it is not. A company should have only one active primary contact.
   */
  isPrimaryContact?: string | undefined;
  /**
   * Unique identifier for this record
   */
  uuid?: string | undefined;
};

/** @internal */
export const CompanyContactCreate$inboundSchema: z.ZodType<
  CompanyContactCreate,
  z.ZodTypeDef,
  unknown
> = z.object({
  company_uuid: z.string().optional(),
  first: z.string().optional(),
  last: z.string().optional(),
  phone: z.string().optional(),
  mobile: z.string().optional(),
  email: z.string().optional(),
  type: z.string().optional(),
  is_primary_contact: z.string().optional(),
  uuid: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "company_uuid": "companyUuid",
    "is_primary_contact": "isPrimaryContact",
  });
});

/** @internal */
export type CompanyContactCreate$Outbound = {
  company_uuid?: string | undefined;
  first?: string | undefined;
  last?: string | undefined;
  phone?: string | undefined;
  mobile?: string | undefined;
  email?: string | undefined;
  type?: string | undefined;
  is_primary_contact?: string | undefined;
  uuid?: string | undefined;
};

/** @internal */
export const CompanyContactCreate$outboundSchema: z.ZodType<
  CompanyContactCreate$Outbound,
  z.ZodTypeDef,
  CompanyContactCreate
> = z.object({
  companyUuid: z.string().optional(),
  first: z.string().optional(),
  last: z.string().optional(),
  phone: z.string().optional(),
  mobile: z.string().optional(),
  email: z.string().optional(),
  type: z.string().optional(),
  isPrimaryContact: z.string().optional(),
  uuid: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    companyUuid: "company_uuid",
    isPrimaryContact: "is_primary_contact",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompanyContactCreate$ {
  /** @deprecated use `CompanyContactCreate$inboundSchema` instead. */
  export const inboundSchema = CompanyContactCreate$inboundSchema;
  /** @deprecated use `CompanyContactCreate$outboundSchema` instead. */
  export const outboundSchema = CompanyContactCreate$outboundSchema;
  /** @deprecated use `CompanyContactCreate$Outbound` instead. */
  export type Outbound = CompanyContactCreate$Outbound;
}

export function companyContactCreateToJSON(
  companyContactCreate: CompanyContactCreate,
): string {
  return JSON.stringify(
    CompanyContactCreate$outboundSchema.parse(companyContactCreate),
  );
}

export function companyContactCreateFromJSON(
  jsonString: string,
): SafeParseResult<CompanyContactCreate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CompanyContactCreate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompanyContactCreate' from JSON`,
  );
}
