/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type AllocationWindowCreate = {
  /**
   * Name of the allocation window that defines a time period for job scheduling. Common examples include 'Morning', 'Afternoon', 'Business Hours', etc.
   */
  name?: string | undefined;
  /**
   * Start time of the allocation window measured in minutes from midnight. For example, 800 AM would be represented as 480 (8 hours × 60 minutes).
   */
  startTime?: number | undefined;
  /**
   * End time of the allocation window measured in minutes from midnight. For example, 1700 (500 PM) would be represented as 1020 (17 hours × 60 minutes).
   */
  endTime?: number | undefined;
  /**
   * Numeric value determining the display order of allocation windows. Lower values indicate higher priority. System automatically sets this to match the start_time in minutes, unless it's an urgent priority window which gets priority 0.
   */
  sortPriority?: number | undefined;
  /**
   * Unique identifier for this record
   */
  uuid?: string | undefined;
};

/** @internal */
export const AllocationWindowCreate$inboundSchema: z.ZodType<
  AllocationWindowCreate,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  start_time: z.number().int().optional(),
  end_time: z.number().int().optional(),
  sort_priority: z.number().int().optional(),
  uuid: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "start_time": "startTime",
    "end_time": "endTime",
    "sort_priority": "sortPriority",
  });
});

/** @internal */
export type AllocationWindowCreate$Outbound = {
  name?: string | undefined;
  start_time?: number | undefined;
  end_time?: number | undefined;
  sort_priority?: number | undefined;
  uuid?: string | undefined;
};

/** @internal */
export const AllocationWindowCreate$outboundSchema: z.ZodType<
  AllocationWindowCreate$Outbound,
  z.ZodTypeDef,
  AllocationWindowCreate
> = z.object({
  name: z.string().optional(),
  startTime: z.number().int().optional(),
  endTime: z.number().int().optional(),
  sortPriority: z.number().int().optional(),
  uuid: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    startTime: "start_time",
    endTime: "end_time",
    sortPriority: "sort_priority",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AllocationWindowCreate$ {
  /** @deprecated use `AllocationWindowCreate$inboundSchema` instead. */
  export const inboundSchema = AllocationWindowCreate$inboundSchema;
  /** @deprecated use `AllocationWindowCreate$outboundSchema` instead. */
  export const outboundSchema = AllocationWindowCreate$outboundSchema;
  /** @deprecated use `AllocationWindowCreate$Outbound` instead. */
  export type Outbound = AllocationWindowCreate$Outbound;
}

export function allocationWindowCreateToJSON(
  allocationWindowCreate: AllocationWindowCreate,
): string {
  return JSON.stringify(
    AllocationWindowCreate$outboundSchema.parse(allocationWindowCreate),
  );
}

export function allocationWindowCreateFromJSON(
  jsonString: string,
): SafeParseResult<AllocationWindowCreate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AllocationWindowCreate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AllocationWindowCreate' from JSON`,
  );
}
