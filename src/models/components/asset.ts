/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Record active/deleted flag.
 *
 * @remarks
 *
 * Valid values are [0,1]
 */
export const AssetActive = {
  Zero: 0,
  One: 1,
} as const;
/**
 * Record active/deleted flag.
 *
 * @remarks
 *
 * Valid values are [0,1]
 */
export type AssetActive = ClosedEnum<typeof AssetActive>;

export type FieldDatum = {
  /**
   * Must be the UUID of an AssetTypeField
   */
  uuid: string;
  fieldType: string;
  fieldName: string;
  /**
   * Convert all values to string. Dates shall be in Y-m-d format.
   */
  fieldValue: string;
  sortOrder: number;
};

export type Asset = {
  /**
   * Record UUID key
   */
  uuid?: string | undefined;
  /**
   * Record active/deleted flag.
   *
   * @remarks
   *
   * Valid values are [0,1]
   */
  active?: AssetActive | undefined;
  /**
   * Record last modified timestamp
   */
  editDate?: string | undefined;
  /**
   * UUID of the Client to which this Asset is attached
   */
  companyUuid?: string | undefined;
  /**
   * The unique code printed on this Asset's attached label (read only) (Read-only)
   */
  assetCode?: string | undefined;
  /**
   * UUID of an Asset Type which defines the fields that can be stored for this Asset (read only) (Read-only)
   */
  assetTypeUuid?: string | undefined;
  /**
   * User-facing description of this asset
   */
  name?: string | undefined;
  /**
   * Latitude component of the Asset's location in degrees
   */
  lat?: number | undefined;
  /**
   * Longitude component of the Asset's location in degrees
   */
  lng?: number | undefined;
  /**
   * Timestamp at which the Asset's location was last updated
   */
  geoTimestamp?: string | undefined;
  /**
   * Altitude component of the Asset's location in metres
   */
  altitude?: number | undefined;
  fieldData?: Array<FieldDatum> | undefined;
};

export type AssetInput = {
  /**
   * Record UUID key
   */
  uuid?: string | undefined;
  /**
   * Record active/deleted flag.
   *
   * @remarks
   *
   * Valid values are [0,1]
   */
  active?: AssetActive | undefined;
  /**
   * UUID of the Client to which this Asset is attached
   */
  companyUuid?: string | undefined;
  /**
   * The unique code printed on this Asset's attached label (read only) (Read-only)
   */
  assetCode?: string | undefined;
  /**
   * UUID of an Asset Type which defines the fields that can be stored for this Asset (read only) (Read-only)
   */
  assetTypeUuid?: string | undefined;
  /**
   * User-facing description of this asset
   */
  name?: string | undefined;
  /**
   * Latitude component of the Asset's location in degrees
   */
  lat?: number | undefined;
  /**
   * Longitude component of the Asset's location in degrees
   */
  lng?: number | undefined;
  /**
   * Timestamp at which the Asset's location was last updated
   */
  geoTimestamp?: string | undefined;
  /**
   * Altitude component of the Asset's location in metres
   */
  altitude?: number | undefined;
  fieldData?: Array<FieldDatum> | undefined;
};

/** @internal */
export const AssetActive$inboundSchema: z.ZodNativeEnum<typeof AssetActive> = z
  .nativeEnum(AssetActive);

/** @internal */
export const AssetActive$outboundSchema: z.ZodNativeEnum<typeof AssetActive> =
  AssetActive$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AssetActive$ {
  /** @deprecated use `AssetActive$inboundSchema` instead. */
  export const inboundSchema = AssetActive$inboundSchema;
  /** @deprecated use `AssetActive$outboundSchema` instead. */
  export const outboundSchema = AssetActive$outboundSchema;
}

/** @internal */
export const FieldDatum$inboundSchema: z.ZodType<
  FieldDatum,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string(),
  fieldType: z.string(),
  fieldName: z.string(),
  fieldValue: z.string(),
  sortOrder: z.number(),
});

/** @internal */
export type FieldDatum$Outbound = {
  uuid: string;
  fieldType: string;
  fieldName: string;
  fieldValue: string;
  sortOrder: number;
};

/** @internal */
export const FieldDatum$outboundSchema: z.ZodType<
  FieldDatum$Outbound,
  z.ZodTypeDef,
  FieldDatum
> = z.object({
  uuid: z.string(),
  fieldType: z.string(),
  fieldName: z.string(),
  fieldValue: z.string(),
  sortOrder: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldDatum$ {
  /** @deprecated use `FieldDatum$inboundSchema` instead. */
  export const inboundSchema = FieldDatum$inboundSchema;
  /** @deprecated use `FieldDatum$outboundSchema` instead. */
  export const outboundSchema = FieldDatum$outboundSchema;
  /** @deprecated use `FieldDatum$Outbound` instead. */
  export type Outbound = FieldDatum$Outbound;
}

export function fieldDatumToJSON(fieldDatum: FieldDatum): string {
  return JSON.stringify(FieldDatum$outboundSchema.parse(fieldDatum));
}

export function fieldDatumFromJSON(
  jsonString: string,
): SafeParseResult<FieldDatum, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FieldDatum$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldDatum' from JSON`,
  );
}

/** @internal */
export const Asset$inboundSchema: z.ZodType<Asset, z.ZodTypeDef, unknown> = z
  .object({
    uuid: z.string().optional(),
    active: AssetActive$inboundSchema.default(1),
    edit_date: z.string().optional(),
    company_uuid: z.string().optional(),
    asset_code: z.string().optional(),
    asset_type_uuid: z.string().optional(),
    name: z.string().optional(),
    lat: z.number().optional(),
    lng: z.number().optional(),
    geo_timestamp: z.string().optional(),
    altitude: z.number().optional(),
    field_data: z.array(z.lazy(() => FieldDatum$inboundSchema)).optional(),
  }).transform((v) => {
    return remap$(v, {
      "edit_date": "editDate",
      "company_uuid": "companyUuid",
      "asset_code": "assetCode",
      "asset_type_uuid": "assetTypeUuid",
      "geo_timestamp": "geoTimestamp",
      "field_data": "fieldData",
    });
  });

/** @internal */
export type Asset$Outbound = {
  uuid?: string | undefined;
  active: number;
  edit_date?: string | undefined;
  company_uuid?: string | undefined;
  asset_code?: string | undefined;
  asset_type_uuid?: string | undefined;
  name?: string | undefined;
  lat?: number | undefined;
  lng?: number | undefined;
  geo_timestamp?: string | undefined;
  altitude?: number | undefined;
  field_data?: Array<FieldDatum$Outbound> | undefined;
};

/** @internal */
export const Asset$outboundSchema: z.ZodType<
  Asset$Outbound,
  z.ZodTypeDef,
  Asset
> = z.object({
  uuid: z.string().optional(),
  active: AssetActive$outboundSchema.default(1),
  editDate: z.string().optional(),
  companyUuid: z.string().optional(),
  assetCode: z.string().optional(),
  assetTypeUuid: z.string().optional(),
  name: z.string().optional(),
  lat: z.number().optional(),
  lng: z.number().optional(),
  geoTimestamp: z.string().optional(),
  altitude: z.number().optional(),
  fieldData: z.array(z.lazy(() => FieldDatum$outboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    editDate: "edit_date",
    companyUuid: "company_uuid",
    assetCode: "asset_code",
    assetTypeUuid: "asset_type_uuid",
    geoTimestamp: "geo_timestamp",
    fieldData: "field_data",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Asset$ {
  /** @deprecated use `Asset$inboundSchema` instead. */
  export const inboundSchema = Asset$inboundSchema;
  /** @deprecated use `Asset$outboundSchema` instead. */
  export const outboundSchema = Asset$outboundSchema;
  /** @deprecated use `Asset$Outbound` instead. */
  export type Outbound = Asset$Outbound;
}

export function assetToJSON(asset: Asset): string {
  return JSON.stringify(Asset$outboundSchema.parse(asset));
}

export function assetFromJSON(
  jsonString: string,
): SafeParseResult<Asset, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Asset$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Asset' from JSON`,
  );
}

/** @internal */
export const AssetInput$inboundSchema: z.ZodType<
  AssetInput,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string().optional(),
  active: AssetActive$inboundSchema.default(1),
  company_uuid: z.string().optional(),
  asset_code: z.string().optional(),
  asset_type_uuid: z.string().optional(),
  name: z.string().optional(),
  lat: z.number().optional(),
  lng: z.number().optional(),
  geo_timestamp: z.string().optional(),
  altitude: z.number().optional(),
  field_data: z.array(z.lazy(() => FieldDatum$inboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    "company_uuid": "companyUuid",
    "asset_code": "assetCode",
    "asset_type_uuid": "assetTypeUuid",
    "geo_timestamp": "geoTimestamp",
    "field_data": "fieldData",
  });
});

/** @internal */
export type AssetInput$Outbound = {
  uuid?: string | undefined;
  active: number;
  company_uuid?: string | undefined;
  asset_code?: string | undefined;
  asset_type_uuid?: string | undefined;
  name?: string | undefined;
  lat?: number | undefined;
  lng?: number | undefined;
  geo_timestamp?: string | undefined;
  altitude?: number | undefined;
  field_data?: Array<FieldDatum$Outbound> | undefined;
};

/** @internal */
export const AssetInput$outboundSchema: z.ZodType<
  AssetInput$Outbound,
  z.ZodTypeDef,
  AssetInput
> = z.object({
  uuid: z.string().optional(),
  active: AssetActive$outboundSchema.default(1),
  companyUuid: z.string().optional(),
  assetCode: z.string().optional(),
  assetTypeUuid: z.string().optional(),
  name: z.string().optional(),
  lat: z.number().optional(),
  lng: z.number().optional(),
  geoTimestamp: z.string().optional(),
  altitude: z.number().optional(),
  fieldData: z.array(z.lazy(() => FieldDatum$outboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    companyUuid: "company_uuid",
    assetCode: "asset_code",
    assetTypeUuid: "asset_type_uuid",
    geoTimestamp: "geo_timestamp",
    fieldData: "field_data",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AssetInput$ {
  /** @deprecated use `AssetInput$inboundSchema` instead. */
  export const inboundSchema = AssetInput$inboundSchema;
  /** @deprecated use `AssetInput$outboundSchema` instead. */
  export const outboundSchema = AssetInput$outboundSchema;
  /** @deprecated use `AssetInput$Outbound` instead. */
  export type Outbound = AssetInput$Outbound;
}

export function assetInputToJSON(assetInput: AssetInput): string {
  return JSON.stringify(AssetInput$outboundSchema.parse(assetInput));
}

export function assetInputFromJSON(
  jsonString: string,
): SafeParseResult<AssetInput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AssetInput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AssetInput' from JSON`,
  );
}
