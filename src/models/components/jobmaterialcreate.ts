/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type JobMaterialCreate = {
  /**
   * The UUID of the job this material is associated with. This is a required field that establishes the relationship between the job material and its parent job.
   */
  jobUuid?: string | undefined;
  /**
   * The UUID of the material catalog item this job material is based on. Links the job material to the corresponding material in the materials catalog.
   */
  materialUuid?: string | undefined;
  /**
   * The name of the material item used on the job. This is displayed on invoices and is used to identify the material to the customer. The name typically comes from the associated material object but can be customized per job.
   */
  name?: string | undefined;
  /**
   * The quantity of this material used on the job. This field is mandatory and cannot be empty.
   */
  quantity: string;
  /**
   * The unit price of the material excluding tax. Used in calculations to determine the total price for this line item on the job. The system may automatically adjust this value to maintain consistency with tax-inclusive pricing.
   */
  price?: string | undefined;
  /**
   * The unit price amount as displayed on invoices and quotes. This can be either tax-inclusive or tax-exclusive depending on the displayed_amount_is_tax_inclusive field value. Used for presentation to customers.
   */
  displayedAmount?: string | undefined;
  /**
   * Boolean flag indicating whether the displayed_amount includes tax (true) or excludes tax (false). This controls how prices are presented to customers and determines which price value (inclusive or exclusive) is used in calculations.
   */
  displayedAmountIsTaxInclusive?: string | undefined;
  /**
   * The UUID of the tax rate applied to this job material. Determines how tax is calculated for this specific line item.
   */
  taxRateUuid?: string | undefined;
  /**
   * Integer value controlling the display order of materials on a job. Lower values appear first in lists. Used to customize the presentation order of materials on quotes, invoices and job forms.
   */
  sortOrder?: string | undefined;
  /**
   * The cost of the material for this job. This is the ex-tax amount.
   */
  cost?: string | undefined;
  /**
   * The cost of the material for this job, displayed as inc-tax or ex-tax depending on jobMaterial.displayed_amount_is_tax_inclusive.
   */
  displayedCost?: string | undefined;
  /**
   * Unique identifier for this record
   */
  uuid?: string | undefined;
  /**
   * UUID of a JobMaterialBundle which this JobMaterial belongs to. The default value is blank, which means that the JobMaterial is not part of a JobMaterialBundle.
   */
  jobMaterialBundleUuid?: string | undefined;
};

/** @internal */
export const JobMaterialCreate$inboundSchema: z.ZodType<
  JobMaterialCreate,
  z.ZodTypeDef,
  unknown
> = z.object({
  job_uuid: z.string().optional(),
  material_uuid: z.string().optional(),
  name: z.string().optional(),
  quantity: z.string(),
  price: z.string().optional(),
  displayed_amount: z.string().optional(),
  displayed_amount_is_tax_inclusive: z.string().optional(),
  tax_rate_uuid: z.string().optional(),
  sort_order: z.string().optional(),
  cost: z.string().optional(),
  displayed_cost: z.string().optional(),
  uuid: z.string().optional(),
  job_material_bundle_uuid: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "job_uuid": "jobUuid",
    "material_uuid": "materialUuid",
    "displayed_amount": "displayedAmount",
    "displayed_amount_is_tax_inclusive": "displayedAmountIsTaxInclusive",
    "tax_rate_uuid": "taxRateUuid",
    "sort_order": "sortOrder",
    "displayed_cost": "displayedCost",
    "job_material_bundle_uuid": "jobMaterialBundleUuid",
  });
});

/** @internal */
export type JobMaterialCreate$Outbound = {
  job_uuid?: string | undefined;
  material_uuid?: string | undefined;
  name?: string | undefined;
  quantity: string;
  price?: string | undefined;
  displayed_amount?: string | undefined;
  displayed_amount_is_tax_inclusive?: string | undefined;
  tax_rate_uuid?: string | undefined;
  sort_order?: string | undefined;
  cost?: string | undefined;
  displayed_cost?: string | undefined;
  uuid?: string | undefined;
  job_material_bundle_uuid?: string | undefined;
};

/** @internal */
export const JobMaterialCreate$outboundSchema: z.ZodType<
  JobMaterialCreate$Outbound,
  z.ZodTypeDef,
  JobMaterialCreate
> = z.object({
  jobUuid: z.string().optional(),
  materialUuid: z.string().optional(),
  name: z.string().optional(),
  quantity: z.string(),
  price: z.string().optional(),
  displayedAmount: z.string().optional(),
  displayedAmountIsTaxInclusive: z.string().optional(),
  taxRateUuid: z.string().optional(),
  sortOrder: z.string().optional(),
  cost: z.string().optional(),
  displayedCost: z.string().optional(),
  uuid: z.string().optional(),
  jobMaterialBundleUuid: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    jobUuid: "job_uuid",
    materialUuid: "material_uuid",
    displayedAmount: "displayed_amount",
    displayedAmountIsTaxInclusive: "displayed_amount_is_tax_inclusive",
    taxRateUuid: "tax_rate_uuid",
    sortOrder: "sort_order",
    displayedCost: "displayed_cost",
    jobMaterialBundleUuid: "job_material_bundle_uuid",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace JobMaterialCreate$ {
  /** @deprecated use `JobMaterialCreate$inboundSchema` instead. */
  export const inboundSchema = JobMaterialCreate$inboundSchema;
  /** @deprecated use `JobMaterialCreate$outboundSchema` instead. */
  export const outboundSchema = JobMaterialCreate$outboundSchema;
  /** @deprecated use `JobMaterialCreate$Outbound` instead. */
  export type Outbound = JobMaterialCreate$Outbound;
}

export function jobMaterialCreateToJSON(
  jobMaterialCreate: JobMaterialCreate,
): string {
  return JSON.stringify(
    JobMaterialCreate$outboundSchema.parse(jobMaterialCreate),
  );
}

export function jobMaterialCreateFromJSON(
  jsonString: string,
): SafeParseResult<JobMaterialCreate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => JobMaterialCreate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'JobMaterialCreate' from JSON`,
  );
}
