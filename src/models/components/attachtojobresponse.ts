/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type AttachToJobResponseJob = {
  uuid?: string | undefined;
  id?: number | undefined;
  location?: string | undefined;
};

export type AttachToJobResponse = {
  success?: boolean | undefined;
  job?: AttachToJobResponseJob | undefined;
  message?: string | undefined;
};

/** @internal */
export const AttachToJobResponseJob$inboundSchema: z.ZodType<
  AttachToJobResponseJob,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string().optional(),
  id: z.number().int().optional(),
  location: z.string().optional(),
});

/** @internal */
export type AttachToJobResponseJob$Outbound = {
  uuid?: string | undefined;
  id?: number | undefined;
  location?: string | undefined;
};

/** @internal */
export const AttachToJobResponseJob$outboundSchema: z.ZodType<
  AttachToJobResponseJob$Outbound,
  z.ZodTypeDef,
  AttachToJobResponseJob
> = z.object({
  uuid: z.string().optional(),
  id: z.number().int().optional(),
  location: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AttachToJobResponseJob$ {
  /** @deprecated use `AttachToJobResponseJob$inboundSchema` instead. */
  export const inboundSchema = AttachToJobResponseJob$inboundSchema;
  /** @deprecated use `AttachToJobResponseJob$outboundSchema` instead. */
  export const outboundSchema = AttachToJobResponseJob$outboundSchema;
  /** @deprecated use `AttachToJobResponseJob$Outbound` instead. */
  export type Outbound = AttachToJobResponseJob$Outbound;
}

export function attachToJobResponseJobToJSON(
  attachToJobResponseJob: AttachToJobResponseJob,
): string {
  return JSON.stringify(
    AttachToJobResponseJob$outboundSchema.parse(attachToJobResponseJob),
  );
}

export function attachToJobResponseJobFromJSON(
  jsonString: string,
): SafeParseResult<AttachToJobResponseJob, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AttachToJobResponseJob$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AttachToJobResponseJob' from JSON`,
  );
}

/** @internal */
export const AttachToJobResponse$inboundSchema: z.ZodType<
  AttachToJobResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  success: z.boolean().optional(),
  job: z.lazy(() => AttachToJobResponseJob$inboundSchema).optional(),
  message: z.string().optional(),
});

/** @internal */
export type AttachToJobResponse$Outbound = {
  success?: boolean | undefined;
  job?: AttachToJobResponseJob$Outbound | undefined;
  message?: string | undefined;
};

/** @internal */
export const AttachToJobResponse$outboundSchema: z.ZodType<
  AttachToJobResponse$Outbound,
  z.ZodTypeDef,
  AttachToJobResponse
> = z.object({
  success: z.boolean().optional(),
  job: z.lazy(() => AttachToJobResponseJob$outboundSchema).optional(),
  message: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AttachToJobResponse$ {
  /** @deprecated use `AttachToJobResponse$inboundSchema` instead. */
  export const inboundSchema = AttachToJobResponse$inboundSchema;
  /** @deprecated use `AttachToJobResponse$outboundSchema` instead. */
  export const outboundSchema = AttachToJobResponse$outboundSchema;
  /** @deprecated use `AttachToJobResponse$Outbound` instead. */
  export type Outbound = AttachToJobResponse$Outbound;
}

export function attachToJobResponseToJSON(
  attachToJobResponse: AttachToJobResponse,
): string {
  return JSON.stringify(
    AttachToJobResponse$outboundSchema.parse(attachToJobResponse),
  );
}

export function attachToJobResponseFromJSON(
  jsonString: string,
): SafeParseResult<AttachToJobResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AttachToJobResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AttachToJobResponse' from JSON`,
  );
}
