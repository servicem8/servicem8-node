/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Record active/deleted flag.
 *
 * @remarks
 *
 * Valid values are [0,1]
 */
export const StaffActive = {
  Zero: 0,
  One: 1,
} as const;
/**
 * Record active/deleted flag.
 *
 * @remarks
 *
 * Valid values are [0,1]
 */
export type StaffActive = ClosedEnum<typeof StaffActive>;

/**
 * @remarks
 *
 * Valid values are [0,1]
 */
export const HideFromSchedule = {
  Zero: 0,
  One: 1,
} as const;
/**
 * @remarks
 *
 * Valid values are [0,1]
 */
export type HideFromSchedule = ClosedEnum<typeof HideFromSchedule>;

export type Staff = {
  /**
   * Record UUID key
   */
  uuid?: string | undefined;
  /**
   * Record active/deleted flag.
   *
   * @remarks
   *
   * Valid values are [0,1]
   */
  active?: StaffActive | undefined;
  /**
   * Record last modified timestamp
   */
  editDate?: string | undefined;
  /**
   * Staff First Name
   */
  first: string;
  /**
   * Staff Last Name
   */
  last: string;
  /**
   * Staff Email Address. This is also your login name.
   */
  email: string;
  mobile?: string | undefined;
  lng?: number | undefined;
  lat?: number | undefined;
  geoTimestamp?: string | undefined;
  jobTitle?: string | undefined;
  navigatingToJobUuid?: string | undefined;
  navigatingTimestamp?: string | undefined;
  navigatingExpiryTimestamp?: string | undefined;
  color?: string | undefined;
  customIconUrl?: string | undefined;
  statusMessage?: string | undefined;
  statusMessageTimestamp?: string | undefined;
  canReceivePushNotification?: string | undefined;
  /**
   * @remarks
   *
   * Valid values are [0,1]
   */
  hideFromSchedule?: HideFromSchedule | undefined;
  securityRoleUuid?: string | undefined;
};

export type StaffInput = {
  /**
   * Record UUID key
   */
  uuid?: string | undefined;
  /**
   * Record active/deleted flag.
   *
   * @remarks
   *
   * Valid values are [0,1]
   */
  active?: StaffActive | undefined;
  /**
   * Staff First Name
   */
  first: string;
  /**
   * Staff Last Name
   */
  last: string;
  /**
   * Staff Email Address. This is also your login name.
   */
  email: string;
  mobile?: string | undefined;
  lng?: number | undefined;
  lat?: number | undefined;
  geoTimestamp?: string | undefined;
  jobTitle?: string | undefined;
  navigatingToJobUuid?: string | undefined;
  navigatingTimestamp?: string | undefined;
  navigatingExpiryTimestamp?: string | undefined;
  color?: string | undefined;
  customIconUrl?: string | undefined;
  statusMessage?: string | undefined;
  statusMessageTimestamp?: string | undefined;
  canReceivePushNotification?: string | undefined;
  /**
   * @remarks
   *
   * Valid values are [0,1]
   */
  hideFromSchedule?: HideFromSchedule | undefined;
  securityRoleUuid?: string | undefined;
};

/** @internal */
export const StaffActive$inboundSchema: z.ZodNativeEnum<typeof StaffActive> = z
  .nativeEnum(StaffActive);

/** @internal */
export const StaffActive$outboundSchema: z.ZodNativeEnum<typeof StaffActive> =
  StaffActive$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StaffActive$ {
  /** @deprecated use `StaffActive$inboundSchema` instead. */
  export const inboundSchema = StaffActive$inboundSchema;
  /** @deprecated use `StaffActive$outboundSchema` instead. */
  export const outboundSchema = StaffActive$outboundSchema;
}

/** @internal */
export const HideFromSchedule$inboundSchema: z.ZodNativeEnum<
  typeof HideFromSchedule
> = z.nativeEnum(HideFromSchedule);

/** @internal */
export const HideFromSchedule$outboundSchema: z.ZodNativeEnum<
  typeof HideFromSchedule
> = HideFromSchedule$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HideFromSchedule$ {
  /** @deprecated use `HideFromSchedule$inboundSchema` instead. */
  export const inboundSchema = HideFromSchedule$inboundSchema;
  /** @deprecated use `HideFromSchedule$outboundSchema` instead. */
  export const outboundSchema = HideFromSchedule$outboundSchema;
}

/** @internal */
export const Staff$inboundSchema: z.ZodType<Staff, z.ZodTypeDef, unknown> = z
  .object({
    uuid: z.string().optional(),
    active: StaffActive$inboundSchema.default(1),
    edit_date: z.string().optional(),
    first: z.string(),
    last: z.string(),
    email: z.string(),
    mobile: z.string().optional(),
    lng: z.number().optional(),
    lat: z.number().optional(),
    geo_timestamp: z.string().optional(),
    job_title: z.string().optional(),
    navigating_to_job_uuid: z.string().optional(),
    navigating_timestamp: z.string().optional(),
    navigating_expiry_timestamp: z.string().optional(),
    color: z.string().optional(),
    custom_icon_url: z.string().optional(),
    status_message: z.string().optional(),
    status_message_timestamp: z.string().optional(),
    can_receive_push_notification: z.string().optional(),
    hide_from_schedule: HideFromSchedule$inboundSchema.optional(),
    security_role_uuid: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      "edit_date": "editDate",
      "geo_timestamp": "geoTimestamp",
      "job_title": "jobTitle",
      "navigating_to_job_uuid": "navigatingToJobUuid",
      "navigating_timestamp": "navigatingTimestamp",
      "navigating_expiry_timestamp": "navigatingExpiryTimestamp",
      "custom_icon_url": "customIconUrl",
      "status_message": "statusMessage",
      "status_message_timestamp": "statusMessageTimestamp",
      "can_receive_push_notification": "canReceivePushNotification",
      "hide_from_schedule": "hideFromSchedule",
      "security_role_uuid": "securityRoleUuid",
    });
  });

/** @internal */
export type Staff$Outbound = {
  uuid?: string | undefined;
  active: number;
  edit_date?: string | undefined;
  first: string;
  last: string;
  email: string;
  mobile?: string | undefined;
  lng?: number | undefined;
  lat?: number | undefined;
  geo_timestamp?: string | undefined;
  job_title?: string | undefined;
  navigating_to_job_uuid?: string | undefined;
  navigating_timestamp?: string | undefined;
  navigating_expiry_timestamp?: string | undefined;
  color?: string | undefined;
  custom_icon_url?: string | undefined;
  status_message?: string | undefined;
  status_message_timestamp?: string | undefined;
  can_receive_push_notification?: string | undefined;
  hide_from_schedule?: number | undefined;
  security_role_uuid?: string | undefined;
};

/** @internal */
export const Staff$outboundSchema: z.ZodType<
  Staff$Outbound,
  z.ZodTypeDef,
  Staff
> = z.object({
  uuid: z.string().optional(),
  active: StaffActive$outboundSchema.default(1),
  editDate: z.string().optional(),
  first: z.string(),
  last: z.string(),
  email: z.string(),
  mobile: z.string().optional(),
  lng: z.number().optional(),
  lat: z.number().optional(),
  geoTimestamp: z.string().optional(),
  jobTitle: z.string().optional(),
  navigatingToJobUuid: z.string().optional(),
  navigatingTimestamp: z.string().optional(),
  navigatingExpiryTimestamp: z.string().optional(),
  color: z.string().optional(),
  customIconUrl: z.string().optional(),
  statusMessage: z.string().optional(),
  statusMessageTimestamp: z.string().optional(),
  canReceivePushNotification: z.string().optional(),
  hideFromSchedule: HideFromSchedule$outboundSchema.optional(),
  securityRoleUuid: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    editDate: "edit_date",
    geoTimestamp: "geo_timestamp",
    jobTitle: "job_title",
    navigatingToJobUuid: "navigating_to_job_uuid",
    navigatingTimestamp: "navigating_timestamp",
    navigatingExpiryTimestamp: "navigating_expiry_timestamp",
    customIconUrl: "custom_icon_url",
    statusMessage: "status_message",
    statusMessageTimestamp: "status_message_timestamp",
    canReceivePushNotification: "can_receive_push_notification",
    hideFromSchedule: "hide_from_schedule",
    securityRoleUuid: "security_role_uuid",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Staff$ {
  /** @deprecated use `Staff$inboundSchema` instead. */
  export const inboundSchema = Staff$inboundSchema;
  /** @deprecated use `Staff$outboundSchema` instead. */
  export const outboundSchema = Staff$outboundSchema;
  /** @deprecated use `Staff$Outbound` instead. */
  export type Outbound = Staff$Outbound;
}

export function staffToJSON(staff: Staff): string {
  return JSON.stringify(Staff$outboundSchema.parse(staff));
}

export function staffFromJSON(
  jsonString: string,
): SafeParseResult<Staff, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Staff$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Staff' from JSON`,
  );
}

/** @internal */
export const StaffInput$inboundSchema: z.ZodType<
  StaffInput,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string().optional(),
  active: StaffActive$inboundSchema.default(1),
  first: z.string(),
  last: z.string(),
  email: z.string(),
  mobile: z.string().optional(),
  lng: z.number().optional(),
  lat: z.number().optional(),
  geo_timestamp: z.string().optional(),
  job_title: z.string().optional(),
  navigating_to_job_uuid: z.string().optional(),
  navigating_timestamp: z.string().optional(),
  navigating_expiry_timestamp: z.string().optional(),
  color: z.string().optional(),
  custom_icon_url: z.string().optional(),
  status_message: z.string().optional(),
  status_message_timestamp: z.string().optional(),
  can_receive_push_notification: z.string().optional(),
  hide_from_schedule: HideFromSchedule$inboundSchema.optional(),
  security_role_uuid: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "geo_timestamp": "geoTimestamp",
    "job_title": "jobTitle",
    "navigating_to_job_uuid": "navigatingToJobUuid",
    "navigating_timestamp": "navigatingTimestamp",
    "navigating_expiry_timestamp": "navigatingExpiryTimestamp",
    "custom_icon_url": "customIconUrl",
    "status_message": "statusMessage",
    "status_message_timestamp": "statusMessageTimestamp",
    "can_receive_push_notification": "canReceivePushNotification",
    "hide_from_schedule": "hideFromSchedule",
    "security_role_uuid": "securityRoleUuid",
  });
});

/** @internal */
export type StaffInput$Outbound = {
  uuid?: string | undefined;
  active: number;
  first: string;
  last: string;
  email: string;
  mobile?: string | undefined;
  lng?: number | undefined;
  lat?: number | undefined;
  geo_timestamp?: string | undefined;
  job_title?: string | undefined;
  navigating_to_job_uuid?: string | undefined;
  navigating_timestamp?: string | undefined;
  navigating_expiry_timestamp?: string | undefined;
  color?: string | undefined;
  custom_icon_url?: string | undefined;
  status_message?: string | undefined;
  status_message_timestamp?: string | undefined;
  can_receive_push_notification?: string | undefined;
  hide_from_schedule?: number | undefined;
  security_role_uuid?: string | undefined;
};

/** @internal */
export const StaffInput$outboundSchema: z.ZodType<
  StaffInput$Outbound,
  z.ZodTypeDef,
  StaffInput
> = z.object({
  uuid: z.string().optional(),
  active: StaffActive$outboundSchema.default(1),
  first: z.string(),
  last: z.string(),
  email: z.string(),
  mobile: z.string().optional(),
  lng: z.number().optional(),
  lat: z.number().optional(),
  geoTimestamp: z.string().optional(),
  jobTitle: z.string().optional(),
  navigatingToJobUuid: z.string().optional(),
  navigatingTimestamp: z.string().optional(),
  navigatingExpiryTimestamp: z.string().optional(),
  color: z.string().optional(),
  customIconUrl: z.string().optional(),
  statusMessage: z.string().optional(),
  statusMessageTimestamp: z.string().optional(),
  canReceivePushNotification: z.string().optional(),
  hideFromSchedule: HideFromSchedule$outboundSchema.optional(),
  securityRoleUuid: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    geoTimestamp: "geo_timestamp",
    jobTitle: "job_title",
    navigatingToJobUuid: "navigating_to_job_uuid",
    navigatingTimestamp: "navigating_timestamp",
    navigatingExpiryTimestamp: "navigating_expiry_timestamp",
    customIconUrl: "custom_icon_url",
    statusMessage: "status_message",
    statusMessageTimestamp: "status_message_timestamp",
    canReceivePushNotification: "can_receive_push_notification",
    hideFromSchedule: "hide_from_schedule",
    securityRoleUuid: "security_role_uuid",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StaffInput$ {
  /** @deprecated use `StaffInput$inboundSchema` instead. */
  export const inboundSchema = StaffInput$inboundSchema;
  /** @deprecated use `StaffInput$outboundSchema` instead. */
  export const outboundSchema = StaffInput$outboundSchema;
  /** @deprecated use `StaffInput$Outbound` instead. */
  export type Outbound = StaffInput$Outbound;
}

export function staffInputToJSON(staffInput: StaffInput): string {
  return JSON.stringify(StaffInput$outboundSchema.parse(staffInput));
}

export function staffInputFromJSON(
  jsonString: string,
): SafeParseResult<StaffInput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StaffInput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StaffInput' from JSON`,
  );
}
