/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const KnowledgeArticleCreateObjectName = {
  JobMixed: "Job",
  JobLower: "job",
} as const;
export type KnowledgeArticleCreateObjectName = ClosedEnum<
  typeof KnowledgeArticleCreateObjectName
>;

export type KnowledgeArticleCreateRelationship = {
  objectName: KnowledgeArticleCreateObjectName;
  objectUuid: string;
  objectDescription?: string | undefined;
  createDate?: string | undefined;
};

export type KnowledgeArticleCreate = {
  /**
   * Unique identifier for this record
   */
  uuid?: string | undefined;
  /**
   * Title of the knowledge article. This is a mandatory field with a maximum length of 100 characters. Used for identifying and searching for articles in the knowledge base.
   */
  name: string;
  /**
   * The main content of the knowledge article. For 'richtext' and 'pdf' articles, this contains HTML formatted text. For 'video' articles, this may contain supplementary information. For 'call' articles, this contains call details. Supports extended text length.
   */
  content?: string | undefined;
  /**
   * Type of knowledge article. Valid values are 'video', 'richtext', 'pdf', or 'call'. This determines how the article content is presented and processed in the system.
   */
  articleType?: string | undefined;
  /**
   * Comma-separated list of tags associated with this knowledge article. Maximum length is 2000 characters. Tags are used for categorization, searching, and automatic relationship generation with other objects like Services, Materials, and Companies.
   */
  tags?: string | undefined;
  /**
   * JSON array of manually created relationships between this knowledge article and other objects. Contains objects with properties: object_name (e.g., 'job'), object_uuid (the related object's UUID), object_description (a description of the related object), and create_date. Used to associate articles with specific jobs or other system objects.
   */
  relationships?: Array<KnowledgeArticleCreateRelationship> | undefined;
};

/** @internal */
export const KnowledgeArticleCreateObjectName$inboundSchema: z.ZodNativeEnum<
  typeof KnowledgeArticleCreateObjectName
> = z.nativeEnum(KnowledgeArticleCreateObjectName);

/** @internal */
export const KnowledgeArticleCreateObjectName$outboundSchema: z.ZodNativeEnum<
  typeof KnowledgeArticleCreateObjectName
> = KnowledgeArticleCreateObjectName$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace KnowledgeArticleCreateObjectName$ {
  /** @deprecated use `KnowledgeArticleCreateObjectName$inboundSchema` instead. */
  export const inboundSchema = KnowledgeArticleCreateObjectName$inboundSchema;
  /** @deprecated use `KnowledgeArticleCreateObjectName$outboundSchema` instead. */
  export const outboundSchema = KnowledgeArticleCreateObjectName$outboundSchema;
}

/** @internal */
export const KnowledgeArticleCreateRelationship$inboundSchema: z.ZodType<
  KnowledgeArticleCreateRelationship,
  z.ZodTypeDef,
  unknown
> = z.object({
  object_name: KnowledgeArticleCreateObjectName$inboundSchema,
  object_uuid: z.string(),
  object_description: z.string().optional(),
  create_date: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "object_name": "objectName",
    "object_uuid": "objectUuid",
    "object_description": "objectDescription",
    "create_date": "createDate",
  });
});

/** @internal */
export type KnowledgeArticleCreateRelationship$Outbound = {
  object_name: string;
  object_uuid: string;
  object_description?: string | undefined;
  create_date?: string | undefined;
};

/** @internal */
export const KnowledgeArticleCreateRelationship$outboundSchema: z.ZodType<
  KnowledgeArticleCreateRelationship$Outbound,
  z.ZodTypeDef,
  KnowledgeArticleCreateRelationship
> = z.object({
  objectName: KnowledgeArticleCreateObjectName$outboundSchema,
  objectUuid: z.string(),
  objectDescription: z.string().optional(),
  createDate: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    objectName: "object_name",
    objectUuid: "object_uuid",
    objectDescription: "object_description",
    createDate: "create_date",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace KnowledgeArticleCreateRelationship$ {
  /** @deprecated use `KnowledgeArticleCreateRelationship$inboundSchema` instead. */
  export const inboundSchema = KnowledgeArticleCreateRelationship$inboundSchema;
  /** @deprecated use `KnowledgeArticleCreateRelationship$outboundSchema` instead. */
  export const outboundSchema =
    KnowledgeArticleCreateRelationship$outboundSchema;
  /** @deprecated use `KnowledgeArticleCreateRelationship$Outbound` instead. */
  export type Outbound = KnowledgeArticleCreateRelationship$Outbound;
}

export function knowledgeArticleCreateRelationshipToJSON(
  knowledgeArticleCreateRelationship: KnowledgeArticleCreateRelationship,
): string {
  return JSON.stringify(
    KnowledgeArticleCreateRelationship$outboundSchema.parse(
      knowledgeArticleCreateRelationship,
    ),
  );
}

export function knowledgeArticleCreateRelationshipFromJSON(
  jsonString: string,
): SafeParseResult<KnowledgeArticleCreateRelationship, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      KnowledgeArticleCreateRelationship$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'KnowledgeArticleCreateRelationship' from JSON`,
  );
}

/** @internal */
export const KnowledgeArticleCreate$inboundSchema: z.ZodType<
  KnowledgeArticleCreate,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string().optional(),
  name: z.string(),
  content: z.string().optional(),
  article_type: z.string().optional(),
  tags: z.string().optional(),
  relationships: z.array(
    z.lazy(() => KnowledgeArticleCreateRelationship$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "article_type": "articleType",
  });
});

/** @internal */
export type KnowledgeArticleCreate$Outbound = {
  uuid?: string | undefined;
  name: string;
  content?: string | undefined;
  article_type?: string | undefined;
  tags?: string | undefined;
  relationships?:
    | Array<KnowledgeArticleCreateRelationship$Outbound>
    | undefined;
};

/** @internal */
export const KnowledgeArticleCreate$outboundSchema: z.ZodType<
  KnowledgeArticleCreate$Outbound,
  z.ZodTypeDef,
  KnowledgeArticleCreate
> = z.object({
  uuid: z.string().optional(),
  name: z.string(),
  content: z.string().optional(),
  articleType: z.string().optional(),
  tags: z.string().optional(),
  relationships: z.array(
    z.lazy(() => KnowledgeArticleCreateRelationship$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    articleType: "article_type",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace KnowledgeArticleCreate$ {
  /** @deprecated use `KnowledgeArticleCreate$inboundSchema` instead. */
  export const inboundSchema = KnowledgeArticleCreate$inboundSchema;
  /** @deprecated use `KnowledgeArticleCreate$outboundSchema` instead. */
  export const outboundSchema = KnowledgeArticleCreate$outboundSchema;
  /** @deprecated use `KnowledgeArticleCreate$Outbound` instead. */
  export type Outbound = KnowledgeArticleCreate$Outbound;
}

export function knowledgeArticleCreateToJSON(
  knowledgeArticleCreate: KnowledgeArticleCreate,
): string {
  return JSON.stringify(
    KnowledgeArticleCreate$outboundSchema.parse(knowledgeArticleCreate),
  );
}

export function knowledgeArticleCreateFromJSON(
  jsonString: string,
): SafeParseResult<KnowledgeArticleCreate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => KnowledgeArticleCreate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'KnowledgeArticleCreate' from JSON`,
  );
}
