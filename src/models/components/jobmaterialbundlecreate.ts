/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type JobMaterialBundleCreate = {
  /**
   * Unique identifier for this record
   */
  uuid?: string | undefined;
  /**
   * Unique identifier for the material bundle within the job. Displayed on the Quote/Invoice in the same way as for JobMaterials.
   */
  itemNumber?: string | undefined;
  /**
   * Descriptive name of the job material bundle. Displayed on the Quote/Invoice in the same way as for JobMaterials.
   */
  name?: string | undefined;
  /**
   * The quantity shown for the bundle line item on the invoice. Must be greater than zero. The quantity of each JobMaterial within the bundle is determined by dividing by this value.
   */
  quantity?: string | undefined;
  /**
   * Defines the display order of the JobMaterialBundle relative to other JobMaterials and JobMaterialBundles on the Job. Lower values are displayed first.
   */
  sortOrder?: number | undefined;
  /**
   * UUID of the MaterialBundle which this JobMaterialBundle was originally created from.
   */
  materialBundleUuid?: string | undefined;
  /**
   * UUID of the job that this material bundle is associated with. Links the bundle to a specific job record.
   */
  jobUuid?: string | undefined;
};

/** @internal */
export const JobMaterialBundleCreate$inboundSchema: z.ZodType<
  JobMaterialBundleCreate,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string().optional(),
  item_number: z.string().optional(),
  name: z.string().optional(),
  quantity: z.string().optional(),
  sort_order: z.number().int().optional(),
  material_bundle_uuid: z.string().optional(),
  job_uuid: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "item_number": "itemNumber",
    "sort_order": "sortOrder",
    "material_bundle_uuid": "materialBundleUuid",
    "job_uuid": "jobUuid",
  });
});

/** @internal */
export type JobMaterialBundleCreate$Outbound = {
  uuid?: string | undefined;
  item_number?: string | undefined;
  name?: string | undefined;
  quantity?: string | undefined;
  sort_order?: number | undefined;
  material_bundle_uuid?: string | undefined;
  job_uuid?: string | undefined;
};

/** @internal */
export const JobMaterialBundleCreate$outboundSchema: z.ZodType<
  JobMaterialBundleCreate$Outbound,
  z.ZodTypeDef,
  JobMaterialBundleCreate
> = z.object({
  uuid: z.string().optional(),
  itemNumber: z.string().optional(),
  name: z.string().optional(),
  quantity: z.string().optional(),
  sortOrder: z.number().int().optional(),
  materialBundleUuid: z.string().optional(),
  jobUuid: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    itemNumber: "item_number",
    sortOrder: "sort_order",
    materialBundleUuid: "material_bundle_uuid",
    jobUuid: "job_uuid",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace JobMaterialBundleCreate$ {
  /** @deprecated use `JobMaterialBundleCreate$inboundSchema` instead. */
  export const inboundSchema = JobMaterialBundleCreate$inboundSchema;
  /** @deprecated use `JobMaterialBundleCreate$outboundSchema` instead. */
  export const outboundSchema = JobMaterialBundleCreate$outboundSchema;
  /** @deprecated use `JobMaterialBundleCreate$Outbound` instead. */
  export type Outbound = JobMaterialBundleCreate$Outbound;
}

export function jobMaterialBundleCreateToJSON(
  jobMaterialBundleCreate: JobMaterialBundleCreate,
): string {
  return JSON.stringify(
    JobMaterialBundleCreate$outboundSchema.parse(jobMaterialBundleCreate),
  );
}

export function jobMaterialBundleCreateFromJSON(
  jsonString: string,
): SafeParseResult<JobMaterialBundleCreate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => JobMaterialBundleCreate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'JobMaterialBundleCreate' from JSON`,
  );
}
