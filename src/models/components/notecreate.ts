/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type NoteCreate = {
  /**
   * Unique identifier for this record
   */
  uuid?: string | undefined;
  relatedObject?: string | undefined;
  relatedObjectUuid?: string | undefined;
  note?: string | undefined;
  actionRequired?: string | undefined;
  actionCompletedByStaffUuid?: string | undefined;
  /**
   * Timestamp at which record was last modified
   */
  createDate?: any | undefined;
};

/** @internal */
export const NoteCreate$inboundSchema: z.ZodType<
  NoteCreate,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string().optional(),
  related_object: z.string().optional(),
  related_object_uuid: z.string().optional(),
  note: z.string().optional(),
  action_required: z.string().optional(),
  action_completed_by_staff_uuid: z.string().optional(),
  create_date: z.any().optional(),
}).transform((v) => {
  return remap$(v, {
    "related_object": "relatedObject",
    "related_object_uuid": "relatedObjectUuid",
    "action_required": "actionRequired",
    "action_completed_by_staff_uuid": "actionCompletedByStaffUuid",
    "create_date": "createDate",
  });
});

/** @internal */
export type NoteCreate$Outbound = {
  uuid?: string | undefined;
  related_object?: string | undefined;
  related_object_uuid?: string | undefined;
  note?: string | undefined;
  action_required?: string | undefined;
  action_completed_by_staff_uuid?: string | undefined;
  create_date?: any | undefined;
};

/** @internal */
export const NoteCreate$outboundSchema: z.ZodType<
  NoteCreate$Outbound,
  z.ZodTypeDef,
  NoteCreate
> = z.object({
  uuid: z.string().optional(),
  relatedObject: z.string().optional(),
  relatedObjectUuid: z.string().optional(),
  note: z.string().optional(),
  actionRequired: z.string().optional(),
  actionCompletedByStaffUuid: z.string().optional(),
  createDate: z.any().optional(),
}).transform((v) => {
  return remap$(v, {
    relatedObject: "related_object",
    relatedObjectUuid: "related_object_uuid",
    actionRequired: "action_required",
    actionCompletedByStaffUuid: "action_completed_by_staff_uuid",
    createDate: "create_date",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NoteCreate$ {
  /** @deprecated use `NoteCreate$inboundSchema` instead. */
  export const inboundSchema = NoteCreate$inboundSchema;
  /** @deprecated use `NoteCreate$outboundSchema` instead. */
  export const outboundSchema = NoteCreate$outboundSchema;
  /** @deprecated use `NoteCreate$Outbound` instead. */
  export type Outbound = NoteCreate$Outbound;
}

export function noteCreateToJSON(noteCreate: NoteCreate): string {
  return JSON.stringify(NoteCreate$outboundSchema.parse(noteCreate));
}

export function noteCreateFromJSON(
  jsonString: string,
): SafeParseResult<NoteCreate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => NoteCreate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NoteCreate' from JSON`,
  );
}
