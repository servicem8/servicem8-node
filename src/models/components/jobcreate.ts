/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Current status of the job. Controls where the Job appears in the Dispatch Board..  Valid values are [Quote,Work Order,Unsuccessful,Completed]
 */
export const JobCreateStatus = {
  Quote: "Quote",
  WorkOrder: "Work Order",
  Unsuccessful: "Unsuccessful",
  Completed: "Completed",
} as const;
/**
 * Current status of the job. Controls where the Job appears in the Dispatch Board..  Valid values are [Quote,Work Order,Unsuccessful,Completed]
 */
export type JobCreateStatus = ClosedEnum<typeof JobCreateStatus>;

/**
 * Indicates whether an invoice has been sent for this job..  Valid values are [0,1]
 */
export const JobCreateInvoiceSent = {
  Zero: 0,
  One: 1,
} as const;
/**
 * Indicates whether an invoice has been sent for this job..  Valid values are [0,1]
 */
export type JobCreateInvoiceSent = ClosedEnum<typeof JobCreateInvoiceSent>;

/**
 * Boolean flag indicating whether a quote has been sent to the client for this job..  Valid values are [0,1]
 */
export const JobCreateQuoteSent = {
  Zero: 0,
  One: 1,
} as const;
/**
 * Boolean flag indicating whether a quote has been sent to the client for this job..  Valid values are [0,1]
 */
export type JobCreateQuoteSent = ClosedEnum<typeof JobCreateQuoteSent>;

/**
 * Indicates whether the job has been exported to the connected Accounting Package..  Valid values are [0,1]
 */
export const JobCreatePaymentProcessed = {
  Zero: 0,
  One: 1,
} as const;
/**
 * Indicates whether the job has been exported to the connected Accounting Package..  Valid values are [0,1]
 */
export type JobCreatePaymentProcessed = ClosedEnum<
  typeof JobCreatePaymentProcessed
>;

/**
 * Indicates whether full payment has been received for this job..  Valid values are [0,1]
 */
export const JobCreatePaymentReceived = {
  Zero: 0,
  One: 1,
} as const;
/**
 * Indicates whether full payment has been received for this job..  Valid values are [0,1]
 */
export type JobCreatePaymentReceived = ClosedEnum<
  typeof JobCreatePaymentReceived
>;

export type JobCreate = {
  /**
   * UUID of the staff member who created this job. Records which staff member initially added the job to the system.
   */
  createdByStaffUuid?: string | undefined;
  /**
   * The date the job was created or scheduled. Used for organizing jobs chronologically and for reference in reports.
   */
  date?: string | undefined;
  /**
   * UUID reference to the client/company record associated with this job. Links the job to a client in the system, establishing the client-job relationship for billing and contact purposes.
   */
  companyUuid?: string | undefined;
  /**
   * The address where invoices and billing information should be sent. If not specified, defaults to the job address.
   */
  billingAddress?: string | undefined;
  /**
   * Current status of the job. Controls where the Job appears in the Dispatch Board..  Valid values are [Quote,Work Order,Unsuccessful,Completed]
   */
  status: JobCreateStatus;
  /**
   * Longitude coordinate of the job location. Used for mapping and geolocation features. This is automatically populated based on the job address through geocoding.
   */
  lng?: any | undefined;
  /**
   * Latitude coordinate of the job location. Used for mapping and geolocation features. This is automatically populated based on the job address through geocoding.
   */
  lat?: any | undefined;
  /**
   * Not used. Refer to JobPayment endpoint.
   */
  paymentDate?: string | undefined;
  /**
   * Not used. Refer to JobPayment endpoint.
   */
  paymentActionedByUuid?: string | undefined;
  /**
   * Not used. Refer to JobPayment endpoint.
   */
  paymentMethod?: string | undefined;
  /**
   * Not used. Refer to JobPayment endpoint.
   */
  paymentAmount?: string | undefined;
  /**
   * UUID reference to the job category this job belongs to. Categories help organize jobs by type of work or department.
   */
  categoryUuid?: string | undefined;
  /**
   * Not used. Refer to JobPayment endpoint.
   */
  paymentNote?: string | undefined;
  /**
   * Indicates whether the geocoding for the job address was successful. When true, the latitude and longitude coordinates are considered accurate for mapping and location-based features.
   */
  geoIsValid?: any | undefined;
  /**
   * Client purchase order reference number for this job. Used for cross-referencing with external accounting or order management systems.
   */
  purchaseOrderNumber?: string | undefined;
  /**
   * Indicates whether an invoice has been sent for this job..  Valid values are [0,1]
   */
  invoiceSent?: JobCreateInvoiceSent | undefined;
  /**
   * Timestamp when the invoice was sent to the client. Format is YYYY-MM-DD HH:MM:SS.
   */
  invoiceSentStamp?: any | undefined;
  /**
   * DEPRECATED
   */
  readyToInvoice?: any | undefined;
  /**
   * DEPRECATED
   */
  readyToInvoiceStamp?: any | undefined;
  /**
   * The country component extracted from the geocoded job address. Automatically populated when an address is geocoded.
   */
  geoCountry?: any | undefined;
  /**
   * The postal/zip code component extracted from the geocoded job address. Automatically populated when an address is geocoded.
   */
  geoPostcode?: any | undefined;
  /**
   * The state/province component extracted from the geocoded job address. Automatically populated when an address is geocoded.
   */
  geoState?: any | undefined;
  /**
   * The city/locality component extracted from the geocoded job address. Automatically populated when an address is geocoded.
   */
  geoCity?: any | undefined;
  /**
   * The street name component extracted from the geocoded job address. Automatically populated when an address is geocoded.
   */
  geoStreet?: any | undefined;
  /**
   * The street number component extracted from the geocoded job address. Automatically populated when an address is geocoded.
   */
  geoNumber?: any | undefined;
  /**
   * The UUID of the queue this job belongs to.
   */
  queueUuid?: string | undefined;
  /**
   * The date and time when the job expires from the queue.
   */
  queueExpiryDate?: string | undefined;
  /**
   * The UUID of the staff member assigned to this job in the queue.
   */
  queueAssignedStaffUuid?: string | undefined;
  /**
   * JSON Array of Badge UUIDs
   */
  badges?: string | undefined;
  /**
   * The date and time that the job status was changed to Quote.
   */
  quoteDate?: string | undefined;
  /**
   * Boolean flag indicating whether a quote has been sent to the client for this job..  Valid values are [0,1]
   */
  quoteSent?: JobCreateQuoteSent | undefined;
  /**
   * Timestamp when the quote was sent to the client. Format is YYYY-MM-DD HH:MM:SS.
   */
  quoteSentStamp?: any | undefined;
  /**
   * The date and time that the job status was changed to Work Order.
   */
  workOrderDate?: string | undefined;
  /**
   * DEPRECATED
   */
  activeNetworkRequestUuid?: any | undefined;
  /**
   * DEPRECATED
   */
  relatedKnowledgeArticles?: any | undefined;
  /**
   * Unique identifier for this record
   */
  uuid?: string | undefined;
  /**
   * Physical address where the job is to be performed. This address is used for geocoding to place the job on the map.
   */
  jobAddress?: string | undefined;
  jobDescription?: string | undefined;
  /**
   * Email Address
   */
  workDoneDescription?: string | undefined;
  /**
   * Indicates whether the job has been exported to the connected Accounting Package..  Valid values are [0,1]
   */
  paymentProcessed?: JobCreatePaymentProcessed | undefined;
  /**
   * Indicates whether full payment has been received for this job..  Valid values are [0,1]
   */
  paymentReceived?: JobCreatePaymentReceived | undefined;
  /**
   * The date and time that the job status was changed to Completed.
   */
  completionDate?: string | undefined;
  /**
   * The date and time that the job status was changed to Unsuccessful.
   */
  unsuccessfulDate?: string | undefined;
};

/** @internal */
export const JobCreateStatus$inboundSchema: z.ZodNativeEnum<
  typeof JobCreateStatus
> = z.nativeEnum(JobCreateStatus);

/** @internal */
export const JobCreateStatus$outboundSchema: z.ZodNativeEnum<
  typeof JobCreateStatus
> = JobCreateStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace JobCreateStatus$ {
  /** @deprecated use `JobCreateStatus$inboundSchema` instead. */
  export const inboundSchema = JobCreateStatus$inboundSchema;
  /** @deprecated use `JobCreateStatus$outboundSchema` instead. */
  export const outboundSchema = JobCreateStatus$outboundSchema;
}

/** @internal */
export const JobCreateInvoiceSent$inboundSchema: z.ZodNativeEnum<
  typeof JobCreateInvoiceSent
> = z.nativeEnum(JobCreateInvoiceSent);

/** @internal */
export const JobCreateInvoiceSent$outboundSchema: z.ZodNativeEnum<
  typeof JobCreateInvoiceSent
> = JobCreateInvoiceSent$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace JobCreateInvoiceSent$ {
  /** @deprecated use `JobCreateInvoiceSent$inboundSchema` instead. */
  export const inboundSchema = JobCreateInvoiceSent$inboundSchema;
  /** @deprecated use `JobCreateInvoiceSent$outboundSchema` instead. */
  export const outboundSchema = JobCreateInvoiceSent$outboundSchema;
}

/** @internal */
export const JobCreateQuoteSent$inboundSchema: z.ZodNativeEnum<
  typeof JobCreateQuoteSent
> = z.nativeEnum(JobCreateQuoteSent);

/** @internal */
export const JobCreateQuoteSent$outboundSchema: z.ZodNativeEnum<
  typeof JobCreateQuoteSent
> = JobCreateQuoteSent$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace JobCreateQuoteSent$ {
  /** @deprecated use `JobCreateQuoteSent$inboundSchema` instead. */
  export const inboundSchema = JobCreateQuoteSent$inboundSchema;
  /** @deprecated use `JobCreateQuoteSent$outboundSchema` instead. */
  export const outboundSchema = JobCreateQuoteSent$outboundSchema;
}

/** @internal */
export const JobCreatePaymentProcessed$inboundSchema: z.ZodNativeEnum<
  typeof JobCreatePaymentProcessed
> = z.nativeEnum(JobCreatePaymentProcessed);

/** @internal */
export const JobCreatePaymentProcessed$outboundSchema: z.ZodNativeEnum<
  typeof JobCreatePaymentProcessed
> = JobCreatePaymentProcessed$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace JobCreatePaymentProcessed$ {
  /** @deprecated use `JobCreatePaymentProcessed$inboundSchema` instead. */
  export const inboundSchema = JobCreatePaymentProcessed$inboundSchema;
  /** @deprecated use `JobCreatePaymentProcessed$outboundSchema` instead. */
  export const outboundSchema = JobCreatePaymentProcessed$outboundSchema;
}

/** @internal */
export const JobCreatePaymentReceived$inboundSchema: z.ZodNativeEnum<
  typeof JobCreatePaymentReceived
> = z.nativeEnum(JobCreatePaymentReceived);

/** @internal */
export const JobCreatePaymentReceived$outboundSchema: z.ZodNativeEnum<
  typeof JobCreatePaymentReceived
> = JobCreatePaymentReceived$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace JobCreatePaymentReceived$ {
  /** @deprecated use `JobCreatePaymentReceived$inboundSchema` instead. */
  export const inboundSchema = JobCreatePaymentReceived$inboundSchema;
  /** @deprecated use `JobCreatePaymentReceived$outboundSchema` instead. */
  export const outboundSchema = JobCreatePaymentReceived$outboundSchema;
}

/** @internal */
export const JobCreate$inboundSchema: z.ZodType<
  JobCreate,
  z.ZodTypeDef,
  unknown
> = z.object({
  created_by_staff_uuid: z.string().optional(),
  date: z.string().optional(),
  company_uuid: z.string().optional(),
  billing_address: z.string().optional(),
  status: JobCreateStatus$inboundSchema,
  lng: z.any().optional(),
  lat: z.any().optional(),
  payment_date: z.string().optional(),
  payment_actioned_by_uuid: z.string().optional(),
  payment_method: z.string().optional(),
  payment_amount: z.string().optional(),
  category_uuid: z.string().optional(),
  payment_note: z.string().optional(),
  geo_is_valid: z.any().optional(),
  purchase_order_number: z.string().optional(),
  invoice_sent: JobCreateInvoiceSent$inboundSchema.optional(),
  invoice_sent_stamp: z.any().optional(),
  ready_to_invoice: z.any().optional(),
  ready_to_invoice_stamp: z.any().optional(),
  geo_country: z.any().optional(),
  geo_postcode: z.any().optional(),
  geo_state: z.any().optional(),
  geo_city: z.any().optional(),
  geo_street: z.any().optional(),
  geo_number: z.any().optional(),
  queue_uuid: z.string().optional(),
  queue_expiry_date: z.string().optional(),
  queue_assigned_staff_uuid: z.string().optional(),
  badges: z.string().optional(),
  quote_date: z.string().optional(),
  quote_sent: JobCreateQuoteSent$inboundSchema.optional(),
  quote_sent_stamp: z.any().optional(),
  work_order_date: z.string().optional(),
  active_network_request_uuid: z.any().optional(),
  related_knowledge_articles: z.any().optional(),
  uuid: z.string().optional(),
  job_address: z.string().optional(),
  job_description: z.string().optional(),
  work_done_description: z.string().optional(),
  payment_processed: JobCreatePaymentProcessed$inboundSchema.optional(),
  payment_received: JobCreatePaymentReceived$inboundSchema.optional(),
  completion_date: z.string().optional(),
  unsuccessful_date: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "created_by_staff_uuid": "createdByStaffUuid",
    "company_uuid": "companyUuid",
    "billing_address": "billingAddress",
    "payment_date": "paymentDate",
    "payment_actioned_by_uuid": "paymentActionedByUuid",
    "payment_method": "paymentMethod",
    "payment_amount": "paymentAmount",
    "category_uuid": "categoryUuid",
    "payment_note": "paymentNote",
    "geo_is_valid": "geoIsValid",
    "purchase_order_number": "purchaseOrderNumber",
    "invoice_sent": "invoiceSent",
    "invoice_sent_stamp": "invoiceSentStamp",
    "ready_to_invoice": "readyToInvoice",
    "ready_to_invoice_stamp": "readyToInvoiceStamp",
    "geo_country": "geoCountry",
    "geo_postcode": "geoPostcode",
    "geo_state": "geoState",
    "geo_city": "geoCity",
    "geo_street": "geoStreet",
    "geo_number": "geoNumber",
    "queue_uuid": "queueUuid",
    "queue_expiry_date": "queueExpiryDate",
    "queue_assigned_staff_uuid": "queueAssignedStaffUuid",
    "quote_date": "quoteDate",
    "quote_sent": "quoteSent",
    "quote_sent_stamp": "quoteSentStamp",
    "work_order_date": "workOrderDate",
    "active_network_request_uuid": "activeNetworkRequestUuid",
    "related_knowledge_articles": "relatedKnowledgeArticles",
    "job_address": "jobAddress",
    "job_description": "jobDescription",
    "work_done_description": "workDoneDescription",
    "payment_processed": "paymentProcessed",
    "payment_received": "paymentReceived",
    "completion_date": "completionDate",
    "unsuccessful_date": "unsuccessfulDate",
  });
});

/** @internal */
export type JobCreate$Outbound = {
  created_by_staff_uuid?: string | undefined;
  date?: string | undefined;
  company_uuid?: string | undefined;
  billing_address?: string | undefined;
  status: string;
  lng?: any | undefined;
  lat?: any | undefined;
  payment_date?: string | undefined;
  payment_actioned_by_uuid?: string | undefined;
  payment_method?: string | undefined;
  payment_amount?: string | undefined;
  category_uuid?: string | undefined;
  payment_note?: string | undefined;
  geo_is_valid?: any | undefined;
  purchase_order_number?: string | undefined;
  invoice_sent?: number | undefined;
  invoice_sent_stamp?: any | undefined;
  ready_to_invoice?: any | undefined;
  ready_to_invoice_stamp?: any | undefined;
  geo_country?: any | undefined;
  geo_postcode?: any | undefined;
  geo_state?: any | undefined;
  geo_city?: any | undefined;
  geo_street?: any | undefined;
  geo_number?: any | undefined;
  queue_uuid?: string | undefined;
  queue_expiry_date?: string | undefined;
  queue_assigned_staff_uuid?: string | undefined;
  badges?: string | undefined;
  quote_date?: string | undefined;
  quote_sent?: number | undefined;
  quote_sent_stamp?: any | undefined;
  work_order_date?: string | undefined;
  active_network_request_uuid?: any | undefined;
  related_knowledge_articles?: any | undefined;
  uuid?: string | undefined;
  job_address?: string | undefined;
  job_description?: string | undefined;
  work_done_description?: string | undefined;
  payment_processed?: number | undefined;
  payment_received?: number | undefined;
  completion_date?: string | undefined;
  unsuccessful_date?: string | undefined;
};

/** @internal */
export const JobCreate$outboundSchema: z.ZodType<
  JobCreate$Outbound,
  z.ZodTypeDef,
  JobCreate
> = z.object({
  createdByStaffUuid: z.string().optional(),
  date: z.string().optional(),
  companyUuid: z.string().optional(),
  billingAddress: z.string().optional(),
  status: JobCreateStatus$outboundSchema,
  lng: z.any().optional(),
  lat: z.any().optional(),
  paymentDate: z.string().optional(),
  paymentActionedByUuid: z.string().optional(),
  paymentMethod: z.string().optional(),
  paymentAmount: z.string().optional(),
  categoryUuid: z.string().optional(),
  paymentNote: z.string().optional(),
  geoIsValid: z.any().optional(),
  purchaseOrderNumber: z.string().optional(),
  invoiceSent: JobCreateInvoiceSent$outboundSchema.optional(),
  invoiceSentStamp: z.any().optional(),
  readyToInvoice: z.any().optional(),
  readyToInvoiceStamp: z.any().optional(),
  geoCountry: z.any().optional(),
  geoPostcode: z.any().optional(),
  geoState: z.any().optional(),
  geoCity: z.any().optional(),
  geoStreet: z.any().optional(),
  geoNumber: z.any().optional(),
  queueUuid: z.string().optional(),
  queueExpiryDate: z.string().optional(),
  queueAssignedStaffUuid: z.string().optional(),
  badges: z.string().optional(),
  quoteDate: z.string().optional(),
  quoteSent: JobCreateQuoteSent$outboundSchema.optional(),
  quoteSentStamp: z.any().optional(),
  workOrderDate: z.string().optional(),
  activeNetworkRequestUuid: z.any().optional(),
  relatedKnowledgeArticles: z.any().optional(),
  uuid: z.string().optional(),
  jobAddress: z.string().optional(),
  jobDescription: z.string().optional(),
  workDoneDescription: z.string().optional(),
  paymentProcessed: JobCreatePaymentProcessed$outboundSchema.optional(),
  paymentReceived: JobCreatePaymentReceived$outboundSchema.optional(),
  completionDate: z.string().optional(),
  unsuccessfulDate: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    createdByStaffUuid: "created_by_staff_uuid",
    companyUuid: "company_uuid",
    billingAddress: "billing_address",
    paymentDate: "payment_date",
    paymentActionedByUuid: "payment_actioned_by_uuid",
    paymentMethod: "payment_method",
    paymentAmount: "payment_amount",
    categoryUuid: "category_uuid",
    paymentNote: "payment_note",
    geoIsValid: "geo_is_valid",
    purchaseOrderNumber: "purchase_order_number",
    invoiceSent: "invoice_sent",
    invoiceSentStamp: "invoice_sent_stamp",
    readyToInvoice: "ready_to_invoice",
    readyToInvoiceStamp: "ready_to_invoice_stamp",
    geoCountry: "geo_country",
    geoPostcode: "geo_postcode",
    geoState: "geo_state",
    geoCity: "geo_city",
    geoStreet: "geo_street",
    geoNumber: "geo_number",
    queueUuid: "queue_uuid",
    queueExpiryDate: "queue_expiry_date",
    queueAssignedStaffUuid: "queue_assigned_staff_uuid",
    quoteDate: "quote_date",
    quoteSent: "quote_sent",
    quoteSentStamp: "quote_sent_stamp",
    workOrderDate: "work_order_date",
    activeNetworkRequestUuid: "active_network_request_uuid",
    relatedKnowledgeArticles: "related_knowledge_articles",
    jobAddress: "job_address",
    jobDescription: "job_description",
    workDoneDescription: "work_done_description",
    paymentProcessed: "payment_processed",
    paymentReceived: "payment_received",
    completionDate: "completion_date",
    unsuccessfulDate: "unsuccessful_date",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace JobCreate$ {
  /** @deprecated use `JobCreate$inboundSchema` instead. */
  export const inboundSchema = JobCreate$inboundSchema;
  /** @deprecated use `JobCreate$outboundSchema` instead. */
  export const outboundSchema = JobCreate$outboundSchema;
  /** @deprecated use `JobCreate$Outbound` instead. */
  export type Outbound = JobCreate$Outbound;
}

export function jobCreateToJSON(jobCreate: JobCreate): string {
  return JSON.stringify(JobCreate$outboundSchema.parse(jobCreate));
}

export function jobCreateFromJSON(
  jsonString: string,
): SafeParseResult<JobCreate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => JobCreate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'JobCreate' from JSON`,
  );
}
