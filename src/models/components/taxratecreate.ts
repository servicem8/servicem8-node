/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Boolean flag indicating whether this tax rate is the system default (true) or not (false). Only one tax rate can be marked as default at any time. The default tax rate is automatically applied to new line items when no specific tax rate is selected..  Valid values are [0,1]
 */
export const TaxRateCreateIsDefaultTaxRate = {
  Zero: 0,
  One: 1,
} as const;
/**
 * Boolean flag indicating whether this tax rate is the system default (true) or not (false). Only one tax rate can be marked as default at any time. The default tax rate is automatically applied to new line items when no specific tax rate is selected..  Valid values are [0,1]
 */
export type TaxRateCreateIsDefaultTaxRate = ClosedEnum<
  typeof TaxRateCreateIsDefaultTaxRate
>;

export type TaxRateCreate = {
  /**
   * Name of the tax rate used for identification. Examples include 'GST', 'VAT', 'Sales Tax', etc.
   */
  name: string;
  /**
   * The tax rate percentage value (stored as a decimal value). For example, 10 for a 10% tax rate. Used in calculations to determine tax amounts for invoices and quotes.
   */
  amount?: string | undefined;
  /**
   * Boolean flag indicating whether this tax rate is the system default (true) or not (false). Only one tax rate can be marked as default at any time. The default tax rate is automatically applied to new line items when no specific tax rate is selected..  Valid values are [0,1]
   */
  isDefaultTaxRate?: TaxRateCreateIsDefaultTaxRate | undefined;
  /**
   * Unique identifier for this record
   */
  uuid?: string | undefined;
};

/** @internal */
export const TaxRateCreateIsDefaultTaxRate$inboundSchema: z.ZodNativeEnum<
  typeof TaxRateCreateIsDefaultTaxRate
> = z.nativeEnum(TaxRateCreateIsDefaultTaxRate);

/** @internal */
export const TaxRateCreateIsDefaultTaxRate$outboundSchema: z.ZodNativeEnum<
  typeof TaxRateCreateIsDefaultTaxRate
> = TaxRateCreateIsDefaultTaxRate$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TaxRateCreateIsDefaultTaxRate$ {
  /** @deprecated use `TaxRateCreateIsDefaultTaxRate$inboundSchema` instead. */
  export const inboundSchema = TaxRateCreateIsDefaultTaxRate$inboundSchema;
  /** @deprecated use `TaxRateCreateIsDefaultTaxRate$outboundSchema` instead. */
  export const outboundSchema = TaxRateCreateIsDefaultTaxRate$outboundSchema;
}

/** @internal */
export const TaxRateCreate$inboundSchema: z.ZodType<
  TaxRateCreate,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  amount: z.string().optional(),
  is_default_tax_rate: TaxRateCreateIsDefaultTaxRate$inboundSchema.optional(),
  uuid: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "is_default_tax_rate": "isDefaultTaxRate",
  });
});

/** @internal */
export type TaxRateCreate$Outbound = {
  name: string;
  amount?: string | undefined;
  is_default_tax_rate?: number | undefined;
  uuid?: string | undefined;
};

/** @internal */
export const TaxRateCreate$outboundSchema: z.ZodType<
  TaxRateCreate$Outbound,
  z.ZodTypeDef,
  TaxRateCreate
> = z.object({
  name: z.string(),
  amount: z.string().optional(),
  isDefaultTaxRate: TaxRateCreateIsDefaultTaxRate$outboundSchema.optional(),
  uuid: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    isDefaultTaxRate: "is_default_tax_rate",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TaxRateCreate$ {
  /** @deprecated use `TaxRateCreate$inboundSchema` instead. */
  export const inboundSchema = TaxRateCreate$inboundSchema;
  /** @deprecated use `TaxRateCreate$outboundSchema` instead. */
  export const outboundSchema = TaxRateCreate$outboundSchema;
  /** @deprecated use `TaxRateCreate$Outbound` instead. */
  export type Outbound = TaxRateCreate$Outbound;
}

export function taxRateCreateToJSON(taxRateCreate: TaxRateCreate): string {
  return JSON.stringify(TaxRateCreate$outboundSchema.parse(taxRateCreate));
}

export function taxRateCreateFromJSON(
  jsonString: string,
): SafeParseResult<TaxRateCreate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TaxRateCreate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TaxRateCreate' from JSON`,
  );
}
