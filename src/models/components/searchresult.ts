/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type SearchResult = {
  /**
   * UUID of the found object
   */
  uuid: string;
  /**
   * Type of the object
   */
  type: string;
  /**
   * Title of the object
   */
  title: string;
  /**
   * Highlighted text snippets that matched the query
   */
  highlights?: { [k: string]: any } | undefined;
};

/** @internal */
export const SearchResult$inboundSchema: z.ZodType<
  SearchResult,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string(),
  type: z.string(),
  title: z.string(),
  highlights: z.record(z.any()).optional(),
});

/** @internal */
export type SearchResult$Outbound = {
  uuid: string;
  type: string;
  title: string;
  highlights?: { [k: string]: any } | undefined;
};

/** @internal */
export const SearchResult$outboundSchema: z.ZodType<
  SearchResult$Outbound,
  z.ZodTypeDef,
  SearchResult
> = z.object({
  uuid: z.string(),
  type: z.string(),
  title: z.string(),
  highlights: z.record(z.any()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchResult$ {
  /** @deprecated use `SearchResult$inboundSchema` instead. */
  export const inboundSchema = SearchResult$inboundSchema;
  /** @deprecated use `SearchResult$outboundSchema` instead. */
  export const outboundSchema = SearchResult$outboundSchema;
  /** @deprecated use `SearchResult$Outbound` instead. */
  export type Outbound = SearchResult$Outbound;
}

export function searchResultToJSON(searchResult: SearchResult): string {
  return JSON.stringify(SearchResult$outboundSchema.parse(searchResult));
}

export function searchResultFromJSON(
  jsonString: string,
): SafeParseResult<SearchResult, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SearchResult$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchResult' from JSON`,
  );
}
