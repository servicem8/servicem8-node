/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type AssetCreateFieldDatum = {
  /**
   * Must be the UUID of an AssetTypeField
   */
  uuid: string;
  fieldType: string;
  fieldName: string;
  /**
   * Convert all values to string. Dates shall be in Y-m-d format.
   */
  fieldValue: string;
  sortOrder: number;
};

export type AssetCreate = {
  /**
   * Unique identifier for this record
   */
  uuid?: string | undefined;
  /**
   * UUID of the Client to which this Asset is attached
   */
  companyUuid?: string | undefined;
  /**
   * User-facing description of this asset
   */
  name?: string | undefined;
  /**
   * Latitude component of the Asset's location in degrees
   */
  lat?: number | undefined;
  /**
   * Longitude component of the Asset's location in degrees
   */
  lng?: number | undefined;
  /**
   * Timestamp at which the Asset's location was last updated
   */
  geoTimestamp?: string | undefined;
  /**
   * Altitude component of the Asset's location in metres
   */
  altitude?: number | undefined;
  /**
   * JSON array containing field values for this asset. Each entry represents a field value defined by the associated AssetType, with field values stored as strings. Date fields use Y-m-d format. This field stores all custom fields defined in the asset type template.
   */
  fieldData?: Array<AssetCreateFieldDatum> | undefined;
};

/** @internal */
export const AssetCreateFieldDatum$inboundSchema: z.ZodType<
  AssetCreateFieldDatum,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string(),
  fieldType: z.string(),
  fieldName: z.string(),
  fieldValue: z.string(),
  sortOrder: z.number(),
});

/** @internal */
export type AssetCreateFieldDatum$Outbound = {
  uuid: string;
  fieldType: string;
  fieldName: string;
  fieldValue: string;
  sortOrder: number;
};

/** @internal */
export const AssetCreateFieldDatum$outboundSchema: z.ZodType<
  AssetCreateFieldDatum$Outbound,
  z.ZodTypeDef,
  AssetCreateFieldDatum
> = z.object({
  uuid: z.string(),
  fieldType: z.string(),
  fieldName: z.string(),
  fieldValue: z.string(),
  sortOrder: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AssetCreateFieldDatum$ {
  /** @deprecated use `AssetCreateFieldDatum$inboundSchema` instead. */
  export const inboundSchema = AssetCreateFieldDatum$inboundSchema;
  /** @deprecated use `AssetCreateFieldDatum$outboundSchema` instead. */
  export const outboundSchema = AssetCreateFieldDatum$outboundSchema;
  /** @deprecated use `AssetCreateFieldDatum$Outbound` instead. */
  export type Outbound = AssetCreateFieldDatum$Outbound;
}

export function assetCreateFieldDatumToJSON(
  assetCreateFieldDatum: AssetCreateFieldDatum,
): string {
  return JSON.stringify(
    AssetCreateFieldDatum$outboundSchema.parse(assetCreateFieldDatum),
  );
}

export function assetCreateFieldDatumFromJSON(
  jsonString: string,
): SafeParseResult<AssetCreateFieldDatum, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AssetCreateFieldDatum$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AssetCreateFieldDatum' from JSON`,
  );
}

/** @internal */
export const AssetCreate$inboundSchema: z.ZodType<
  AssetCreate,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string().optional(),
  company_uuid: z.string().optional(),
  name: z.string().optional(),
  lat: z.number().optional(),
  lng: z.number().optional(),
  geo_timestamp: z.string().optional(),
  altitude: z.number().optional(),
  field_data: z.array(z.lazy(() => AssetCreateFieldDatum$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "company_uuid": "companyUuid",
    "geo_timestamp": "geoTimestamp",
    "field_data": "fieldData",
  });
});

/** @internal */
export type AssetCreate$Outbound = {
  uuid?: string | undefined;
  company_uuid?: string | undefined;
  name?: string | undefined;
  lat?: number | undefined;
  lng?: number | undefined;
  geo_timestamp?: string | undefined;
  altitude?: number | undefined;
  field_data?: Array<AssetCreateFieldDatum$Outbound> | undefined;
};

/** @internal */
export const AssetCreate$outboundSchema: z.ZodType<
  AssetCreate$Outbound,
  z.ZodTypeDef,
  AssetCreate
> = z.object({
  uuid: z.string().optional(),
  companyUuid: z.string().optional(),
  name: z.string().optional(),
  lat: z.number().optional(),
  lng: z.number().optional(),
  geoTimestamp: z.string().optional(),
  altitude: z.number().optional(),
  fieldData: z.array(z.lazy(() => AssetCreateFieldDatum$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    companyUuid: "company_uuid",
    geoTimestamp: "geo_timestamp",
    fieldData: "field_data",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AssetCreate$ {
  /** @deprecated use `AssetCreate$inboundSchema` instead. */
  export const inboundSchema = AssetCreate$inboundSchema;
  /** @deprecated use `AssetCreate$outboundSchema` instead. */
  export const outboundSchema = AssetCreate$outboundSchema;
  /** @deprecated use `AssetCreate$Outbound` instead. */
  export type Outbound = AssetCreate$Outbound;
}

export function assetCreateToJSON(assetCreate: AssetCreate): string {
  return JSON.stringify(AssetCreate$outboundSchema.parse(assetCreate));
}

export function assetCreateFromJSON(
  jsonString: string,
): SafeParseResult<AssetCreate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AssetCreate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AssetCreate' from JSON`,
  );
}
