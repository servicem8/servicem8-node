/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const FormFieldType = {
  Text: "Text",
} as const;
export type FormFieldType = ClosedEnum<typeof FormFieldType>;

export type FormTemplateField = {
  name: string;
  fieldType: FormFieldType;
  value: string;
  sortOrder: number;
};

/**
 * Record active/deleted flag.  Valid values are [0,1].  Valid values are [0,1]
 */
export const FormActive = {
  Zero: 0,
  One: 1,
} as const;
/**
 * Record active/deleted flag.  Valid values are [0,1].  Valid values are [0,1]
 */
export type FormActive = ClosedEnum<typeof FormActive>;

export type Form = {
  /**
   * The name of the form. Used to identify the form in the system and displayed to users in the form selector. Must be unique within an account. Maximum length is 255 characters.
   */
  name?: string | undefined;
  /**
   * UUID of the document template associated with this form. The template defines the layout and appearance of the form when it's generated as a document. References a document template object in the system.
   */
  documentTemplateUuid?: string | undefined;
  /**
   * Boolean flag indicating whether this form can be used independently of a job. When set to true (1), the form can be filled out as a standalone form. When false (0), the form must be associated with a job to be completed.
   */
  canBeUsedIndependently?: string | undefined;
  /**
   * Controls when badge completion is mandatory for this form. Valid values are: 0 (not mandatory), 1 (mandatory on check-in), 2 (mandatory on check-out). This determines at which stage in the job lifecycle a staff member must complete this form.
   */
  badgeMandatoryState?: string | undefined;
  /**
   * JSON array of template fields that are used when generating form documents. Each field contains a name, fieldType, value, and sortOrder. Maximum of 10 fields allowed.
   */
  templateFields?: Array<FormTemplateField> | undefined;
  /**
   * Unique identifier for this record
   */
  uuid?: string | undefined;
  /**
   * Record active/deleted flag.  Valid values are [0,1].  Valid values are [0,1]
   */
  active?: FormActive | undefined;
  /**
   * Timestamp at which record was last modified
   */
  editDate?: any | undefined;
  badgeName?: string | undefined;
};

/** @internal */
export const FormFieldType$inboundSchema: z.ZodNativeEnum<
  typeof FormFieldType
> = z.nativeEnum(FormFieldType);

/** @internal */
export const FormFieldType$outboundSchema: z.ZodNativeEnum<
  typeof FormFieldType
> = FormFieldType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FormFieldType$ {
  /** @deprecated use `FormFieldType$inboundSchema` instead. */
  export const inboundSchema = FormFieldType$inboundSchema;
  /** @deprecated use `FormFieldType$outboundSchema` instead. */
  export const outboundSchema = FormFieldType$outboundSchema;
}

/** @internal */
export const FormTemplateField$inboundSchema: z.ZodType<
  FormTemplateField,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  fieldType: FormFieldType$inboundSchema,
  value: z.string(),
  sortOrder: z.number().int(),
});

/** @internal */
export type FormTemplateField$Outbound = {
  name: string;
  fieldType: string;
  value: string;
  sortOrder: number;
};

/** @internal */
export const FormTemplateField$outboundSchema: z.ZodType<
  FormTemplateField$Outbound,
  z.ZodTypeDef,
  FormTemplateField
> = z.object({
  name: z.string(),
  fieldType: FormFieldType$outboundSchema,
  value: z.string(),
  sortOrder: z.number().int(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FormTemplateField$ {
  /** @deprecated use `FormTemplateField$inboundSchema` instead. */
  export const inboundSchema = FormTemplateField$inboundSchema;
  /** @deprecated use `FormTemplateField$outboundSchema` instead. */
  export const outboundSchema = FormTemplateField$outboundSchema;
  /** @deprecated use `FormTemplateField$Outbound` instead. */
  export type Outbound = FormTemplateField$Outbound;
}

export function formTemplateFieldToJSON(
  formTemplateField: FormTemplateField,
): string {
  return JSON.stringify(
    FormTemplateField$outboundSchema.parse(formTemplateField),
  );
}

export function formTemplateFieldFromJSON(
  jsonString: string,
): SafeParseResult<FormTemplateField, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FormTemplateField$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FormTemplateField' from JSON`,
  );
}

/** @internal */
export const FormActive$inboundSchema: z.ZodNativeEnum<typeof FormActive> = z
  .nativeEnum(FormActive);

/** @internal */
export const FormActive$outboundSchema: z.ZodNativeEnum<typeof FormActive> =
  FormActive$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FormActive$ {
  /** @deprecated use `FormActive$inboundSchema` instead. */
  export const inboundSchema = FormActive$inboundSchema;
  /** @deprecated use `FormActive$outboundSchema` instead. */
  export const outboundSchema = FormActive$outboundSchema;
}

/** @internal */
export const Form$inboundSchema: z.ZodType<Form, z.ZodTypeDef, unknown> = z
  .object({
    name: z.string().optional(),
    document_template_uuid: z.string().optional(),
    can_be_used_independently: z.string().optional(),
    badge_mandatory_state: z.string().optional(),
    template_fields: z.array(z.lazy(() => FormTemplateField$inboundSchema))
      .optional(),
    uuid: z.string().optional(),
    active: FormActive$inboundSchema.default(1),
    edit_date: z.any().optional(),
    badge_name: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      "document_template_uuid": "documentTemplateUuid",
      "can_be_used_independently": "canBeUsedIndependently",
      "badge_mandatory_state": "badgeMandatoryState",
      "template_fields": "templateFields",
      "edit_date": "editDate",
      "badge_name": "badgeName",
    });
  });

/** @internal */
export type Form$Outbound = {
  name?: string | undefined;
  document_template_uuid?: string | undefined;
  can_be_used_independently?: string | undefined;
  badge_mandatory_state?: string | undefined;
  template_fields?: Array<FormTemplateField$Outbound> | undefined;
  uuid?: string | undefined;
  active: number;
  edit_date?: any | undefined;
  badge_name?: string | undefined;
};

/** @internal */
export const Form$outboundSchema: z.ZodType<Form$Outbound, z.ZodTypeDef, Form> =
  z.object({
    name: z.string().optional(),
    documentTemplateUuid: z.string().optional(),
    canBeUsedIndependently: z.string().optional(),
    badgeMandatoryState: z.string().optional(),
    templateFields: z.array(z.lazy(() => FormTemplateField$outboundSchema))
      .optional(),
    uuid: z.string().optional(),
    active: FormActive$outboundSchema.default(1),
    editDate: z.any().optional(),
    badgeName: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      documentTemplateUuid: "document_template_uuid",
      canBeUsedIndependently: "can_be_used_independently",
      badgeMandatoryState: "badge_mandatory_state",
      templateFields: "template_fields",
      editDate: "edit_date",
      badgeName: "badge_name",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Form$ {
  /** @deprecated use `Form$inboundSchema` instead. */
  export const inboundSchema = Form$inboundSchema;
  /** @deprecated use `Form$outboundSchema` instead. */
  export const outboundSchema = Form$outboundSchema;
  /** @deprecated use `Form$Outbound` instead. */
  export type Outbound = Form$Outbound;
}

export function formToJSON(form: Form): string {
  return JSON.stringify(Form$outboundSchema.parse(form));
}

export function formFromJSON(
  jsonString: string,
): SafeParseResult<Form, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Form$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Form' from JSON`,
  );
}
