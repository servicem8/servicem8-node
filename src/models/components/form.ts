/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Record active/deleted flag.
 *
 * @remarks
 *
 * Valid values are [0,1]
 */
export const FormActive = {
  Zero: 0,
  One: 1,
} as const;
/**
 * Record active/deleted flag.
 *
 * @remarks
 *
 * Valid values are [0,1]
 */
export type FormActive = ClosedEnum<typeof FormActive>;

export const FormFieldType = {
  Text: "Text",
} as const;
export type FormFieldType = ClosedEnum<typeof FormFieldType>;

export type TemplateField = {
  name: string;
  fieldType: FormFieldType;
  value: string;
  sortOrder: number;
};

export type Form = {
  /**
   * Record UUID key
   */
  uuid?: string | undefined;
  /**
   * Record active/deleted flag.
   *
   * @remarks
   *
   * Valid values are [0,1]
   */
  active?: FormActive | undefined;
  /**
   * Record last modified timestamp
   */
  editDate?: string | undefined;
  name?: string | undefined;
  documentTemplateUuid?: string | undefined;
  canBeUsedIndependently?: string | undefined;
  badgeMandatoryState?: string | undefined;
  templateFields?: Array<TemplateField> | undefined;
};

export type FormInput = {
  /**
   * Record UUID key
   */
  uuid?: string | undefined;
  /**
   * Record active/deleted flag.
   *
   * @remarks
   *
   * Valid values are [0,1]
   */
  active?: FormActive | undefined;
  name?: string | undefined;
  documentTemplateUuid?: string | undefined;
  canBeUsedIndependently?: string | undefined;
  badgeMandatoryState?: string | undefined;
  templateFields?: Array<TemplateField> | undefined;
};

/** @internal */
export const FormActive$inboundSchema: z.ZodNativeEnum<typeof FormActive> = z
  .nativeEnum(FormActive);

/** @internal */
export const FormActive$outboundSchema: z.ZodNativeEnum<typeof FormActive> =
  FormActive$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FormActive$ {
  /** @deprecated use `FormActive$inboundSchema` instead. */
  export const inboundSchema = FormActive$inboundSchema;
  /** @deprecated use `FormActive$outboundSchema` instead. */
  export const outboundSchema = FormActive$outboundSchema;
}

/** @internal */
export const FormFieldType$inboundSchema: z.ZodNativeEnum<
  typeof FormFieldType
> = z.nativeEnum(FormFieldType);

/** @internal */
export const FormFieldType$outboundSchema: z.ZodNativeEnum<
  typeof FormFieldType
> = FormFieldType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FormFieldType$ {
  /** @deprecated use `FormFieldType$inboundSchema` instead. */
  export const inboundSchema = FormFieldType$inboundSchema;
  /** @deprecated use `FormFieldType$outboundSchema` instead. */
  export const outboundSchema = FormFieldType$outboundSchema;
}

/** @internal */
export const TemplateField$inboundSchema: z.ZodType<
  TemplateField,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  fieldType: FormFieldType$inboundSchema,
  value: z.string(),
  sortOrder: z.number().int(),
});

/** @internal */
export type TemplateField$Outbound = {
  name: string;
  fieldType: string;
  value: string;
  sortOrder: number;
};

/** @internal */
export const TemplateField$outboundSchema: z.ZodType<
  TemplateField$Outbound,
  z.ZodTypeDef,
  TemplateField
> = z.object({
  name: z.string(),
  fieldType: FormFieldType$outboundSchema,
  value: z.string(),
  sortOrder: z.number().int(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateField$ {
  /** @deprecated use `TemplateField$inboundSchema` instead. */
  export const inboundSchema = TemplateField$inboundSchema;
  /** @deprecated use `TemplateField$outboundSchema` instead. */
  export const outboundSchema = TemplateField$outboundSchema;
  /** @deprecated use `TemplateField$Outbound` instead. */
  export type Outbound = TemplateField$Outbound;
}

export function templateFieldToJSON(templateField: TemplateField): string {
  return JSON.stringify(TemplateField$outboundSchema.parse(templateField));
}

export function templateFieldFromJSON(
  jsonString: string,
): SafeParseResult<TemplateField, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TemplateField$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TemplateField' from JSON`,
  );
}

/** @internal */
export const Form$inboundSchema: z.ZodType<Form, z.ZodTypeDef, unknown> = z
  .object({
    uuid: z.string().optional(),
    active: FormActive$inboundSchema.default(1),
    edit_date: z.string().optional(),
    name: z.string().optional(),
    document_template_uuid: z.string().optional(),
    can_be_used_independently: z.string().optional(),
    badge_mandatory_state: z.string().optional(),
    template_fields: z.array(z.lazy(() => TemplateField$inboundSchema))
      .optional(),
  }).transform((v) => {
    return remap$(v, {
      "edit_date": "editDate",
      "document_template_uuid": "documentTemplateUuid",
      "can_be_used_independently": "canBeUsedIndependently",
      "badge_mandatory_state": "badgeMandatoryState",
      "template_fields": "templateFields",
    });
  });

/** @internal */
export type Form$Outbound = {
  uuid?: string | undefined;
  active: number;
  edit_date?: string | undefined;
  name?: string | undefined;
  document_template_uuid?: string | undefined;
  can_be_used_independently?: string | undefined;
  badge_mandatory_state?: string | undefined;
  template_fields?: Array<TemplateField$Outbound> | undefined;
};

/** @internal */
export const Form$outboundSchema: z.ZodType<Form$Outbound, z.ZodTypeDef, Form> =
  z.object({
    uuid: z.string().optional(),
    active: FormActive$outboundSchema.default(1),
    editDate: z.string().optional(),
    name: z.string().optional(),
    documentTemplateUuid: z.string().optional(),
    canBeUsedIndependently: z.string().optional(),
    badgeMandatoryState: z.string().optional(),
    templateFields: z.array(z.lazy(() => TemplateField$outboundSchema))
      .optional(),
  }).transform((v) => {
    return remap$(v, {
      editDate: "edit_date",
      documentTemplateUuid: "document_template_uuid",
      canBeUsedIndependently: "can_be_used_independently",
      badgeMandatoryState: "badge_mandatory_state",
      templateFields: "template_fields",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Form$ {
  /** @deprecated use `Form$inboundSchema` instead. */
  export const inboundSchema = Form$inboundSchema;
  /** @deprecated use `Form$outboundSchema` instead. */
  export const outboundSchema = Form$outboundSchema;
  /** @deprecated use `Form$Outbound` instead. */
  export type Outbound = Form$Outbound;
}

export function formToJSON(form: Form): string {
  return JSON.stringify(Form$outboundSchema.parse(form));
}

export function formFromJSON(
  jsonString: string,
): SafeParseResult<Form, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Form$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Form' from JSON`,
  );
}

/** @internal */
export const FormInput$inboundSchema: z.ZodType<
  FormInput,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string().optional(),
  active: FormActive$inboundSchema.default(1),
  name: z.string().optional(),
  document_template_uuid: z.string().optional(),
  can_be_used_independently: z.string().optional(),
  badge_mandatory_state: z.string().optional(),
  template_fields: z.array(z.lazy(() => TemplateField$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "document_template_uuid": "documentTemplateUuid",
    "can_be_used_independently": "canBeUsedIndependently",
    "badge_mandatory_state": "badgeMandatoryState",
    "template_fields": "templateFields",
  });
});

/** @internal */
export type FormInput$Outbound = {
  uuid?: string | undefined;
  active: number;
  name?: string | undefined;
  document_template_uuid?: string | undefined;
  can_be_used_independently?: string | undefined;
  badge_mandatory_state?: string | undefined;
  template_fields?: Array<TemplateField$Outbound> | undefined;
};

/** @internal */
export const FormInput$outboundSchema: z.ZodType<
  FormInput$Outbound,
  z.ZodTypeDef,
  FormInput
> = z.object({
  uuid: z.string().optional(),
  active: FormActive$outboundSchema.default(1),
  name: z.string().optional(),
  documentTemplateUuid: z.string().optional(),
  canBeUsedIndependently: z.string().optional(),
  badgeMandatoryState: z.string().optional(),
  templateFields: z.array(z.lazy(() => TemplateField$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    documentTemplateUuid: "document_template_uuid",
    canBeUsedIndependently: "can_be_used_independently",
    badgeMandatoryState: "badge_mandatory_state",
    templateFields: "template_fields",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FormInput$ {
  /** @deprecated use `FormInput$inboundSchema` instead. */
  export const inboundSchema = FormInput$inboundSchema;
  /** @deprecated use `FormInput$outboundSchema` instead. */
  export const outboundSchema = FormInput$outboundSchema;
  /** @deprecated use `FormInput$Outbound` instead. */
  export type Outbound = FormInput$Outbound;
}

export function formInputToJSON(formInput: FormInput): string {
  return JSON.stringify(FormInput$outboundSchema.parse(formInput));
}

export function formInputFromJSON(
  jsonString: string,
): SafeParseResult<FormInput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FormInput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FormInput' from JSON`,
  );
}
