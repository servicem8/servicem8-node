/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Record active/deleted flag.  Valid values are [0,1]
 */
export const MaterialBundleActive = {
  Zero: 0,
  One: 1,
} as const;
/**
 * Record active/deleted flag.  Valid values are [0,1]
 */
export type MaterialBundleActive = ClosedEnum<typeof MaterialBundleActive>;

export type MaterialList = {
  /**
   * Must be the UUID of a Material record
   */
  uuid: string;
  quantity: number;
};

export type MaterialBundle = {
  /**
   * Unique identifier for this record
   */
  uuid?: string | undefined;
  /**
   * Record active/deleted flag.  Valid values are [0,1]
   */
  active?: MaterialBundleActive | undefined;
  /**
   * Timestamp at which record was last modified
   */
  editDate?: any | undefined;
  /**
   * Unique identifier for this bundle. Must be 30 characters or less and unique across both Materials and Bundles. Used when adding bundles to jobs.
   */
  itemNumber: string;
  /**
   * The display name of the bundle. Used for identification in the system and shows on documents when the bundle is added to a job.
   */
  name?: string | undefined;
  /**
   * A JSON array containing the materials that make up this bundle. Each item includes the material's UUID and the quantity to be added when this bundle is used. Limited to between 1 and 50 items, with all quantities being positive numbers.
   */
  materialList?: Array<MaterialList> | undefined;
};

export type MaterialBundleInput = {
  /**
   * Unique identifier for this record
   */
  uuid?: string | undefined;
  /**
   * Record active/deleted flag.  Valid values are [0,1]
   */
  active?: MaterialBundleActive | undefined;
  /**
   * Unique identifier for this bundle. Must be 30 characters or less and unique across both Materials and Bundles. Used when adding bundles to jobs.
   */
  itemNumber: string;
  /**
   * The display name of the bundle. Used for identification in the system and shows on documents when the bundle is added to a job.
   */
  name?: string | undefined;
  /**
   * A JSON array containing the materials that make up this bundle. Each item includes the material's UUID and the quantity to be added when this bundle is used. Limited to between 1 and 50 items, with all quantities being positive numbers.
   */
  materialList?: Array<MaterialList> | undefined;
};

/** @internal */
export const MaterialBundleActive$inboundSchema: z.ZodNativeEnum<
  typeof MaterialBundleActive
> = z.nativeEnum(MaterialBundleActive);

/** @internal */
export const MaterialBundleActive$outboundSchema: z.ZodNativeEnum<
  typeof MaterialBundleActive
> = MaterialBundleActive$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MaterialBundleActive$ {
  /** @deprecated use `MaterialBundleActive$inboundSchema` instead. */
  export const inboundSchema = MaterialBundleActive$inboundSchema;
  /** @deprecated use `MaterialBundleActive$outboundSchema` instead. */
  export const outboundSchema = MaterialBundleActive$outboundSchema;
}

/** @internal */
export const MaterialList$inboundSchema: z.ZodType<
  MaterialList,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string(),
  quantity: z.number(),
});

/** @internal */
export type MaterialList$Outbound = {
  uuid: string;
  quantity: number;
};

/** @internal */
export const MaterialList$outboundSchema: z.ZodType<
  MaterialList$Outbound,
  z.ZodTypeDef,
  MaterialList
> = z.object({
  uuid: z.string(),
  quantity: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MaterialList$ {
  /** @deprecated use `MaterialList$inboundSchema` instead. */
  export const inboundSchema = MaterialList$inboundSchema;
  /** @deprecated use `MaterialList$outboundSchema` instead. */
  export const outboundSchema = MaterialList$outboundSchema;
  /** @deprecated use `MaterialList$Outbound` instead. */
  export type Outbound = MaterialList$Outbound;
}

export function materialListToJSON(materialList: MaterialList): string {
  return JSON.stringify(MaterialList$outboundSchema.parse(materialList));
}

export function materialListFromJSON(
  jsonString: string,
): SafeParseResult<MaterialList, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MaterialList$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MaterialList' from JSON`,
  );
}

/** @internal */
export const MaterialBundle$inboundSchema: z.ZodType<
  MaterialBundle,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string().optional(),
  active: MaterialBundleActive$inboundSchema.default(1),
  edit_date: z.any().optional(),
  item_number: z.string(),
  name: z.string().optional(),
  material_list: z.array(z.lazy(() => MaterialList$inboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    "edit_date": "editDate",
    "item_number": "itemNumber",
    "material_list": "materialList",
  });
});

/** @internal */
export type MaterialBundle$Outbound = {
  uuid?: string | undefined;
  active: number;
  edit_date?: any | undefined;
  item_number: string;
  name?: string | undefined;
  material_list?: Array<MaterialList$Outbound> | undefined;
};

/** @internal */
export const MaterialBundle$outboundSchema: z.ZodType<
  MaterialBundle$Outbound,
  z.ZodTypeDef,
  MaterialBundle
> = z.object({
  uuid: z.string().optional(),
  active: MaterialBundleActive$outboundSchema.default(1),
  editDate: z.any().optional(),
  itemNumber: z.string(),
  name: z.string().optional(),
  materialList: z.array(z.lazy(() => MaterialList$outboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    editDate: "edit_date",
    itemNumber: "item_number",
    materialList: "material_list",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MaterialBundle$ {
  /** @deprecated use `MaterialBundle$inboundSchema` instead. */
  export const inboundSchema = MaterialBundle$inboundSchema;
  /** @deprecated use `MaterialBundle$outboundSchema` instead. */
  export const outboundSchema = MaterialBundle$outboundSchema;
  /** @deprecated use `MaterialBundle$Outbound` instead. */
  export type Outbound = MaterialBundle$Outbound;
}

export function materialBundleToJSON(materialBundle: MaterialBundle): string {
  return JSON.stringify(MaterialBundle$outboundSchema.parse(materialBundle));
}

export function materialBundleFromJSON(
  jsonString: string,
): SafeParseResult<MaterialBundle, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MaterialBundle$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MaterialBundle' from JSON`,
  );
}

/** @internal */
export const MaterialBundleInput$inboundSchema: z.ZodType<
  MaterialBundleInput,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string().optional(),
  active: MaterialBundleActive$inboundSchema.default(1),
  item_number: z.string(),
  name: z.string().optional(),
  material_list: z.array(z.lazy(() => MaterialList$inboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    "item_number": "itemNumber",
    "material_list": "materialList",
  });
});

/** @internal */
export type MaterialBundleInput$Outbound = {
  uuid?: string | undefined;
  active: number;
  item_number: string;
  name?: string | undefined;
  material_list?: Array<MaterialList$Outbound> | undefined;
};

/** @internal */
export const MaterialBundleInput$outboundSchema: z.ZodType<
  MaterialBundleInput$Outbound,
  z.ZodTypeDef,
  MaterialBundleInput
> = z.object({
  uuid: z.string().optional(),
  active: MaterialBundleActive$outboundSchema.default(1),
  itemNumber: z.string(),
  name: z.string().optional(),
  materialList: z.array(z.lazy(() => MaterialList$outboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    itemNumber: "item_number",
    materialList: "material_list",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MaterialBundleInput$ {
  /** @deprecated use `MaterialBundleInput$inboundSchema` instead. */
  export const inboundSchema = MaterialBundleInput$inboundSchema;
  /** @deprecated use `MaterialBundleInput$outboundSchema` instead. */
  export const outboundSchema = MaterialBundleInput$outboundSchema;
  /** @deprecated use `MaterialBundleInput$Outbound` instead. */
  export type Outbound = MaterialBundleInput$Outbound;
}

export function materialBundleInputToJSON(
  materialBundleInput: MaterialBundleInput,
): string {
  return JSON.stringify(
    MaterialBundleInput$outboundSchema.parse(materialBundleInput),
  );
}

export function materialBundleInputFromJSON(
  jsonString: string,
): SafeParseResult<MaterialBundleInput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MaterialBundleInput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MaterialBundleInput' from JSON`,
  );
}
