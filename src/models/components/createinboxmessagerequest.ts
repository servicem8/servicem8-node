/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Structured job data that will be merged into json_data when converting the message to a job
 */
export type JobData = {
  /**
   * Job contact first name
   */
  contactFirst?: string | undefined;
  /**
   * Job contact last name
   */
  contactLast?: string | undefined;
  /**
   * Company/customer name
   */
  companyName?: string | undefined;
  /**
   * Primary email address
   */
  email?: string | undefined;
  /**
   * Mobile phone number
   */
  mobile?: string | undefined;
  /**
   * Primary phone number
   */
  phone1?: string | undefined;
  /**
   * Secondary phone number
   */
  phone2?: string | undefined;
  /**
   * Billing contact first name
   */
  billingContactFirst?: string | undefined;
  /**
   * Billing contact last name
   */
  billingContactLast?: string | undefined;
  /**
   * Billing email address
   */
  billingEmail?: string | undefined;
  /**
   * Billing mobile number
   */
  billingMobile?: string | undefined;
  /**
   * Billing attention line
   */
  billingAttention?: string | undefined;
  /**
   * Description of the job/work to be done
   */
  jobDescription?: string | undefined;
  /**
   * Service location address
   */
  jobAddress?: string | undefined;
  /**
   * Billing address
   */
  billingAddress?: string | undefined;
  /**
   * Description of completed work
   */
  workDoneDescription?: string | undefined;
};

export type CreateInboxMessageRequest = {
  /**
   * Subject of the message
   */
  subject: string;
  /**
   * Plain text content of the message
   */
  messageText: string;
  /**
   * Name of the sender
   */
  fromName?: string | undefined;
  /**
   * Email address of the sender
   */
  fromEmail?: string | undefined;
  /**
   * Additional data to be used when converting the message to a job
   */
  jsonData?: { [k: string]: any } | undefined;
  /**
   * Structured job data that will be merged into json_data when converting the message to a job
   */
  jobData?: JobData | undefined;
  /**
   * UUID of the company this message is regarding
   */
  regardingCompanyUuid?: string | undefined;
};

/** @internal */
export const JobData$inboundSchema: z.ZodType<JobData, z.ZodTypeDef, unknown> =
  z.object({
    contact_first: z.string().optional(),
    contact_last: z.string().optional(),
    company_name: z.string().optional(),
    email: z.string().optional(),
    mobile: z.string().optional(),
    phone_1: z.string().optional(),
    phone_2: z.string().optional(),
    billing_contact_first: z.string().optional(),
    billing_contact_last: z.string().optional(),
    billing_email: z.string().optional(),
    billing_mobile: z.string().optional(),
    billing_attention: z.string().optional(),
    job_description: z.string().optional(),
    job_address: z.string().optional(),
    billing_address: z.string().optional(),
    work_done_description: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      "contact_first": "contactFirst",
      "contact_last": "contactLast",
      "company_name": "companyName",
      "phone_1": "phone1",
      "phone_2": "phone2",
      "billing_contact_first": "billingContactFirst",
      "billing_contact_last": "billingContactLast",
      "billing_email": "billingEmail",
      "billing_mobile": "billingMobile",
      "billing_attention": "billingAttention",
      "job_description": "jobDescription",
      "job_address": "jobAddress",
      "billing_address": "billingAddress",
      "work_done_description": "workDoneDescription",
    });
  });

/** @internal */
export type JobData$Outbound = {
  contact_first?: string | undefined;
  contact_last?: string | undefined;
  company_name?: string | undefined;
  email?: string | undefined;
  mobile?: string | undefined;
  phone_1?: string | undefined;
  phone_2?: string | undefined;
  billing_contact_first?: string | undefined;
  billing_contact_last?: string | undefined;
  billing_email?: string | undefined;
  billing_mobile?: string | undefined;
  billing_attention?: string | undefined;
  job_description?: string | undefined;
  job_address?: string | undefined;
  billing_address?: string | undefined;
  work_done_description?: string | undefined;
};

/** @internal */
export const JobData$outboundSchema: z.ZodType<
  JobData$Outbound,
  z.ZodTypeDef,
  JobData
> = z.object({
  contactFirst: z.string().optional(),
  contactLast: z.string().optional(),
  companyName: z.string().optional(),
  email: z.string().optional(),
  mobile: z.string().optional(),
  phone1: z.string().optional(),
  phone2: z.string().optional(),
  billingContactFirst: z.string().optional(),
  billingContactLast: z.string().optional(),
  billingEmail: z.string().optional(),
  billingMobile: z.string().optional(),
  billingAttention: z.string().optional(),
  jobDescription: z.string().optional(),
  jobAddress: z.string().optional(),
  billingAddress: z.string().optional(),
  workDoneDescription: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    contactFirst: "contact_first",
    contactLast: "contact_last",
    companyName: "company_name",
    phone1: "phone_1",
    phone2: "phone_2",
    billingContactFirst: "billing_contact_first",
    billingContactLast: "billing_contact_last",
    billingEmail: "billing_email",
    billingMobile: "billing_mobile",
    billingAttention: "billing_attention",
    jobDescription: "job_description",
    jobAddress: "job_address",
    billingAddress: "billing_address",
    workDoneDescription: "work_done_description",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace JobData$ {
  /** @deprecated use `JobData$inboundSchema` instead. */
  export const inboundSchema = JobData$inboundSchema;
  /** @deprecated use `JobData$outboundSchema` instead. */
  export const outboundSchema = JobData$outboundSchema;
  /** @deprecated use `JobData$Outbound` instead. */
  export type Outbound = JobData$Outbound;
}

export function jobDataToJSON(jobData: JobData): string {
  return JSON.stringify(JobData$outboundSchema.parse(jobData));
}

export function jobDataFromJSON(
  jsonString: string,
): SafeParseResult<JobData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => JobData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'JobData' from JSON`,
  );
}

/** @internal */
export const CreateInboxMessageRequest$inboundSchema: z.ZodType<
  CreateInboxMessageRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  subject: z.string(),
  message_text: z.string(),
  from_name: z.string().optional(),
  from_email: z.string().optional(),
  json_data: z.record(z.any()).optional(),
  jobData: z.lazy(() => JobData$inboundSchema).optional(),
  regarding_company_uuid: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "message_text": "messageText",
    "from_name": "fromName",
    "from_email": "fromEmail",
    "json_data": "jsonData",
    "regarding_company_uuid": "regardingCompanyUuid",
  });
});

/** @internal */
export type CreateInboxMessageRequest$Outbound = {
  subject: string;
  message_text: string;
  from_name?: string | undefined;
  from_email?: string | undefined;
  json_data?: { [k: string]: any } | undefined;
  jobData?: JobData$Outbound | undefined;
  regarding_company_uuid?: string | undefined;
};

/** @internal */
export const CreateInboxMessageRequest$outboundSchema: z.ZodType<
  CreateInboxMessageRequest$Outbound,
  z.ZodTypeDef,
  CreateInboxMessageRequest
> = z.object({
  subject: z.string(),
  messageText: z.string(),
  fromName: z.string().optional(),
  fromEmail: z.string().optional(),
  jsonData: z.record(z.any()).optional(),
  jobData: z.lazy(() => JobData$outboundSchema).optional(),
  regardingCompanyUuid: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    messageText: "message_text",
    fromName: "from_name",
    fromEmail: "from_email",
    jsonData: "json_data",
    regardingCompanyUuid: "regarding_company_uuid",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateInboxMessageRequest$ {
  /** @deprecated use `CreateInboxMessageRequest$inboundSchema` instead. */
  export const inboundSchema = CreateInboxMessageRequest$inboundSchema;
  /** @deprecated use `CreateInboxMessageRequest$outboundSchema` instead. */
  export const outboundSchema = CreateInboxMessageRequest$outboundSchema;
  /** @deprecated use `CreateInboxMessageRequest$Outbound` instead. */
  export type Outbound = CreateInboxMessageRequest$Outbound;
}

export function createInboxMessageRequestToJSON(
  createInboxMessageRequest: CreateInboxMessageRequest,
): string {
  return JSON.stringify(
    CreateInboxMessageRequest$outboundSchema.parse(createInboxMessageRequest),
  );
}

export function createInboxMessageRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateInboxMessageRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateInboxMessageRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateInboxMessageRequest' from JSON`,
  );
}
