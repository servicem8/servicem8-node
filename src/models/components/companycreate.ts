/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CompanyCreate = {
  /**
   * Company Name
   */
  name: string;
  /**
   * Australian Business Number. A unique 11-digit identifier issued by the Australian Taxation Office to businesses. Required for tax compliance and validation of business identity in Australia.
   */
  abnNumber?: string | undefined;
  /**
   * Password
   */
  address?: string | undefined;
  /**
   * Confirm Password
   */
  billingAddress?: string | undefined;
  /**
   * If provided, specifies the UUID of this Site's parent Company. If blank, this record is a Head Office rather than a Site. This field is only present on ServiceM8 Accounts with the Company Sites addon activated.
   */
  parentCompanyUuid?: any | undefined;
  /**
   * Unique identifier for this record
   */
  uuid?: string | undefined;
  website?: string | undefined;
  isIndividual?: string | undefined;
  addressStreet?: string | undefined;
  addressCity?: string | undefined;
  addressState?: string | undefined;
  addressPostcode?: string | undefined;
  addressCountry?: string | undefined;
  faxNumber?: string | undefined;
  /**
   * JSON Array of Badge UUIDs
   */
  badges?: string | undefined;
  taxRateUuid?: string | undefined;
  billingAttention?: string | undefined;
  paymentTerms?: string | undefined;
};

/** @internal */
export const CompanyCreate$inboundSchema: z.ZodType<
  CompanyCreate,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  abn_number: z.string().optional(),
  address: z.string().optional(),
  billing_address: z.string().optional(),
  parent_company_uuid: z.any().optional(),
  uuid: z.string().optional(),
  website: z.string().optional(),
  is_individual: z.string().optional(),
  address_street: z.string().optional(),
  address_city: z.string().optional(),
  address_state: z.string().optional(),
  address_postcode: z.string().optional(),
  address_country: z.string().optional(),
  fax_number: z.string().optional(),
  badges: z.string().optional(),
  tax_rate_uuid: z.string().optional(),
  billing_attention: z.string().optional(),
  payment_terms: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "abn_number": "abnNumber",
    "billing_address": "billingAddress",
    "parent_company_uuid": "parentCompanyUuid",
    "is_individual": "isIndividual",
    "address_street": "addressStreet",
    "address_city": "addressCity",
    "address_state": "addressState",
    "address_postcode": "addressPostcode",
    "address_country": "addressCountry",
    "fax_number": "faxNumber",
    "tax_rate_uuid": "taxRateUuid",
    "billing_attention": "billingAttention",
    "payment_terms": "paymentTerms",
  });
});

/** @internal */
export type CompanyCreate$Outbound = {
  name: string;
  abn_number?: string | undefined;
  address?: string | undefined;
  billing_address?: string | undefined;
  parent_company_uuid?: any | undefined;
  uuid?: string | undefined;
  website?: string | undefined;
  is_individual?: string | undefined;
  address_street?: string | undefined;
  address_city?: string | undefined;
  address_state?: string | undefined;
  address_postcode?: string | undefined;
  address_country?: string | undefined;
  fax_number?: string | undefined;
  badges?: string | undefined;
  tax_rate_uuid?: string | undefined;
  billing_attention?: string | undefined;
  payment_terms?: string | undefined;
};

/** @internal */
export const CompanyCreate$outboundSchema: z.ZodType<
  CompanyCreate$Outbound,
  z.ZodTypeDef,
  CompanyCreate
> = z.object({
  name: z.string(),
  abnNumber: z.string().optional(),
  address: z.string().optional(),
  billingAddress: z.string().optional(),
  parentCompanyUuid: z.any().optional(),
  uuid: z.string().optional(),
  website: z.string().optional(),
  isIndividual: z.string().optional(),
  addressStreet: z.string().optional(),
  addressCity: z.string().optional(),
  addressState: z.string().optional(),
  addressPostcode: z.string().optional(),
  addressCountry: z.string().optional(),
  faxNumber: z.string().optional(),
  badges: z.string().optional(),
  taxRateUuid: z.string().optional(),
  billingAttention: z.string().optional(),
  paymentTerms: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    abnNumber: "abn_number",
    billingAddress: "billing_address",
    parentCompanyUuid: "parent_company_uuid",
    isIndividual: "is_individual",
    addressStreet: "address_street",
    addressCity: "address_city",
    addressState: "address_state",
    addressPostcode: "address_postcode",
    addressCountry: "address_country",
    faxNumber: "fax_number",
    taxRateUuid: "tax_rate_uuid",
    billingAttention: "billing_attention",
    paymentTerms: "payment_terms",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompanyCreate$ {
  /** @deprecated use `CompanyCreate$inboundSchema` instead. */
  export const inboundSchema = CompanyCreate$inboundSchema;
  /** @deprecated use `CompanyCreate$outboundSchema` instead. */
  export const outboundSchema = CompanyCreate$outboundSchema;
  /** @deprecated use `CompanyCreate$Outbound` instead. */
  export type Outbound = CompanyCreate$Outbound;
}

export function companyCreateToJSON(companyCreate: CompanyCreate): string {
  return JSON.stringify(CompanyCreate$outboundSchema.parse(companyCreate));
}

export function companyCreateFromJSON(
  jsonString: string,
): SafeParseResult<CompanyCreate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CompanyCreate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompanyCreate' from JSON`,
  );
}
