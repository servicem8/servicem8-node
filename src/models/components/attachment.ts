/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Record active/deleted flag.  Valid values are [0,1]
 */
export const AttachmentActive = {
  Zero: 0,
  One: 1,
} as const;
/**
 * Record active/deleted flag.  Valid values are [0,1]
 */
export type AttachmentActive = ClosedEnum<typeof AttachmentActive>;

export type Attachment = {
  /**
   * Unique identifier for this record
   */
  uuid?: string | undefined;
  /**
   * Record active/deleted flag.  Valid values are [0,1]
   */
  active?: AttachmentActive | undefined;
  /**
   * Timestamp at which record was last modified
   */
  editDate?: any | undefined;
  relatedObject?: string | undefined;
  relatedObjectUuid?: string | undefined;
  /**
   * The security roles description
   */
  attachmentName?: string | undefined;
  /**
   * Location's name
   */
  fileType?: string | undefined;
  createdByStaffUuid?: string | undefined;
  timestamp?: string | undefined;
  attachmentSource?: string | undefined;
  tags?: string | undefined;
  lng?: number | undefined;
  lat?: number | undefined;
  photoWidth?: string | undefined;
  photoHeight?: string | undefined;
  extractedInfo?: string | undefined;
  isFavourite?: string | undefined;
  className?: string | undefined;
  metadata?: string | undefined;
};

export type AttachmentInput = {
  /**
   * Unique identifier for this record
   */
  uuid?: string | undefined;
  /**
   * Record active/deleted flag.  Valid values are [0,1]
   */
  active?: AttachmentActive | undefined;
  relatedObject?: string | undefined;
  relatedObjectUuid?: string | undefined;
  /**
   * The security roles description
   */
  attachmentName?: string | undefined;
  /**
   * Location's name
   */
  fileType?: string | undefined;
  createdByStaffUuid?: string | undefined;
  timestamp?: string | undefined;
  attachmentSource?: string | undefined;
  tags?: string | undefined;
  lng?: number | undefined;
  lat?: number | undefined;
  photoWidth?: string | undefined;
  photoHeight?: string | undefined;
  extractedInfo?: string | undefined;
  isFavourite?: string | undefined;
  className?: string | undefined;
  metadata?: string | undefined;
};

/** @internal */
export const AttachmentActive$inboundSchema: z.ZodNativeEnum<
  typeof AttachmentActive
> = z.nativeEnum(AttachmentActive);

/** @internal */
export const AttachmentActive$outboundSchema: z.ZodNativeEnum<
  typeof AttachmentActive
> = AttachmentActive$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AttachmentActive$ {
  /** @deprecated use `AttachmentActive$inboundSchema` instead. */
  export const inboundSchema = AttachmentActive$inboundSchema;
  /** @deprecated use `AttachmentActive$outboundSchema` instead. */
  export const outboundSchema = AttachmentActive$outboundSchema;
}

/** @internal */
export const Attachment$inboundSchema: z.ZodType<
  Attachment,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string().optional(),
  active: AttachmentActive$inboundSchema.default(1),
  edit_date: z.any().optional(),
  related_object: z.string().optional(),
  related_object_uuid: z.string().optional(),
  attachment_name: z.string().optional(),
  file_type: z.string().optional(),
  created_by_staff_uuid: z.string().optional(),
  timestamp: z.string().optional(),
  attachment_source: z.string().optional(),
  tags: z.string().optional(),
  lng: z.number().optional(),
  lat: z.number().optional(),
  photo_width: z.string().optional(),
  photo_height: z.string().optional(),
  extracted_info: z.string().optional(),
  is_favourite: z.string().optional(),
  class_name: z.string().optional(),
  metadata: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "edit_date": "editDate",
    "related_object": "relatedObject",
    "related_object_uuid": "relatedObjectUuid",
    "attachment_name": "attachmentName",
    "file_type": "fileType",
    "created_by_staff_uuid": "createdByStaffUuid",
    "attachment_source": "attachmentSource",
    "photo_width": "photoWidth",
    "photo_height": "photoHeight",
    "extracted_info": "extractedInfo",
    "is_favourite": "isFavourite",
    "class_name": "className",
  });
});

/** @internal */
export type Attachment$Outbound = {
  uuid?: string | undefined;
  active: number;
  edit_date?: any | undefined;
  related_object?: string | undefined;
  related_object_uuid?: string | undefined;
  attachment_name?: string | undefined;
  file_type?: string | undefined;
  created_by_staff_uuid?: string | undefined;
  timestamp?: string | undefined;
  attachment_source?: string | undefined;
  tags?: string | undefined;
  lng?: number | undefined;
  lat?: number | undefined;
  photo_width?: string | undefined;
  photo_height?: string | undefined;
  extracted_info?: string | undefined;
  is_favourite?: string | undefined;
  class_name?: string | undefined;
  metadata?: string | undefined;
};

/** @internal */
export const Attachment$outboundSchema: z.ZodType<
  Attachment$Outbound,
  z.ZodTypeDef,
  Attachment
> = z.object({
  uuid: z.string().optional(),
  active: AttachmentActive$outboundSchema.default(1),
  editDate: z.any().optional(),
  relatedObject: z.string().optional(),
  relatedObjectUuid: z.string().optional(),
  attachmentName: z.string().optional(),
  fileType: z.string().optional(),
  createdByStaffUuid: z.string().optional(),
  timestamp: z.string().optional(),
  attachmentSource: z.string().optional(),
  tags: z.string().optional(),
  lng: z.number().optional(),
  lat: z.number().optional(),
  photoWidth: z.string().optional(),
  photoHeight: z.string().optional(),
  extractedInfo: z.string().optional(),
  isFavourite: z.string().optional(),
  className: z.string().optional(),
  metadata: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    editDate: "edit_date",
    relatedObject: "related_object",
    relatedObjectUuid: "related_object_uuid",
    attachmentName: "attachment_name",
    fileType: "file_type",
    createdByStaffUuid: "created_by_staff_uuid",
    attachmentSource: "attachment_source",
    photoWidth: "photo_width",
    photoHeight: "photo_height",
    extractedInfo: "extracted_info",
    isFavourite: "is_favourite",
    className: "class_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Attachment$ {
  /** @deprecated use `Attachment$inboundSchema` instead. */
  export const inboundSchema = Attachment$inboundSchema;
  /** @deprecated use `Attachment$outboundSchema` instead. */
  export const outboundSchema = Attachment$outboundSchema;
  /** @deprecated use `Attachment$Outbound` instead. */
  export type Outbound = Attachment$Outbound;
}

export function attachmentToJSON(attachment: Attachment): string {
  return JSON.stringify(Attachment$outboundSchema.parse(attachment));
}

export function attachmentFromJSON(
  jsonString: string,
): SafeParseResult<Attachment, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Attachment$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Attachment' from JSON`,
  );
}

/** @internal */
export const AttachmentInput$inboundSchema: z.ZodType<
  AttachmentInput,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string().optional(),
  active: AttachmentActive$inboundSchema.default(1),
  related_object: z.string().optional(),
  related_object_uuid: z.string().optional(),
  attachment_name: z.string().optional(),
  file_type: z.string().optional(),
  created_by_staff_uuid: z.string().optional(),
  timestamp: z.string().optional(),
  attachment_source: z.string().optional(),
  tags: z.string().optional(),
  lng: z.number().optional(),
  lat: z.number().optional(),
  photo_width: z.string().optional(),
  photo_height: z.string().optional(),
  extracted_info: z.string().optional(),
  is_favourite: z.string().optional(),
  class_name: z.string().optional(),
  metadata: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "related_object": "relatedObject",
    "related_object_uuid": "relatedObjectUuid",
    "attachment_name": "attachmentName",
    "file_type": "fileType",
    "created_by_staff_uuid": "createdByStaffUuid",
    "attachment_source": "attachmentSource",
    "photo_width": "photoWidth",
    "photo_height": "photoHeight",
    "extracted_info": "extractedInfo",
    "is_favourite": "isFavourite",
    "class_name": "className",
  });
});

/** @internal */
export type AttachmentInput$Outbound = {
  uuid?: string | undefined;
  active: number;
  related_object?: string | undefined;
  related_object_uuid?: string | undefined;
  attachment_name?: string | undefined;
  file_type?: string | undefined;
  created_by_staff_uuid?: string | undefined;
  timestamp?: string | undefined;
  attachment_source?: string | undefined;
  tags?: string | undefined;
  lng?: number | undefined;
  lat?: number | undefined;
  photo_width?: string | undefined;
  photo_height?: string | undefined;
  extracted_info?: string | undefined;
  is_favourite?: string | undefined;
  class_name?: string | undefined;
  metadata?: string | undefined;
};

/** @internal */
export const AttachmentInput$outboundSchema: z.ZodType<
  AttachmentInput$Outbound,
  z.ZodTypeDef,
  AttachmentInput
> = z.object({
  uuid: z.string().optional(),
  active: AttachmentActive$outboundSchema.default(1),
  relatedObject: z.string().optional(),
  relatedObjectUuid: z.string().optional(),
  attachmentName: z.string().optional(),
  fileType: z.string().optional(),
  createdByStaffUuid: z.string().optional(),
  timestamp: z.string().optional(),
  attachmentSource: z.string().optional(),
  tags: z.string().optional(),
  lng: z.number().optional(),
  lat: z.number().optional(),
  photoWidth: z.string().optional(),
  photoHeight: z.string().optional(),
  extractedInfo: z.string().optional(),
  isFavourite: z.string().optional(),
  className: z.string().optional(),
  metadata: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    relatedObject: "related_object",
    relatedObjectUuid: "related_object_uuid",
    attachmentName: "attachment_name",
    fileType: "file_type",
    createdByStaffUuid: "created_by_staff_uuid",
    attachmentSource: "attachment_source",
    photoWidth: "photo_width",
    photoHeight: "photo_height",
    extractedInfo: "extracted_info",
    isFavourite: "is_favourite",
    className: "class_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AttachmentInput$ {
  /** @deprecated use `AttachmentInput$inboundSchema` instead. */
  export const inboundSchema = AttachmentInput$inboundSchema;
  /** @deprecated use `AttachmentInput$outboundSchema` instead. */
  export const outboundSchema = AttachmentInput$outboundSchema;
  /** @deprecated use `AttachmentInput$Outbound` instead. */
  export type Outbound = AttachmentInput$Outbound;
}

export function attachmentInputToJSON(
  attachmentInput: AttachmentInput,
): string {
  return JSON.stringify(AttachmentInput$outboundSchema.parse(attachmentInput));
}

export function attachmentInputFromJSON(
  jsonString: string,
): SafeParseResult<AttachmentInput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AttachmentInput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AttachmentInput' from JSON`,
  );
}
