/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type AttachmentCreate = {
  /**
   * The type of object this attachment is related to (e.g., 'job', 'company', 'staff'). Must be a valid object type. Always stored in lowercase.
   */
  relatedObject?: string | undefined;
  /**
   * UUID of the related object to which this attachment belongs. Must be a valid UUID of an existing object of the type specified in the related_object field.
   */
  relatedObjectUuid?: string | undefined;
  /**
   * The security roles description
   */
  attachmentName?: string | undefined;
  /**
   * Location's name
   */
  fileType?: string | undefined;
  /**
   * Indicates the source or type of the attachment (e.g., 'INVOICE', 'QUOTE'). Used for filtering and determining how to display the attachment.
   */
  attachmentSource?: string | undefined;
  /**
   * Comma-separated list of tags associated with the attachment. Used for categorization and filtering of attachments.
   */
  tags?: string | undefined;
  /**
   * Longitude coordinate where the attachment was created. Used for geolocation of photos and other attachments. Decimal degrees format.
   */
  lng?: number | undefined;
  /**
   * Latitude coordinate where the attachment was created. Used for geolocation of photos and other attachments. Decimal degrees format.
   */
  lat?: number | undefined;
  /**
   * Width of the image in pixels. Only applicable for image attachments. Read-only in the API.
   */
  photoWidth?: string | undefined;
  /**
   * Height of the image in pixels. Only applicable for image attachments. Read-only in the API.
   */
  photoHeight?: string | undefined;
  /**
   * Additional information extracted from the file, such as form responses or OCR text. Read-only in the API.
   */
  extractedInfo?: string | undefined;
  /**
   * Flag indicating whether this attachment has been marked as a favorite. Used for filtering and displaying attachments.
   */
  isFavourite?: string | undefined;
  /**
   * The specific class type of the attachment. Used for specialized attachment types that extend the base dboAttachment class. Read-only in the API.
   */
  className?: any | undefined;
  /**
   * Additional structured data associated with the attachment in JSON format. The schema varies depending on attachment type and source. Used to store extended information that doesn't fit into standard fields.
   */
  metadata?: string | undefined;
  /**
   * Unique identifier for this record
   */
  uuid?: string | undefined;
  createdByStaffUuid?: string | undefined;
  timestamp?: string | undefined;
};

/** @internal */
export const AttachmentCreate$inboundSchema: z.ZodType<
  AttachmentCreate,
  z.ZodTypeDef,
  unknown
> = z.object({
  related_object: z.string().optional(),
  related_object_uuid: z.string().optional(),
  attachment_name: z.string().optional(),
  file_type: z.string().optional(),
  attachment_source: z.string().optional(),
  tags: z.string().optional(),
  lng: z.number().optional(),
  lat: z.number().optional(),
  photo_width: z.string().optional(),
  photo_height: z.string().optional(),
  extracted_info: z.string().optional(),
  is_favourite: z.string().optional(),
  class_name: z.any().optional(),
  metadata: z.string().optional(),
  uuid: z.string().optional(),
  created_by_staff_uuid: z.string().optional(),
  timestamp: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "related_object": "relatedObject",
    "related_object_uuid": "relatedObjectUuid",
    "attachment_name": "attachmentName",
    "file_type": "fileType",
    "attachment_source": "attachmentSource",
    "photo_width": "photoWidth",
    "photo_height": "photoHeight",
    "extracted_info": "extractedInfo",
    "is_favourite": "isFavourite",
    "class_name": "className",
    "created_by_staff_uuid": "createdByStaffUuid",
  });
});

/** @internal */
export type AttachmentCreate$Outbound = {
  related_object?: string | undefined;
  related_object_uuid?: string | undefined;
  attachment_name?: string | undefined;
  file_type?: string | undefined;
  attachment_source?: string | undefined;
  tags?: string | undefined;
  lng?: number | undefined;
  lat?: number | undefined;
  photo_width?: string | undefined;
  photo_height?: string | undefined;
  extracted_info?: string | undefined;
  is_favourite?: string | undefined;
  class_name?: any | undefined;
  metadata?: string | undefined;
  uuid?: string | undefined;
  created_by_staff_uuid?: string | undefined;
  timestamp?: string | undefined;
};

/** @internal */
export const AttachmentCreate$outboundSchema: z.ZodType<
  AttachmentCreate$Outbound,
  z.ZodTypeDef,
  AttachmentCreate
> = z.object({
  relatedObject: z.string().optional(),
  relatedObjectUuid: z.string().optional(),
  attachmentName: z.string().optional(),
  fileType: z.string().optional(),
  attachmentSource: z.string().optional(),
  tags: z.string().optional(),
  lng: z.number().optional(),
  lat: z.number().optional(),
  photoWidth: z.string().optional(),
  photoHeight: z.string().optional(),
  extractedInfo: z.string().optional(),
  isFavourite: z.string().optional(),
  className: z.any().optional(),
  metadata: z.string().optional(),
  uuid: z.string().optional(),
  createdByStaffUuid: z.string().optional(),
  timestamp: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    relatedObject: "related_object",
    relatedObjectUuid: "related_object_uuid",
    attachmentName: "attachment_name",
    fileType: "file_type",
    attachmentSource: "attachment_source",
    photoWidth: "photo_width",
    photoHeight: "photo_height",
    extractedInfo: "extracted_info",
    isFavourite: "is_favourite",
    className: "class_name",
    createdByStaffUuid: "created_by_staff_uuid",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AttachmentCreate$ {
  /** @deprecated use `AttachmentCreate$inboundSchema` instead. */
  export const inboundSchema = AttachmentCreate$inboundSchema;
  /** @deprecated use `AttachmentCreate$outboundSchema` instead. */
  export const outboundSchema = AttachmentCreate$outboundSchema;
  /** @deprecated use `AttachmentCreate$Outbound` instead. */
  export type Outbound = AttachmentCreate$Outbound;
}

export function attachmentCreateToJSON(
  attachmentCreate: AttachmentCreate,
): string {
  return JSON.stringify(
    AttachmentCreate$outboundSchema.parse(attachmentCreate),
  );
}

export function attachmentCreateFromJSON(
  jsonString: string,
): SafeParseResult<AttachmentCreate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AttachmentCreate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AttachmentCreate' from JSON`,
  );
}
