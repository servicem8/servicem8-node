/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type MaterialBundleCreateMaterialList = {
  /**
   * Must be the UUID of a Material record
   */
  uuid: string;
  quantity: number;
};

export type MaterialBundleCreate = {
  /**
   * Unique identifier for this record
   */
  uuid?: string | undefined;
  /**
   * Unique identifier for this bundle. Must be 30 characters or less and unique across both Materials and Bundles. Used when adding bundles to jobs.
   */
  itemNumber: string;
  /**
   * The display name of the bundle. Used for identification in the system and shows on documents when the bundle is added to a job.
   */
  name?: string | undefined;
  /**
   * A JSON array containing the materials that make up this bundle. Each item includes the material's UUID and the quantity to be added when this bundle is used. Limited to between 1 and 50 items, with all quantities being positive numbers.
   */
  materialList?: Array<MaterialBundleCreateMaterialList> | undefined;
};

/** @internal */
export const MaterialBundleCreateMaterialList$inboundSchema: z.ZodType<
  MaterialBundleCreateMaterialList,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string(),
  quantity: z.number(),
});

/** @internal */
export type MaterialBundleCreateMaterialList$Outbound = {
  uuid: string;
  quantity: number;
};

/** @internal */
export const MaterialBundleCreateMaterialList$outboundSchema: z.ZodType<
  MaterialBundleCreateMaterialList$Outbound,
  z.ZodTypeDef,
  MaterialBundleCreateMaterialList
> = z.object({
  uuid: z.string(),
  quantity: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MaterialBundleCreateMaterialList$ {
  /** @deprecated use `MaterialBundleCreateMaterialList$inboundSchema` instead. */
  export const inboundSchema = MaterialBundleCreateMaterialList$inboundSchema;
  /** @deprecated use `MaterialBundleCreateMaterialList$outboundSchema` instead. */
  export const outboundSchema = MaterialBundleCreateMaterialList$outboundSchema;
  /** @deprecated use `MaterialBundleCreateMaterialList$Outbound` instead. */
  export type Outbound = MaterialBundleCreateMaterialList$Outbound;
}

export function materialBundleCreateMaterialListToJSON(
  materialBundleCreateMaterialList: MaterialBundleCreateMaterialList,
): string {
  return JSON.stringify(
    MaterialBundleCreateMaterialList$outboundSchema.parse(
      materialBundleCreateMaterialList,
    ),
  );
}

export function materialBundleCreateMaterialListFromJSON(
  jsonString: string,
): SafeParseResult<MaterialBundleCreateMaterialList, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MaterialBundleCreateMaterialList$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MaterialBundleCreateMaterialList' from JSON`,
  );
}

/** @internal */
export const MaterialBundleCreate$inboundSchema: z.ZodType<
  MaterialBundleCreate,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string().optional(),
  item_number: z.string(),
  name: z.string().optional(),
  material_list: z.array(
    z.lazy(() => MaterialBundleCreateMaterialList$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "item_number": "itemNumber",
    "material_list": "materialList",
  });
});

/** @internal */
export type MaterialBundleCreate$Outbound = {
  uuid?: string | undefined;
  item_number: string;
  name?: string | undefined;
  material_list?: Array<MaterialBundleCreateMaterialList$Outbound> | undefined;
};

/** @internal */
export const MaterialBundleCreate$outboundSchema: z.ZodType<
  MaterialBundleCreate$Outbound,
  z.ZodTypeDef,
  MaterialBundleCreate
> = z.object({
  uuid: z.string().optional(),
  itemNumber: z.string(),
  name: z.string().optional(),
  materialList: z.array(
    z.lazy(() => MaterialBundleCreateMaterialList$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    itemNumber: "item_number",
    materialList: "material_list",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MaterialBundleCreate$ {
  /** @deprecated use `MaterialBundleCreate$inboundSchema` instead. */
  export const inboundSchema = MaterialBundleCreate$inboundSchema;
  /** @deprecated use `MaterialBundleCreate$outboundSchema` instead. */
  export const outboundSchema = MaterialBundleCreate$outboundSchema;
  /** @deprecated use `MaterialBundleCreate$Outbound` instead. */
  export type Outbound = MaterialBundleCreate$Outbound;
}

export function materialBundleCreateToJSON(
  materialBundleCreate: MaterialBundleCreate,
): string {
  return JSON.stringify(
    MaterialBundleCreate$outboundSchema.parse(materialBundleCreate),
  );
}

export function materialBundleCreateFromJSON(
  jsonString: string,
): SafeParseResult<MaterialBundleCreate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MaterialBundleCreate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MaterialBundleCreate' from JSON`,
  );
}
