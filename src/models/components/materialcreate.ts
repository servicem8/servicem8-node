/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Boolean flag indicating whether the price and cost values include tax (1/true) or exclude tax (0/false). Controls tax calculations when determining final pricing. New materials inherit this setting from the account's default tax display preference..  Valid values are [0,1]
 */
export const MaterialCreatePriceIncludesTaxes = {
  Zero: 0,
  One: 1,
} as const;
/**
 * Boolean flag indicating whether the price and cost values include tax (1/true) or exclude tax (0/false). Controls tax calculations when determining final pricing. New materials inherit this setting from the account's default tax display preference..  Valid values are [0,1]
 */
export type MaterialCreatePriceIncludesTaxes = ClosedEnum<
  typeof MaterialCreatePriceIncludesTaxes
>;

/**
 * Boolean flag indicating whether inventory tracking is enabled for this material (1/true) or disabled (0/false). When enabled, the quantity_in_stock is tracked and updated automatically when the material is used in jobs. Only physical products typically have this enabled..  Valid values are [0,1]
 */
export const MaterialCreateItemIsInventoried = {
  Zero: 0,
  One: 1,
} as const;
/**
 * Boolean flag indicating whether inventory tracking is enabled for this material (1/true) or disabled (0/false). When enabled, the quantity_in_stock is tracked and updated automatically when the material is used in jobs. Only physical products typically have this enabled..  Valid values are [0,1]
 */
export type MaterialCreateItemIsInventoried = ClosedEnum<
  typeof MaterialCreateItemIsInventoried
>;

export type MaterialCreate = {
  /**
   * Name of the material, product or labour rate. The maximum length varies based on accounting package integration 30-100 characters for standard mode, up to 2000 characters for description billing mode. Required field that identifies the material in inventory lists, job forms, and invoices.
   */
  name: string;
  /**
   * Unique identifier code for the material. max length. Must be unique within an account.
   */
  itemNumber?: string | undefined;
  /**
   * The selling price of the material. May include or exclude tax based on the price_includes_taxes field. Used as the default price when adding this material to jobs and generating invoices.
   */
  price?: string | undefined;
  /**
   * The purchase cost of the material. May include or exclude tax depending on the price_includes_taxes setting. Used for profit calculations and reporting. This field may be hidden from users without appropriate permissions.
   */
  cost?: string | undefined;
  /**
   * The current inventory quantity of this material available in stock. Stored as a numeric value with decimal support. Updated automatically when materials are used in jobs or when inventory is manually adjusted. Only tracked if item_is_inventoried is enabled.
   */
  quantityInStock?: number | undefined;
  /**
   * Boolean flag indicating whether the price and cost values include tax (1/true) or exclude tax (0/false). Controls tax calculations when determining final pricing. New materials inherit this setting from the account's default tax display preference..  Valid values are [0,1]
   */
  priceIncludesTaxes?: MaterialCreatePriceIncludesTaxes | undefined;
  /**
   * The barcode identifier for the material.  Can store UPC, EAN, or other barcode formats. Used for inventory scanning and quick material lookup in the mobile app.
   */
  barcode?: string | undefined;
  /**
   * Boolean flag indicating whether inventory tracking is enabled for this material (1/true) or disabled (0/false). When enabled, the quantity_in_stock is tracked and updated automatically when the material is used in jobs. Only physical products typically have this enabled..  Valid values are [0,1]
   */
  itemIsInventoried?: MaterialCreateItemIsInventoried | undefined;
  /**
   * Unique identifier for this record
   */
  uuid?: string | undefined;
  itemDescription?: string | undefined;
  useDescriptionForInvoicing?: string | undefined;
  taxRateUuid?: string | undefined;
};

/** @internal */
export const MaterialCreatePriceIncludesTaxes$inboundSchema: z.ZodNativeEnum<
  typeof MaterialCreatePriceIncludesTaxes
> = z.nativeEnum(MaterialCreatePriceIncludesTaxes);

/** @internal */
export const MaterialCreatePriceIncludesTaxes$outboundSchema: z.ZodNativeEnum<
  typeof MaterialCreatePriceIncludesTaxes
> = MaterialCreatePriceIncludesTaxes$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MaterialCreatePriceIncludesTaxes$ {
  /** @deprecated use `MaterialCreatePriceIncludesTaxes$inboundSchema` instead. */
  export const inboundSchema = MaterialCreatePriceIncludesTaxes$inboundSchema;
  /** @deprecated use `MaterialCreatePriceIncludesTaxes$outboundSchema` instead. */
  export const outboundSchema = MaterialCreatePriceIncludesTaxes$outboundSchema;
}

/** @internal */
export const MaterialCreateItemIsInventoried$inboundSchema: z.ZodNativeEnum<
  typeof MaterialCreateItemIsInventoried
> = z.nativeEnum(MaterialCreateItemIsInventoried);

/** @internal */
export const MaterialCreateItemIsInventoried$outboundSchema: z.ZodNativeEnum<
  typeof MaterialCreateItemIsInventoried
> = MaterialCreateItemIsInventoried$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MaterialCreateItemIsInventoried$ {
  /** @deprecated use `MaterialCreateItemIsInventoried$inboundSchema` instead. */
  export const inboundSchema = MaterialCreateItemIsInventoried$inboundSchema;
  /** @deprecated use `MaterialCreateItemIsInventoried$outboundSchema` instead. */
  export const outboundSchema = MaterialCreateItemIsInventoried$outboundSchema;
}

/** @internal */
export const MaterialCreate$inboundSchema: z.ZodType<
  MaterialCreate,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  item_number: z.string().optional(),
  price: z.string().optional(),
  cost: z.string().optional(),
  quantity_in_stock: z.number().optional(),
  price_includes_taxes: MaterialCreatePriceIncludesTaxes$inboundSchema
    .optional(),
  barcode: z.string().optional(),
  item_is_inventoried: MaterialCreateItemIsInventoried$inboundSchema.optional(),
  uuid: z.string().optional(),
  item_description: z.string().optional(),
  use_description_for_invoicing: z.string().optional(),
  tax_rate_uuid: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "item_number": "itemNumber",
    "quantity_in_stock": "quantityInStock",
    "price_includes_taxes": "priceIncludesTaxes",
    "item_is_inventoried": "itemIsInventoried",
    "item_description": "itemDescription",
    "use_description_for_invoicing": "useDescriptionForInvoicing",
    "tax_rate_uuid": "taxRateUuid",
  });
});

/** @internal */
export type MaterialCreate$Outbound = {
  name: string;
  item_number?: string | undefined;
  price?: string | undefined;
  cost?: string | undefined;
  quantity_in_stock?: number | undefined;
  price_includes_taxes?: number | undefined;
  barcode?: string | undefined;
  item_is_inventoried?: number | undefined;
  uuid?: string | undefined;
  item_description?: string | undefined;
  use_description_for_invoicing?: string | undefined;
  tax_rate_uuid?: string | undefined;
};

/** @internal */
export const MaterialCreate$outboundSchema: z.ZodType<
  MaterialCreate$Outbound,
  z.ZodTypeDef,
  MaterialCreate
> = z.object({
  name: z.string(),
  itemNumber: z.string().optional(),
  price: z.string().optional(),
  cost: z.string().optional(),
  quantityInStock: z.number().optional(),
  priceIncludesTaxes: MaterialCreatePriceIncludesTaxes$outboundSchema
    .optional(),
  barcode: z.string().optional(),
  itemIsInventoried: MaterialCreateItemIsInventoried$outboundSchema.optional(),
  uuid: z.string().optional(),
  itemDescription: z.string().optional(),
  useDescriptionForInvoicing: z.string().optional(),
  taxRateUuid: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    itemNumber: "item_number",
    quantityInStock: "quantity_in_stock",
    priceIncludesTaxes: "price_includes_taxes",
    itemIsInventoried: "item_is_inventoried",
    itemDescription: "item_description",
    useDescriptionForInvoicing: "use_description_for_invoicing",
    taxRateUuid: "tax_rate_uuid",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MaterialCreate$ {
  /** @deprecated use `MaterialCreate$inboundSchema` instead. */
  export const inboundSchema = MaterialCreate$inboundSchema;
  /** @deprecated use `MaterialCreate$outboundSchema` instead. */
  export const outboundSchema = MaterialCreate$outboundSchema;
  /** @deprecated use `MaterialCreate$Outbound` instead. */
  export type Outbound = MaterialCreate$Outbound;
}

export function materialCreateToJSON(materialCreate: MaterialCreate): string {
  return JSON.stringify(MaterialCreate$outboundSchema.parse(materialCreate));
}

export function materialCreateFromJSON(
  jsonString: string,
): SafeParseResult<MaterialCreate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MaterialCreate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MaterialCreate' from JSON`,
  );
}
