/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Boolean flag indicating whether this tax rate is the system default (true) or not (false). Only one tax rate can be marked as default at any time. The default tax rate is automatically applied to new line items when no specific tax rate is selected..  Valid values are [0,1]
 */
export const TaxRateIsDefaultTaxRate = {
  Zero: 0,
  One: 1,
} as const;
/**
 * Boolean flag indicating whether this tax rate is the system default (true) or not (false). Only one tax rate can be marked as default at any time. The default tax rate is automatically applied to new line items when no specific tax rate is selected..  Valid values are [0,1]
 */
export type TaxRateIsDefaultTaxRate = ClosedEnum<
  typeof TaxRateIsDefaultTaxRate
>;

/**
 * Record active/deleted flag.  Valid values are [0,1]
 */
export const TaxRateActive = {
  Zero: 0,
  One: 1,
} as const;
/**
 * Record active/deleted flag.  Valid values are [0,1]
 */
export type TaxRateActive = ClosedEnum<typeof TaxRateActive>;

export type TaxRate = {
  /**
   * Name of the tax rate used for identification. Examples include 'GST', 'VAT', 'Sales Tax', etc.
   */
  name: string;
  /**
   * The tax rate percentage value (stored as a decimal value). For example, 10 for a 10% tax rate. Used in calculations to determine tax amounts for invoices and quotes.
   */
  amount?: string | undefined;
  /**
   * Boolean flag indicating whether this tax rate is the system default (true) or not (false). Only one tax rate can be marked as default at any time. The default tax rate is automatically applied to new line items when no specific tax rate is selected..  Valid values are [0,1]
   */
  isDefaultTaxRate?: TaxRateIsDefaultTaxRate | undefined;
  /**
   * Unique identifier for this record
   */
  uuid?: string | undefined;
  /**
   * Record active/deleted flag.  Valid values are [0,1]
   */
  active?: TaxRateActive | undefined;
  /**
   * Timestamp at which record was last modified
   */
  editDate?: any | undefined;
};

/** @internal */
export const TaxRateIsDefaultTaxRate$inboundSchema: z.ZodNativeEnum<
  typeof TaxRateIsDefaultTaxRate
> = z.nativeEnum(TaxRateIsDefaultTaxRate);

/** @internal */
export const TaxRateIsDefaultTaxRate$outboundSchema: z.ZodNativeEnum<
  typeof TaxRateIsDefaultTaxRate
> = TaxRateIsDefaultTaxRate$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TaxRateIsDefaultTaxRate$ {
  /** @deprecated use `TaxRateIsDefaultTaxRate$inboundSchema` instead. */
  export const inboundSchema = TaxRateIsDefaultTaxRate$inboundSchema;
  /** @deprecated use `TaxRateIsDefaultTaxRate$outboundSchema` instead. */
  export const outboundSchema = TaxRateIsDefaultTaxRate$outboundSchema;
}

/** @internal */
export const TaxRateActive$inboundSchema: z.ZodNativeEnum<
  typeof TaxRateActive
> = z.nativeEnum(TaxRateActive);

/** @internal */
export const TaxRateActive$outboundSchema: z.ZodNativeEnum<
  typeof TaxRateActive
> = TaxRateActive$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TaxRateActive$ {
  /** @deprecated use `TaxRateActive$inboundSchema` instead. */
  export const inboundSchema = TaxRateActive$inboundSchema;
  /** @deprecated use `TaxRateActive$outboundSchema` instead. */
  export const outboundSchema = TaxRateActive$outboundSchema;
}

/** @internal */
export const TaxRate$inboundSchema: z.ZodType<TaxRate, z.ZodTypeDef, unknown> =
  z.object({
    name: z.string(),
    amount: z.string().optional(),
    is_default_tax_rate: TaxRateIsDefaultTaxRate$inboundSchema.optional(),
    uuid: z.string().optional(),
    active: TaxRateActive$inboundSchema.default(1),
    edit_date: z.any().optional(),
  }).transform((v) => {
    return remap$(v, {
      "is_default_tax_rate": "isDefaultTaxRate",
      "edit_date": "editDate",
    });
  });

/** @internal */
export type TaxRate$Outbound = {
  name: string;
  amount?: string | undefined;
  is_default_tax_rate?: number | undefined;
  uuid?: string | undefined;
  active: number;
  edit_date?: any | undefined;
};

/** @internal */
export const TaxRate$outboundSchema: z.ZodType<
  TaxRate$Outbound,
  z.ZodTypeDef,
  TaxRate
> = z.object({
  name: z.string(),
  amount: z.string().optional(),
  isDefaultTaxRate: TaxRateIsDefaultTaxRate$outboundSchema.optional(),
  uuid: z.string().optional(),
  active: TaxRateActive$outboundSchema.default(1),
  editDate: z.any().optional(),
}).transform((v) => {
  return remap$(v, {
    isDefaultTaxRate: "is_default_tax_rate",
    editDate: "edit_date",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TaxRate$ {
  /** @deprecated use `TaxRate$inboundSchema` instead. */
  export const inboundSchema = TaxRate$inboundSchema;
  /** @deprecated use `TaxRate$outboundSchema` instead. */
  export const outboundSchema = TaxRate$outboundSchema;
  /** @deprecated use `TaxRate$Outbound` instead. */
  export type Outbound = TaxRate$Outbound;
}

export function taxRateToJSON(taxRate: TaxRate): string {
  return JSON.stringify(TaxRate$outboundSchema.parse(taxRate));
}

export function taxRateFromJSON(
  jsonString: string,
): SafeParseResult<TaxRate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TaxRate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TaxRate' from JSON`,
  );
}
