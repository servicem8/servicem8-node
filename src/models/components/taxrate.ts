/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Record active/deleted flag.  Valid values are [0,1]
 */
export const TaxRateActive = {
  Zero: 0,
  One: 1,
} as const;
/**
 * Record active/deleted flag.  Valid values are [0,1]
 */
export type TaxRateActive = ClosedEnum<typeof TaxRateActive>;

/**
 *  Valid values are [0,1]
 */
export const IsDefaultTaxRate = {
  Zero: 0,
  One: 1,
} as const;
/**
 *  Valid values are [0,1]
 */
export type IsDefaultTaxRate = ClosedEnum<typeof IsDefaultTaxRate>;

export type TaxRate = {
  /**
   * Unique identifier for this record
   */
  uuid?: string | undefined;
  /**
   * Record active/deleted flag.  Valid values are [0,1]
   */
  active?: TaxRateActive | undefined;
  /**
   * Timestamp at which record was last modified
   */
  editDate?: any | undefined;
  name: string;
  amount?: string | undefined;
  /**
   *  Valid values are [0,1]
   */
  isDefaultTaxRate?: IsDefaultTaxRate | undefined;
};

export type TaxRateInput = {
  /**
   * Unique identifier for this record
   */
  uuid?: string | undefined;
  /**
   * Record active/deleted flag.  Valid values are [0,1]
   */
  active?: TaxRateActive | undefined;
  name: string;
  amount?: string | undefined;
  /**
   *  Valid values are [0,1]
   */
  isDefaultTaxRate?: IsDefaultTaxRate | undefined;
};

/** @internal */
export const TaxRateActive$inboundSchema: z.ZodNativeEnum<
  typeof TaxRateActive
> = z.nativeEnum(TaxRateActive);

/** @internal */
export const TaxRateActive$outboundSchema: z.ZodNativeEnum<
  typeof TaxRateActive
> = TaxRateActive$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TaxRateActive$ {
  /** @deprecated use `TaxRateActive$inboundSchema` instead. */
  export const inboundSchema = TaxRateActive$inboundSchema;
  /** @deprecated use `TaxRateActive$outboundSchema` instead. */
  export const outboundSchema = TaxRateActive$outboundSchema;
}

/** @internal */
export const IsDefaultTaxRate$inboundSchema: z.ZodNativeEnum<
  typeof IsDefaultTaxRate
> = z.nativeEnum(IsDefaultTaxRate);

/** @internal */
export const IsDefaultTaxRate$outboundSchema: z.ZodNativeEnum<
  typeof IsDefaultTaxRate
> = IsDefaultTaxRate$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IsDefaultTaxRate$ {
  /** @deprecated use `IsDefaultTaxRate$inboundSchema` instead. */
  export const inboundSchema = IsDefaultTaxRate$inboundSchema;
  /** @deprecated use `IsDefaultTaxRate$outboundSchema` instead. */
  export const outboundSchema = IsDefaultTaxRate$outboundSchema;
}

/** @internal */
export const TaxRate$inboundSchema: z.ZodType<TaxRate, z.ZodTypeDef, unknown> =
  z.object({
    uuid: z.string().optional(),
    active: TaxRateActive$inboundSchema.default(1),
    edit_date: z.any().optional(),
    name: z.string(),
    amount: z.string().optional(),
    is_default_tax_rate: IsDefaultTaxRate$inboundSchema.optional(),
  }).transform((v) => {
    return remap$(v, {
      "edit_date": "editDate",
      "is_default_tax_rate": "isDefaultTaxRate",
    });
  });

/** @internal */
export type TaxRate$Outbound = {
  uuid?: string | undefined;
  active: number;
  edit_date?: any | undefined;
  name: string;
  amount?: string | undefined;
  is_default_tax_rate?: number | undefined;
};

/** @internal */
export const TaxRate$outboundSchema: z.ZodType<
  TaxRate$Outbound,
  z.ZodTypeDef,
  TaxRate
> = z.object({
  uuid: z.string().optional(),
  active: TaxRateActive$outboundSchema.default(1),
  editDate: z.any().optional(),
  name: z.string(),
  amount: z.string().optional(),
  isDefaultTaxRate: IsDefaultTaxRate$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    editDate: "edit_date",
    isDefaultTaxRate: "is_default_tax_rate",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TaxRate$ {
  /** @deprecated use `TaxRate$inboundSchema` instead. */
  export const inboundSchema = TaxRate$inboundSchema;
  /** @deprecated use `TaxRate$outboundSchema` instead. */
  export const outboundSchema = TaxRate$outboundSchema;
  /** @deprecated use `TaxRate$Outbound` instead. */
  export type Outbound = TaxRate$Outbound;
}

export function taxRateToJSON(taxRate: TaxRate): string {
  return JSON.stringify(TaxRate$outboundSchema.parse(taxRate));
}

export function taxRateFromJSON(
  jsonString: string,
): SafeParseResult<TaxRate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TaxRate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TaxRate' from JSON`,
  );
}

/** @internal */
export const TaxRateInput$inboundSchema: z.ZodType<
  TaxRateInput,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string().optional(),
  active: TaxRateActive$inboundSchema.default(1),
  name: z.string(),
  amount: z.string().optional(),
  is_default_tax_rate: IsDefaultTaxRate$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "is_default_tax_rate": "isDefaultTaxRate",
  });
});

/** @internal */
export type TaxRateInput$Outbound = {
  uuid?: string | undefined;
  active: number;
  name: string;
  amount?: string | undefined;
  is_default_tax_rate?: number | undefined;
};

/** @internal */
export const TaxRateInput$outboundSchema: z.ZodType<
  TaxRateInput$Outbound,
  z.ZodTypeDef,
  TaxRateInput
> = z.object({
  uuid: z.string().optional(),
  active: TaxRateActive$outboundSchema.default(1),
  name: z.string(),
  amount: z.string().optional(),
  isDefaultTaxRate: IsDefaultTaxRate$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    isDefaultTaxRate: "is_default_tax_rate",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TaxRateInput$ {
  /** @deprecated use `TaxRateInput$inboundSchema` instead. */
  export const inboundSchema = TaxRateInput$inboundSchema;
  /** @deprecated use `TaxRateInput$outboundSchema` instead. */
  export const outboundSchema = TaxRateInput$outboundSchema;
  /** @deprecated use `TaxRateInput$Outbound` instead. */
  export type Outbound = TaxRateInput$Outbound;
}

export function taxRateInputToJSON(taxRateInput: TaxRateInput): string {
  return JSON.stringify(TaxRateInput$outboundSchema.parse(taxRateInput));
}

export function taxRateInputFromJSON(
  jsonString: string,
): SafeParseResult<TaxRateInput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TaxRateInput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TaxRateInput' from JSON`,
  );
}
