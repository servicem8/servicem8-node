/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type JobAllocationCreate = {
  /**
   * The UUID of the job that this allocation relates to.
   */
  jobUuid?: string | undefined;
  /**
   * DEPRECATED
   */
  queueUuid?: any | undefined;
  /**
   * The UUID of the staff member this job is allocated to.
   */
  staffUuid?: string | undefined;
  /**
   * The minimum start date for a job allocation to be completed by a staff member. Setting this date will ensure the job allocation appears in the future on staff schedules.
   */
  allocationDate?: string | undefined;
  /**
   * The UUID of the allocation window that defines when the job should be completed (e.g. Urgent, Early Morning, During Business Hours).
   */
  allocationWindowUuid?: string | undefined;
  /**
   * The UUID of the staff member who allocated the job.
   */
  allocatedByStaffUuid?: string | undefined;
  /**
   * The timestamp when the job was allocated.
   */
  allocatedTimestamp?: string | undefined;
  /**
   * The timestamp when the job allocation expires.
   */
  expiryTimestamp?: string | undefined;
  /**
   * The timestamp when the job allocation was read by the staff member.
   */
  readTimestamp?: string | undefined;
  /**
   * The timestamp when the job allocation was marked as completed.
   */
  completionTimestamp?: string | undefined;
  /**
   * DEPRECATED
   */
  estimatedDuration?: any | undefined;
  /**
   * DEPRECATED
   */
  revisedDuration?: any | undefined;
  /**
   * The sort priority for displaying this job allocation.
   */
  sortPriority?: string | undefined;
  /**
   * DEPRECATED
   */
  requiresAcceptance?: any | undefined;
  /**
   * DEPRECATED
   */
  acceptanceStatus?: any | undefined;
  /**
   * DEPRECATED
   */
  acceptanceTimestamp?: any | undefined;
  /**
   * Unique identifier for this record
   */
  uuid?: string | undefined;
};

/** @internal */
export const JobAllocationCreate$inboundSchema: z.ZodType<
  JobAllocationCreate,
  z.ZodTypeDef,
  unknown
> = z.object({
  job_uuid: z.string().optional(),
  queue_uuid: z.any().optional(),
  staff_uuid: z.string().optional(),
  allocation_date: z.string().optional(),
  allocation_window_uuid: z.string().optional(),
  allocated_by_staff_uuid: z.string().optional(),
  allocated_timestamp: z.string().optional(),
  expiry_timestamp: z.string().optional(),
  read_timestamp: z.string().optional(),
  completion_timestamp: z.string().optional(),
  estimated_duration: z.any().optional(),
  revised_duration: z.any().optional(),
  sort_priority: z.string().optional(),
  requires_acceptance: z.any().optional(),
  acceptance_status: z.any().optional(),
  acceptance_timestamp: z.any().optional(),
  uuid: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "job_uuid": "jobUuid",
    "queue_uuid": "queueUuid",
    "staff_uuid": "staffUuid",
    "allocation_date": "allocationDate",
    "allocation_window_uuid": "allocationWindowUuid",
    "allocated_by_staff_uuid": "allocatedByStaffUuid",
    "allocated_timestamp": "allocatedTimestamp",
    "expiry_timestamp": "expiryTimestamp",
    "read_timestamp": "readTimestamp",
    "completion_timestamp": "completionTimestamp",
    "estimated_duration": "estimatedDuration",
    "revised_duration": "revisedDuration",
    "sort_priority": "sortPriority",
    "requires_acceptance": "requiresAcceptance",
    "acceptance_status": "acceptanceStatus",
    "acceptance_timestamp": "acceptanceTimestamp",
  });
});

/** @internal */
export type JobAllocationCreate$Outbound = {
  job_uuid?: string | undefined;
  queue_uuid?: any | undefined;
  staff_uuid?: string | undefined;
  allocation_date?: string | undefined;
  allocation_window_uuid?: string | undefined;
  allocated_by_staff_uuid?: string | undefined;
  allocated_timestamp?: string | undefined;
  expiry_timestamp?: string | undefined;
  read_timestamp?: string | undefined;
  completion_timestamp?: string | undefined;
  estimated_duration?: any | undefined;
  revised_duration?: any | undefined;
  sort_priority?: string | undefined;
  requires_acceptance?: any | undefined;
  acceptance_status?: any | undefined;
  acceptance_timestamp?: any | undefined;
  uuid?: string | undefined;
};

/** @internal */
export const JobAllocationCreate$outboundSchema: z.ZodType<
  JobAllocationCreate$Outbound,
  z.ZodTypeDef,
  JobAllocationCreate
> = z.object({
  jobUuid: z.string().optional(),
  queueUuid: z.any().optional(),
  staffUuid: z.string().optional(),
  allocationDate: z.string().optional(),
  allocationWindowUuid: z.string().optional(),
  allocatedByStaffUuid: z.string().optional(),
  allocatedTimestamp: z.string().optional(),
  expiryTimestamp: z.string().optional(),
  readTimestamp: z.string().optional(),
  completionTimestamp: z.string().optional(),
  estimatedDuration: z.any().optional(),
  revisedDuration: z.any().optional(),
  sortPriority: z.string().optional(),
  requiresAcceptance: z.any().optional(),
  acceptanceStatus: z.any().optional(),
  acceptanceTimestamp: z.any().optional(),
  uuid: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    jobUuid: "job_uuid",
    queueUuid: "queue_uuid",
    staffUuid: "staff_uuid",
    allocationDate: "allocation_date",
    allocationWindowUuid: "allocation_window_uuid",
    allocatedByStaffUuid: "allocated_by_staff_uuid",
    allocatedTimestamp: "allocated_timestamp",
    expiryTimestamp: "expiry_timestamp",
    readTimestamp: "read_timestamp",
    completionTimestamp: "completion_timestamp",
    estimatedDuration: "estimated_duration",
    revisedDuration: "revised_duration",
    sortPriority: "sort_priority",
    requiresAcceptance: "requires_acceptance",
    acceptanceStatus: "acceptance_status",
    acceptanceTimestamp: "acceptance_timestamp",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace JobAllocationCreate$ {
  /** @deprecated use `JobAllocationCreate$inboundSchema` instead. */
  export const inboundSchema = JobAllocationCreate$inboundSchema;
  /** @deprecated use `JobAllocationCreate$outboundSchema` instead. */
  export const outboundSchema = JobAllocationCreate$outboundSchema;
  /** @deprecated use `JobAllocationCreate$Outbound` instead. */
  export type Outbound = JobAllocationCreate$Outbound;
}

export function jobAllocationCreateToJSON(
  jobAllocationCreate: JobAllocationCreate,
): string {
  return JSON.stringify(
    JobAllocationCreate$outboundSchema.parse(jobAllocationCreate),
  );
}

export function jobAllocationCreateFromJSON(
  jsonString: string,
): SafeParseResult<JobAllocationCreate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => JobAllocationCreate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'JobAllocationCreate' from JSON`,
  );
}
