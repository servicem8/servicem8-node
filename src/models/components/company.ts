/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Record active/deleted flag.
 *
 * @remarks
 *
 * Valid values are [0,1]
 */
export const CompanyActive = {
  Zero: 0,
  One: 1,
} as const;
/**
 * Record active/deleted flag.
 *
 * @remarks
 *
 * Valid values are [0,1]
 */
export type CompanyActive = ClosedEnum<typeof CompanyActive>;

export type Company = {
  /**
   * Record UUID key
   */
  uuid?: string | undefined;
  /**
   * Record active/deleted flag.
   *
   * @remarks
   *
   * Valid values are [0,1]
   */
  active?: CompanyActive | undefined;
  /**
   * Record last modified timestamp
   */
  editDate?: string | undefined;
  /**
   * Company Name
   */
  name: string;
  website?: string | undefined;
  abnNumber?: string | undefined;
  isIndividual?: string | undefined;
  addressStreet?: string | undefined;
  addressCity?: string | undefined;
  addressState?: string | undefined;
  addressPostcode?: string | undefined;
  addressCountry?: string | undefined;
  faxNumber?: string | undefined;
  /**
   * Password
   */
  address?: string | undefined;
  /**
   * Confirm Password
   */
  billingAddress?: string | undefined;
  badges?: string | undefined;
  taxRateUuid?: string | undefined;
  billingAttention?: string | undefined;
  paymentTerms?: string | undefined;
};

export type CompanyInput = {
  /**
   * Record UUID key
   */
  uuid?: string | undefined;
  /**
   * Record active/deleted flag.
   *
   * @remarks
   *
   * Valid values are [0,1]
   */
  active?: CompanyActive | undefined;
  /**
   * Company Name
   */
  name: string;
  website?: string | undefined;
  abnNumber?: string | undefined;
  isIndividual?: string | undefined;
  addressStreet?: string | undefined;
  addressCity?: string | undefined;
  addressState?: string | undefined;
  addressPostcode?: string | undefined;
  addressCountry?: string | undefined;
  faxNumber?: string | undefined;
  /**
   * Password
   */
  address?: string | undefined;
  /**
   * Confirm Password
   */
  billingAddress?: string | undefined;
  badges?: string | undefined;
  taxRateUuid?: string | undefined;
  billingAttention?: string | undefined;
  paymentTerms?: string | undefined;
};

/** @internal */
export const CompanyActive$inboundSchema: z.ZodNativeEnum<
  typeof CompanyActive
> = z.nativeEnum(CompanyActive);

/** @internal */
export const CompanyActive$outboundSchema: z.ZodNativeEnum<
  typeof CompanyActive
> = CompanyActive$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompanyActive$ {
  /** @deprecated use `CompanyActive$inboundSchema` instead. */
  export const inboundSchema = CompanyActive$inboundSchema;
  /** @deprecated use `CompanyActive$outboundSchema` instead. */
  export const outboundSchema = CompanyActive$outboundSchema;
}

/** @internal */
export const Company$inboundSchema: z.ZodType<Company, z.ZodTypeDef, unknown> =
  z.object({
    uuid: z.string().optional(),
    active: CompanyActive$inboundSchema.default(1),
    edit_date: z.string().optional(),
    name: z.string(),
    website: z.string().optional(),
    abn_number: z.string().optional(),
    is_individual: z.string().optional(),
    address_street: z.string().optional(),
    address_city: z.string().optional(),
    address_state: z.string().optional(),
    address_postcode: z.string().optional(),
    address_country: z.string().optional(),
    fax_number: z.string().optional(),
    address: z.string().optional(),
    billing_address: z.string().optional(),
    badges: z.string().optional(),
    tax_rate_uuid: z.string().optional(),
    billing_attention: z.string().optional(),
    payment_terms: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      "edit_date": "editDate",
      "abn_number": "abnNumber",
      "is_individual": "isIndividual",
      "address_street": "addressStreet",
      "address_city": "addressCity",
      "address_state": "addressState",
      "address_postcode": "addressPostcode",
      "address_country": "addressCountry",
      "fax_number": "faxNumber",
      "billing_address": "billingAddress",
      "tax_rate_uuid": "taxRateUuid",
      "billing_attention": "billingAttention",
      "payment_terms": "paymentTerms",
    });
  });

/** @internal */
export type Company$Outbound = {
  uuid?: string | undefined;
  active: number;
  edit_date?: string | undefined;
  name: string;
  website?: string | undefined;
  abn_number?: string | undefined;
  is_individual?: string | undefined;
  address_street?: string | undefined;
  address_city?: string | undefined;
  address_state?: string | undefined;
  address_postcode?: string | undefined;
  address_country?: string | undefined;
  fax_number?: string | undefined;
  address?: string | undefined;
  billing_address?: string | undefined;
  badges?: string | undefined;
  tax_rate_uuid?: string | undefined;
  billing_attention?: string | undefined;
  payment_terms?: string | undefined;
};

/** @internal */
export const Company$outboundSchema: z.ZodType<
  Company$Outbound,
  z.ZodTypeDef,
  Company
> = z.object({
  uuid: z.string().optional(),
  active: CompanyActive$outboundSchema.default(1),
  editDate: z.string().optional(),
  name: z.string(),
  website: z.string().optional(),
  abnNumber: z.string().optional(),
  isIndividual: z.string().optional(),
  addressStreet: z.string().optional(),
  addressCity: z.string().optional(),
  addressState: z.string().optional(),
  addressPostcode: z.string().optional(),
  addressCountry: z.string().optional(),
  faxNumber: z.string().optional(),
  address: z.string().optional(),
  billingAddress: z.string().optional(),
  badges: z.string().optional(),
  taxRateUuid: z.string().optional(),
  billingAttention: z.string().optional(),
  paymentTerms: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    editDate: "edit_date",
    abnNumber: "abn_number",
    isIndividual: "is_individual",
    addressStreet: "address_street",
    addressCity: "address_city",
    addressState: "address_state",
    addressPostcode: "address_postcode",
    addressCountry: "address_country",
    faxNumber: "fax_number",
    billingAddress: "billing_address",
    taxRateUuid: "tax_rate_uuid",
    billingAttention: "billing_attention",
    paymentTerms: "payment_terms",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Company$ {
  /** @deprecated use `Company$inboundSchema` instead. */
  export const inboundSchema = Company$inboundSchema;
  /** @deprecated use `Company$outboundSchema` instead. */
  export const outboundSchema = Company$outboundSchema;
  /** @deprecated use `Company$Outbound` instead. */
  export type Outbound = Company$Outbound;
}

export function companyToJSON(company: Company): string {
  return JSON.stringify(Company$outboundSchema.parse(company));
}

export function companyFromJSON(
  jsonString: string,
): SafeParseResult<Company, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Company$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Company' from JSON`,
  );
}

/** @internal */
export const CompanyInput$inboundSchema: z.ZodType<
  CompanyInput,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string().optional(),
  active: CompanyActive$inboundSchema.default(1),
  name: z.string(),
  website: z.string().optional(),
  abn_number: z.string().optional(),
  is_individual: z.string().optional(),
  address_street: z.string().optional(),
  address_city: z.string().optional(),
  address_state: z.string().optional(),
  address_postcode: z.string().optional(),
  address_country: z.string().optional(),
  fax_number: z.string().optional(),
  address: z.string().optional(),
  billing_address: z.string().optional(),
  badges: z.string().optional(),
  tax_rate_uuid: z.string().optional(),
  billing_attention: z.string().optional(),
  payment_terms: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "abn_number": "abnNumber",
    "is_individual": "isIndividual",
    "address_street": "addressStreet",
    "address_city": "addressCity",
    "address_state": "addressState",
    "address_postcode": "addressPostcode",
    "address_country": "addressCountry",
    "fax_number": "faxNumber",
    "billing_address": "billingAddress",
    "tax_rate_uuid": "taxRateUuid",
    "billing_attention": "billingAttention",
    "payment_terms": "paymentTerms",
  });
});

/** @internal */
export type CompanyInput$Outbound = {
  uuid?: string | undefined;
  active: number;
  name: string;
  website?: string | undefined;
  abn_number?: string | undefined;
  is_individual?: string | undefined;
  address_street?: string | undefined;
  address_city?: string | undefined;
  address_state?: string | undefined;
  address_postcode?: string | undefined;
  address_country?: string | undefined;
  fax_number?: string | undefined;
  address?: string | undefined;
  billing_address?: string | undefined;
  badges?: string | undefined;
  tax_rate_uuid?: string | undefined;
  billing_attention?: string | undefined;
  payment_terms?: string | undefined;
};

/** @internal */
export const CompanyInput$outboundSchema: z.ZodType<
  CompanyInput$Outbound,
  z.ZodTypeDef,
  CompanyInput
> = z.object({
  uuid: z.string().optional(),
  active: CompanyActive$outboundSchema.default(1),
  name: z.string(),
  website: z.string().optional(),
  abnNumber: z.string().optional(),
  isIndividual: z.string().optional(),
  addressStreet: z.string().optional(),
  addressCity: z.string().optional(),
  addressState: z.string().optional(),
  addressPostcode: z.string().optional(),
  addressCountry: z.string().optional(),
  faxNumber: z.string().optional(),
  address: z.string().optional(),
  billingAddress: z.string().optional(),
  badges: z.string().optional(),
  taxRateUuid: z.string().optional(),
  billingAttention: z.string().optional(),
  paymentTerms: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    abnNumber: "abn_number",
    isIndividual: "is_individual",
    addressStreet: "address_street",
    addressCity: "address_city",
    addressState: "address_state",
    addressPostcode: "address_postcode",
    addressCountry: "address_country",
    faxNumber: "fax_number",
    billingAddress: "billing_address",
    taxRateUuid: "tax_rate_uuid",
    billingAttention: "billing_attention",
    paymentTerms: "payment_terms",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompanyInput$ {
  /** @deprecated use `CompanyInput$inboundSchema` instead. */
  export const inboundSchema = CompanyInput$inboundSchema;
  /** @deprecated use `CompanyInput$outboundSchema` instead. */
  export const outboundSchema = CompanyInput$outboundSchema;
  /** @deprecated use `CompanyInput$Outbound` instead. */
  export type Outbound = CompanyInput$Outbound;
}

export function companyInputToJSON(companyInput: CompanyInput): string {
  return JSON.stringify(CompanyInput$outboundSchema.parse(companyInput));
}

export function companyInputFromJSON(
  jsonString: string,
): SafeParseResult<CompanyInput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CompanyInput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompanyInput' from JSON`,
  );
}
