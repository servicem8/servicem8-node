/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Record active/deleted flag.  Valid values are [0,1]
 */
export const TaskActive = {
  Zero: 0,
  One: 1,
} as const;
/**
 * Record active/deleted flag.  Valid values are [0,1]
 */
export type TaskActive = ClosedEnum<typeof TaskActive>;

/** @internal */
export const TaskActive$inboundSchema: z.ZodNativeEnum<typeof TaskActive> = z
  .nativeEnum(TaskActive);

/** @internal */
export const TaskActive$outboundSchema: z.ZodNativeEnum<typeof TaskActive> =
  TaskActive$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TaskActive$ {
  /** @deprecated use `TaskActive$inboundSchema` instead. */
  export const inboundSchema = TaskActive$inboundSchema;
  /** @deprecated use `TaskActive$outboundSchema` instead. */
  export const outboundSchema = TaskActive$outboundSchema;
}

export type Task = {
  /**
   * The date by which the task should be completed. Format is YYYY-MM-DD. For mobile app compatibility, may be returned with time component (HHMMSS) in some contexts.
   */
  dueDate?: string | undefined;
  /**
   * Detailed description of the task. Contains more comprehensive information about what needs to be done, how to complete the task, or any other relevant notes.
   */
  taskDetails?: string | undefined;
  /**
   * The name or title of the task. This field is mandatory and used to identify the task in listings and the user interface.
   */
  name: string;
  /**
   * The name of the object class this task is related to. Must be a valid object class name in the system (e.g., 'job', 'client', etc.). The value is always stored as lowercase regardless of input case.
   */
  relatedObject?: string | undefined;
  /**
   * UUID of the specific object instance this task is related to. Must be a valid UUID corresponding to an existing object of the type specified in related_object.
   */
  relatedObjectUuid?: string | undefined;
  /**
   * Boolean flag indicating whether the task has been completed (1) or is still pending (0). When set to 1, the completed_timestamp and completed_by_staff_uuid fields are automatically populated.
   */
  taskComplete?: string | undefined;
  /**
   * The date and time when the task was marked as complete. Format is YYYY-MM-DD HH:MM:SS. Automatically set when task_complete is changed to 1.
   */
  completedTimestamp?: string | undefined;
  /**
   * UUID of the staff member who marked the task as complete. Automatically set to the current staff member's UUID when task_complete is changed to 1.
   */
  completedByStaffUuid?: string | undefined;
  /**
   * UUID of the staff member assigned to complete this task. Must be a valid staff UUID in the system.
   */
  assignedToStaffUuid?: string | undefined;
  /**
   * DEPRECATED
   */
  lng?: any | undefined;
  /**
   * DEPRECATED
   */
  lat?: any | undefined;
  /**
   * Unique identifier for this record
   */
  uuid?: string | undefined;
  /**
   * Record active/deleted flag.  Valid values are [0,1]
   */
  active?: TaskActive | undefined;
  /**
   * Timestamp at which record was last modified
   */
  editDate?: any | undefined;
  createdByStaffUuid?: string | undefined;
  /**
   * Timestamp at which record was last modified
   */
  createDate?: any | undefined;
};

export type TaskInput = {
  /**
   * The date by which the task should be completed. Format is YYYY-MM-DD. For mobile app compatibility, may be returned with time component (HHMMSS) in some contexts.
   */
  dueDate?: string | undefined;
  /**
   * Detailed description of the task. Contains more comprehensive information about what needs to be done, how to complete the task, or any other relevant notes.
   */
  taskDetails?: string | undefined;
  /**
   * The name or title of the task. This field is mandatory and used to identify the task in listings and the user interface.
   */
  name: string;
  /**
   * The name of the object class this task is related to. Must be a valid object class name in the system (e.g., 'job', 'client', etc.). The value is always stored as lowercase regardless of input case.
   */
  relatedObject?: string | undefined;
  /**
   * UUID of the specific object instance this task is related to. Must be a valid UUID corresponding to an existing object of the type specified in related_object.
   */
  relatedObjectUuid?: string | undefined;
  /**
   * Boolean flag indicating whether the task has been completed (1) or is still pending (0). When set to 1, the completed_timestamp and completed_by_staff_uuid fields are automatically populated.
   */
  taskComplete?: string | undefined;
  /**
   * The date and time when the task was marked as complete. Format is YYYY-MM-DD HH:MM:SS. Automatically set when task_complete is changed to 1.
   */
  completedTimestamp?: string | undefined;
  /**
   * UUID of the staff member who marked the task as complete. Automatically set to the current staff member's UUID when task_complete is changed to 1.
   */
  completedByStaffUuid?: string | undefined;
  /**
   * UUID of the staff member assigned to complete this task. Must be a valid staff UUID in the system.
   */
  assignedToStaffUuid?: string | undefined;
  /**
   * DEPRECATED
   */
  lng?: any | undefined;
  /**
   * DEPRECATED
   */
  lat?: any | undefined;
  /**
   * Unique identifier for this record
   */
  uuid?: string | undefined;
  /**
   * Record active/deleted flag.  Valid values are [0,1]
   */
  active?: TaskActive | undefined;
  createdByStaffUuid?: string | undefined;
  /**
   * Timestamp at which record was last modified
   */
  createDate?: any | undefined;
};

/** @internal */
export const Task$inboundSchema: z.ZodType<Task, z.ZodTypeDef, unknown> = z
  .object({
    due_date: z.string().optional(),
    task_details: z.string().optional(),
    name: z.string(),
    related_object: z.string().optional(),
    related_object_uuid: z.string().optional(),
    task_complete: z.string().optional(),
    completed_timestamp: z.string().optional(),
    completed_by_staff_uuid: z.string().optional(),
    assigned_to_staff_uuid: z.string().optional(),
    lng: z.any().optional(),
    lat: z.any().optional(),
    uuid: z.string().optional(),
    active: TaskActive$inboundSchema.default(1),
    edit_date: z.any().optional(),
    created_by_staff_uuid: z.string().optional(),
    create_date: z.any().optional(),
  }).transform((v) => {
    return remap$(v, {
      "due_date": "dueDate",
      "task_details": "taskDetails",
      "related_object": "relatedObject",
      "related_object_uuid": "relatedObjectUuid",
      "task_complete": "taskComplete",
      "completed_timestamp": "completedTimestamp",
      "completed_by_staff_uuid": "completedByStaffUuid",
      "assigned_to_staff_uuid": "assignedToStaffUuid",
      "edit_date": "editDate",
      "created_by_staff_uuid": "createdByStaffUuid",
      "create_date": "createDate",
    });
  });

/** @internal */
export type Task$Outbound = {
  due_date?: string | undefined;
  task_details?: string | undefined;
  name: string;
  related_object?: string | undefined;
  related_object_uuid?: string | undefined;
  task_complete?: string | undefined;
  completed_timestamp?: string | undefined;
  completed_by_staff_uuid?: string | undefined;
  assigned_to_staff_uuid?: string | undefined;
  lng?: any | undefined;
  lat?: any | undefined;
  uuid?: string | undefined;
  active: number;
  edit_date?: any | undefined;
  created_by_staff_uuid?: string | undefined;
  create_date?: any | undefined;
};

/** @internal */
export const Task$outboundSchema: z.ZodType<Task$Outbound, z.ZodTypeDef, Task> =
  z.object({
    dueDate: z.string().optional(),
    taskDetails: z.string().optional(),
    name: z.string(),
    relatedObject: z.string().optional(),
    relatedObjectUuid: z.string().optional(),
    taskComplete: z.string().optional(),
    completedTimestamp: z.string().optional(),
    completedByStaffUuid: z.string().optional(),
    assignedToStaffUuid: z.string().optional(),
    lng: z.any().optional(),
    lat: z.any().optional(),
    uuid: z.string().optional(),
    active: TaskActive$outboundSchema.default(1),
    editDate: z.any().optional(),
    createdByStaffUuid: z.string().optional(),
    createDate: z.any().optional(),
  }).transform((v) => {
    return remap$(v, {
      dueDate: "due_date",
      taskDetails: "task_details",
      relatedObject: "related_object",
      relatedObjectUuid: "related_object_uuid",
      taskComplete: "task_complete",
      completedTimestamp: "completed_timestamp",
      completedByStaffUuid: "completed_by_staff_uuid",
      assignedToStaffUuid: "assigned_to_staff_uuid",
      editDate: "edit_date",
      createdByStaffUuid: "created_by_staff_uuid",
      createDate: "create_date",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Task$ {
  /** @deprecated use `Task$inboundSchema` instead. */
  export const inboundSchema = Task$inboundSchema;
  /** @deprecated use `Task$outboundSchema` instead. */
  export const outboundSchema = Task$outboundSchema;
  /** @deprecated use `Task$Outbound` instead. */
  export type Outbound = Task$Outbound;
}

export function taskToJSON(task: Task): string {
  return JSON.stringify(Task$outboundSchema.parse(task));
}

export function taskFromJSON(
  jsonString: string,
): SafeParseResult<Task, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Task$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Task' from JSON`,
  );
}

/** @internal */
export const TaskInput$inboundSchema: z.ZodType<
  TaskInput,
  z.ZodTypeDef,
  unknown
> = z.object({
  due_date: z.string().optional(),
  task_details: z.string().optional(),
  name: z.string(),
  related_object: z.string().optional(),
  related_object_uuid: z.string().optional(),
  task_complete: z.string().optional(),
  completed_timestamp: z.string().optional(),
  completed_by_staff_uuid: z.string().optional(),
  assigned_to_staff_uuid: z.string().optional(),
  lng: z.any().optional(),
  lat: z.any().optional(),
  uuid: z.string().optional(),
  active: TaskActive$inboundSchema.default(1),
  created_by_staff_uuid: z.string().optional(),
  create_date: z.any().optional(),
}).transform((v) => {
  return remap$(v, {
    "due_date": "dueDate",
    "task_details": "taskDetails",
    "related_object": "relatedObject",
    "related_object_uuid": "relatedObjectUuid",
    "task_complete": "taskComplete",
    "completed_timestamp": "completedTimestamp",
    "completed_by_staff_uuid": "completedByStaffUuid",
    "assigned_to_staff_uuid": "assignedToStaffUuid",
    "created_by_staff_uuid": "createdByStaffUuid",
    "create_date": "createDate",
  });
});

/** @internal */
export type TaskInput$Outbound = {
  due_date?: string | undefined;
  task_details?: string | undefined;
  name: string;
  related_object?: string | undefined;
  related_object_uuid?: string | undefined;
  task_complete?: string | undefined;
  completed_timestamp?: string | undefined;
  completed_by_staff_uuid?: string | undefined;
  assigned_to_staff_uuid?: string | undefined;
  lng?: any | undefined;
  lat?: any | undefined;
  uuid?: string | undefined;
  active: number;
  created_by_staff_uuid?: string | undefined;
  create_date?: any | undefined;
};

/** @internal */
export const TaskInput$outboundSchema: z.ZodType<
  TaskInput$Outbound,
  z.ZodTypeDef,
  TaskInput
> = z.object({
  dueDate: z.string().optional(),
  taskDetails: z.string().optional(),
  name: z.string(),
  relatedObject: z.string().optional(),
  relatedObjectUuid: z.string().optional(),
  taskComplete: z.string().optional(),
  completedTimestamp: z.string().optional(),
  completedByStaffUuid: z.string().optional(),
  assignedToStaffUuid: z.string().optional(),
  lng: z.any().optional(),
  lat: z.any().optional(),
  uuid: z.string().optional(),
  active: TaskActive$outboundSchema.default(1),
  createdByStaffUuid: z.string().optional(),
  createDate: z.any().optional(),
}).transform((v) => {
  return remap$(v, {
    dueDate: "due_date",
    taskDetails: "task_details",
    relatedObject: "related_object",
    relatedObjectUuid: "related_object_uuid",
    taskComplete: "task_complete",
    completedTimestamp: "completed_timestamp",
    completedByStaffUuid: "completed_by_staff_uuid",
    assignedToStaffUuid: "assigned_to_staff_uuid",
    createdByStaffUuid: "created_by_staff_uuid",
    createDate: "create_date",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TaskInput$ {
  /** @deprecated use `TaskInput$inboundSchema` instead. */
  export const inboundSchema = TaskInput$inboundSchema;
  /** @deprecated use `TaskInput$outboundSchema` instead. */
  export const outboundSchema = TaskInput$outboundSchema;
  /** @deprecated use `TaskInput$Outbound` instead. */
  export type Outbound = TaskInput$Outbound;
}

export function taskInputToJSON(taskInput: TaskInput): string {
  return JSON.stringify(TaskInput$outboundSchema.parse(taskInput));
}

export function taskInputFromJSON(
  jsonString: string,
): SafeParseResult<TaskInput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TaskInput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TaskInput' from JSON`,
  );
}
