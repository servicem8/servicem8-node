/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Record active/deleted flag.
 *
 * @remarks
 *
 * Valid values are [0,1]
 */
export const TaskActive = {
  Zero: 0,
  One: 1,
} as const;
/**
 * Record active/deleted flag.
 *
 * @remarks
 *
 * Valid values are [0,1]
 */
export type TaskActive = ClosedEnum<typeof TaskActive>;

export type Task = {
  /**
   * Record UUID key
   */
  uuid?: string | undefined;
  /**
   * Record active/deleted flag.
   *
   * @remarks
   *
   * Valid values are [0,1]
   */
  active?: TaskActive | undefined;
  /**
   * Record last modified timestamp
   */
  editDate?: string | undefined;
  dueDate?: string | undefined;
  taskDetails?: string | undefined;
  name: string;
  relatedObject?: string | undefined;
  relatedObjectUuid?: string | undefined;
  taskComplete?: string | undefined;
  completedTimestamp?: string | undefined;
  completedByStaffUuid?: string | undefined;
  assignedToStaffUuid?: string | undefined;
  lng?: number | undefined;
  lat?: number | undefined;
  createdByStaffUuid?: string | undefined;
  /**
   * Record creation timestamp
   */
  createDate?: string | undefined;
};

export type TaskInput = {
  /**
   * Record UUID key
   */
  uuid?: string | undefined;
  /**
   * Record active/deleted flag.
   *
   * @remarks
   *
   * Valid values are [0,1]
   */
  active?: TaskActive | undefined;
  dueDate?: string | undefined;
  taskDetails?: string | undefined;
  name: string;
  relatedObject?: string | undefined;
  relatedObjectUuid?: string | undefined;
  taskComplete?: string | undefined;
  completedTimestamp?: string | undefined;
  completedByStaffUuid?: string | undefined;
  assignedToStaffUuid?: string | undefined;
  lng?: number | undefined;
  lat?: number | undefined;
  createdByStaffUuid?: string | undefined;
  /**
   * Record creation timestamp
   */
  createDate?: string | undefined;
};

/** @internal */
export const TaskActive$inboundSchema: z.ZodNativeEnum<typeof TaskActive> = z
  .nativeEnum(TaskActive);

/** @internal */
export const TaskActive$outboundSchema: z.ZodNativeEnum<typeof TaskActive> =
  TaskActive$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TaskActive$ {
  /** @deprecated use `TaskActive$inboundSchema` instead. */
  export const inboundSchema = TaskActive$inboundSchema;
  /** @deprecated use `TaskActive$outboundSchema` instead. */
  export const outboundSchema = TaskActive$outboundSchema;
}

/** @internal */
export const Task$inboundSchema: z.ZodType<Task, z.ZodTypeDef, unknown> = z
  .object({
    uuid: z.string().optional(),
    active: TaskActive$inboundSchema.default(1),
    edit_date: z.string().optional(),
    due_date: z.string().optional(),
    task_details: z.string().optional(),
    name: z.string(),
    related_object: z.string().optional(),
    related_object_uuid: z.string().optional(),
    task_complete: z.string().optional(),
    completed_timestamp: z.string().optional(),
    completed_by_staff_uuid: z.string().optional(),
    assigned_to_staff_uuid: z.string().optional(),
    lng: z.number().optional(),
    lat: z.number().optional(),
    created_by_staff_uuid: z.string().optional(),
    create_date: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      "edit_date": "editDate",
      "due_date": "dueDate",
      "task_details": "taskDetails",
      "related_object": "relatedObject",
      "related_object_uuid": "relatedObjectUuid",
      "task_complete": "taskComplete",
      "completed_timestamp": "completedTimestamp",
      "completed_by_staff_uuid": "completedByStaffUuid",
      "assigned_to_staff_uuid": "assignedToStaffUuid",
      "created_by_staff_uuid": "createdByStaffUuid",
      "create_date": "createDate",
    });
  });

/** @internal */
export type Task$Outbound = {
  uuid?: string | undefined;
  active: number;
  edit_date?: string | undefined;
  due_date?: string | undefined;
  task_details?: string | undefined;
  name: string;
  related_object?: string | undefined;
  related_object_uuid?: string | undefined;
  task_complete?: string | undefined;
  completed_timestamp?: string | undefined;
  completed_by_staff_uuid?: string | undefined;
  assigned_to_staff_uuid?: string | undefined;
  lng?: number | undefined;
  lat?: number | undefined;
  created_by_staff_uuid?: string | undefined;
  create_date?: string | undefined;
};

/** @internal */
export const Task$outboundSchema: z.ZodType<Task$Outbound, z.ZodTypeDef, Task> =
  z.object({
    uuid: z.string().optional(),
    active: TaskActive$outboundSchema.default(1),
    editDate: z.string().optional(),
    dueDate: z.string().optional(),
    taskDetails: z.string().optional(),
    name: z.string(),
    relatedObject: z.string().optional(),
    relatedObjectUuid: z.string().optional(),
    taskComplete: z.string().optional(),
    completedTimestamp: z.string().optional(),
    completedByStaffUuid: z.string().optional(),
    assignedToStaffUuid: z.string().optional(),
    lng: z.number().optional(),
    lat: z.number().optional(),
    createdByStaffUuid: z.string().optional(),
    createDate: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      editDate: "edit_date",
      dueDate: "due_date",
      taskDetails: "task_details",
      relatedObject: "related_object",
      relatedObjectUuid: "related_object_uuid",
      taskComplete: "task_complete",
      completedTimestamp: "completed_timestamp",
      completedByStaffUuid: "completed_by_staff_uuid",
      assignedToStaffUuid: "assigned_to_staff_uuid",
      createdByStaffUuid: "created_by_staff_uuid",
      createDate: "create_date",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Task$ {
  /** @deprecated use `Task$inboundSchema` instead. */
  export const inboundSchema = Task$inboundSchema;
  /** @deprecated use `Task$outboundSchema` instead. */
  export const outboundSchema = Task$outboundSchema;
  /** @deprecated use `Task$Outbound` instead. */
  export type Outbound = Task$Outbound;
}

export function taskToJSON(task: Task): string {
  return JSON.stringify(Task$outboundSchema.parse(task));
}

export function taskFromJSON(
  jsonString: string,
): SafeParseResult<Task, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Task$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Task' from JSON`,
  );
}

/** @internal */
export const TaskInput$inboundSchema: z.ZodType<
  TaskInput,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string().optional(),
  active: TaskActive$inboundSchema.default(1),
  due_date: z.string().optional(),
  task_details: z.string().optional(),
  name: z.string(),
  related_object: z.string().optional(),
  related_object_uuid: z.string().optional(),
  task_complete: z.string().optional(),
  completed_timestamp: z.string().optional(),
  completed_by_staff_uuid: z.string().optional(),
  assigned_to_staff_uuid: z.string().optional(),
  lng: z.number().optional(),
  lat: z.number().optional(),
  created_by_staff_uuid: z.string().optional(),
  create_date: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "due_date": "dueDate",
    "task_details": "taskDetails",
    "related_object": "relatedObject",
    "related_object_uuid": "relatedObjectUuid",
    "task_complete": "taskComplete",
    "completed_timestamp": "completedTimestamp",
    "completed_by_staff_uuid": "completedByStaffUuid",
    "assigned_to_staff_uuid": "assignedToStaffUuid",
    "created_by_staff_uuid": "createdByStaffUuid",
    "create_date": "createDate",
  });
});

/** @internal */
export type TaskInput$Outbound = {
  uuid?: string | undefined;
  active: number;
  due_date?: string | undefined;
  task_details?: string | undefined;
  name: string;
  related_object?: string | undefined;
  related_object_uuid?: string | undefined;
  task_complete?: string | undefined;
  completed_timestamp?: string | undefined;
  completed_by_staff_uuid?: string | undefined;
  assigned_to_staff_uuid?: string | undefined;
  lng?: number | undefined;
  lat?: number | undefined;
  created_by_staff_uuid?: string | undefined;
  create_date?: string | undefined;
};

/** @internal */
export const TaskInput$outboundSchema: z.ZodType<
  TaskInput$Outbound,
  z.ZodTypeDef,
  TaskInput
> = z.object({
  uuid: z.string().optional(),
  active: TaskActive$outboundSchema.default(1),
  dueDate: z.string().optional(),
  taskDetails: z.string().optional(),
  name: z.string(),
  relatedObject: z.string().optional(),
  relatedObjectUuid: z.string().optional(),
  taskComplete: z.string().optional(),
  completedTimestamp: z.string().optional(),
  completedByStaffUuid: z.string().optional(),
  assignedToStaffUuid: z.string().optional(),
  lng: z.number().optional(),
  lat: z.number().optional(),
  createdByStaffUuid: z.string().optional(),
  createDate: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    dueDate: "due_date",
    taskDetails: "task_details",
    relatedObject: "related_object",
    relatedObjectUuid: "related_object_uuid",
    taskComplete: "task_complete",
    completedTimestamp: "completed_timestamp",
    completedByStaffUuid: "completed_by_staff_uuid",
    assignedToStaffUuid: "assigned_to_staff_uuid",
    createdByStaffUuid: "created_by_staff_uuid",
    createDate: "create_date",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TaskInput$ {
  /** @deprecated use `TaskInput$inboundSchema` instead. */
  export const inboundSchema = TaskInput$inboundSchema;
  /** @deprecated use `TaskInput$outboundSchema` instead. */
  export const outboundSchema = TaskInput$outboundSchema;
  /** @deprecated use `TaskInput$Outbound` instead. */
  export type Outbound = TaskInput$Outbound;
}

export function taskInputToJSON(taskInput: TaskInput): string {
  return JSON.stringify(TaskInput$outboundSchema.parse(taskInput));
}

export function taskInputFromJSON(
  jsonString: string,
): SafeParseResult<TaskInput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TaskInput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TaskInput' from JSON`,
  );
}
