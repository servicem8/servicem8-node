/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Record active/deleted flag.
 *
 * @remarks
 *
 * Valid values are [0,1]
 */
export const LocationActive = {
  Zero: 0,
  One: 1,
} as const;
/**
 * Record active/deleted flag.
 *
 * @remarks
 *
 * Valid values are [0,1]
 */
export type LocationActive = ClosedEnum<typeof LocationActive>;

export type Location = {
  /**
   * Record UUID key
   */
  uuid?: string | undefined;
  /**
   * Record active/deleted flag.
   *
   * @remarks
   *
   * Valid values are [0,1]
   */
  active?: LocationActive | undefined;
  /**
   * Record last modified timestamp
   */
  editDate?: string | undefined;
  /**
   * Location's name
   */
  name: string;
  line1?: string | undefined;
  line2?: string | undefined;
  line3?: string | undefined;
  /**
   * Email Address
   */
  city?: string | undefined;
  /**
   * Email Address
   */
  country?: string | undefined;
  /**
   * Email Address
   */
  postCode?: string | undefined;
  phone1?: string | undefined;
  /**
   * Address State
   */
  state?: string | undefined;
  lng?: number | undefined;
  lat?: number | undefined;
};

export type LocationInput = {
  /**
   * Record UUID key
   */
  uuid?: string | undefined;
  /**
   * Record active/deleted flag.
   *
   * @remarks
   *
   * Valid values are [0,1]
   */
  active?: LocationActive | undefined;
  /**
   * Location's name
   */
  name: string;
  line1?: string | undefined;
  line2?: string | undefined;
  line3?: string | undefined;
  /**
   * Email Address
   */
  city?: string | undefined;
  /**
   * Email Address
   */
  country?: string | undefined;
  /**
   * Email Address
   */
  postCode?: string | undefined;
  phone1?: string | undefined;
  /**
   * Address State
   */
  state?: string | undefined;
  lng?: number | undefined;
  lat?: number | undefined;
};

/** @internal */
export const LocationActive$inboundSchema: z.ZodNativeEnum<
  typeof LocationActive
> = z.nativeEnum(LocationActive);

/** @internal */
export const LocationActive$outboundSchema: z.ZodNativeEnum<
  typeof LocationActive
> = LocationActive$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LocationActive$ {
  /** @deprecated use `LocationActive$inboundSchema` instead. */
  export const inboundSchema = LocationActive$inboundSchema;
  /** @deprecated use `LocationActive$outboundSchema` instead. */
  export const outboundSchema = LocationActive$outboundSchema;
}

/** @internal */
export const Location$inboundSchema: z.ZodType<
  Location,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string().optional(),
  active: LocationActive$inboundSchema.default(1),
  edit_date: z.string().optional(),
  name: z.string(),
  line1: z.string().optional(),
  line2: z.string().optional(),
  line3: z.string().optional(),
  city: z.string().optional(),
  country: z.string().optional(),
  post_code: z.string().optional(),
  phone_1: z.string().optional(),
  state: z.string().optional(),
  lng: z.number().optional(),
  lat: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "edit_date": "editDate",
    "post_code": "postCode",
    "phone_1": "phone1",
  });
});

/** @internal */
export type Location$Outbound = {
  uuid?: string | undefined;
  active: number;
  edit_date?: string | undefined;
  name: string;
  line1?: string | undefined;
  line2?: string | undefined;
  line3?: string | undefined;
  city?: string | undefined;
  country?: string | undefined;
  post_code?: string | undefined;
  phone_1?: string | undefined;
  state?: string | undefined;
  lng?: number | undefined;
  lat?: number | undefined;
};

/** @internal */
export const Location$outboundSchema: z.ZodType<
  Location$Outbound,
  z.ZodTypeDef,
  Location
> = z.object({
  uuid: z.string().optional(),
  active: LocationActive$outboundSchema.default(1),
  editDate: z.string().optional(),
  name: z.string(),
  line1: z.string().optional(),
  line2: z.string().optional(),
  line3: z.string().optional(),
  city: z.string().optional(),
  country: z.string().optional(),
  postCode: z.string().optional(),
  phone1: z.string().optional(),
  state: z.string().optional(),
  lng: z.number().optional(),
  lat: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    editDate: "edit_date",
    postCode: "post_code",
    phone1: "phone_1",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Location$ {
  /** @deprecated use `Location$inboundSchema` instead. */
  export const inboundSchema = Location$inboundSchema;
  /** @deprecated use `Location$outboundSchema` instead. */
  export const outboundSchema = Location$outboundSchema;
  /** @deprecated use `Location$Outbound` instead. */
  export type Outbound = Location$Outbound;
}

export function locationToJSON(location: Location): string {
  return JSON.stringify(Location$outboundSchema.parse(location));
}

export function locationFromJSON(
  jsonString: string,
): SafeParseResult<Location, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Location$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Location' from JSON`,
  );
}

/** @internal */
export const LocationInput$inboundSchema: z.ZodType<
  LocationInput,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string().optional(),
  active: LocationActive$inboundSchema.default(1),
  name: z.string(),
  line1: z.string().optional(),
  line2: z.string().optional(),
  line3: z.string().optional(),
  city: z.string().optional(),
  country: z.string().optional(),
  post_code: z.string().optional(),
  phone_1: z.string().optional(),
  state: z.string().optional(),
  lng: z.number().optional(),
  lat: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "post_code": "postCode",
    "phone_1": "phone1",
  });
});

/** @internal */
export type LocationInput$Outbound = {
  uuid?: string | undefined;
  active: number;
  name: string;
  line1?: string | undefined;
  line2?: string | undefined;
  line3?: string | undefined;
  city?: string | undefined;
  country?: string | undefined;
  post_code?: string | undefined;
  phone_1?: string | undefined;
  state?: string | undefined;
  lng?: number | undefined;
  lat?: number | undefined;
};

/** @internal */
export const LocationInput$outboundSchema: z.ZodType<
  LocationInput$Outbound,
  z.ZodTypeDef,
  LocationInput
> = z.object({
  uuid: z.string().optional(),
  active: LocationActive$outboundSchema.default(1),
  name: z.string(),
  line1: z.string().optional(),
  line2: z.string().optional(),
  line3: z.string().optional(),
  city: z.string().optional(),
  country: z.string().optional(),
  postCode: z.string().optional(),
  phone1: z.string().optional(),
  state: z.string().optional(),
  lng: z.number().optional(),
  lat: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    postCode: "post_code",
    phone1: "phone_1",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LocationInput$ {
  /** @deprecated use `LocationInput$inboundSchema` instead. */
  export const inboundSchema = LocationInput$inboundSchema;
  /** @deprecated use `LocationInput$outboundSchema` instead. */
  export const outboundSchema = LocationInput$outboundSchema;
  /** @deprecated use `LocationInput$Outbound` instead. */
  export type Outbound = LocationInput$Outbound;
}

export function locationInputToJSON(locationInput: LocationInput): string {
  return JSON.stringify(LocationInput$outboundSchema.parse(locationInput));
}

export function locationInputFromJSON(
  jsonString: string,
): SafeParseResult<LocationInput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LocationInput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LocationInput' from JSON`,
  );
}
