/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Record active/deleted flag.  Valid values are [0,1]
 */
export const AssetTypeFieldActive = {
  Zero: 0,
  One: 1,
} as const;
/**
 * Record active/deleted flag.  Valid values are [0,1]
 */
export type AssetTypeFieldActive = ClosedEnum<typeof AssetTypeFieldActive>;

export const AssetTypeFieldFieldType = {
  Text: "Text",
  Number: "Number",
  Date: "Date",
  MultipleChoice: "Multiple Choice",
} as const;
export type AssetTypeFieldFieldType = ClosedEnum<
  typeof AssetTypeFieldFieldType
>;

/** @internal */
export const AssetTypeFieldActive$inboundSchema: z.ZodNativeEnum<
  typeof AssetTypeFieldActive
> = z.nativeEnum(AssetTypeFieldActive);

/** @internal */
export const AssetTypeFieldActive$outboundSchema: z.ZodNativeEnum<
  typeof AssetTypeFieldActive
> = AssetTypeFieldActive$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AssetTypeFieldActive$ {
  /** @deprecated use `AssetTypeFieldActive$inboundSchema` instead. */
  export const inboundSchema = AssetTypeFieldActive$inboundSchema;
  /** @deprecated use `AssetTypeFieldActive$outboundSchema` instead. */
  export const outboundSchema = AssetTypeFieldActive$outboundSchema;
}

/** @internal */
export const AssetTypeFieldFieldType$inboundSchema: z.ZodNativeEnum<
  typeof AssetTypeFieldFieldType
> = z.nativeEnum(AssetTypeFieldFieldType);

/** @internal */
export const AssetTypeFieldFieldType$outboundSchema: z.ZodNativeEnum<
  typeof AssetTypeFieldFieldType
> = AssetTypeFieldFieldType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AssetTypeFieldFieldType$ {
  /** @deprecated use `AssetTypeFieldFieldType$inboundSchema` instead. */
  export const inboundSchema = AssetTypeFieldFieldType$inboundSchema;
  /** @deprecated use `AssetTypeFieldFieldType$outboundSchema` instead. */
  export const outboundSchema = AssetTypeFieldFieldType$outboundSchema;
}

/**
 * Configuration data for the field
 */
export type FieldData = {
  fieldType: AssetTypeFieldFieldType;
  mandatory: boolean;
  choices?: Array<string> | undefined;
};

export type AssetTypeField = {
  /**
   * Unique identifier for this record
   */
  uuid?: string | undefined;
  /**
   * Record active/deleted flag.  Valid values are [0,1]
   */
  active?: AssetTypeFieldActive | undefined;
  /**
   * Timestamp at which record was last modified
   */
  editDate?: any | undefined;
  /**
   * UUID of the Asset Type to which this field belongs. This field is read-only in the API. (Read only)
   */
  assetTypeUuid?: string | undefined;
  /**
   * Name of the field that will be displayed to users. Used as a label for the input field when managing assets.
   */
  name: string;
  /**
   * Configuration data for the field
   */
  fieldData?: FieldData | undefined;
  /**
   * The order in which this field should be displayed relative to other fields of the same asset type. Lower values display first.
   */
  sortOrder?: number | undefined;
};

export type AssetTypeFieldInput = {
  /**
   * Unique identifier for this record
   */
  uuid?: string | undefined;
  /**
   * Record active/deleted flag.  Valid values are [0,1]
   */
  active?: AssetTypeFieldActive | undefined;
  /**
   * UUID of the Asset Type to which this field belongs. This field is read-only in the API. (Read only)
   */
  assetTypeUuid?: string | undefined;
  /**
   * Name of the field that will be displayed to users. Used as a label for the input field when managing assets.
   */
  name: string;
  /**
   * Configuration data for the field
   */
  fieldData?: FieldData | undefined;
  /**
   * The order in which this field should be displayed relative to other fields of the same asset type. Lower values display first.
   */
  sortOrder?: number | undefined;
};

/** @internal */
export const FieldData$inboundSchema: z.ZodType<
  FieldData,
  z.ZodTypeDef,
  unknown
> = z.object({
  fieldType: AssetTypeFieldFieldType$inboundSchema,
  mandatory: z.boolean(),
  choices: z.array(z.string()).optional(),
});

/** @internal */
export type FieldData$Outbound = {
  fieldType: string;
  mandatory: boolean;
  choices?: Array<string> | undefined;
};

/** @internal */
export const FieldData$outboundSchema: z.ZodType<
  FieldData$Outbound,
  z.ZodTypeDef,
  FieldData
> = z.object({
  fieldType: AssetTypeFieldFieldType$outboundSchema,
  mandatory: z.boolean(),
  choices: z.array(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldData$ {
  /** @deprecated use `FieldData$inboundSchema` instead. */
  export const inboundSchema = FieldData$inboundSchema;
  /** @deprecated use `FieldData$outboundSchema` instead. */
  export const outboundSchema = FieldData$outboundSchema;
  /** @deprecated use `FieldData$Outbound` instead. */
  export type Outbound = FieldData$Outbound;
}

export function fieldDataToJSON(fieldData: FieldData): string {
  return JSON.stringify(FieldData$outboundSchema.parse(fieldData));
}

export function fieldDataFromJSON(
  jsonString: string,
): SafeParseResult<FieldData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FieldData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldData' from JSON`,
  );
}

/** @internal */
export const AssetTypeField$inboundSchema: z.ZodType<
  AssetTypeField,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string().optional(),
  active: AssetTypeFieldActive$inboundSchema.default(1),
  edit_date: z.any().optional(),
  asset_type_uuid: z.string().optional(),
  name: z.string(),
  field_data: z.lazy(() => FieldData$inboundSchema).optional(),
  sort_order: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    "edit_date": "editDate",
    "asset_type_uuid": "assetTypeUuid",
    "field_data": "fieldData",
    "sort_order": "sortOrder",
  });
});

/** @internal */
export type AssetTypeField$Outbound = {
  uuid?: string | undefined;
  active: number;
  edit_date?: any | undefined;
  asset_type_uuid?: string | undefined;
  name: string;
  field_data?: FieldData$Outbound | undefined;
  sort_order?: number | undefined;
};

/** @internal */
export const AssetTypeField$outboundSchema: z.ZodType<
  AssetTypeField$Outbound,
  z.ZodTypeDef,
  AssetTypeField
> = z.object({
  uuid: z.string().optional(),
  active: AssetTypeFieldActive$outboundSchema.default(1),
  editDate: z.any().optional(),
  assetTypeUuid: z.string().optional(),
  name: z.string(),
  fieldData: z.lazy(() => FieldData$outboundSchema).optional(),
  sortOrder: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    editDate: "edit_date",
    assetTypeUuid: "asset_type_uuid",
    fieldData: "field_data",
    sortOrder: "sort_order",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AssetTypeField$ {
  /** @deprecated use `AssetTypeField$inboundSchema` instead. */
  export const inboundSchema = AssetTypeField$inboundSchema;
  /** @deprecated use `AssetTypeField$outboundSchema` instead. */
  export const outboundSchema = AssetTypeField$outboundSchema;
  /** @deprecated use `AssetTypeField$Outbound` instead. */
  export type Outbound = AssetTypeField$Outbound;
}

export function assetTypeFieldToJSON(assetTypeField: AssetTypeField): string {
  return JSON.stringify(AssetTypeField$outboundSchema.parse(assetTypeField));
}

export function assetTypeFieldFromJSON(
  jsonString: string,
): SafeParseResult<AssetTypeField, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AssetTypeField$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AssetTypeField' from JSON`,
  );
}

/** @internal */
export const AssetTypeFieldInput$inboundSchema: z.ZodType<
  AssetTypeFieldInput,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string().optional(),
  active: AssetTypeFieldActive$inboundSchema.default(1),
  asset_type_uuid: z.string().optional(),
  name: z.string(),
  field_data: z.lazy(() => FieldData$inboundSchema).optional(),
  sort_order: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    "asset_type_uuid": "assetTypeUuid",
    "field_data": "fieldData",
    "sort_order": "sortOrder",
  });
});

/** @internal */
export type AssetTypeFieldInput$Outbound = {
  uuid?: string | undefined;
  active: number;
  asset_type_uuid?: string | undefined;
  name: string;
  field_data?: FieldData$Outbound | undefined;
  sort_order?: number | undefined;
};

/** @internal */
export const AssetTypeFieldInput$outboundSchema: z.ZodType<
  AssetTypeFieldInput$Outbound,
  z.ZodTypeDef,
  AssetTypeFieldInput
> = z.object({
  uuid: z.string().optional(),
  active: AssetTypeFieldActive$outboundSchema.default(1),
  assetTypeUuid: z.string().optional(),
  name: z.string(),
  fieldData: z.lazy(() => FieldData$outboundSchema).optional(),
  sortOrder: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    assetTypeUuid: "asset_type_uuid",
    fieldData: "field_data",
    sortOrder: "sort_order",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AssetTypeFieldInput$ {
  /** @deprecated use `AssetTypeFieldInput$inboundSchema` instead. */
  export const inboundSchema = AssetTypeFieldInput$inboundSchema;
  /** @deprecated use `AssetTypeFieldInput$outboundSchema` instead. */
  export const outboundSchema = AssetTypeFieldInput$outboundSchema;
  /** @deprecated use `AssetTypeFieldInput$Outbound` instead. */
  export type Outbound = AssetTypeFieldInput$Outbound;
}

export function assetTypeFieldInputToJSON(
  assetTypeFieldInput: AssetTypeFieldInput,
): string {
  return JSON.stringify(
    AssetTypeFieldInput$outboundSchema.parse(assetTypeFieldInput),
  );
}

export function assetTypeFieldInputFromJSON(
  jsonString: string,
): SafeParseResult<AssetTypeFieldInput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AssetTypeFieldInput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AssetTypeFieldInput' from JSON`,
  );
}
