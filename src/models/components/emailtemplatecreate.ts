/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type EmailTemplateCreate = {
  /**
   * Unique name of the email template. Used to identify and select the template in the system. This field is mandatory and must be unique among all email templates in the account.
   */
  name: string;
  /**
   * Subject line for the email template. Supports variable placeholders like {job.job_address} which are replaced with actual values when the email is generated. This field defines what appears in the subject line of emails sent using this template.
   */
  subject?: string | undefined;
  /**
   * The HTML body content of the email template. Supports rich text formatting and variable placeholders like {job.contact_first}, {document}, {vendor.name}, etc., which are replaced with actual values when the email is generated.
   */
  message?: string | undefined;
  /**
   * Unique identifier for this record
   */
  uuid?: string | undefined;
};

/** @internal */
export const EmailTemplateCreate$inboundSchema: z.ZodType<
  EmailTemplateCreate,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  subject: z.string().optional(),
  message: z.string().optional(),
  uuid: z.string().optional(),
});

/** @internal */
export type EmailTemplateCreate$Outbound = {
  name: string;
  subject?: string | undefined;
  message?: string | undefined;
  uuid?: string | undefined;
};

/** @internal */
export const EmailTemplateCreate$outboundSchema: z.ZodType<
  EmailTemplateCreate$Outbound,
  z.ZodTypeDef,
  EmailTemplateCreate
> = z.object({
  name: z.string(),
  subject: z.string().optional(),
  message: z.string().optional(),
  uuid: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmailTemplateCreate$ {
  /** @deprecated use `EmailTemplateCreate$inboundSchema` instead. */
  export const inboundSchema = EmailTemplateCreate$inboundSchema;
  /** @deprecated use `EmailTemplateCreate$outboundSchema` instead. */
  export const outboundSchema = EmailTemplateCreate$outboundSchema;
  /** @deprecated use `EmailTemplateCreate$Outbound` instead. */
  export type Outbound = EmailTemplateCreate$Outbound;
}

export function emailTemplateCreateToJSON(
  emailTemplateCreate: EmailTemplateCreate,
): string {
  return JSON.stringify(
    EmailTemplateCreate$outboundSchema.parse(emailTemplateCreate),
  );
}

export function emailTemplateCreateFromJSON(
  jsonString: string,
): SafeParseResult<EmailTemplateCreate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EmailTemplateCreate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EmailTemplateCreate' from JSON`,
  );
}
