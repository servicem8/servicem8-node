/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Current status of the job. Controls where the Job appears in the Dispatch Board..  Valid values are [Quote,Work Order,Unsuccessful,Completed]
 */
export const Status = {
  Quote: "Quote",
  WorkOrder: "Work Order",
  Unsuccessful: "Unsuccessful",
  Completed: "Completed",
} as const;
/**
 * Current status of the job. Controls where the Job appears in the Dispatch Board..  Valid values are [Quote,Work Order,Unsuccessful,Completed]
 */
export type Status = ClosedEnum<typeof Status>;

/**
 * Boolean flag indicating whether a quote has been sent to the client for this job. (Read only).  Valid values are [0,1]
 */
export const QuoteSent = {
  Zero: 0,
  One: 1,
} as const;
/**
 * Boolean flag indicating whether a quote has been sent to the client for this job. (Read only).  Valid values are [0,1]
 */
export type QuoteSent = ClosedEnum<typeof QuoteSent>;

/**
 * Record active/deleted flag.  Valid values are [0,1]
 */
export const JobActive = {
  Zero: 0,
  One: 1,
} as const;
/**
 * Record active/deleted flag.  Valid values are [0,1]
 */
export type JobActive = ClosedEnum<typeof JobActive>;

export type Job = {
  /**
   * UUID of the staff member who created this job. Records which staff member initially added the job to the system.
   */
  createdByStaffUuid?: string | undefined;
  /**
   * The date the job was created or scheduled. Used for organizing jobs chronologically and for reference in reports.
   */
  date?: string | undefined;
  /**
   * UUID reference to the client/company record associated with this job. Links the job to a client in the system, establishing the client-job relationship for billing and contact purposes.
   */
  companyUuid?: string | undefined;
  /**
   * The address where invoices and billing information should be sent. If not specified, defaults to the job address.
   */
  billingAddress?: string | undefined;
  /**
   * Current status of the job. Controls where the Job appears in the Dispatch Board..  Valid values are [Quote,Work Order,Unsuccessful,Completed]
   */
  status: Status;
  /**
   * Longitude coordinate of the job location. Used for mapping and geolocation features. This is automatically populated based on the job address through geocoding.
   */
  lng?: number | undefined;
  /**
   * Latitude coordinate of the job location. Used for mapping and geolocation features. This is automatically populated based on the job address through geocoding.
   */
  lat?: number | undefined;
  /**
   * Not used. Refer to JobPayment endpoint.
   */
  paymentDate?: string | undefined;
  /**
   * Not used. Refer to JobPayment endpoint.
   */
  paymentActionedByUuid?: string | undefined;
  /**
   * Not used. Refer to JobPayment endpoint.
   */
  paymentMethod?: string | undefined;
  /**
   * Not used. Refer to JobPayment endpoint.
   */
  paymentAmount?: string | undefined;
  /**
   * UUID reference to the job category this job belongs to. Categories help organize jobs by type of work or department.
   */
  categoryUuid?: string | undefined;
  /**
   * Not used. Refer to JobPayment endpoint.
   */
  paymentNote?: string | undefined;
  /**
   * Indicates whether the geocoding for the job address was successful. When true, the latitude and longitude coordinates are considered accurate for mapping and location-based features.
   */
  geoIsValid?: string | undefined;
  /**
   * Client purchase order reference number for this job. Used for cross-referencing with external accounting or order management systems.
   */
  purchaseOrderNumber?: string | undefined;
  /**
   * Boolean flag indicating whether an invoice has been sent to the client for this job.
   */
  invoiceSent?: string | undefined;
  /**
   * Timestamp when the invoice was sent to the client. Format is YYYY-MM-DD HH:MM:SS.
   */
  invoiceSentStamp?: string | undefined;
  /**
   * DEPRECATED
   */
  readyToInvoice?: any | undefined;
  /**
   * DEPRECATED
   */
  readyToInvoiceStamp?: any | undefined;
  /**
   * The country component extracted from the geocoded job address. Automatically populated when an address is geocoded.
   */
  geoCountry?: string | undefined;
  /**
   * The postal/zip code component extracted from the geocoded job address. Automatically populated when an address is geocoded.
   */
  geoPostcode?: string | undefined;
  /**
   * The state/province component extracted from the geocoded job address. Automatically populated when an address is geocoded.
   */
  geoState?: string | undefined;
  /**
   * The city/locality component extracted from the geocoded job address. Automatically populated when an address is geocoded.
   */
  geoCity?: string | undefined;
  /**
   * The street name component extracted from the geocoded job address. Automatically populated when an address is geocoded.
   */
  geoStreet?: string | undefined;
  /**
   * The street number component extracted from the geocoded job address. Automatically populated when an address is geocoded.
   */
  geoNumber?: string | undefined;
  /**
   * UUID reference to the queue this job is assigned to. Jobs can be organized into queues for workflow management.
   */
  queueUuid?: string | undefined;
  /**
   * Timestamp when this job's assignment to the current Queue expires. After this date passes, the job is no longer considered to be in the Queue, even though queue_uuid may still contain a value.
   */
  queueExpiryDate?: string | undefined;
  /**
   * UUID of a Staff Member who is responsible for managing this job while it is in the queue. Only populated when the job is in a Queue which tracks Staff assignment.
   */
  queueAssignedStaffUuid?: string | undefined;
  /**
   * Comma-separated list of Badge UUIDs associated with this job. Badges are visual indicators that can be displayed on jobs in the dispatch board.
   */
  badges?: string | undefined;
  /**
   * Timestamp when the job was quoted. Automatically set when a job's status is changed to 'Quote'.
   */
  quoteDate?: string | undefined;
  /**
   * Boolean flag indicating whether a quote has been sent to the client for this job. (Read only).  Valid values are [0,1]
   */
  quoteSent?: QuoteSent | undefined;
  /**
   * Timestamp when the quote was sent to the client. Format is YYYY-MM-DD HH:MM:SS. (Read only)
   */
  quoteSentStamp?: string | undefined;
  /**
   * Timestamp when the job was converted to a work order. Automatically set when a job's status is changed to 'Work Order'.
   */
  workOrderDate?: string | undefined;
  /**
   * DEPRECATED
   */
  activeNetworkRequestUuid?: any | undefined;
  /**
   * DEPRECATED
   */
  relatedKnowledgeArticles?: any | undefined;
  /**
   * Unique identifier for this record
   */
  uuid?: string | undefined;
  /**
   * Record active/deleted flag.  Valid values are [0,1]
   */
  active?: JobActive | undefined;
  /**
   * Timestamp at which record was last modified
   */
  editDate?: any | undefined;
  /**
   * Physical address where the job is to be performed. This address is used for geocoding to place the job on the map.
   */
  jobAddress?: string | undefined;
  jobDescription?: string | undefined;
  /**
   * Email Address
   */
  workDoneDescription?: string | undefined;
  /**
   * System-generated unique job identifier. This is read-only and automatically assigned when a job is created. (Read only)
   */
  generatedJobId?: string | undefined;
  totalInvoiceAmount?: string | undefined;
  paymentProcessed?: string | undefined;
  paymentProcessedStamp?: string | undefined;
  paymentReceived?: string | undefined;
  paymentReceivedStamp?: string | undefined;
  completionDate?: string | undefined;
  /**
   * UUID of the staff member who marked this job as completed. References a staff record in the system.
   */
  completionActionedByUuid?: string | undefined;
  unsuccessfulDate?: string | undefined;
  jobIsScheduledUntilStamp?: string | undefined;
};

export type JobInput = {
  /**
   * UUID of the staff member who created this job. Records which staff member initially added the job to the system.
   */
  createdByStaffUuid?: string | undefined;
  /**
   * The date the job was created or scheduled. Used for organizing jobs chronologically and for reference in reports.
   */
  date?: string | undefined;
  /**
   * UUID reference to the client/company record associated with this job. Links the job to a client in the system, establishing the client-job relationship for billing and contact purposes.
   */
  companyUuid?: string | undefined;
  /**
   * The address where invoices and billing information should be sent. If not specified, defaults to the job address.
   */
  billingAddress?: string | undefined;
  /**
   * Current status of the job. Controls where the Job appears in the Dispatch Board..  Valid values are [Quote,Work Order,Unsuccessful,Completed]
   */
  status: Status;
  /**
   * Longitude coordinate of the job location. Used for mapping and geolocation features. This is automatically populated based on the job address through geocoding.
   */
  lng?: number | undefined;
  /**
   * Latitude coordinate of the job location. Used for mapping and geolocation features. This is automatically populated based on the job address through geocoding.
   */
  lat?: number | undefined;
  /**
   * Not used. Refer to JobPayment endpoint.
   */
  paymentDate?: string | undefined;
  /**
   * Not used. Refer to JobPayment endpoint.
   */
  paymentActionedByUuid?: string | undefined;
  /**
   * Not used. Refer to JobPayment endpoint.
   */
  paymentMethod?: string | undefined;
  /**
   * Not used. Refer to JobPayment endpoint.
   */
  paymentAmount?: string | undefined;
  /**
   * UUID reference to the job category this job belongs to. Categories help organize jobs by type of work or department.
   */
  categoryUuid?: string | undefined;
  /**
   * Not used. Refer to JobPayment endpoint.
   */
  paymentNote?: string | undefined;
  /**
   * Indicates whether the geocoding for the job address was successful. When true, the latitude and longitude coordinates are considered accurate for mapping and location-based features.
   */
  geoIsValid?: string | undefined;
  /**
   * Client purchase order reference number for this job. Used for cross-referencing with external accounting or order management systems.
   */
  purchaseOrderNumber?: string | undefined;
  /**
   * Boolean flag indicating whether an invoice has been sent to the client for this job.
   */
  invoiceSent?: string | undefined;
  /**
   * Timestamp when the invoice was sent to the client. Format is YYYY-MM-DD HH:MM:SS.
   */
  invoiceSentStamp?: string | undefined;
  /**
   * DEPRECATED
   */
  readyToInvoice?: any | undefined;
  /**
   * DEPRECATED
   */
  readyToInvoiceStamp?: any | undefined;
  /**
   * The country component extracted from the geocoded job address. Automatically populated when an address is geocoded.
   */
  geoCountry?: string | undefined;
  /**
   * The postal/zip code component extracted from the geocoded job address. Automatically populated when an address is geocoded.
   */
  geoPostcode?: string | undefined;
  /**
   * The state/province component extracted from the geocoded job address. Automatically populated when an address is geocoded.
   */
  geoState?: string | undefined;
  /**
   * The city/locality component extracted from the geocoded job address. Automatically populated when an address is geocoded.
   */
  geoCity?: string | undefined;
  /**
   * The street name component extracted from the geocoded job address. Automatically populated when an address is geocoded.
   */
  geoStreet?: string | undefined;
  /**
   * The street number component extracted from the geocoded job address. Automatically populated when an address is geocoded.
   */
  geoNumber?: string | undefined;
  /**
   * UUID reference to the queue this job is assigned to. Jobs can be organized into queues for workflow management.
   */
  queueUuid?: string | undefined;
  /**
   * Timestamp when this job's assignment to the current Queue expires. After this date passes, the job is no longer considered to be in the Queue, even though queue_uuid may still contain a value.
   */
  queueExpiryDate?: string | undefined;
  /**
   * UUID of a Staff Member who is responsible for managing this job while it is in the queue. Only populated when the job is in a Queue which tracks Staff assignment.
   */
  queueAssignedStaffUuid?: string | undefined;
  /**
   * Comma-separated list of Badge UUIDs associated with this job. Badges are visual indicators that can be displayed on jobs in the dispatch board.
   */
  badges?: string | undefined;
  /**
   * Timestamp when the job was quoted. Automatically set when a job's status is changed to 'Quote'.
   */
  quoteDate?: string | undefined;
  /**
   * Boolean flag indicating whether a quote has been sent to the client for this job. (Read only).  Valid values are [0,1]
   */
  quoteSent?: QuoteSent | undefined;
  /**
   * Timestamp when the quote was sent to the client. Format is YYYY-MM-DD HH:MM:SS. (Read only)
   */
  quoteSentStamp?: string | undefined;
  /**
   * Timestamp when the job was converted to a work order. Automatically set when a job's status is changed to 'Work Order'.
   */
  workOrderDate?: string | undefined;
  /**
   * DEPRECATED
   */
  activeNetworkRequestUuid?: any | undefined;
  /**
   * DEPRECATED
   */
  relatedKnowledgeArticles?: any | undefined;
  /**
   * Unique identifier for this record
   */
  uuid?: string | undefined;
  /**
   * Record active/deleted flag.  Valid values are [0,1]
   */
  active?: JobActive | undefined;
  /**
   * Physical address where the job is to be performed. This address is used for geocoding to place the job on the map.
   */
  jobAddress?: string | undefined;
  jobDescription?: string | undefined;
  /**
   * Email Address
   */
  workDoneDescription?: string | undefined;
  /**
   * System-generated unique job identifier. This is read-only and automatically assigned when a job is created. (Read only)
   */
  generatedJobId?: string | undefined;
  totalInvoiceAmount?: string | undefined;
  paymentProcessed?: string | undefined;
  paymentProcessedStamp?: string | undefined;
  paymentReceived?: string | undefined;
  paymentReceivedStamp?: string | undefined;
  completionDate?: string | undefined;
  /**
   * UUID of the staff member who marked this job as completed. References a staff record in the system.
   */
  completionActionedByUuid?: string | undefined;
  unsuccessfulDate?: string | undefined;
  jobIsScheduledUntilStamp?: string | undefined;
};

/** @internal */
export const Status$inboundSchema: z.ZodNativeEnum<typeof Status> = z
  .nativeEnum(Status);

/** @internal */
export const Status$outboundSchema: z.ZodNativeEnum<typeof Status> =
  Status$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Status$ {
  /** @deprecated use `Status$inboundSchema` instead. */
  export const inboundSchema = Status$inboundSchema;
  /** @deprecated use `Status$outboundSchema` instead. */
  export const outboundSchema = Status$outboundSchema;
}

/** @internal */
export const QuoteSent$inboundSchema: z.ZodNativeEnum<typeof QuoteSent> = z
  .nativeEnum(QuoteSent);

/** @internal */
export const QuoteSent$outboundSchema: z.ZodNativeEnum<typeof QuoteSent> =
  QuoteSent$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace QuoteSent$ {
  /** @deprecated use `QuoteSent$inboundSchema` instead. */
  export const inboundSchema = QuoteSent$inboundSchema;
  /** @deprecated use `QuoteSent$outboundSchema` instead. */
  export const outboundSchema = QuoteSent$outboundSchema;
}

/** @internal */
export const JobActive$inboundSchema: z.ZodNativeEnum<typeof JobActive> = z
  .nativeEnum(JobActive);

/** @internal */
export const JobActive$outboundSchema: z.ZodNativeEnum<typeof JobActive> =
  JobActive$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace JobActive$ {
  /** @deprecated use `JobActive$inboundSchema` instead. */
  export const inboundSchema = JobActive$inboundSchema;
  /** @deprecated use `JobActive$outboundSchema` instead. */
  export const outboundSchema = JobActive$outboundSchema;
}

/** @internal */
export const Job$inboundSchema: z.ZodType<Job, z.ZodTypeDef, unknown> = z
  .object({
    created_by_staff_uuid: z.string().optional(),
    date: z.string().optional(),
    company_uuid: z.string().optional(),
    billing_address: z.string().optional(),
    status: Status$inboundSchema,
    lng: z.number().optional(),
    lat: z.number().optional(),
    payment_date: z.string().optional(),
    payment_actioned_by_uuid: z.string().optional(),
    payment_method: z.string().optional(),
    payment_amount: z.string().optional(),
    category_uuid: z.string().optional(),
    payment_note: z.string().optional(),
    geo_is_valid: z.string().optional(),
    purchase_order_number: z.string().optional(),
    invoice_sent: z.string().optional(),
    invoice_sent_stamp: z.string().optional(),
    ready_to_invoice: z.any().optional(),
    ready_to_invoice_stamp: z.any().optional(),
    geo_country: z.string().optional(),
    geo_postcode: z.string().optional(),
    geo_state: z.string().optional(),
    geo_city: z.string().optional(),
    geo_street: z.string().optional(),
    geo_number: z.string().optional(),
    queue_uuid: z.string().optional(),
    queue_expiry_date: z.string().optional(),
    queue_assigned_staff_uuid: z.string().optional(),
    badges: z.string().optional(),
    quote_date: z.string().optional(),
    quote_sent: QuoteSent$inboundSchema.optional(),
    quote_sent_stamp: z.string().optional(),
    work_order_date: z.string().optional(),
    active_network_request_uuid: z.any().optional(),
    related_knowledge_articles: z.any().optional(),
    uuid: z.string().optional(),
    active: JobActive$inboundSchema.default(1),
    edit_date: z.any().optional(),
    job_address: z.string().optional(),
    job_description: z.string().optional(),
    work_done_description: z.string().optional(),
    generated_job_id: z.string().optional(),
    total_invoice_amount: z.string().optional(),
    payment_processed: z.string().optional(),
    payment_processed_stamp: z.string().optional(),
    payment_received: z.string().optional(),
    payment_received_stamp: z.string().optional(),
    completion_date: z.string().optional(),
    completion_actioned_by_uuid: z.string().optional(),
    unsuccessful_date: z.string().optional(),
    job_is_scheduled_until_stamp: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      "created_by_staff_uuid": "createdByStaffUuid",
      "company_uuid": "companyUuid",
      "billing_address": "billingAddress",
      "payment_date": "paymentDate",
      "payment_actioned_by_uuid": "paymentActionedByUuid",
      "payment_method": "paymentMethod",
      "payment_amount": "paymentAmount",
      "category_uuid": "categoryUuid",
      "payment_note": "paymentNote",
      "geo_is_valid": "geoIsValid",
      "purchase_order_number": "purchaseOrderNumber",
      "invoice_sent": "invoiceSent",
      "invoice_sent_stamp": "invoiceSentStamp",
      "ready_to_invoice": "readyToInvoice",
      "ready_to_invoice_stamp": "readyToInvoiceStamp",
      "geo_country": "geoCountry",
      "geo_postcode": "geoPostcode",
      "geo_state": "geoState",
      "geo_city": "geoCity",
      "geo_street": "geoStreet",
      "geo_number": "geoNumber",
      "queue_uuid": "queueUuid",
      "queue_expiry_date": "queueExpiryDate",
      "queue_assigned_staff_uuid": "queueAssignedStaffUuid",
      "quote_date": "quoteDate",
      "quote_sent": "quoteSent",
      "quote_sent_stamp": "quoteSentStamp",
      "work_order_date": "workOrderDate",
      "active_network_request_uuid": "activeNetworkRequestUuid",
      "related_knowledge_articles": "relatedKnowledgeArticles",
      "edit_date": "editDate",
      "job_address": "jobAddress",
      "job_description": "jobDescription",
      "work_done_description": "workDoneDescription",
      "generated_job_id": "generatedJobId",
      "total_invoice_amount": "totalInvoiceAmount",
      "payment_processed": "paymentProcessed",
      "payment_processed_stamp": "paymentProcessedStamp",
      "payment_received": "paymentReceived",
      "payment_received_stamp": "paymentReceivedStamp",
      "completion_date": "completionDate",
      "completion_actioned_by_uuid": "completionActionedByUuid",
      "unsuccessful_date": "unsuccessfulDate",
      "job_is_scheduled_until_stamp": "jobIsScheduledUntilStamp",
    });
  });

/** @internal */
export type Job$Outbound = {
  created_by_staff_uuid?: string | undefined;
  date?: string | undefined;
  company_uuid?: string | undefined;
  billing_address?: string | undefined;
  status: string;
  lng?: number | undefined;
  lat?: number | undefined;
  payment_date?: string | undefined;
  payment_actioned_by_uuid?: string | undefined;
  payment_method?: string | undefined;
  payment_amount?: string | undefined;
  category_uuid?: string | undefined;
  payment_note?: string | undefined;
  geo_is_valid?: string | undefined;
  purchase_order_number?: string | undefined;
  invoice_sent?: string | undefined;
  invoice_sent_stamp?: string | undefined;
  ready_to_invoice?: any | undefined;
  ready_to_invoice_stamp?: any | undefined;
  geo_country?: string | undefined;
  geo_postcode?: string | undefined;
  geo_state?: string | undefined;
  geo_city?: string | undefined;
  geo_street?: string | undefined;
  geo_number?: string | undefined;
  queue_uuid?: string | undefined;
  queue_expiry_date?: string | undefined;
  queue_assigned_staff_uuid?: string | undefined;
  badges?: string | undefined;
  quote_date?: string | undefined;
  quote_sent?: number | undefined;
  quote_sent_stamp?: string | undefined;
  work_order_date?: string | undefined;
  active_network_request_uuid?: any | undefined;
  related_knowledge_articles?: any | undefined;
  uuid?: string | undefined;
  active: number;
  edit_date?: any | undefined;
  job_address?: string | undefined;
  job_description?: string | undefined;
  work_done_description?: string | undefined;
  generated_job_id?: string | undefined;
  total_invoice_amount?: string | undefined;
  payment_processed?: string | undefined;
  payment_processed_stamp?: string | undefined;
  payment_received?: string | undefined;
  payment_received_stamp?: string | undefined;
  completion_date?: string | undefined;
  completion_actioned_by_uuid?: string | undefined;
  unsuccessful_date?: string | undefined;
  job_is_scheduled_until_stamp?: string | undefined;
};

/** @internal */
export const Job$outboundSchema: z.ZodType<Job$Outbound, z.ZodTypeDef, Job> = z
  .object({
    createdByStaffUuid: z.string().optional(),
    date: z.string().optional(),
    companyUuid: z.string().optional(),
    billingAddress: z.string().optional(),
    status: Status$outboundSchema,
    lng: z.number().optional(),
    lat: z.number().optional(),
    paymentDate: z.string().optional(),
    paymentActionedByUuid: z.string().optional(),
    paymentMethod: z.string().optional(),
    paymentAmount: z.string().optional(),
    categoryUuid: z.string().optional(),
    paymentNote: z.string().optional(),
    geoIsValid: z.string().optional(),
    purchaseOrderNumber: z.string().optional(),
    invoiceSent: z.string().optional(),
    invoiceSentStamp: z.string().optional(),
    readyToInvoice: z.any().optional(),
    readyToInvoiceStamp: z.any().optional(),
    geoCountry: z.string().optional(),
    geoPostcode: z.string().optional(),
    geoState: z.string().optional(),
    geoCity: z.string().optional(),
    geoStreet: z.string().optional(),
    geoNumber: z.string().optional(),
    queueUuid: z.string().optional(),
    queueExpiryDate: z.string().optional(),
    queueAssignedStaffUuid: z.string().optional(),
    badges: z.string().optional(),
    quoteDate: z.string().optional(),
    quoteSent: QuoteSent$outboundSchema.optional(),
    quoteSentStamp: z.string().optional(),
    workOrderDate: z.string().optional(),
    activeNetworkRequestUuid: z.any().optional(),
    relatedKnowledgeArticles: z.any().optional(),
    uuid: z.string().optional(),
    active: JobActive$outboundSchema.default(1),
    editDate: z.any().optional(),
    jobAddress: z.string().optional(),
    jobDescription: z.string().optional(),
    workDoneDescription: z.string().optional(),
    generatedJobId: z.string().optional(),
    totalInvoiceAmount: z.string().optional(),
    paymentProcessed: z.string().optional(),
    paymentProcessedStamp: z.string().optional(),
    paymentReceived: z.string().optional(),
    paymentReceivedStamp: z.string().optional(),
    completionDate: z.string().optional(),
    completionActionedByUuid: z.string().optional(),
    unsuccessfulDate: z.string().optional(),
    jobIsScheduledUntilStamp: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      createdByStaffUuid: "created_by_staff_uuid",
      companyUuid: "company_uuid",
      billingAddress: "billing_address",
      paymentDate: "payment_date",
      paymentActionedByUuid: "payment_actioned_by_uuid",
      paymentMethod: "payment_method",
      paymentAmount: "payment_amount",
      categoryUuid: "category_uuid",
      paymentNote: "payment_note",
      geoIsValid: "geo_is_valid",
      purchaseOrderNumber: "purchase_order_number",
      invoiceSent: "invoice_sent",
      invoiceSentStamp: "invoice_sent_stamp",
      readyToInvoice: "ready_to_invoice",
      readyToInvoiceStamp: "ready_to_invoice_stamp",
      geoCountry: "geo_country",
      geoPostcode: "geo_postcode",
      geoState: "geo_state",
      geoCity: "geo_city",
      geoStreet: "geo_street",
      geoNumber: "geo_number",
      queueUuid: "queue_uuid",
      queueExpiryDate: "queue_expiry_date",
      queueAssignedStaffUuid: "queue_assigned_staff_uuid",
      quoteDate: "quote_date",
      quoteSent: "quote_sent",
      quoteSentStamp: "quote_sent_stamp",
      workOrderDate: "work_order_date",
      activeNetworkRequestUuid: "active_network_request_uuid",
      relatedKnowledgeArticles: "related_knowledge_articles",
      editDate: "edit_date",
      jobAddress: "job_address",
      jobDescription: "job_description",
      workDoneDescription: "work_done_description",
      generatedJobId: "generated_job_id",
      totalInvoiceAmount: "total_invoice_amount",
      paymentProcessed: "payment_processed",
      paymentProcessedStamp: "payment_processed_stamp",
      paymentReceived: "payment_received",
      paymentReceivedStamp: "payment_received_stamp",
      completionDate: "completion_date",
      completionActionedByUuid: "completion_actioned_by_uuid",
      unsuccessfulDate: "unsuccessful_date",
      jobIsScheduledUntilStamp: "job_is_scheduled_until_stamp",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Job$ {
  /** @deprecated use `Job$inboundSchema` instead. */
  export const inboundSchema = Job$inboundSchema;
  /** @deprecated use `Job$outboundSchema` instead. */
  export const outboundSchema = Job$outboundSchema;
  /** @deprecated use `Job$Outbound` instead. */
  export type Outbound = Job$Outbound;
}

export function jobToJSON(job: Job): string {
  return JSON.stringify(Job$outboundSchema.parse(job));
}

export function jobFromJSON(
  jsonString: string,
): SafeParseResult<Job, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Job$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Job' from JSON`,
  );
}

/** @internal */
export const JobInput$inboundSchema: z.ZodType<
  JobInput,
  z.ZodTypeDef,
  unknown
> = z.object({
  created_by_staff_uuid: z.string().optional(),
  date: z.string().optional(),
  company_uuid: z.string().optional(),
  billing_address: z.string().optional(),
  status: Status$inboundSchema,
  lng: z.number().optional(),
  lat: z.number().optional(),
  payment_date: z.string().optional(),
  payment_actioned_by_uuid: z.string().optional(),
  payment_method: z.string().optional(),
  payment_amount: z.string().optional(),
  category_uuid: z.string().optional(),
  payment_note: z.string().optional(),
  geo_is_valid: z.string().optional(),
  purchase_order_number: z.string().optional(),
  invoice_sent: z.string().optional(),
  invoice_sent_stamp: z.string().optional(),
  ready_to_invoice: z.any().optional(),
  ready_to_invoice_stamp: z.any().optional(),
  geo_country: z.string().optional(),
  geo_postcode: z.string().optional(),
  geo_state: z.string().optional(),
  geo_city: z.string().optional(),
  geo_street: z.string().optional(),
  geo_number: z.string().optional(),
  queue_uuid: z.string().optional(),
  queue_expiry_date: z.string().optional(),
  queue_assigned_staff_uuid: z.string().optional(),
  badges: z.string().optional(),
  quote_date: z.string().optional(),
  quote_sent: QuoteSent$inboundSchema.optional(),
  quote_sent_stamp: z.string().optional(),
  work_order_date: z.string().optional(),
  active_network_request_uuid: z.any().optional(),
  related_knowledge_articles: z.any().optional(),
  uuid: z.string().optional(),
  active: JobActive$inboundSchema.default(1),
  job_address: z.string().optional(),
  job_description: z.string().optional(),
  work_done_description: z.string().optional(),
  generated_job_id: z.string().optional(),
  total_invoice_amount: z.string().optional(),
  payment_processed: z.string().optional(),
  payment_processed_stamp: z.string().optional(),
  payment_received: z.string().optional(),
  payment_received_stamp: z.string().optional(),
  completion_date: z.string().optional(),
  completion_actioned_by_uuid: z.string().optional(),
  unsuccessful_date: z.string().optional(),
  job_is_scheduled_until_stamp: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "created_by_staff_uuid": "createdByStaffUuid",
    "company_uuid": "companyUuid",
    "billing_address": "billingAddress",
    "payment_date": "paymentDate",
    "payment_actioned_by_uuid": "paymentActionedByUuid",
    "payment_method": "paymentMethod",
    "payment_amount": "paymentAmount",
    "category_uuid": "categoryUuid",
    "payment_note": "paymentNote",
    "geo_is_valid": "geoIsValid",
    "purchase_order_number": "purchaseOrderNumber",
    "invoice_sent": "invoiceSent",
    "invoice_sent_stamp": "invoiceSentStamp",
    "ready_to_invoice": "readyToInvoice",
    "ready_to_invoice_stamp": "readyToInvoiceStamp",
    "geo_country": "geoCountry",
    "geo_postcode": "geoPostcode",
    "geo_state": "geoState",
    "geo_city": "geoCity",
    "geo_street": "geoStreet",
    "geo_number": "geoNumber",
    "queue_uuid": "queueUuid",
    "queue_expiry_date": "queueExpiryDate",
    "queue_assigned_staff_uuid": "queueAssignedStaffUuid",
    "quote_date": "quoteDate",
    "quote_sent": "quoteSent",
    "quote_sent_stamp": "quoteSentStamp",
    "work_order_date": "workOrderDate",
    "active_network_request_uuid": "activeNetworkRequestUuid",
    "related_knowledge_articles": "relatedKnowledgeArticles",
    "job_address": "jobAddress",
    "job_description": "jobDescription",
    "work_done_description": "workDoneDescription",
    "generated_job_id": "generatedJobId",
    "total_invoice_amount": "totalInvoiceAmount",
    "payment_processed": "paymentProcessed",
    "payment_processed_stamp": "paymentProcessedStamp",
    "payment_received": "paymentReceived",
    "payment_received_stamp": "paymentReceivedStamp",
    "completion_date": "completionDate",
    "completion_actioned_by_uuid": "completionActionedByUuid",
    "unsuccessful_date": "unsuccessfulDate",
    "job_is_scheduled_until_stamp": "jobIsScheduledUntilStamp",
  });
});

/** @internal */
export type JobInput$Outbound = {
  created_by_staff_uuid?: string | undefined;
  date?: string | undefined;
  company_uuid?: string | undefined;
  billing_address?: string | undefined;
  status: string;
  lng?: number | undefined;
  lat?: number | undefined;
  payment_date?: string | undefined;
  payment_actioned_by_uuid?: string | undefined;
  payment_method?: string | undefined;
  payment_amount?: string | undefined;
  category_uuid?: string | undefined;
  payment_note?: string | undefined;
  geo_is_valid?: string | undefined;
  purchase_order_number?: string | undefined;
  invoice_sent?: string | undefined;
  invoice_sent_stamp?: string | undefined;
  ready_to_invoice?: any | undefined;
  ready_to_invoice_stamp?: any | undefined;
  geo_country?: string | undefined;
  geo_postcode?: string | undefined;
  geo_state?: string | undefined;
  geo_city?: string | undefined;
  geo_street?: string | undefined;
  geo_number?: string | undefined;
  queue_uuid?: string | undefined;
  queue_expiry_date?: string | undefined;
  queue_assigned_staff_uuid?: string | undefined;
  badges?: string | undefined;
  quote_date?: string | undefined;
  quote_sent?: number | undefined;
  quote_sent_stamp?: string | undefined;
  work_order_date?: string | undefined;
  active_network_request_uuid?: any | undefined;
  related_knowledge_articles?: any | undefined;
  uuid?: string | undefined;
  active: number;
  job_address?: string | undefined;
  job_description?: string | undefined;
  work_done_description?: string | undefined;
  generated_job_id?: string | undefined;
  total_invoice_amount?: string | undefined;
  payment_processed?: string | undefined;
  payment_processed_stamp?: string | undefined;
  payment_received?: string | undefined;
  payment_received_stamp?: string | undefined;
  completion_date?: string | undefined;
  completion_actioned_by_uuid?: string | undefined;
  unsuccessful_date?: string | undefined;
  job_is_scheduled_until_stamp?: string | undefined;
};

/** @internal */
export const JobInput$outboundSchema: z.ZodType<
  JobInput$Outbound,
  z.ZodTypeDef,
  JobInput
> = z.object({
  createdByStaffUuid: z.string().optional(),
  date: z.string().optional(),
  companyUuid: z.string().optional(),
  billingAddress: z.string().optional(),
  status: Status$outboundSchema,
  lng: z.number().optional(),
  lat: z.number().optional(),
  paymentDate: z.string().optional(),
  paymentActionedByUuid: z.string().optional(),
  paymentMethod: z.string().optional(),
  paymentAmount: z.string().optional(),
  categoryUuid: z.string().optional(),
  paymentNote: z.string().optional(),
  geoIsValid: z.string().optional(),
  purchaseOrderNumber: z.string().optional(),
  invoiceSent: z.string().optional(),
  invoiceSentStamp: z.string().optional(),
  readyToInvoice: z.any().optional(),
  readyToInvoiceStamp: z.any().optional(),
  geoCountry: z.string().optional(),
  geoPostcode: z.string().optional(),
  geoState: z.string().optional(),
  geoCity: z.string().optional(),
  geoStreet: z.string().optional(),
  geoNumber: z.string().optional(),
  queueUuid: z.string().optional(),
  queueExpiryDate: z.string().optional(),
  queueAssignedStaffUuid: z.string().optional(),
  badges: z.string().optional(),
  quoteDate: z.string().optional(),
  quoteSent: QuoteSent$outboundSchema.optional(),
  quoteSentStamp: z.string().optional(),
  workOrderDate: z.string().optional(),
  activeNetworkRequestUuid: z.any().optional(),
  relatedKnowledgeArticles: z.any().optional(),
  uuid: z.string().optional(),
  active: JobActive$outboundSchema.default(1),
  jobAddress: z.string().optional(),
  jobDescription: z.string().optional(),
  workDoneDescription: z.string().optional(),
  generatedJobId: z.string().optional(),
  totalInvoiceAmount: z.string().optional(),
  paymentProcessed: z.string().optional(),
  paymentProcessedStamp: z.string().optional(),
  paymentReceived: z.string().optional(),
  paymentReceivedStamp: z.string().optional(),
  completionDate: z.string().optional(),
  completionActionedByUuid: z.string().optional(),
  unsuccessfulDate: z.string().optional(),
  jobIsScheduledUntilStamp: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    createdByStaffUuid: "created_by_staff_uuid",
    companyUuid: "company_uuid",
    billingAddress: "billing_address",
    paymentDate: "payment_date",
    paymentActionedByUuid: "payment_actioned_by_uuid",
    paymentMethod: "payment_method",
    paymentAmount: "payment_amount",
    categoryUuid: "category_uuid",
    paymentNote: "payment_note",
    geoIsValid: "geo_is_valid",
    purchaseOrderNumber: "purchase_order_number",
    invoiceSent: "invoice_sent",
    invoiceSentStamp: "invoice_sent_stamp",
    readyToInvoice: "ready_to_invoice",
    readyToInvoiceStamp: "ready_to_invoice_stamp",
    geoCountry: "geo_country",
    geoPostcode: "geo_postcode",
    geoState: "geo_state",
    geoCity: "geo_city",
    geoStreet: "geo_street",
    geoNumber: "geo_number",
    queueUuid: "queue_uuid",
    queueExpiryDate: "queue_expiry_date",
    queueAssignedStaffUuid: "queue_assigned_staff_uuid",
    quoteDate: "quote_date",
    quoteSent: "quote_sent",
    quoteSentStamp: "quote_sent_stamp",
    workOrderDate: "work_order_date",
    activeNetworkRequestUuid: "active_network_request_uuid",
    relatedKnowledgeArticles: "related_knowledge_articles",
    jobAddress: "job_address",
    jobDescription: "job_description",
    workDoneDescription: "work_done_description",
    generatedJobId: "generated_job_id",
    totalInvoiceAmount: "total_invoice_amount",
    paymentProcessed: "payment_processed",
    paymentProcessedStamp: "payment_processed_stamp",
    paymentReceived: "payment_received",
    paymentReceivedStamp: "payment_received_stamp",
    completionDate: "completion_date",
    completionActionedByUuid: "completion_actioned_by_uuid",
    unsuccessfulDate: "unsuccessful_date",
    jobIsScheduledUntilStamp: "job_is_scheduled_until_stamp",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace JobInput$ {
  /** @deprecated use `JobInput$inboundSchema` instead. */
  export const inboundSchema = JobInput$inboundSchema;
  /** @deprecated use `JobInput$outboundSchema` instead. */
  export const outboundSchema = JobInput$outboundSchema;
  /** @deprecated use `JobInput$Outbound` instead. */
  export type Outbound = JobInput$Outbound;
}

export function jobInputToJSON(jobInput: JobInput): string {
  return JSON.stringify(JobInput$outboundSchema.parse(jobInput));
}

export function jobInputFromJSON(
  jsonString: string,
): SafeParseResult<JobInput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => JobInput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'JobInput' from JSON`,
  );
}
