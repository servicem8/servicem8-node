/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Current status of the job. Controls where the Job appears in the Dispatch Board..  Valid values are [Quote,Work Order,Unsuccessful,Completed]
 */
export const JobStatus = {
  Quote: "Quote",
  WorkOrder: "Work Order",
  Unsuccessful: "Unsuccessful",
  Completed: "Completed",
} as const;
/**
 * Current status of the job. Controls where the Job appears in the Dispatch Board..  Valid values are [Quote,Work Order,Unsuccessful,Completed]
 */
export type JobStatus = ClosedEnum<typeof JobStatus>;

/**
 * Indicates whether the geocoding for the job address is valid. If this is false, the lat, lng, and other geo_ fields should not be used. (Read only).  Valid values are [0,1]
 */
export const GeoIsValid = {
  Zero: 0,
  One: 1,
} as const;
/**
 * Indicates whether the geocoding for the job address is valid. If this is false, the lat, lng, and other geo_ fields should not be used. (Read only).  Valid values are [0,1]
 */
export type GeoIsValid = ClosedEnum<typeof GeoIsValid>;

/**
 * Indicates whether an invoice has been sent for this job..  Valid values are [0,1]
 */
export const JobInvoiceSent = {
  Zero: 0,
  One: 1,
} as const;
/**
 * Indicates whether an invoice has been sent for this job..  Valid values are [0,1]
 */
export type JobInvoiceSent = ClosedEnum<typeof JobInvoiceSent>;

/**
 * Boolean flag indicating whether a quote has been sent to the client for this job..  Valid values are [0,1]
 */
export const JobQuoteSent = {
  Zero: 0,
  One: 1,
} as const;
/**
 * Boolean flag indicating whether a quote has been sent to the client for this job..  Valid values are [0,1]
 */
export type JobQuoteSent = ClosedEnum<typeof JobQuoteSent>;

/**
 * Record active/deleted flag.  Valid values are [0,1]
 */
export const JobActive = {
  Zero: 0,
  One: 1,
} as const;
/**
 * Record active/deleted flag.  Valid values are [0,1]
 */
export type JobActive = ClosedEnum<typeof JobActive>;

/**
 * Indicates whether the job has been exported to the connected Accounting Package..  Valid values are [0,1]
 */
export const JobPaymentProcessed = {
  Zero: 0,
  One: 1,
} as const;
/**
 * Indicates whether the job has been exported to the connected Accounting Package..  Valid values are [0,1]
 */
export type JobPaymentProcessed = ClosedEnum<typeof JobPaymentProcessed>;

/**
 * Indicates whether full payment has been received for this job..  Valid values are [0,1]
 */
export const JobPaymentReceived = {
  Zero: 0,
  One: 1,
} as const;
/**
 * Indicates whether full payment has been received for this job..  Valid values are [0,1]
 */
export type JobPaymentReceived = ClosedEnum<typeof JobPaymentReceived>;

export type Job = {
  /**
   * UUID of the staff member who created this job. Records which staff member initially added the job to the system.
   */
  createdByStaffUuid?: string | undefined;
  /**
   * The date the job was created or scheduled. Used for organizing jobs chronologically and for reference in reports.
   */
  date?: string | undefined;
  /**
   * UUID reference to the client/company record associated with this job. Links the job to a client in the system, establishing the client-job relationship for billing and contact purposes.
   */
  companyUuid?: string | undefined;
  /**
   * The address where invoices and billing information should be sent. If not specified, defaults to the job address.
   */
  billingAddress?: string | undefined;
  /**
   * Current status of the job. Controls where the Job appears in the Dispatch Board..  Valid values are [Quote,Work Order,Unsuccessful,Completed]
   */
  status: JobStatus;
  /**
   * The longitude coordinate of the job location. (Read only)
   */
  lng?: number | undefined;
  /**
   * The latitude coordinate of the job location. (Read only)
   */
  lat?: number | undefined;
  /**
   * Not used. Refer to JobPayment endpoint.
   */
  paymentDate?: string | undefined;
  /**
   * Not used. Refer to JobPayment endpoint.
   */
  paymentActionedByUuid?: string | undefined;
  /**
   * Not used. Refer to JobPayment endpoint.
   */
  paymentMethod?: string | undefined;
  /**
   * Not used. Refer to JobPayment endpoint.
   */
  paymentAmount?: string | undefined;
  /**
   * UUID reference to the job category this job belongs to. Categories help organize jobs by type of work or department.
   */
  categoryUuid?: string | undefined;
  /**
   * Not used. Refer to JobPayment endpoint.
   */
  paymentNote?: string | undefined;
  /**
   * Indicates whether the geocoding for the job address is valid. If this is false, the lat, lng, and other geo_ fields should not be used. (Read only).  Valid values are [0,1]
   */
  geoIsValid?: GeoIsValid | undefined;
  /**
   * Client purchase order reference number for this job. Used for cross-referencing with external accounting or order management systems.
   */
  purchaseOrderNumber?: string | undefined;
  /**
   * Indicates whether an invoice has been sent for this job..  Valid values are [0,1]
   */
  invoiceSent?: JobInvoiceSent | undefined;
  /**
   * The date and time when the invoice was sent. (Read only)
   */
  invoiceSentStamp?: string | undefined;
  /**
   * DEPRECATED
   */
  readyToInvoice?: any | undefined;
  /**
   * DEPRECATED
   */
  readyToInvoiceStamp?: any | undefined;
  /**
   * The country field of the job address. (Read only)
   */
  geoCountry?: string | undefined;
  /**
   * The postcode/ZIP code field of the job address. (Read only)
   */
  geoPostcode?: string | undefined;
  /**
   * The state/province field of the job address. (Read only)
   */
  geoState?: string | undefined;
  /**
   * The city/suburb field of the job address. (Read only)
   */
  geoCity?: string | undefined;
  /**
   * The street name field of the job address. (Read only)
   */
  geoStreet?: string | undefined;
  /**
   * The street number field of the job address. (Read only)
   */
  geoNumber?: string | undefined;
  /**
   * The UUID of the queue this job belongs to.
   */
  queueUuid?: string | undefined;
  /**
   * The date and time when the job expires from the queue.
   */
  queueExpiryDate?: string | undefined;
  /**
   * The UUID of the staff member assigned to this job in the queue.
   */
  queueAssignedStaffUuid?: string | undefined;
  /**
   * JSON Array of Badge UUIDs
   */
  badges?: string | undefined;
  /**
   * The date and time that the job status was changed to Quote.
   */
  quoteDate?: string | undefined;
  /**
   * Boolean flag indicating whether a quote has been sent to the client for this job..  Valid values are [0,1]
   */
  quoteSent?: JobQuoteSent | undefined;
  /**
   * Timestamp when the quote was sent to the client. Format is YYYY-MM-DD HH:MM:SS. (Read only)
   */
  quoteSentStamp?: string | undefined;
  /**
   * The date and time that the job status was changed to Work Order.
   */
  workOrderDate?: string | undefined;
  /**
   * DEPRECATED
   */
  activeNetworkRequestUuid?: any | undefined;
  /**
   * DEPRECATED
   */
  relatedKnowledgeArticles?: any | undefined;
  /**
   * Unique identifier for this record
   */
  uuid?: string | undefined;
  /**
   * Record active/deleted flag.  Valid values are [0,1]
   */
  active?: JobActive | undefined;
  /**
   * Timestamp at which record was last modified
   */
  editDate?: any | undefined;
  /**
   * Physical address where the job is to be performed. This address is used for geocoding to place the job on the map.
   */
  jobAddress?: string | undefined;
  jobDescription?: string | undefined;
  /**
   * Email Address
   */
  workDoneDescription?: string | undefined;
  /**
   * System-generated unique job identifier. This is read-only and automatically assigned when a job is created. (Read only)
   */
  generatedJobId?: string | undefined;
  /**
   * The total amount to be invoiced for this job. (Read only)
   */
  totalInvoiceAmount?: string | undefined;
  /**
   * Indicates whether the job has been exported to the connected Accounting Package..  Valid values are [0,1]
   */
  paymentProcessed?: JobPaymentProcessed | undefined;
  /**
   * The date and time the job has been exported to the connected Accounting Package. (Read only)
   */
  paymentProcessedStamp?: string | undefined;
  /**
   * Indicates whether full payment has been received for this job..  Valid values are [0,1]
   */
  paymentReceived?: JobPaymentReceived | undefined;
  /**
   * The date and time when full payment was received. (Read only)
   */
  paymentReceivedStamp?: string | undefined;
  /**
   * The date and time that the job status was changed to Completed.
   */
  completionDate?: string | undefined;
  /**
   * UUID of the staff member who marked this job as completed. References a staff record in the system. (Read only)
   */
  completionActionedByUuid?: string | undefined;
  /**
   * The date and time that the job status was changed to Unsuccessful.
   */
  unsuccessfulDate?: string | undefined;
  /**
   * The end date/time of the last scheduled activity for this job. After this date, the job is considered Unscheduled. (Read only)
   */
  jobIsScheduledUntilStamp?: string | undefined;
};

/** @internal */
export const JobStatus$inboundSchema: z.ZodNativeEnum<typeof JobStatus> = z
  .nativeEnum(JobStatus);

/** @internal */
export const JobStatus$outboundSchema: z.ZodNativeEnum<typeof JobStatus> =
  JobStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace JobStatus$ {
  /** @deprecated use `JobStatus$inboundSchema` instead. */
  export const inboundSchema = JobStatus$inboundSchema;
  /** @deprecated use `JobStatus$outboundSchema` instead. */
  export const outboundSchema = JobStatus$outboundSchema;
}

/** @internal */
export const GeoIsValid$inboundSchema: z.ZodNativeEnum<typeof GeoIsValid> = z
  .nativeEnum(GeoIsValid);

/** @internal */
export const GeoIsValid$outboundSchema: z.ZodNativeEnum<typeof GeoIsValid> =
  GeoIsValid$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GeoIsValid$ {
  /** @deprecated use `GeoIsValid$inboundSchema` instead. */
  export const inboundSchema = GeoIsValid$inboundSchema;
  /** @deprecated use `GeoIsValid$outboundSchema` instead. */
  export const outboundSchema = GeoIsValid$outboundSchema;
}

/** @internal */
export const JobInvoiceSent$inboundSchema: z.ZodNativeEnum<
  typeof JobInvoiceSent
> = z.nativeEnum(JobInvoiceSent);

/** @internal */
export const JobInvoiceSent$outboundSchema: z.ZodNativeEnum<
  typeof JobInvoiceSent
> = JobInvoiceSent$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace JobInvoiceSent$ {
  /** @deprecated use `JobInvoiceSent$inboundSchema` instead. */
  export const inboundSchema = JobInvoiceSent$inboundSchema;
  /** @deprecated use `JobInvoiceSent$outboundSchema` instead. */
  export const outboundSchema = JobInvoiceSent$outboundSchema;
}

/** @internal */
export const JobQuoteSent$inboundSchema: z.ZodNativeEnum<typeof JobQuoteSent> =
  z.nativeEnum(JobQuoteSent);

/** @internal */
export const JobQuoteSent$outboundSchema: z.ZodNativeEnum<typeof JobQuoteSent> =
  JobQuoteSent$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace JobQuoteSent$ {
  /** @deprecated use `JobQuoteSent$inboundSchema` instead. */
  export const inboundSchema = JobQuoteSent$inboundSchema;
  /** @deprecated use `JobQuoteSent$outboundSchema` instead. */
  export const outboundSchema = JobQuoteSent$outboundSchema;
}

/** @internal */
export const JobActive$inboundSchema: z.ZodNativeEnum<typeof JobActive> = z
  .nativeEnum(JobActive);

/** @internal */
export const JobActive$outboundSchema: z.ZodNativeEnum<typeof JobActive> =
  JobActive$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace JobActive$ {
  /** @deprecated use `JobActive$inboundSchema` instead. */
  export const inboundSchema = JobActive$inboundSchema;
  /** @deprecated use `JobActive$outboundSchema` instead. */
  export const outboundSchema = JobActive$outboundSchema;
}

/** @internal */
export const JobPaymentProcessed$inboundSchema: z.ZodNativeEnum<
  typeof JobPaymentProcessed
> = z.nativeEnum(JobPaymentProcessed);

/** @internal */
export const JobPaymentProcessed$outboundSchema: z.ZodNativeEnum<
  typeof JobPaymentProcessed
> = JobPaymentProcessed$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace JobPaymentProcessed$ {
  /** @deprecated use `JobPaymentProcessed$inboundSchema` instead. */
  export const inboundSchema = JobPaymentProcessed$inboundSchema;
  /** @deprecated use `JobPaymentProcessed$outboundSchema` instead. */
  export const outboundSchema = JobPaymentProcessed$outboundSchema;
}

/** @internal */
export const JobPaymentReceived$inboundSchema: z.ZodNativeEnum<
  typeof JobPaymentReceived
> = z.nativeEnum(JobPaymentReceived);

/** @internal */
export const JobPaymentReceived$outboundSchema: z.ZodNativeEnum<
  typeof JobPaymentReceived
> = JobPaymentReceived$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace JobPaymentReceived$ {
  /** @deprecated use `JobPaymentReceived$inboundSchema` instead. */
  export const inboundSchema = JobPaymentReceived$inboundSchema;
  /** @deprecated use `JobPaymentReceived$outboundSchema` instead. */
  export const outboundSchema = JobPaymentReceived$outboundSchema;
}

/** @internal */
export const Job$inboundSchema: z.ZodType<Job, z.ZodTypeDef, unknown> = z
  .object({
    created_by_staff_uuid: z.string().optional(),
    date: z.string().optional(),
    company_uuid: z.string().optional(),
    billing_address: z.string().optional(),
    status: JobStatus$inboundSchema,
    lng: z.number().optional(),
    lat: z.number().optional(),
    payment_date: z.string().optional(),
    payment_actioned_by_uuid: z.string().optional(),
    payment_method: z.string().optional(),
    payment_amount: z.string().optional(),
    category_uuid: z.string().optional(),
    payment_note: z.string().optional(),
    geo_is_valid: GeoIsValid$inboundSchema.optional(),
    purchase_order_number: z.string().optional(),
    invoice_sent: JobInvoiceSent$inboundSchema.optional(),
    invoice_sent_stamp: z.string().optional(),
    ready_to_invoice: z.any().optional(),
    ready_to_invoice_stamp: z.any().optional(),
    geo_country: z.string().optional(),
    geo_postcode: z.string().optional(),
    geo_state: z.string().optional(),
    geo_city: z.string().optional(),
    geo_street: z.string().optional(),
    geo_number: z.string().optional(),
    queue_uuid: z.string().optional(),
    queue_expiry_date: z.string().optional(),
    queue_assigned_staff_uuid: z.string().optional(),
    badges: z.string().optional(),
    quote_date: z.string().optional(),
    quote_sent: JobQuoteSent$inboundSchema.optional(),
    quote_sent_stamp: z.string().optional(),
    work_order_date: z.string().optional(),
    active_network_request_uuid: z.any().optional(),
    related_knowledge_articles: z.any().optional(),
    uuid: z.string().optional(),
    active: JobActive$inboundSchema.default(1),
    edit_date: z.any().optional(),
    job_address: z.string().optional(),
    job_description: z.string().optional(),
    work_done_description: z.string().optional(),
    generated_job_id: z.string().optional(),
    total_invoice_amount: z.string().optional(),
    payment_processed: JobPaymentProcessed$inboundSchema.optional(),
    payment_processed_stamp: z.string().optional(),
    payment_received: JobPaymentReceived$inboundSchema.optional(),
    payment_received_stamp: z.string().optional(),
    completion_date: z.string().optional(),
    completion_actioned_by_uuid: z.string().optional(),
    unsuccessful_date: z.string().optional(),
    job_is_scheduled_until_stamp: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      "created_by_staff_uuid": "createdByStaffUuid",
      "company_uuid": "companyUuid",
      "billing_address": "billingAddress",
      "payment_date": "paymentDate",
      "payment_actioned_by_uuid": "paymentActionedByUuid",
      "payment_method": "paymentMethod",
      "payment_amount": "paymentAmount",
      "category_uuid": "categoryUuid",
      "payment_note": "paymentNote",
      "geo_is_valid": "geoIsValid",
      "purchase_order_number": "purchaseOrderNumber",
      "invoice_sent": "invoiceSent",
      "invoice_sent_stamp": "invoiceSentStamp",
      "ready_to_invoice": "readyToInvoice",
      "ready_to_invoice_stamp": "readyToInvoiceStamp",
      "geo_country": "geoCountry",
      "geo_postcode": "geoPostcode",
      "geo_state": "geoState",
      "geo_city": "geoCity",
      "geo_street": "geoStreet",
      "geo_number": "geoNumber",
      "queue_uuid": "queueUuid",
      "queue_expiry_date": "queueExpiryDate",
      "queue_assigned_staff_uuid": "queueAssignedStaffUuid",
      "quote_date": "quoteDate",
      "quote_sent": "quoteSent",
      "quote_sent_stamp": "quoteSentStamp",
      "work_order_date": "workOrderDate",
      "active_network_request_uuid": "activeNetworkRequestUuid",
      "related_knowledge_articles": "relatedKnowledgeArticles",
      "edit_date": "editDate",
      "job_address": "jobAddress",
      "job_description": "jobDescription",
      "work_done_description": "workDoneDescription",
      "generated_job_id": "generatedJobId",
      "total_invoice_amount": "totalInvoiceAmount",
      "payment_processed": "paymentProcessed",
      "payment_processed_stamp": "paymentProcessedStamp",
      "payment_received": "paymentReceived",
      "payment_received_stamp": "paymentReceivedStamp",
      "completion_date": "completionDate",
      "completion_actioned_by_uuid": "completionActionedByUuid",
      "unsuccessful_date": "unsuccessfulDate",
      "job_is_scheduled_until_stamp": "jobIsScheduledUntilStamp",
    });
  });

/** @internal */
export type Job$Outbound = {
  created_by_staff_uuid?: string | undefined;
  date?: string | undefined;
  company_uuid?: string | undefined;
  billing_address?: string | undefined;
  status: string;
  lng?: number | undefined;
  lat?: number | undefined;
  payment_date?: string | undefined;
  payment_actioned_by_uuid?: string | undefined;
  payment_method?: string | undefined;
  payment_amount?: string | undefined;
  category_uuid?: string | undefined;
  payment_note?: string | undefined;
  geo_is_valid?: number | undefined;
  purchase_order_number?: string | undefined;
  invoice_sent?: number | undefined;
  invoice_sent_stamp?: string | undefined;
  ready_to_invoice?: any | undefined;
  ready_to_invoice_stamp?: any | undefined;
  geo_country?: string | undefined;
  geo_postcode?: string | undefined;
  geo_state?: string | undefined;
  geo_city?: string | undefined;
  geo_street?: string | undefined;
  geo_number?: string | undefined;
  queue_uuid?: string | undefined;
  queue_expiry_date?: string | undefined;
  queue_assigned_staff_uuid?: string | undefined;
  badges?: string | undefined;
  quote_date?: string | undefined;
  quote_sent?: number | undefined;
  quote_sent_stamp?: string | undefined;
  work_order_date?: string | undefined;
  active_network_request_uuid?: any | undefined;
  related_knowledge_articles?: any | undefined;
  uuid?: string | undefined;
  active: number;
  edit_date?: any | undefined;
  job_address?: string | undefined;
  job_description?: string | undefined;
  work_done_description?: string | undefined;
  generated_job_id?: string | undefined;
  total_invoice_amount?: string | undefined;
  payment_processed?: number | undefined;
  payment_processed_stamp?: string | undefined;
  payment_received?: number | undefined;
  payment_received_stamp?: string | undefined;
  completion_date?: string | undefined;
  completion_actioned_by_uuid?: string | undefined;
  unsuccessful_date?: string | undefined;
  job_is_scheduled_until_stamp?: string | undefined;
};

/** @internal */
export const Job$outboundSchema: z.ZodType<Job$Outbound, z.ZodTypeDef, Job> = z
  .object({
    createdByStaffUuid: z.string().optional(),
    date: z.string().optional(),
    companyUuid: z.string().optional(),
    billingAddress: z.string().optional(),
    status: JobStatus$outboundSchema,
    lng: z.number().optional(),
    lat: z.number().optional(),
    paymentDate: z.string().optional(),
    paymentActionedByUuid: z.string().optional(),
    paymentMethod: z.string().optional(),
    paymentAmount: z.string().optional(),
    categoryUuid: z.string().optional(),
    paymentNote: z.string().optional(),
    geoIsValid: GeoIsValid$outboundSchema.optional(),
    purchaseOrderNumber: z.string().optional(),
    invoiceSent: JobInvoiceSent$outboundSchema.optional(),
    invoiceSentStamp: z.string().optional(),
    readyToInvoice: z.any().optional(),
    readyToInvoiceStamp: z.any().optional(),
    geoCountry: z.string().optional(),
    geoPostcode: z.string().optional(),
    geoState: z.string().optional(),
    geoCity: z.string().optional(),
    geoStreet: z.string().optional(),
    geoNumber: z.string().optional(),
    queueUuid: z.string().optional(),
    queueExpiryDate: z.string().optional(),
    queueAssignedStaffUuid: z.string().optional(),
    badges: z.string().optional(),
    quoteDate: z.string().optional(),
    quoteSent: JobQuoteSent$outboundSchema.optional(),
    quoteSentStamp: z.string().optional(),
    workOrderDate: z.string().optional(),
    activeNetworkRequestUuid: z.any().optional(),
    relatedKnowledgeArticles: z.any().optional(),
    uuid: z.string().optional(),
    active: JobActive$outboundSchema.default(1),
    editDate: z.any().optional(),
    jobAddress: z.string().optional(),
    jobDescription: z.string().optional(),
    workDoneDescription: z.string().optional(),
    generatedJobId: z.string().optional(),
    totalInvoiceAmount: z.string().optional(),
    paymentProcessed: JobPaymentProcessed$outboundSchema.optional(),
    paymentProcessedStamp: z.string().optional(),
    paymentReceived: JobPaymentReceived$outboundSchema.optional(),
    paymentReceivedStamp: z.string().optional(),
    completionDate: z.string().optional(),
    completionActionedByUuid: z.string().optional(),
    unsuccessfulDate: z.string().optional(),
    jobIsScheduledUntilStamp: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      createdByStaffUuid: "created_by_staff_uuid",
      companyUuid: "company_uuid",
      billingAddress: "billing_address",
      paymentDate: "payment_date",
      paymentActionedByUuid: "payment_actioned_by_uuid",
      paymentMethod: "payment_method",
      paymentAmount: "payment_amount",
      categoryUuid: "category_uuid",
      paymentNote: "payment_note",
      geoIsValid: "geo_is_valid",
      purchaseOrderNumber: "purchase_order_number",
      invoiceSent: "invoice_sent",
      invoiceSentStamp: "invoice_sent_stamp",
      readyToInvoice: "ready_to_invoice",
      readyToInvoiceStamp: "ready_to_invoice_stamp",
      geoCountry: "geo_country",
      geoPostcode: "geo_postcode",
      geoState: "geo_state",
      geoCity: "geo_city",
      geoStreet: "geo_street",
      geoNumber: "geo_number",
      queueUuid: "queue_uuid",
      queueExpiryDate: "queue_expiry_date",
      queueAssignedStaffUuid: "queue_assigned_staff_uuid",
      quoteDate: "quote_date",
      quoteSent: "quote_sent",
      quoteSentStamp: "quote_sent_stamp",
      workOrderDate: "work_order_date",
      activeNetworkRequestUuid: "active_network_request_uuid",
      relatedKnowledgeArticles: "related_knowledge_articles",
      editDate: "edit_date",
      jobAddress: "job_address",
      jobDescription: "job_description",
      workDoneDescription: "work_done_description",
      generatedJobId: "generated_job_id",
      totalInvoiceAmount: "total_invoice_amount",
      paymentProcessed: "payment_processed",
      paymentProcessedStamp: "payment_processed_stamp",
      paymentReceived: "payment_received",
      paymentReceivedStamp: "payment_received_stamp",
      completionDate: "completion_date",
      completionActionedByUuid: "completion_actioned_by_uuid",
      unsuccessfulDate: "unsuccessful_date",
      jobIsScheduledUntilStamp: "job_is_scheduled_until_stamp",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Job$ {
  /** @deprecated use `Job$inboundSchema` instead. */
  export const inboundSchema = Job$inboundSchema;
  /** @deprecated use `Job$outboundSchema` instead. */
  export const outboundSchema = Job$outboundSchema;
  /** @deprecated use `Job$Outbound` instead. */
  export type Outbound = Job$Outbound;
}

export function jobToJSON(job: Job): string {
  return JSON.stringify(Job$outboundSchema.parse(job));
}

export function jobFromJSON(
  jsonString: string,
): SafeParseResult<Job, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Job$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Job' from JSON`,
  );
}
