/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Record active/deleted flag.  Valid values are [0,1]
 */
export const JobPaymentActive = {
  Zero: 0,
  One: 1,
} as const;
/**
 * Record active/deleted flag.  Valid values are [0,1]
 */
export type JobPaymentActive = ClosedEnum<typeof JobPaymentActive>;

/**
 * Boolean flag indicating whether this payment represents a deposit against future work (true) rather than a payment for completed work (false). Read-only in the API. (Read only).  Valid values are [0,1]
 */
export const IsDeposit = {
  Zero: 0,
  One: 1,
} as const;
/**
 * Boolean flag indicating whether this payment represents a deposit against future work (true) rather than a payment for completed work (false). Read-only in the API. (Read only).  Valid values are [0,1]
 */
export type IsDeposit = ClosedEnum<typeof IsDeposit>;

/** @internal */
export const JobPaymentActive$inboundSchema: z.ZodNativeEnum<
  typeof JobPaymentActive
> = z.nativeEnum(JobPaymentActive);

/** @internal */
export const JobPaymentActive$outboundSchema: z.ZodNativeEnum<
  typeof JobPaymentActive
> = JobPaymentActive$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace JobPaymentActive$ {
  /** @deprecated use `JobPaymentActive$inboundSchema` instead. */
  export const inboundSchema = JobPaymentActive$inboundSchema;
  /** @deprecated use `JobPaymentActive$outboundSchema` instead. */
  export const outboundSchema = JobPaymentActive$outboundSchema;
}

/** @internal */
export const IsDeposit$inboundSchema: z.ZodNativeEnum<typeof IsDeposit> = z
  .nativeEnum(IsDeposit);

/** @internal */
export const IsDeposit$outboundSchema: z.ZodNativeEnum<typeof IsDeposit> =
  IsDeposit$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IsDeposit$ {
  /** @deprecated use `IsDeposit$inboundSchema` instead. */
  export const inboundSchema = IsDeposit$inboundSchema;
  /** @deprecated use `IsDeposit$outboundSchema` instead. */
  export const outboundSchema = IsDeposit$outboundSchema;
}

export type JobPayment = {
  /**
   * Unique identifier for this record
   */
  uuid?: string | undefined;
  /**
   * Record active/deleted flag.  Valid values are [0,1]
   */
  active?: JobPaymentActive | undefined;
  /**
   * Timestamp at which record was last modified
   */
  editDate?: any | undefined;
  jobUuid?: string | undefined;
  actionedByUuid?: string | undefined;
  timestamp?: string | undefined;
  amount?: string | undefined;
  method?: string | undefined;
  note?: string | undefined;
  attachmentUuid?: string | undefined;
  /**
   * Boolean flag indicating whether this payment represents a deposit against future work (true) rather than a payment for completed work (false). Read-only in the API. (Read only).  Valid values are [0,1]
   */
  isDeposit?: IsDeposit | undefined;
};

export type JobPaymentInput = {
  /**
   * Unique identifier for this record
   */
  uuid?: string | undefined;
  /**
   * Record active/deleted flag.  Valid values are [0,1]
   */
  active?: JobPaymentActive | undefined;
  jobUuid?: string | undefined;
  actionedByUuid?: string | undefined;
  timestamp?: string | undefined;
  amount?: string | undefined;
  method?: string | undefined;
  note?: string | undefined;
  attachmentUuid?: string | undefined;
  /**
   * Boolean flag indicating whether this payment represents a deposit against future work (true) rather than a payment for completed work (false). Read-only in the API. (Read only).  Valid values are [0,1]
   */
  isDeposit?: IsDeposit | undefined;
};

/** @internal */
export const JobPayment$inboundSchema: z.ZodType<
  JobPayment,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string().optional(),
  active: JobPaymentActive$inboundSchema.default(1),
  edit_date: z.any().optional(),
  job_uuid: z.string().optional(),
  actioned_by_uuid: z.string().optional(),
  timestamp: z.string().optional(),
  amount: z.string().optional(),
  method: z.string().optional(),
  note: z.string().optional(),
  attachment_uuid: z.string().optional(),
  is_deposit: IsDeposit$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "edit_date": "editDate",
    "job_uuid": "jobUuid",
    "actioned_by_uuid": "actionedByUuid",
    "attachment_uuid": "attachmentUuid",
    "is_deposit": "isDeposit",
  });
});

/** @internal */
export type JobPayment$Outbound = {
  uuid?: string | undefined;
  active: number;
  edit_date?: any | undefined;
  job_uuid?: string | undefined;
  actioned_by_uuid?: string | undefined;
  timestamp?: string | undefined;
  amount?: string | undefined;
  method?: string | undefined;
  note?: string | undefined;
  attachment_uuid?: string | undefined;
  is_deposit?: number | undefined;
};

/** @internal */
export const JobPayment$outboundSchema: z.ZodType<
  JobPayment$Outbound,
  z.ZodTypeDef,
  JobPayment
> = z.object({
  uuid: z.string().optional(),
  active: JobPaymentActive$outboundSchema.default(1),
  editDate: z.any().optional(),
  jobUuid: z.string().optional(),
  actionedByUuid: z.string().optional(),
  timestamp: z.string().optional(),
  amount: z.string().optional(),
  method: z.string().optional(),
  note: z.string().optional(),
  attachmentUuid: z.string().optional(),
  isDeposit: IsDeposit$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    editDate: "edit_date",
    jobUuid: "job_uuid",
    actionedByUuid: "actioned_by_uuid",
    attachmentUuid: "attachment_uuid",
    isDeposit: "is_deposit",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace JobPayment$ {
  /** @deprecated use `JobPayment$inboundSchema` instead. */
  export const inboundSchema = JobPayment$inboundSchema;
  /** @deprecated use `JobPayment$outboundSchema` instead. */
  export const outboundSchema = JobPayment$outboundSchema;
  /** @deprecated use `JobPayment$Outbound` instead. */
  export type Outbound = JobPayment$Outbound;
}

export function jobPaymentToJSON(jobPayment: JobPayment): string {
  return JSON.stringify(JobPayment$outboundSchema.parse(jobPayment));
}

export function jobPaymentFromJSON(
  jsonString: string,
): SafeParseResult<JobPayment, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => JobPayment$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'JobPayment' from JSON`,
  );
}

/** @internal */
export const JobPaymentInput$inboundSchema: z.ZodType<
  JobPaymentInput,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string().optional(),
  active: JobPaymentActive$inboundSchema.default(1),
  job_uuid: z.string().optional(),
  actioned_by_uuid: z.string().optional(),
  timestamp: z.string().optional(),
  amount: z.string().optional(),
  method: z.string().optional(),
  note: z.string().optional(),
  attachment_uuid: z.string().optional(),
  is_deposit: IsDeposit$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "job_uuid": "jobUuid",
    "actioned_by_uuid": "actionedByUuid",
    "attachment_uuid": "attachmentUuid",
    "is_deposit": "isDeposit",
  });
});

/** @internal */
export type JobPaymentInput$Outbound = {
  uuid?: string | undefined;
  active: number;
  job_uuid?: string | undefined;
  actioned_by_uuid?: string | undefined;
  timestamp?: string | undefined;
  amount?: string | undefined;
  method?: string | undefined;
  note?: string | undefined;
  attachment_uuid?: string | undefined;
  is_deposit?: number | undefined;
};

/** @internal */
export const JobPaymentInput$outboundSchema: z.ZodType<
  JobPaymentInput$Outbound,
  z.ZodTypeDef,
  JobPaymentInput
> = z.object({
  uuid: z.string().optional(),
  active: JobPaymentActive$outboundSchema.default(1),
  jobUuid: z.string().optional(),
  actionedByUuid: z.string().optional(),
  timestamp: z.string().optional(),
  amount: z.string().optional(),
  method: z.string().optional(),
  note: z.string().optional(),
  attachmentUuid: z.string().optional(),
  isDeposit: IsDeposit$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    jobUuid: "job_uuid",
    actionedByUuid: "actioned_by_uuid",
    attachmentUuid: "attachment_uuid",
    isDeposit: "is_deposit",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace JobPaymentInput$ {
  /** @deprecated use `JobPaymentInput$inboundSchema` instead. */
  export const inboundSchema = JobPaymentInput$inboundSchema;
  /** @deprecated use `JobPaymentInput$outboundSchema` instead. */
  export const outboundSchema = JobPaymentInput$outboundSchema;
  /** @deprecated use `JobPaymentInput$Outbound` instead. */
  export type Outbound = JobPaymentInput$Outbound;
}

export function jobPaymentInputToJSON(
  jobPaymentInput: JobPaymentInput,
): string {
  return JSON.stringify(JobPaymentInput$outboundSchema.parse(jobPaymentInput));
}

export function jobPaymentInputFromJSON(
  jsonString: string,
): SafeParseResult<JobPaymentInput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => JobPaymentInput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'JobPaymentInput' from JSON`,
  );
}
