/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Record active/deleted flag.  Valid values are [0,1]
 */
export const FormResponseActive = {
  Zero: 0,
  One: 1,
} as const;
/**
 * Record active/deleted flag.  Valid values are [0,1]
 */
export type FormResponseActive = ClosedEnum<typeof FormResponseActive>;

export type FormResponse = {
  /**
   * UUID of the form used to generate this form response. Links to a specific form in the system that defines the fields to be gathered.
   */
  formUuid?: string | undefined;
  /**
   * UUID of the staff member who completed this FormResponse.
   */
  staffUuid?: string | undefined;
  /**
   * The object type that this form response is associated with. Common values include 'job', 'asset', or 'company'. Works in conjunction with regarding_object_uuid to link this form response to a specific record in the system.
   */
  regardingObject?: string | undefined;
  /**
   * UUID of the specific record this form response is linked to. For example, if regarding_object is 'job', this will be the UUID of the specific job. This creates a relationship between the form response and the object it refers to.
   */
  regardingObjectUuid?: string | undefined;
  /**
   * JSON array of form answers captured at submission time.
   */
  fieldData?: string | undefined;
  /**
   * Date and time when the form was submitted/completed. Used for sorting and displaying form responses chronologically. Format is YYYY-MM-DD HH:MM:SS in UTC timezone.
   */
  timestamp?: string | undefined;
  /**
   * UUID of the staff member who completed or submitted this form. Identifies which user filled out the form. Used for tracking form submission history and staff accountability.
   */
  formByStaffUuid?: string | undefined;
  /**
   * UUID of the document attachment generated from this form response. When a form is completed, it can generate a PDF document which is stored as an attachment. This field links to that generated document attachment.
   */
  documentAttachmentUuid?: string | undefined;
  /**
   * UUID of the Asset this form response is related to. Used when the FormResponsepertains to a specific asset, such as equipment inspections, maintenance checklists, or asset condition reports.
   */
  assetUuid?: string | undefined;
  /**
   * Unique identifier for this record
   */
  uuid?: string | undefined;
  /**
   * Record active/deleted flag.  Valid values are [0,1]
   */
  active?: FormResponseActive | undefined;
  /**
   * Timestamp at which record was last modified
   */
  editDate?: any | undefined;
};

/** @internal */
export const FormResponseActive$inboundSchema: z.ZodNativeEnum<
  typeof FormResponseActive
> = z.nativeEnum(FormResponseActive);

/** @internal */
export const FormResponseActive$outboundSchema: z.ZodNativeEnum<
  typeof FormResponseActive
> = FormResponseActive$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FormResponseActive$ {
  /** @deprecated use `FormResponseActive$inboundSchema` instead. */
  export const inboundSchema = FormResponseActive$inboundSchema;
  /** @deprecated use `FormResponseActive$outboundSchema` instead. */
  export const outboundSchema = FormResponseActive$outboundSchema;
}

/** @internal */
export const FormResponse$inboundSchema: z.ZodType<
  FormResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  form_uuid: z.string().optional(),
  staff_uuid: z.string().optional(),
  regarding_object: z.string().optional(),
  regarding_object_uuid: z.string().optional(),
  field_data: z.string().optional(),
  timestamp: z.string().optional(),
  form_by_staff_uuid: z.string().optional(),
  document_attachment_uuid: z.string().optional(),
  asset_uuid: z.string().optional(),
  uuid: z.string().optional(),
  active: FormResponseActive$inboundSchema.default(1),
  edit_date: z.any().optional(),
}).transform((v) => {
  return remap$(v, {
    "form_uuid": "formUuid",
    "staff_uuid": "staffUuid",
    "regarding_object": "regardingObject",
    "regarding_object_uuid": "regardingObjectUuid",
    "field_data": "fieldData",
    "form_by_staff_uuid": "formByStaffUuid",
    "document_attachment_uuid": "documentAttachmentUuid",
    "asset_uuid": "assetUuid",
    "edit_date": "editDate",
  });
});

/** @internal */
export type FormResponse$Outbound = {
  form_uuid?: string | undefined;
  staff_uuid?: string | undefined;
  regarding_object?: string | undefined;
  regarding_object_uuid?: string | undefined;
  field_data?: string | undefined;
  timestamp?: string | undefined;
  form_by_staff_uuid?: string | undefined;
  document_attachment_uuid?: string | undefined;
  asset_uuid?: string | undefined;
  uuid?: string | undefined;
  active: number;
  edit_date?: any | undefined;
};

/** @internal */
export const FormResponse$outboundSchema: z.ZodType<
  FormResponse$Outbound,
  z.ZodTypeDef,
  FormResponse
> = z.object({
  formUuid: z.string().optional(),
  staffUuid: z.string().optional(),
  regardingObject: z.string().optional(),
  regardingObjectUuid: z.string().optional(),
  fieldData: z.string().optional(),
  timestamp: z.string().optional(),
  formByStaffUuid: z.string().optional(),
  documentAttachmentUuid: z.string().optional(),
  assetUuid: z.string().optional(),
  uuid: z.string().optional(),
  active: FormResponseActive$outboundSchema.default(1),
  editDate: z.any().optional(),
}).transform((v) => {
  return remap$(v, {
    formUuid: "form_uuid",
    staffUuid: "staff_uuid",
    regardingObject: "regarding_object",
    regardingObjectUuid: "regarding_object_uuid",
    fieldData: "field_data",
    formByStaffUuid: "form_by_staff_uuid",
    documentAttachmentUuid: "document_attachment_uuid",
    assetUuid: "asset_uuid",
    editDate: "edit_date",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FormResponse$ {
  /** @deprecated use `FormResponse$inboundSchema` instead. */
  export const inboundSchema = FormResponse$inboundSchema;
  /** @deprecated use `FormResponse$outboundSchema` instead. */
  export const outboundSchema = FormResponse$outboundSchema;
  /** @deprecated use `FormResponse$Outbound` instead. */
  export type Outbound = FormResponse$Outbound;
}

export function formResponseToJSON(formResponse: FormResponse): string {
  return JSON.stringify(FormResponse$outboundSchema.parse(formResponse));
}

export function formResponseFromJSON(
  jsonString: string,
): SafeParseResult<FormResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FormResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FormResponse' from JSON`,
  );
}
