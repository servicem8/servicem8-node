/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Record active/deleted flag.  Valid values are [0,1]
 */
export const JobChecklistActive = {
  Zero: 0,
  One: 1,
} as const;
/**
 * Record active/deleted flag.  Valid values are [0,1]
 */
export type JobChecklistActive = ClosedEnum<typeof JobChecklistActive>;

export const JobChecklistBaseDate = {
  JobCreateTime: "JOB_CREATE_TIME",
  NextBookingTime: "NEXT_BOOKING_TIME",
} as const;
export type JobChecklistBaseDate = ClosedEnum<typeof JobChecklistBaseDate>;

export const JobChecklistUnit = {
  Day: "DAY",
  Hour: "HOUR",
  Minute: "MINUTE",
} as const;
export type JobChecklistUnit = ClosedEnum<typeof JobChecklistUnit>;

export type JobChecklistRelativeDateTime = {
  baseDate: JobChecklistBaseDate;
  unit: JobChecklistUnit;
  /**
   * Number of units to add/subtract from base date. Negative quantities mean the reminder occurs before the base date. Reminders scheduled into the past will not occur.
   */
  quantity: number;
};

export type JobChecklistReminderData2 = {
  relativeDateTime: JobChecklistRelativeDateTime;
};

export type JobChecklistReminderDataUnion2 = JobChecklistReminderData2 | string;

export type JobChecklistReminderData1 = {
  absoluteDateTime: string;
};

export type JobChecklistReminderDataUnion1 = JobChecklistReminderData1 | string;

/**
 * JSON data containing additional information for the reminder. Format depends on the reminder_type. For ABSOLUTE_DATETIME, includes 'absoluteDateTime'. For RELATIVE_DATETIME, includes 'relativeDateTime' with 'baseDate', 'unit', and 'quantity'. Exposed via API as 'reminder_data'.
 */
export type JobChecklistReminderDataUnion3 =
  | JobChecklistReminderData1
  | string
  | JobChecklistReminderData2
  | string;

/**
 * If this checklist item is locked (read-only) and cannot be modified. This is set by the system when the checklist item is created from a Task or Network Request. (Read only).  Valid values are [0,1]
 */
export const IsLocked = {
  Zero: 0,
  One: 1,
} as const;
/**
 * If this checklist item is locked (read-only) and cannot be modified. This is set by the system when the checklist item is created from a Task or Network Request. (Read only).  Valid values are [0,1]
 */
export type IsLocked = ClosedEnum<typeof IsLocked>;

export type JobChecklist = {
  /**
   * Unique identifier for this record
   */
  uuid?: string | undefined;
  /**
   * Record active/deleted flag.  Valid values are [0,1]
   */
  active?: JobChecklistActive | undefined;
  /**
   * Timestamp at which record was last modified
   */
  editDate?: any | undefined;
  /**
   * UUID of the job this checklist item belongs to. This links the checklist item to a specific job in the system.
   */
  jobUuid?: string | undefined;
  /**
   * The name or description of the checklist item. This is displayed to users in the mobile app and web interface.
   */
  name?: string | undefined;
  /**
   * The section or category name under which this checklist item is grouped. This helps organize related checklist items together.
   */
  sectionName?: string | undefined;
  /**
   * The type of checklist item. Valid values are: 'Todo', 'Asset', 'Photo', 'Form', and 'Document'. Defaults to 'Todo' if not specified. This determines the functionality and appearance of the checklist item.
   */
  itemType?: string | undefined;
  /**
   * A numeric value determining the order in which checklist items appear in the user interface. Lower values appear first. Used to customize the display sequence of items.
   */
  sortOrder?: number | undefined;
  /**
   * The date and time when the checklist item was marked as completed. Empty or '0000-00-00 00:00:00' indicates the item is not completed.
   */
  completedTimestamp?: string | undefined;
  /**
   * UUID of the staff member who completed this checklist item. References a Staff object. Empty if the item is not completed.
   */
  completedByStaffUuid?: string | undefined;
  /**
   * UUID of the job check-in during which this checklist item was completed. This links the checklist completion to a specific check-in event in the job history.
   */
  completedDuringCheckinUuid?: string | undefined;
  /**
   * The type of reminder associated with this checklist item. Valid values are: '' (no reminder), 'CHECK_IN', 'NAVIGATE', 'CHECK_OUT', 'ABSOLUTE_DATETIME', or 'RELATIVE_DATETIME'. Determines when the system will remind users about this checklist item.
   */
  reminderType?: string | undefined;
  /**
   * JSON data containing additional information for the reminder. Format depends on the reminder_type. For ABSOLUTE_DATETIME, includes 'absoluteDateTime'. For RELATIVE_DATETIME, includes 'relativeDateTime' with 'baseDate', 'unit', and 'quantity'. Exposed via API as 'reminder_data'.
   */
  reminderData?:
    | JobChecklistReminderData1
    | string
    | JobChecklistReminderData2
    | string
    | undefined;
  /**
   * The type of object which this checklist item is related to. For example, for Form checklists, this will be 'Form'.
   */
  regardingObject?: string | undefined;
  /**
   * The UUID of the object which this checklists item is related to. For example, for Form checklists, this is the UUID of the Form that must be completed to complete the checklist item.
   */
  regardingObjectUuid?: string | undefined;
  /**
   * The type of object which completes this checklist item. For example, for Form checklists, this will be 'FormResponse'.
   */
  fulfilledByObjectName?: string | undefined;
  /**
   * The UUID of the object which completes this checklist item. For example, for Form checklists, this references the UUID of a FormResponse record.
   */
  fulfilledByObjectUuid?: string | undefined;
  /**
   * JSON array of staff UUIDs to whom this checklist item is assigned. Determines which staff members are responsible for completing this checklist item. Currently limited to a maximum of 1 staff member.
   */
  assignedToStaffUuids?: Array<string> | undefined;
  /**
   * If this checklist item is locked (read-only) and cannot be modified. This is set by the system when the checklist item is created from a Task or Network Request. (Read only).  Valid values are [0,1]
   */
  isLocked?: IsLocked | undefined;
  /**
   * The timestamp when the checklist item was assigned to the staff member. (Read only)
   */
  assignedTimestamp?: string | undefined;
  /**
   * The UUID of the staff member who assigned the checklist item to the staff member. (Read only)
   */
  assignedByStaffUuid?: string | undefined;
};

/** @internal */
export const JobChecklistActive$inboundSchema: z.ZodNativeEnum<
  typeof JobChecklistActive
> = z.nativeEnum(JobChecklistActive);

/** @internal */
export const JobChecklistActive$outboundSchema: z.ZodNativeEnum<
  typeof JobChecklistActive
> = JobChecklistActive$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace JobChecklistActive$ {
  /** @deprecated use `JobChecklistActive$inboundSchema` instead. */
  export const inboundSchema = JobChecklistActive$inboundSchema;
  /** @deprecated use `JobChecklistActive$outboundSchema` instead. */
  export const outboundSchema = JobChecklistActive$outboundSchema;
}

/** @internal */
export const JobChecklistBaseDate$inboundSchema: z.ZodNativeEnum<
  typeof JobChecklistBaseDate
> = z.nativeEnum(JobChecklistBaseDate);

/** @internal */
export const JobChecklistBaseDate$outboundSchema: z.ZodNativeEnum<
  typeof JobChecklistBaseDate
> = JobChecklistBaseDate$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace JobChecklistBaseDate$ {
  /** @deprecated use `JobChecklistBaseDate$inboundSchema` instead. */
  export const inboundSchema = JobChecklistBaseDate$inboundSchema;
  /** @deprecated use `JobChecklistBaseDate$outboundSchema` instead. */
  export const outboundSchema = JobChecklistBaseDate$outboundSchema;
}

/** @internal */
export const JobChecklistUnit$inboundSchema: z.ZodNativeEnum<
  typeof JobChecklistUnit
> = z.nativeEnum(JobChecklistUnit);

/** @internal */
export const JobChecklistUnit$outboundSchema: z.ZodNativeEnum<
  typeof JobChecklistUnit
> = JobChecklistUnit$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace JobChecklistUnit$ {
  /** @deprecated use `JobChecklistUnit$inboundSchema` instead. */
  export const inboundSchema = JobChecklistUnit$inboundSchema;
  /** @deprecated use `JobChecklistUnit$outboundSchema` instead. */
  export const outboundSchema = JobChecklistUnit$outboundSchema;
}

/** @internal */
export const JobChecklistRelativeDateTime$inboundSchema: z.ZodType<
  JobChecklistRelativeDateTime,
  z.ZodTypeDef,
  unknown
> = z.object({
  baseDate: JobChecklistBaseDate$inboundSchema,
  unit: JobChecklistUnit$inboundSchema,
  quantity: z.number().int(),
});

/** @internal */
export type JobChecklistRelativeDateTime$Outbound = {
  baseDate: string;
  unit: string;
  quantity: number;
};

/** @internal */
export const JobChecklistRelativeDateTime$outboundSchema: z.ZodType<
  JobChecklistRelativeDateTime$Outbound,
  z.ZodTypeDef,
  JobChecklistRelativeDateTime
> = z.object({
  baseDate: JobChecklistBaseDate$outboundSchema,
  unit: JobChecklistUnit$outboundSchema,
  quantity: z.number().int(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace JobChecklistRelativeDateTime$ {
  /** @deprecated use `JobChecklistRelativeDateTime$inboundSchema` instead. */
  export const inboundSchema = JobChecklistRelativeDateTime$inboundSchema;
  /** @deprecated use `JobChecklistRelativeDateTime$outboundSchema` instead. */
  export const outboundSchema = JobChecklistRelativeDateTime$outboundSchema;
  /** @deprecated use `JobChecklistRelativeDateTime$Outbound` instead. */
  export type Outbound = JobChecklistRelativeDateTime$Outbound;
}

export function jobChecklistRelativeDateTimeToJSON(
  jobChecklistRelativeDateTime: JobChecklistRelativeDateTime,
): string {
  return JSON.stringify(
    JobChecklistRelativeDateTime$outboundSchema.parse(
      jobChecklistRelativeDateTime,
    ),
  );
}

export function jobChecklistRelativeDateTimeFromJSON(
  jsonString: string,
): SafeParseResult<JobChecklistRelativeDateTime, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => JobChecklistRelativeDateTime$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'JobChecklistRelativeDateTime' from JSON`,
  );
}

/** @internal */
export const JobChecklistReminderData2$inboundSchema: z.ZodType<
  JobChecklistReminderData2,
  z.ZodTypeDef,
  unknown
> = z.object({
  relativeDateTime: z.lazy(() => JobChecklistRelativeDateTime$inboundSchema),
});

/** @internal */
export type JobChecklistReminderData2$Outbound = {
  relativeDateTime: JobChecklistRelativeDateTime$Outbound;
};

/** @internal */
export const JobChecklistReminderData2$outboundSchema: z.ZodType<
  JobChecklistReminderData2$Outbound,
  z.ZodTypeDef,
  JobChecklistReminderData2
> = z.object({
  relativeDateTime: z.lazy(() => JobChecklistRelativeDateTime$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace JobChecklistReminderData2$ {
  /** @deprecated use `JobChecklistReminderData2$inboundSchema` instead. */
  export const inboundSchema = JobChecklistReminderData2$inboundSchema;
  /** @deprecated use `JobChecklistReminderData2$outboundSchema` instead. */
  export const outboundSchema = JobChecklistReminderData2$outboundSchema;
  /** @deprecated use `JobChecklistReminderData2$Outbound` instead. */
  export type Outbound = JobChecklistReminderData2$Outbound;
}

export function jobChecklistReminderData2ToJSON(
  jobChecklistReminderData2: JobChecklistReminderData2,
): string {
  return JSON.stringify(
    JobChecklistReminderData2$outboundSchema.parse(jobChecklistReminderData2),
  );
}

export function jobChecklistReminderData2FromJSON(
  jsonString: string,
): SafeParseResult<JobChecklistReminderData2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => JobChecklistReminderData2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'JobChecklistReminderData2' from JSON`,
  );
}

/** @internal */
export const JobChecklistReminderDataUnion2$inboundSchema: z.ZodType<
  JobChecklistReminderDataUnion2,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => JobChecklistReminderData2$inboundSchema),
  z.string(),
]);

/** @internal */
export type JobChecklistReminderDataUnion2$Outbound =
  | JobChecklistReminderData2$Outbound
  | string;

/** @internal */
export const JobChecklistReminderDataUnion2$outboundSchema: z.ZodType<
  JobChecklistReminderDataUnion2$Outbound,
  z.ZodTypeDef,
  JobChecklistReminderDataUnion2
> = z.union([
  z.lazy(() => JobChecklistReminderData2$outboundSchema),
  z.string(),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace JobChecklistReminderDataUnion2$ {
  /** @deprecated use `JobChecklistReminderDataUnion2$inboundSchema` instead. */
  export const inboundSchema = JobChecklistReminderDataUnion2$inboundSchema;
  /** @deprecated use `JobChecklistReminderDataUnion2$outboundSchema` instead. */
  export const outboundSchema = JobChecklistReminderDataUnion2$outboundSchema;
  /** @deprecated use `JobChecklistReminderDataUnion2$Outbound` instead. */
  export type Outbound = JobChecklistReminderDataUnion2$Outbound;
}

export function jobChecklistReminderDataUnion2ToJSON(
  jobChecklistReminderDataUnion2: JobChecklistReminderDataUnion2,
): string {
  return JSON.stringify(
    JobChecklistReminderDataUnion2$outboundSchema.parse(
      jobChecklistReminderDataUnion2,
    ),
  );
}

export function jobChecklistReminderDataUnion2FromJSON(
  jsonString: string,
): SafeParseResult<JobChecklistReminderDataUnion2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => JobChecklistReminderDataUnion2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'JobChecklistReminderDataUnion2' from JSON`,
  );
}

/** @internal */
export const JobChecklistReminderData1$inboundSchema: z.ZodType<
  JobChecklistReminderData1,
  z.ZodTypeDef,
  unknown
> = z.object({
  absoluteDateTime: z.string(),
});

/** @internal */
export type JobChecklistReminderData1$Outbound = {
  absoluteDateTime: string;
};

/** @internal */
export const JobChecklistReminderData1$outboundSchema: z.ZodType<
  JobChecklistReminderData1$Outbound,
  z.ZodTypeDef,
  JobChecklistReminderData1
> = z.object({
  absoluteDateTime: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace JobChecklistReminderData1$ {
  /** @deprecated use `JobChecklistReminderData1$inboundSchema` instead. */
  export const inboundSchema = JobChecklistReminderData1$inboundSchema;
  /** @deprecated use `JobChecklistReminderData1$outboundSchema` instead. */
  export const outboundSchema = JobChecklistReminderData1$outboundSchema;
  /** @deprecated use `JobChecklistReminderData1$Outbound` instead. */
  export type Outbound = JobChecklistReminderData1$Outbound;
}

export function jobChecklistReminderData1ToJSON(
  jobChecklistReminderData1: JobChecklistReminderData1,
): string {
  return JSON.stringify(
    JobChecklistReminderData1$outboundSchema.parse(jobChecklistReminderData1),
  );
}

export function jobChecklistReminderData1FromJSON(
  jsonString: string,
): SafeParseResult<JobChecklistReminderData1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => JobChecklistReminderData1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'JobChecklistReminderData1' from JSON`,
  );
}

/** @internal */
export const JobChecklistReminderDataUnion1$inboundSchema: z.ZodType<
  JobChecklistReminderDataUnion1,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => JobChecklistReminderData1$inboundSchema),
  z.string(),
]);

/** @internal */
export type JobChecklistReminderDataUnion1$Outbound =
  | JobChecklistReminderData1$Outbound
  | string;

/** @internal */
export const JobChecklistReminderDataUnion1$outboundSchema: z.ZodType<
  JobChecklistReminderDataUnion1$Outbound,
  z.ZodTypeDef,
  JobChecklistReminderDataUnion1
> = z.union([
  z.lazy(() => JobChecklistReminderData1$outboundSchema),
  z.string(),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace JobChecklistReminderDataUnion1$ {
  /** @deprecated use `JobChecklistReminderDataUnion1$inboundSchema` instead. */
  export const inboundSchema = JobChecklistReminderDataUnion1$inboundSchema;
  /** @deprecated use `JobChecklistReminderDataUnion1$outboundSchema` instead. */
  export const outboundSchema = JobChecklistReminderDataUnion1$outboundSchema;
  /** @deprecated use `JobChecklistReminderDataUnion1$Outbound` instead. */
  export type Outbound = JobChecklistReminderDataUnion1$Outbound;
}

export function jobChecklistReminderDataUnion1ToJSON(
  jobChecklistReminderDataUnion1: JobChecklistReminderDataUnion1,
): string {
  return JSON.stringify(
    JobChecklistReminderDataUnion1$outboundSchema.parse(
      jobChecklistReminderDataUnion1,
    ),
  );
}

export function jobChecklistReminderDataUnion1FromJSON(
  jsonString: string,
): SafeParseResult<JobChecklistReminderDataUnion1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => JobChecklistReminderDataUnion1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'JobChecklistReminderDataUnion1' from JSON`,
  );
}

/** @internal */
export const JobChecklistReminderDataUnion3$inboundSchema: z.ZodType<
  JobChecklistReminderDataUnion3,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.union([z.lazy(() => JobChecklistReminderData1$inboundSchema), z.string()]),
  z.union([z.lazy(() => JobChecklistReminderData2$inboundSchema), z.string()]),
]);

/** @internal */
export type JobChecklistReminderDataUnion3$Outbound =
  | JobChecklistReminderData1$Outbound
  | string
  | JobChecklistReminderData2$Outbound
  | string;

/** @internal */
export const JobChecklistReminderDataUnion3$outboundSchema: z.ZodType<
  JobChecklistReminderDataUnion3$Outbound,
  z.ZodTypeDef,
  JobChecklistReminderDataUnion3
> = z.union([
  z.union([z.lazy(() => JobChecklistReminderData1$outboundSchema), z.string()]),
  z.union([z.lazy(() => JobChecklistReminderData2$outboundSchema), z.string()]),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace JobChecklistReminderDataUnion3$ {
  /** @deprecated use `JobChecklistReminderDataUnion3$inboundSchema` instead. */
  export const inboundSchema = JobChecklistReminderDataUnion3$inboundSchema;
  /** @deprecated use `JobChecklistReminderDataUnion3$outboundSchema` instead. */
  export const outboundSchema = JobChecklistReminderDataUnion3$outboundSchema;
  /** @deprecated use `JobChecklistReminderDataUnion3$Outbound` instead. */
  export type Outbound = JobChecklistReminderDataUnion3$Outbound;
}

export function jobChecklistReminderDataUnion3ToJSON(
  jobChecklistReminderDataUnion3: JobChecklistReminderDataUnion3,
): string {
  return JSON.stringify(
    JobChecklistReminderDataUnion3$outboundSchema.parse(
      jobChecklistReminderDataUnion3,
    ),
  );
}

export function jobChecklistReminderDataUnion3FromJSON(
  jsonString: string,
): SafeParseResult<JobChecklistReminderDataUnion3, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => JobChecklistReminderDataUnion3$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'JobChecklistReminderDataUnion3' from JSON`,
  );
}

/** @internal */
export const IsLocked$inboundSchema: z.ZodNativeEnum<typeof IsLocked> = z
  .nativeEnum(IsLocked);

/** @internal */
export const IsLocked$outboundSchema: z.ZodNativeEnum<typeof IsLocked> =
  IsLocked$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IsLocked$ {
  /** @deprecated use `IsLocked$inboundSchema` instead. */
  export const inboundSchema = IsLocked$inboundSchema;
  /** @deprecated use `IsLocked$outboundSchema` instead. */
  export const outboundSchema = IsLocked$outboundSchema;
}

/** @internal */
export const JobChecklist$inboundSchema: z.ZodType<
  JobChecklist,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string().optional(),
  active: JobChecklistActive$inboundSchema.default(1),
  edit_date: z.any().optional(),
  job_uuid: z.string().optional(),
  name: z.string().optional(),
  section_name: z.string().optional(),
  item_type: z.string().optional(),
  sort_order: z.number().int().optional(),
  completed_timestamp: z.string().optional(),
  completed_by_staff_uuid: z.string().optional(),
  completed_during_checkin_uuid: z.string().optional(),
  reminder_type: z.string().optional(),
  reminder_data: z.union([
    z.union([
      z.lazy(() => JobChecklistReminderData1$inboundSchema),
      z.string(),
    ]),
    z.union([
      z.lazy(() => JobChecklistReminderData2$inboundSchema),
      z.string(),
    ]),
  ]).optional(),
  regarding_object: z.string().optional(),
  regarding_object_uuid: z.string().optional(),
  fulfilled_by_object_name: z.string().optional(),
  fulfilled_by_object_uuid: z.string().optional(),
  assigned_to_staff_uuids: z.array(z.string()).optional(),
  is_locked: IsLocked$inboundSchema.optional(),
  assigned_timestamp: z.string().optional(),
  assigned_by_staff_uuid: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "edit_date": "editDate",
    "job_uuid": "jobUuid",
    "section_name": "sectionName",
    "item_type": "itemType",
    "sort_order": "sortOrder",
    "completed_timestamp": "completedTimestamp",
    "completed_by_staff_uuid": "completedByStaffUuid",
    "completed_during_checkin_uuid": "completedDuringCheckinUuid",
    "reminder_type": "reminderType",
    "reminder_data": "reminderData",
    "regarding_object": "regardingObject",
    "regarding_object_uuid": "regardingObjectUuid",
    "fulfilled_by_object_name": "fulfilledByObjectName",
    "fulfilled_by_object_uuid": "fulfilledByObjectUuid",
    "assigned_to_staff_uuids": "assignedToStaffUuids",
    "is_locked": "isLocked",
    "assigned_timestamp": "assignedTimestamp",
    "assigned_by_staff_uuid": "assignedByStaffUuid",
  });
});

/** @internal */
export type JobChecklist$Outbound = {
  uuid?: string | undefined;
  active: number;
  edit_date?: any | undefined;
  job_uuid?: string | undefined;
  name?: string | undefined;
  section_name?: string | undefined;
  item_type?: string | undefined;
  sort_order?: number | undefined;
  completed_timestamp?: string | undefined;
  completed_by_staff_uuid?: string | undefined;
  completed_during_checkin_uuid?: string | undefined;
  reminder_type?: string | undefined;
  reminder_data?:
    | JobChecklistReminderData1$Outbound
    | string
    | JobChecklistReminderData2$Outbound
    | string
    | undefined;
  regarding_object?: string | undefined;
  regarding_object_uuid?: string | undefined;
  fulfilled_by_object_name?: string | undefined;
  fulfilled_by_object_uuid?: string | undefined;
  assigned_to_staff_uuids?: Array<string> | undefined;
  is_locked?: number | undefined;
  assigned_timestamp?: string | undefined;
  assigned_by_staff_uuid?: string | undefined;
};

/** @internal */
export const JobChecklist$outboundSchema: z.ZodType<
  JobChecklist$Outbound,
  z.ZodTypeDef,
  JobChecklist
> = z.object({
  uuid: z.string().optional(),
  active: JobChecklistActive$outboundSchema.default(1),
  editDate: z.any().optional(),
  jobUuid: z.string().optional(),
  name: z.string().optional(),
  sectionName: z.string().optional(),
  itemType: z.string().optional(),
  sortOrder: z.number().int().optional(),
  completedTimestamp: z.string().optional(),
  completedByStaffUuid: z.string().optional(),
  completedDuringCheckinUuid: z.string().optional(),
  reminderType: z.string().optional(),
  reminderData: z.union([
    z.union([
      z.lazy(() => JobChecklistReminderData1$outboundSchema),
      z.string(),
    ]),
    z.union([
      z.lazy(() => JobChecklistReminderData2$outboundSchema),
      z.string(),
    ]),
  ]).optional(),
  regardingObject: z.string().optional(),
  regardingObjectUuid: z.string().optional(),
  fulfilledByObjectName: z.string().optional(),
  fulfilledByObjectUuid: z.string().optional(),
  assignedToStaffUuids: z.array(z.string()).optional(),
  isLocked: IsLocked$outboundSchema.optional(),
  assignedTimestamp: z.string().optional(),
  assignedByStaffUuid: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    editDate: "edit_date",
    jobUuid: "job_uuid",
    sectionName: "section_name",
    itemType: "item_type",
    sortOrder: "sort_order",
    completedTimestamp: "completed_timestamp",
    completedByStaffUuid: "completed_by_staff_uuid",
    completedDuringCheckinUuid: "completed_during_checkin_uuid",
    reminderType: "reminder_type",
    reminderData: "reminder_data",
    regardingObject: "regarding_object",
    regardingObjectUuid: "regarding_object_uuid",
    fulfilledByObjectName: "fulfilled_by_object_name",
    fulfilledByObjectUuid: "fulfilled_by_object_uuid",
    assignedToStaffUuids: "assigned_to_staff_uuids",
    isLocked: "is_locked",
    assignedTimestamp: "assigned_timestamp",
    assignedByStaffUuid: "assigned_by_staff_uuid",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace JobChecklist$ {
  /** @deprecated use `JobChecklist$inboundSchema` instead. */
  export const inboundSchema = JobChecklist$inboundSchema;
  /** @deprecated use `JobChecklist$outboundSchema` instead. */
  export const outboundSchema = JobChecklist$outboundSchema;
  /** @deprecated use `JobChecklist$Outbound` instead. */
  export type Outbound = JobChecklist$Outbound;
}

export function jobChecklistToJSON(jobChecklist: JobChecklist): string {
  return JSON.stringify(JobChecklist$outboundSchema.parse(jobChecklist));
}

export function jobChecklistFromJSON(
  jsonString: string,
): SafeParseResult<JobChecklist, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => JobChecklist$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'JobChecklist' from JSON`,
  );
}
