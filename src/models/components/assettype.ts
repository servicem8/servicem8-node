/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Record active/deleted flag.  Valid values are [0,1]
 */
export const AssetTypeActive = {
  Zero: 0,
  One: 1,
} as const;
/**
 * Record active/deleted flag.  Valid values are [0,1]
 */
export type AssetTypeActive = ClosedEnum<typeof AssetTypeActive>;

/** @internal */
export const AssetTypeActive$inboundSchema: z.ZodNativeEnum<
  typeof AssetTypeActive
> = z.nativeEnum(AssetTypeActive);

/** @internal */
export const AssetTypeActive$outboundSchema: z.ZodNativeEnum<
  typeof AssetTypeActive
> = AssetTypeActive$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AssetTypeActive$ {
  /** @deprecated use `AssetTypeActive$inboundSchema` instead. */
  export const inboundSchema = AssetTypeActive$inboundSchema;
  /** @deprecated use `AssetTypeActive$outboundSchema` instead. */
  export const outboundSchema = AssetTypeActive$outboundSchema;
}

export type AssetType = {
  /**
   * Unique identifier for this record
   */
  uuid?: string | undefined;
  /**
   * Record active/deleted flag.  Valid values are [0,1]
   */
  active?: AssetTypeActive | undefined;
  /**
   * Timestamp at which record was last modified
   */
  editDate?: any | undefined;
  /**
   * The name of the asset type. Used to identify different categories of assets that can be tracked in the system. Examples might include 'Air Conditioner', 'Fire Extinguisher', etc.
   */
  name?: string | undefined;
};

export type AssetTypeInput = {
  /**
   * Unique identifier for this record
   */
  uuid?: string | undefined;
  /**
   * Record active/deleted flag.  Valid values are [0,1]
   */
  active?: AssetTypeActive | undefined;
  /**
   * The name of the asset type. Used to identify different categories of assets that can be tracked in the system. Examples might include 'Air Conditioner', 'Fire Extinguisher', etc.
   */
  name?: string | undefined;
};

/** @internal */
export const AssetType$inboundSchema: z.ZodType<
  AssetType,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string().optional(),
  active: AssetTypeActive$inboundSchema.default(1),
  edit_date: z.any().optional(),
  name: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "edit_date": "editDate",
  });
});

/** @internal */
export type AssetType$Outbound = {
  uuid?: string | undefined;
  active: number;
  edit_date?: any | undefined;
  name?: string | undefined;
};

/** @internal */
export const AssetType$outboundSchema: z.ZodType<
  AssetType$Outbound,
  z.ZodTypeDef,
  AssetType
> = z.object({
  uuid: z.string().optional(),
  active: AssetTypeActive$outboundSchema.default(1),
  editDate: z.any().optional(),
  name: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    editDate: "edit_date",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AssetType$ {
  /** @deprecated use `AssetType$inboundSchema` instead. */
  export const inboundSchema = AssetType$inboundSchema;
  /** @deprecated use `AssetType$outboundSchema` instead. */
  export const outboundSchema = AssetType$outboundSchema;
  /** @deprecated use `AssetType$Outbound` instead. */
  export type Outbound = AssetType$Outbound;
}

export function assetTypeToJSON(assetType: AssetType): string {
  return JSON.stringify(AssetType$outboundSchema.parse(assetType));
}

export function assetTypeFromJSON(
  jsonString: string,
): SafeParseResult<AssetType, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AssetType$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AssetType' from JSON`,
  );
}

/** @internal */
export const AssetTypeInput$inboundSchema: z.ZodType<
  AssetTypeInput,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string().optional(),
  active: AssetTypeActive$inboundSchema.default(1),
  name: z.string().optional(),
});

/** @internal */
export type AssetTypeInput$Outbound = {
  uuid?: string | undefined;
  active: number;
  name?: string | undefined;
};

/** @internal */
export const AssetTypeInput$outboundSchema: z.ZodType<
  AssetTypeInput$Outbound,
  z.ZodTypeDef,
  AssetTypeInput
> = z.object({
  uuid: z.string().optional(),
  active: AssetTypeActive$outboundSchema.default(1),
  name: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AssetTypeInput$ {
  /** @deprecated use `AssetTypeInput$inboundSchema` instead. */
  export const inboundSchema = AssetTypeInput$inboundSchema;
  /** @deprecated use `AssetTypeInput$outboundSchema` instead. */
  export const outboundSchema = AssetTypeInput$outboundSchema;
  /** @deprecated use `AssetTypeInput$Outbound` instead. */
  export type Outbound = AssetTypeInput$Outbound;
}

export function assetTypeInputToJSON(assetTypeInput: AssetTypeInput): string {
  return JSON.stringify(AssetTypeInput$outboundSchema.parse(assetTypeInput));
}

export function assetTypeInputFromJSON(
  jsonString: string,
): SafeParseResult<AssetTypeInput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AssetTypeInput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AssetTypeInput' from JSON`,
  );
}
