/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type JobPaymentCreate = {
  /**
   * UUID of the job this payment is associated with. Each payment must be linked to a valid job in the system.
   */
  jobUuid?: string | undefined;
  /**
   * UUID of the staff member who recorded or processed this payment. Used for tracking which staff member handled the transaction.
   */
  actionedByUuid?: string | undefined;
  /**
   * The date and time when this payment was recorded or processed. Format is YYYY-MM-DD HH:MM:SS. Used for payment reconciliation and reporting.
   */
  timestamp?: string | undefined;
  /**
   * The payment amount in the account's currency.
   */
  amount?: string | undefined;
  /**
   * The payment method used for this transaction. Examples include 'Cash', 'Credit Card', 'Bank Transfer', 'Stripe', etc.
   */
  method?: string | undefined;
  /**
   * Optional text field for storing additional information about the payment. Can be used to record reference numbers, transaction IDs, or other payment-specific details.
   */
  note?: string | undefined;
  /**
   * UUID linking to a stored attachment related to this payment, such as a receipt image. This is an optional reference to an Attachment record.
   */
  attachmentUuid?: string | undefined;
  /**
   * Unique identifier for this record
   */
  uuid?: string | undefined;
};

/** @internal */
export const JobPaymentCreate$inboundSchema: z.ZodType<
  JobPaymentCreate,
  z.ZodTypeDef,
  unknown
> = z.object({
  job_uuid: z.string().optional(),
  actioned_by_uuid: z.string().optional(),
  timestamp: z.string().optional(),
  amount: z.string().optional(),
  method: z.string().optional(),
  note: z.string().optional(),
  attachment_uuid: z.string().optional(),
  uuid: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "job_uuid": "jobUuid",
    "actioned_by_uuid": "actionedByUuid",
    "attachment_uuid": "attachmentUuid",
  });
});

/** @internal */
export type JobPaymentCreate$Outbound = {
  job_uuid?: string | undefined;
  actioned_by_uuid?: string | undefined;
  timestamp?: string | undefined;
  amount?: string | undefined;
  method?: string | undefined;
  note?: string | undefined;
  attachment_uuid?: string | undefined;
  uuid?: string | undefined;
};

/** @internal */
export const JobPaymentCreate$outboundSchema: z.ZodType<
  JobPaymentCreate$Outbound,
  z.ZodTypeDef,
  JobPaymentCreate
> = z.object({
  jobUuid: z.string().optional(),
  actionedByUuid: z.string().optional(),
  timestamp: z.string().optional(),
  amount: z.string().optional(),
  method: z.string().optional(),
  note: z.string().optional(),
  attachmentUuid: z.string().optional(),
  uuid: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    jobUuid: "job_uuid",
    actionedByUuid: "actioned_by_uuid",
    attachmentUuid: "attachment_uuid",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace JobPaymentCreate$ {
  /** @deprecated use `JobPaymentCreate$inboundSchema` instead. */
  export const inboundSchema = JobPaymentCreate$inboundSchema;
  /** @deprecated use `JobPaymentCreate$outboundSchema` instead. */
  export const outboundSchema = JobPaymentCreate$outboundSchema;
  /** @deprecated use `JobPaymentCreate$Outbound` instead. */
  export type Outbound = JobPaymentCreate$Outbound;
}

export function jobPaymentCreateToJSON(
  jobPaymentCreate: JobPaymentCreate,
): string {
  return JSON.stringify(
    JobPaymentCreate$outboundSchema.parse(jobPaymentCreate),
  );
}

export function jobPaymentCreateFromJSON(
  jsonString: string,
): SafeParseResult<JobPaymentCreate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => JobPaymentCreate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'JobPaymentCreate' from JSON`,
  );
}
