/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Record active/deleted flag.  Valid values are [0,1]
 */
export const FeedbackActive = {
  Zero: 0,
  One: 1,
} as const;
/**
 * Record active/deleted flag.  Valid values are [0,1]
 */
export type FeedbackActive = ClosedEnum<typeof FeedbackActive>;

export type Feedback = {
  /**
   * Date and time when the feedback was submitted
   */
  timestamp?: string | undefined;
  /**
   * Type of object this feedback relates to (usually 'job' or 'vendor')
   */
  relatedObject?: string | undefined;
  /**
   * UUID of the specific object this feedback is about, corresponding to the object type specified in related_object
   */
  relatedObjectUuid?: string | undefined;
  /**
   * Numeric rating value for the feedback, between 1-5 where higher values represent more positive feedback
   */
  rating?: string | undefined;
  /**
   * Text comments provided with the feedback
   */
  comment?: string | undefined;
  /**
   * Unique identifier for this record
   */
  uuid?: string | undefined;
  /**
   * Record active/deleted flag.  Valid values are [0,1]
   */
  active?: FeedbackActive | undefined;
  /**
   * Timestamp at which record was last modified
   */
  editDate?: any | undefined;
};

/** @internal */
export const FeedbackActive$inboundSchema: z.ZodNativeEnum<
  typeof FeedbackActive
> = z.nativeEnum(FeedbackActive);

/** @internal */
export const FeedbackActive$outboundSchema: z.ZodNativeEnum<
  typeof FeedbackActive
> = FeedbackActive$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FeedbackActive$ {
  /** @deprecated use `FeedbackActive$inboundSchema` instead. */
  export const inboundSchema = FeedbackActive$inboundSchema;
  /** @deprecated use `FeedbackActive$outboundSchema` instead. */
  export const outboundSchema = FeedbackActive$outboundSchema;
}

/** @internal */
export const Feedback$inboundSchema: z.ZodType<
  Feedback,
  z.ZodTypeDef,
  unknown
> = z.object({
  timestamp: z.string().optional(),
  related_object: z.string().optional(),
  related_object_uuid: z.string().optional(),
  rating: z.string().optional(),
  comment: z.string().optional(),
  uuid: z.string().optional(),
  active: FeedbackActive$inboundSchema.default(1),
  edit_date: z.any().optional(),
}).transform((v) => {
  return remap$(v, {
    "related_object": "relatedObject",
    "related_object_uuid": "relatedObjectUuid",
    "edit_date": "editDate",
  });
});

/** @internal */
export type Feedback$Outbound = {
  timestamp?: string | undefined;
  related_object?: string | undefined;
  related_object_uuid?: string | undefined;
  rating?: string | undefined;
  comment?: string | undefined;
  uuid?: string | undefined;
  active: number;
  edit_date?: any | undefined;
};

/** @internal */
export const Feedback$outboundSchema: z.ZodType<
  Feedback$Outbound,
  z.ZodTypeDef,
  Feedback
> = z.object({
  timestamp: z.string().optional(),
  relatedObject: z.string().optional(),
  relatedObjectUuid: z.string().optional(),
  rating: z.string().optional(),
  comment: z.string().optional(),
  uuid: z.string().optional(),
  active: FeedbackActive$outboundSchema.default(1),
  editDate: z.any().optional(),
}).transform((v) => {
  return remap$(v, {
    relatedObject: "related_object",
    relatedObjectUuid: "related_object_uuid",
    editDate: "edit_date",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Feedback$ {
  /** @deprecated use `Feedback$inboundSchema` instead. */
  export const inboundSchema = Feedback$inboundSchema;
  /** @deprecated use `Feedback$outboundSchema` instead. */
  export const outboundSchema = Feedback$outboundSchema;
  /** @deprecated use `Feedback$Outbound` instead. */
  export type Outbound = Feedback$Outbound;
}

export function feedbackToJSON(feedback: Feedback): string {
  return JSON.stringify(Feedback$outboundSchema.parse(feedback));
}

export function feedbackFromJSON(
  jsonString: string,
): SafeParseResult<Feedback, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Feedback$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Feedback' from JSON`,
  );
}
