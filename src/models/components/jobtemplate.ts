/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Record active/deleted flag.  Valid values are [0,1]
 */
export const JobTemplateActive = {
  Zero: 0,
  One: 1,
} as const;
/**
 * Record active/deleted flag.  Valid values are [0,1]
 */
export type JobTemplateActive = ClosedEnum<typeof JobTemplateActive>;

export type JobTemplate = {
  /**
   * Unique identifier for this record
   */
  uuid?: string | undefined;
  /**
   * Record active/deleted flag.  Valid values are [0,1]
   */
  active?: JobTemplateActive | undefined;
  /**
   * Timestamp at which record was last modified
   */
  editDate?: any | undefined;
  name?: string | undefined;
};

/** @internal */
export const JobTemplateActive$inboundSchema: z.ZodNativeEnum<
  typeof JobTemplateActive
> = z.nativeEnum(JobTemplateActive);

/** @internal */
export const JobTemplateActive$outboundSchema: z.ZodNativeEnum<
  typeof JobTemplateActive
> = JobTemplateActive$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace JobTemplateActive$ {
  /** @deprecated use `JobTemplateActive$inboundSchema` instead. */
  export const inboundSchema = JobTemplateActive$inboundSchema;
  /** @deprecated use `JobTemplateActive$outboundSchema` instead. */
  export const outboundSchema = JobTemplateActive$outboundSchema;
}

/** @internal */
export const JobTemplate$inboundSchema: z.ZodType<
  JobTemplate,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string().optional(),
  active: JobTemplateActive$inboundSchema.default(1),
  edit_date: z.any().optional(),
  name: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "edit_date": "editDate",
  });
});

/** @internal */
export type JobTemplate$Outbound = {
  uuid?: string | undefined;
  active: number;
  edit_date?: any | undefined;
  name?: string | undefined;
};

/** @internal */
export const JobTemplate$outboundSchema: z.ZodType<
  JobTemplate$Outbound,
  z.ZodTypeDef,
  JobTemplate
> = z.object({
  uuid: z.string().optional(),
  active: JobTemplateActive$outboundSchema.default(1),
  editDate: z.any().optional(),
  name: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    editDate: "edit_date",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace JobTemplate$ {
  /** @deprecated use `JobTemplate$inboundSchema` instead. */
  export const inboundSchema = JobTemplate$inboundSchema;
  /** @deprecated use `JobTemplate$outboundSchema` instead. */
  export const outboundSchema = JobTemplate$outboundSchema;
  /** @deprecated use `JobTemplate$Outbound` instead. */
  export type Outbound = JobTemplate$Outbound;
}

export function jobTemplateToJSON(jobTemplate: JobTemplate): string {
  return JSON.stringify(JobTemplate$outboundSchema.parse(jobTemplate));
}

export function jobTemplateFromJSON(
  jsonString: string,
): SafeParseResult<JobTemplate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => JobTemplate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'JobTemplate' from JSON`,
  );
}
