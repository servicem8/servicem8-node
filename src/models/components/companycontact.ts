/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Record active/deleted flag.  Valid values are [0,1]
 */
export const CompanyContactActive = {
  Zero: 0,
  One: 1,
} as const;
/**
 * Record active/deleted flag.  Valid values are [0,1]
 */
export type CompanyContactActive = ClosedEnum<typeof CompanyContactActive>;

export type CompanyContact = {
  /**
   * The UUID of the company this contact belongs to
   */
  companyUuid?: string | undefined;
  /**
   * First name of the company contact. Used for identifying and addressing the contact in communications.
   */
  first?: string | undefined;
  /**
   * Last name of the company contact. Used together with the first name to identify the contact.
   */
  last?: string | undefined;
  /**
   * Primary phone number for the contact. Used for voice communications with the contact. Should include area code and can include international code.
   */
  phone?: string | undefined;
  /**
   * Mobile phone number for the contact. Used for SMS communications and alternative voice contact. Should include area code and can include international code.
   */
  mobile?: string | undefined;
  /**
   * Email address of the contact. Used for sending email communications, quotes, invoices, and other electronic correspondence.
   */
  email?: string | undefined;
  /**
   * Specifies the type of contact. Common values include 'BILLING' for billing contacts and 'JOB' for job contacts. This field determines how the contact is used in the system.
   */
  type?: string | undefined;
  /**
   * Indicates whether this contact is the primary contact for the company. Value of 1 means this is the primary contact, 0 means it is not. A company should have only one active primary contact.
   */
  isPrimaryContact?: string | undefined;
  /**
   * Unique identifier for this record
   */
  uuid?: string | undefined;
  /**
   * Record active/deleted flag.  Valid values are [0,1]
   */
  active?: CompanyContactActive | undefined;
  /**
   * Timestamp at which record was last modified
   */
  editDate?: any | undefined;
};

/** @internal */
export const CompanyContactActive$inboundSchema: z.ZodNativeEnum<
  typeof CompanyContactActive
> = z.nativeEnum(CompanyContactActive);

/** @internal */
export const CompanyContactActive$outboundSchema: z.ZodNativeEnum<
  typeof CompanyContactActive
> = CompanyContactActive$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompanyContactActive$ {
  /** @deprecated use `CompanyContactActive$inboundSchema` instead. */
  export const inboundSchema = CompanyContactActive$inboundSchema;
  /** @deprecated use `CompanyContactActive$outboundSchema` instead. */
  export const outboundSchema = CompanyContactActive$outboundSchema;
}

/** @internal */
export const CompanyContact$inboundSchema: z.ZodType<
  CompanyContact,
  z.ZodTypeDef,
  unknown
> = z.object({
  company_uuid: z.string().optional(),
  first: z.string().optional(),
  last: z.string().optional(),
  phone: z.string().optional(),
  mobile: z.string().optional(),
  email: z.string().optional(),
  type: z.string().optional(),
  is_primary_contact: z.string().optional(),
  uuid: z.string().optional(),
  active: CompanyContactActive$inboundSchema.default(1),
  edit_date: z.any().optional(),
}).transform((v) => {
  return remap$(v, {
    "company_uuid": "companyUuid",
    "is_primary_contact": "isPrimaryContact",
    "edit_date": "editDate",
  });
});

/** @internal */
export type CompanyContact$Outbound = {
  company_uuid?: string | undefined;
  first?: string | undefined;
  last?: string | undefined;
  phone?: string | undefined;
  mobile?: string | undefined;
  email?: string | undefined;
  type?: string | undefined;
  is_primary_contact?: string | undefined;
  uuid?: string | undefined;
  active: number;
  edit_date?: any | undefined;
};

/** @internal */
export const CompanyContact$outboundSchema: z.ZodType<
  CompanyContact$Outbound,
  z.ZodTypeDef,
  CompanyContact
> = z.object({
  companyUuid: z.string().optional(),
  first: z.string().optional(),
  last: z.string().optional(),
  phone: z.string().optional(),
  mobile: z.string().optional(),
  email: z.string().optional(),
  type: z.string().optional(),
  isPrimaryContact: z.string().optional(),
  uuid: z.string().optional(),
  active: CompanyContactActive$outboundSchema.default(1),
  editDate: z.any().optional(),
}).transform((v) => {
  return remap$(v, {
    companyUuid: "company_uuid",
    isPrimaryContact: "is_primary_contact",
    editDate: "edit_date",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompanyContact$ {
  /** @deprecated use `CompanyContact$inboundSchema` instead. */
  export const inboundSchema = CompanyContact$inboundSchema;
  /** @deprecated use `CompanyContact$outboundSchema` instead. */
  export const outboundSchema = CompanyContact$outboundSchema;
  /** @deprecated use `CompanyContact$Outbound` instead. */
  export type Outbound = CompanyContact$Outbound;
}

export function companyContactToJSON(companyContact: CompanyContact): string {
  return JSON.stringify(CompanyContact$outboundSchema.parse(companyContact));
}

export function companyContactFromJSON(
  jsonString: string,
): SafeParseResult<CompanyContact, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CompanyContact$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompanyContact' from JSON`,
  );
}
