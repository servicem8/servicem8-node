/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Record active/deleted flag.  Valid values are [0,1]
 */
export const JobAllocationActive = {
  Zero: 0,
  One: 1,
} as const;
/**
 * Record active/deleted flag.  Valid values are [0,1]
 */
export type JobAllocationActive = ClosedEnum<typeof JobAllocationActive>;

export type JobAllocation = {
  /**
   * Unique identifier for this record
   */
  uuid?: string | undefined;
  /**
   * Record active/deleted flag.  Valid values are [0,1]
   */
  active?: JobAllocationActive | undefined;
  /**
   * Timestamp at which record was last modified
   */
  editDate?: any | undefined;
  jobUuid?: string | undefined;
  queueUuid?: string | undefined;
  staffUuid?: string | undefined;
  allocationDate?: string | undefined;
  allocationWindowUuid?: string | undefined;
  allocatedByStaffUuid?: string | undefined;
  allocatedTimestamp?: string | undefined;
  expiryTimestamp?: string | undefined;
  readTimestamp?: string | undefined;
  completionTimestamp?: string | undefined;
  estimatedDuration?: string | undefined;
  revisedDuration?: string | undefined;
  sortPriority?: string | undefined;
  requiresAcceptance?: string | undefined;
  acceptanceStatus?: string | undefined;
  acceptanceTimestamp?: string | undefined;
};

export type JobAllocationInput = {
  /**
   * Unique identifier for this record
   */
  uuid?: string | undefined;
  /**
   * Record active/deleted flag.  Valid values are [0,1]
   */
  active?: JobAllocationActive | undefined;
  jobUuid?: string | undefined;
  queueUuid?: string | undefined;
  staffUuid?: string | undefined;
  allocationDate?: string | undefined;
  allocationWindowUuid?: string | undefined;
  allocatedByStaffUuid?: string | undefined;
  allocatedTimestamp?: string | undefined;
  expiryTimestamp?: string | undefined;
  readTimestamp?: string | undefined;
  completionTimestamp?: string | undefined;
  estimatedDuration?: string | undefined;
  revisedDuration?: string | undefined;
  sortPriority?: string | undefined;
  requiresAcceptance?: string | undefined;
  acceptanceStatus?: string | undefined;
  acceptanceTimestamp?: string | undefined;
};

/** @internal */
export const JobAllocationActive$inboundSchema: z.ZodNativeEnum<
  typeof JobAllocationActive
> = z.nativeEnum(JobAllocationActive);

/** @internal */
export const JobAllocationActive$outboundSchema: z.ZodNativeEnum<
  typeof JobAllocationActive
> = JobAllocationActive$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace JobAllocationActive$ {
  /** @deprecated use `JobAllocationActive$inboundSchema` instead. */
  export const inboundSchema = JobAllocationActive$inboundSchema;
  /** @deprecated use `JobAllocationActive$outboundSchema` instead. */
  export const outboundSchema = JobAllocationActive$outboundSchema;
}

/** @internal */
export const JobAllocation$inboundSchema: z.ZodType<
  JobAllocation,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string().optional(),
  active: JobAllocationActive$inboundSchema.default(1),
  edit_date: z.any().optional(),
  job_uuid: z.string().optional(),
  queue_uuid: z.string().optional(),
  staff_uuid: z.string().optional(),
  allocation_date: z.string().optional(),
  allocation_window_uuid: z.string().optional(),
  allocated_by_staff_uuid: z.string().optional(),
  allocated_timestamp: z.string().optional(),
  expiry_timestamp: z.string().optional(),
  read_timestamp: z.string().optional(),
  completion_timestamp: z.string().optional(),
  estimated_duration: z.string().optional(),
  revised_duration: z.string().optional(),
  sort_priority: z.string().optional(),
  requires_acceptance: z.string().optional(),
  acceptance_status: z.string().optional(),
  acceptance_timestamp: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "edit_date": "editDate",
    "job_uuid": "jobUuid",
    "queue_uuid": "queueUuid",
    "staff_uuid": "staffUuid",
    "allocation_date": "allocationDate",
    "allocation_window_uuid": "allocationWindowUuid",
    "allocated_by_staff_uuid": "allocatedByStaffUuid",
    "allocated_timestamp": "allocatedTimestamp",
    "expiry_timestamp": "expiryTimestamp",
    "read_timestamp": "readTimestamp",
    "completion_timestamp": "completionTimestamp",
    "estimated_duration": "estimatedDuration",
    "revised_duration": "revisedDuration",
    "sort_priority": "sortPriority",
    "requires_acceptance": "requiresAcceptance",
    "acceptance_status": "acceptanceStatus",
    "acceptance_timestamp": "acceptanceTimestamp",
  });
});

/** @internal */
export type JobAllocation$Outbound = {
  uuid?: string | undefined;
  active: number;
  edit_date?: any | undefined;
  job_uuid?: string | undefined;
  queue_uuid?: string | undefined;
  staff_uuid?: string | undefined;
  allocation_date?: string | undefined;
  allocation_window_uuid?: string | undefined;
  allocated_by_staff_uuid?: string | undefined;
  allocated_timestamp?: string | undefined;
  expiry_timestamp?: string | undefined;
  read_timestamp?: string | undefined;
  completion_timestamp?: string | undefined;
  estimated_duration?: string | undefined;
  revised_duration?: string | undefined;
  sort_priority?: string | undefined;
  requires_acceptance?: string | undefined;
  acceptance_status?: string | undefined;
  acceptance_timestamp?: string | undefined;
};

/** @internal */
export const JobAllocation$outboundSchema: z.ZodType<
  JobAllocation$Outbound,
  z.ZodTypeDef,
  JobAllocation
> = z.object({
  uuid: z.string().optional(),
  active: JobAllocationActive$outboundSchema.default(1),
  editDate: z.any().optional(),
  jobUuid: z.string().optional(),
  queueUuid: z.string().optional(),
  staffUuid: z.string().optional(),
  allocationDate: z.string().optional(),
  allocationWindowUuid: z.string().optional(),
  allocatedByStaffUuid: z.string().optional(),
  allocatedTimestamp: z.string().optional(),
  expiryTimestamp: z.string().optional(),
  readTimestamp: z.string().optional(),
  completionTimestamp: z.string().optional(),
  estimatedDuration: z.string().optional(),
  revisedDuration: z.string().optional(),
  sortPriority: z.string().optional(),
  requiresAcceptance: z.string().optional(),
  acceptanceStatus: z.string().optional(),
  acceptanceTimestamp: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    editDate: "edit_date",
    jobUuid: "job_uuid",
    queueUuid: "queue_uuid",
    staffUuid: "staff_uuid",
    allocationDate: "allocation_date",
    allocationWindowUuid: "allocation_window_uuid",
    allocatedByStaffUuid: "allocated_by_staff_uuid",
    allocatedTimestamp: "allocated_timestamp",
    expiryTimestamp: "expiry_timestamp",
    readTimestamp: "read_timestamp",
    completionTimestamp: "completion_timestamp",
    estimatedDuration: "estimated_duration",
    revisedDuration: "revised_duration",
    sortPriority: "sort_priority",
    requiresAcceptance: "requires_acceptance",
    acceptanceStatus: "acceptance_status",
    acceptanceTimestamp: "acceptance_timestamp",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace JobAllocation$ {
  /** @deprecated use `JobAllocation$inboundSchema` instead. */
  export const inboundSchema = JobAllocation$inboundSchema;
  /** @deprecated use `JobAllocation$outboundSchema` instead. */
  export const outboundSchema = JobAllocation$outboundSchema;
  /** @deprecated use `JobAllocation$Outbound` instead. */
  export type Outbound = JobAllocation$Outbound;
}

export function jobAllocationToJSON(jobAllocation: JobAllocation): string {
  return JSON.stringify(JobAllocation$outboundSchema.parse(jobAllocation));
}

export function jobAllocationFromJSON(
  jsonString: string,
): SafeParseResult<JobAllocation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => JobAllocation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'JobAllocation' from JSON`,
  );
}

/** @internal */
export const JobAllocationInput$inboundSchema: z.ZodType<
  JobAllocationInput,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string().optional(),
  active: JobAllocationActive$inboundSchema.default(1),
  job_uuid: z.string().optional(),
  queue_uuid: z.string().optional(),
  staff_uuid: z.string().optional(),
  allocation_date: z.string().optional(),
  allocation_window_uuid: z.string().optional(),
  allocated_by_staff_uuid: z.string().optional(),
  allocated_timestamp: z.string().optional(),
  expiry_timestamp: z.string().optional(),
  read_timestamp: z.string().optional(),
  completion_timestamp: z.string().optional(),
  estimated_duration: z.string().optional(),
  revised_duration: z.string().optional(),
  sort_priority: z.string().optional(),
  requires_acceptance: z.string().optional(),
  acceptance_status: z.string().optional(),
  acceptance_timestamp: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "job_uuid": "jobUuid",
    "queue_uuid": "queueUuid",
    "staff_uuid": "staffUuid",
    "allocation_date": "allocationDate",
    "allocation_window_uuid": "allocationWindowUuid",
    "allocated_by_staff_uuid": "allocatedByStaffUuid",
    "allocated_timestamp": "allocatedTimestamp",
    "expiry_timestamp": "expiryTimestamp",
    "read_timestamp": "readTimestamp",
    "completion_timestamp": "completionTimestamp",
    "estimated_duration": "estimatedDuration",
    "revised_duration": "revisedDuration",
    "sort_priority": "sortPriority",
    "requires_acceptance": "requiresAcceptance",
    "acceptance_status": "acceptanceStatus",
    "acceptance_timestamp": "acceptanceTimestamp",
  });
});

/** @internal */
export type JobAllocationInput$Outbound = {
  uuid?: string | undefined;
  active: number;
  job_uuid?: string | undefined;
  queue_uuid?: string | undefined;
  staff_uuid?: string | undefined;
  allocation_date?: string | undefined;
  allocation_window_uuid?: string | undefined;
  allocated_by_staff_uuid?: string | undefined;
  allocated_timestamp?: string | undefined;
  expiry_timestamp?: string | undefined;
  read_timestamp?: string | undefined;
  completion_timestamp?: string | undefined;
  estimated_duration?: string | undefined;
  revised_duration?: string | undefined;
  sort_priority?: string | undefined;
  requires_acceptance?: string | undefined;
  acceptance_status?: string | undefined;
  acceptance_timestamp?: string | undefined;
};

/** @internal */
export const JobAllocationInput$outboundSchema: z.ZodType<
  JobAllocationInput$Outbound,
  z.ZodTypeDef,
  JobAllocationInput
> = z.object({
  uuid: z.string().optional(),
  active: JobAllocationActive$outboundSchema.default(1),
  jobUuid: z.string().optional(),
  queueUuid: z.string().optional(),
  staffUuid: z.string().optional(),
  allocationDate: z.string().optional(),
  allocationWindowUuid: z.string().optional(),
  allocatedByStaffUuid: z.string().optional(),
  allocatedTimestamp: z.string().optional(),
  expiryTimestamp: z.string().optional(),
  readTimestamp: z.string().optional(),
  completionTimestamp: z.string().optional(),
  estimatedDuration: z.string().optional(),
  revisedDuration: z.string().optional(),
  sortPriority: z.string().optional(),
  requiresAcceptance: z.string().optional(),
  acceptanceStatus: z.string().optional(),
  acceptanceTimestamp: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    jobUuid: "job_uuid",
    queueUuid: "queue_uuid",
    staffUuid: "staff_uuid",
    allocationDate: "allocation_date",
    allocationWindowUuid: "allocation_window_uuid",
    allocatedByStaffUuid: "allocated_by_staff_uuid",
    allocatedTimestamp: "allocated_timestamp",
    expiryTimestamp: "expiry_timestamp",
    readTimestamp: "read_timestamp",
    completionTimestamp: "completion_timestamp",
    estimatedDuration: "estimated_duration",
    revisedDuration: "revised_duration",
    sortPriority: "sort_priority",
    requiresAcceptance: "requires_acceptance",
    acceptanceStatus: "acceptance_status",
    acceptanceTimestamp: "acceptance_timestamp",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace JobAllocationInput$ {
  /** @deprecated use `JobAllocationInput$inboundSchema` instead. */
  export const inboundSchema = JobAllocationInput$inboundSchema;
  /** @deprecated use `JobAllocationInput$outboundSchema` instead. */
  export const outboundSchema = JobAllocationInput$outboundSchema;
  /** @deprecated use `JobAllocationInput$Outbound` instead. */
  export type Outbound = JobAllocationInput$Outbound;
}

export function jobAllocationInputToJSON(
  jobAllocationInput: JobAllocationInput,
): string {
  return JSON.stringify(
    JobAllocationInput$outboundSchema.parse(jobAllocationInput),
  );
}

export function jobAllocationInputFromJSON(
  jsonString: string,
): SafeParseResult<JobAllocationInput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => JobAllocationInput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'JobAllocationInput' from JSON`,
  );
}
