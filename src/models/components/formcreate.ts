/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const FormCreateFieldType = {
  Text: "Text",
} as const;
export type FormCreateFieldType = ClosedEnum<typeof FormCreateFieldType>;

export type FormCreateTemplateField = {
  name: string;
  fieldType: FormCreateFieldType;
  value: string;
  sortOrder: number;
};

export type FormCreate = {
  /**
   * The name of the form. Used to identify the form in the system and displayed to users in the form selector. Must be unique within an account. Maximum length is 255 characters.
   */
  name?: string | undefined;
  /**
   * UUID of the document template associated with this form. The template defines the layout and appearance of the form when it's generated as a document. References a document template object in the system.
   */
  documentTemplateUuid?: string | undefined;
  /**
   * Boolean flag indicating whether this form can be used independently of a job. When set to true (1), the form can be filled out as a standalone form. When false (0), the form must be associated with a job to be completed.
   */
  canBeUsedIndependently?: string | undefined;
  /**
   * Controls when badge completion is mandatory for this form. Valid values are: 0 (not mandatory), 1 (mandatory on check-in), 2 (mandatory on check-out). This determines at which stage in the job lifecycle a staff member must complete this form.
   */
  badgeMandatoryState?: string | undefined;
  /**
   * JSON array of template fields that are used when generating form documents. Each field contains a name, fieldType, value, and sortOrder. Maximum of 10 fields allowed.
   */
  templateFields?: Array<FormCreateTemplateField> | undefined;
  /**
   * Unique identifier for this record
   */
  uuid?: string | undefined;
  badgeName?: string | undefined;
};

/** @internal */
export const FormCreateFieldType$inboundSchema: z.ZodNativeEnum<
  typeof FormCreateFieldType
> = z.nativeEnum(FormCreateFieldType);

/** @internal */
export const FormCreateFieldType$outboundSchema: z.ZodNativeEnum<
  typeof FormCreateFieldType
> = FormCreateFieldType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FormCreateFieldType$ {
  /** @deprecated use `FormCreateFieldType$inboundSchema` instead. */
  export const inboundSchema = FormCreateFieldType$inboundSchema;
  /** @deprecated use `FormCreateFieldType$outboundSchema` instead. */
  export const outboundSchema = FormCreateFieldType$outboundSchema;
}

/** @internal */
export const FormCreateTemplateField$inboundSchema: z.ZodType<
  FormCreateTemplateField,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  fieldType: FormCreateFieldType$inboundSchema,
  value: z.string(),
  sortOrder: z.number().int(),
});

/** @internal */
export type FormCreateTemplateField$Outbound = {
  name: string;
  fieldType: string;
  value: string;
  sortOrder: number;
};

/** @internal */
export const FormCreateTemplateField$outboundSchema: z.ZodType<
  FormCreateTemplateField$Outbound,
  z.ZodTypeDef,
  FormCreateTemplateField
> = z.object({
  name: z.string(),
  fieldType: FormCreateFieldType$outboundSchema,
  value: z.string(),
  sortOrder: z.number().int(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FormCreateTemplateField$ {
  /** @deprecated use `FormCreateTemplateField$inboundSchema` instead. */
  export const inboundSchema = FormCreateTemplateField$inboundSchema;
  /** @deprecated use `FormCreateTemplateField$outboundSchema` instead. */
  export const outboundSchema = FormCreateTemplateField$outboundSchema;
  /** @deprecated use `FormCreateTemplateField$Outbound` instead. */
  export type Outbound = FormCreateTemplateField$Outbound;
}

export function formCreateTemplateFieldToJSON(
  formCreateTemplateField: FormCreateTemplateField,
): string {
  return JSON.stringify(
    FormCreateTemplateField$outboundSchema.parse(formCreateTemplateField),
  );
}

export function formCreateTemplateFieldFromJSON(
  jsonString: string,
): SafeParseResult<FormCreateTemplateField, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FormCreateTemplateField$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FormCreateTemplateField' from JSON`,
  );
}

/** @internal */
export const FormCreate$inboundSchema: z.ZodType<
  FormCreate,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  document_template_uuid: z.string().optional(),
  can_be_used_independently: z.string().optional(),
  badge_mandatory_state: z.string().optional(),
  template_fields: z.array(z.lazy(() => FormCreateTemplateField$inboundSchema))
    .optional(),
  uuid: z.string().optional(),
  badge_name: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "document_template_uuid": "documentTemplateUuid",
    "can_be_used_independently": "canBeUsedIndependently",
    "badge_mandatory_state": "badgeMandatoryState",
    "template_fields": "templateFields",
    "badge_name": "badgeName",
  });
});

/** @internal */
export type FormCreate$Outbound = {
  name?: string | undefined;
  document_template_uuid?: string | undefined;
  can_be_used_independently?: string | undefined;
  badge_mandatory_state?: string | undefined;
  template_fields?: Array<FormCreateTemplateField$Outbound> | undefined;
  uuid?: string | undefined;
  badge_name?: string | undefined;
};

/** @internal */
export const FormCreate$outboundSchema: z.ZodType<
  FormCreate$Outbound,
  z.ZodTypeDef,
  FormCreate
> = z.object({
  name: z.string().optional(),
  documentTemplateUuid: z.string().optional(),
  canBeUsedIndependently: z.string().optional(),
  badgeMandatoryState: z.string().optional(),
  templateFields: z.array(z.lazy(() => FormCreateTemplateField$outboundSchema))
    .optional(),
  uuid: z.string().optional(),
  badgeName: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    documentTemplateUuid: "document_template_uuid",
    canBeUsedIndependently: "can_be_used_independently",
    badgeMandatoryState: "badge_mandatory_state",
    templateFields: "template_fields",
    badgeName: "badge_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FormCreate$ {
  /** @deprecated use `FormCreate$inboundSchema` instead. */
  export const inboundSchema = FormCreate$inboundSchema;
  /** @deprecated use `FormCreate$outboundSchema` instead. */
  export const outboundSchema = FormCreate$outboundSchema;
  /** @deprecated use `FormCreate$Outbound` instead. */
  export type Outbound = FormCreate$Outbound;
}

export function formCreateToJSON(formCreate: FormCreate): string {
  return JSON.stringify(FormCreate$outboundSchema.parse(formCreate));
}

export function formCreateFromJSON(
  jsonString: string,
): SafeParseResult<FormCreate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FormCreate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FormCreate' from JSON`,
  );
}
