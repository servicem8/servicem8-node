/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type EmbeddingSearchResult = {
  /**
   * UUID of the found job
   */
  uuid: string;
  /**
   * Type of the object
   */
  type: string;
  /**
   * Title of the job
   */
  title: string;
  /**
   * Job description
   */
  description?: string | undefined;
  /**
   * Current job status
   */
  status?: string | undefined;
  /**
   * Similarity score between 0.0 and 1.0
   */
  similarityScore: number;
  /**
   * The content that was matched in the embedding search
   */
  matchedContent?: string | undefined;
};

/** @internal */
export const EmbeddingSearchResult$inboundSchema: z.ZodType<
  EmbeddingSearchResult,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string(),
  type: z.string(),
  title: z.string(),
  description: z.string().optional(),
  status: z.string().optional(),
  similarity_score: z.number(),
  matched_content: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "similarity_score": "similarityScore",
    "matched_content": "matchedContent",
  });
});

/** @internal */
export type EmbeddingSearchResult$Outbound = {
  uuid: string;
  type: string;
  title: string;
  description?: string | undefined;
  status?: string | undefined;
  similarity_score: number;
  matched_content?: string | undefined;
};

/** @internal */
export const EmbeddingSearchResult$outboundSchema: z.ZodType<
  EmbeddingSearchResult$Outbound,
  z.ZodTypeDef,
  EmbeddingSearchResult
> = z.object({
  uuid: z.string(),
  type: z.string(),
  title: z.string(),
  description: z.string().optional(),
  status: z.string().optional(),
  similarityScore: z.number(),
  matchedContent: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    similarityScore: "similarity_score",
    matchedContent: "matched_content",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmbeddingSearchResult$ {
  /** @deprecated use `EmbeddingSearchResult$inboundSchema` instead. */
  export const inboundSchema = EmbeddingSearchResult$inboundSchema;
  /** @deprecated use `EmbeddingSearchResult$outboundSchema` instead. */
  export const outboundSchema = EmbeddingSearchResult$outboundSchema;
  /** @deprecated use `EmbeddingSearchResult$Outbound` instead. */
  export type Outbound = EmbeddingSearchResult$Outbound;
}

export function embeddingSearchResultToJSON(
  embeddingSearchResult: EmbeddingSearchResult,
): string {
  return JSON.stringify(
    EmbeddingSearchResult$outboundSchema.parse(embeddingSearchResult),
  );
}

export function embeddingSearchResultFromJSON(
  jsonString: string,
): SafeParseResult<EmbeddingSearchResult, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EmbeddingSearchResult$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EmbeddingSearchResult' from JSON`,
  );
}
