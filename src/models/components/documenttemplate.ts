/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Record active/deleted flag.  Valid values are [0,1]
 */
export const DocumentTemplateActive = {
  Zero: 0,
  One: 1,
} as const;
/**
 * Record active/deleted flag.  Valid values are [0,1]
 */
export type DocumentTemplateActive = ClosedEnum<typeof DocumentTemplateActive>;

export type DocumentTemplate = {
  /**
   * Unique identifier for this record
   */
  uuid?: string | undefined;
  /**
   * Record active/deleted flag.  Valid values are [0,1]
   */
  active?: DocumentTemplateActive | undefined;
  /**
   * Timestamp at which record was last modified
   */
  editDate?: any | undefined;
  /**
   * (Read only)
   */
  templateType?: string | undefined;
  /**
   * (Read only)
   */
  relatedObject?: string | undefined;
  name?: string | undefined;
};

/** @internal */
export const DocumentTemplateActive$inboundSchema: z.ZodNativeEnum<
  typeof DocumentTemplateActive
> = z.nativeEnum(DocumentTemplateActive);

/** @internal */
export const DocumentTemplateActive$outboundSchema: z.ZodNativeEnum<
  typeof DocumentTemplateActive
> = DocumentTemplateActive$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentTemplateActive$ {
  /** @deprecated use `DocumentTemplateActive$inboundSchema` instead. */
  export const inboundSchema = DocumentTemplateActive$inboundSchema;
  /** @deprecated use `DocumentTemplateActive$outboundSchema` instead. */
  export const outboundSchema = DocumentTemplateActive$outboundSchema;
}

/** @internal */
export const DocumentTemplate$inboundSchema: z.ZodType<
  DocumentTemplate,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string().optional(),
  active: DocumentTemplateActive$inboundSchema.default(1),
  edit_date: z.any().optional(),
  template_type: z.string().optional(),
  related_object: z.string().optional(),
  name: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "edit_date": "editDate",
    "template_type": "templateType",
    "related_object": "relatedObject",
  });
});

/** @internal */
export type DocumentTemplate$Outbound = {
  uuid?: string | undefined;
  active: number;
  edit_date?: any | undefined;
  template_type?: string | undefined;
  related_object?: string | undefined;
  name?: string | undefined;
};

/** @internal */
export const DocumentTemplate$outboundSchema: z.ZodType<
  DocumentTemplate$Outbound,
  z.ZodTypeDef,
  DocumentTemplate
> = z.object({
  uuid: z.string().optional(),
  active: DocumentTemplateActive$outboundSchema.default(1),
  editDate: z.any().optional(),
  templateType: z.string().optional(),
  relatedObject: z.string().optional(),
  name: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    editDate: "edit_date",
    templateType: "template_type",
    relatedObject: "related_object",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentTemplate$ {
  /** @deprecated use `DocumentTemplate$inboundSchema` instead. */
  export const inboundSchema = DocumentTemplate$inboundSchema;
  /** @deprecated use `DocumentTemplate$outboundSchema` instead. */
  export const outboundSchema = DocumentTemplate$outboundSchema;
  /** @deprecated use `DocumentTemplate$Outbound` instead. */
  export type Outbound = DocumentTemplate$Outbound;
}

export function documentTemplateToJSON(
  documentTemplate: DocumentTemplate,
): string {
  return JSON.stringify(
    DocumentTemplate$outboundSchema.parse(documentTemplate),
  );
}

export function documentTemplateFromJSON(
  jsonString: string,
): SafeParseResult<DocumentTemplate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DocumentTemplate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DocumentTemplate' from JSON`,
  );
}
