/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Determines if jobs in this queue require assignment to staff members. If true, jobs must be explicitly assigned to staff. If false, jobs are visible to all staff..  Valid values are [0,1]
 */
export const QueueCreateRequiresAssignment = {
  Zero: 0,
  One: 1,
} as const;
/**
 * Determines if jobs in this queue require assignment to staff members. If true, jobs must be explicitly assigned to staff. If false, jobs are visible to all staff..  Valid values are [0,1]
 */
export type QueueCreateRequiresAssignment = ClosedEnum<
  typeof QueueCreateRequiresAssignment
>;

export type QueueCreate = {
  /**
   * Unique identifier for this record
   */
  uuid?: string | undefined;
  /**
   * Name of the job queue. Used to identify the queue in the system. Examples include 'Workshop', 'Pending Quotes', etc.
   */
  name?: string | undefined;
  /**
   * Default number of days that jobs should remain in this queue before requiring attention. Common values are 7 days (1 week) or 14 days (2 weeks).
   */
  defaultTimeframe?: number | undefined;
  /**
   * Semicolon-delimited list of staff UUIDs who are subscribed to receive notifications for this queue.
   */
  subscribedStaff?: string | undefined;
  /**
   * Determines if jobs in this queue require assignment to staff members. If true, jobs must be explicitly assigned to staff. If false, jobs are visible to all staff..  Valid values are [0,1]
   */
  requiresAssignment?: QueueCreateRequiresAssignment | undefined;
};

/** @internal */
export const QueueCreateRequiresAssignment$inboundSchema: z.ZodNativeEnum<
  typeof QueueCreateRequiresAssignment
> = z.nativeEnum(QueueCreateRequiresAssignment);

/** @internal */
export const QueueCreateRequiresAssignment$outboundSchema: z.ZodNativeEnum<
  typeof QueueCreateRequiresAssignment
> = QueueCreateRequiresAssignment$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace QueueCreateRequiresAssignment$ {
  /** @deprecated use `QueueCreateRequiresAssignment$inboundSchema` instead. */
  export const inboundSchema = QueueCreateRequiresAssignment$inboundSchema;
  /** @deprecated use `QueueCreateRequiresAssignment$outboundSchema` instead. */
  export const outboundSchema = QueueCreateRequiresAssignment$outboundSchema;
}

/** @internal */
export const QueueCreate$inboundSchema: z.ZodType<
  QueueCreate,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string().optional(),
  name: z.string().optional(),
  default_timeframe: z.number().int().optional(),
  subscribed_staff: z.string().optional(),
  requires_assignment: QueueCreateRequiresAssignment$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "default_timeframe": "defaultTimeframe",
    "subscribed_staff": "subscribedStaff",
    "requires_assignment": "requiresAssignment",
  });
});

/** @internal */
export type QueueCreate$Outbound = {
  uuid?: string | undefined;
  name?: string | undefined;
  default_timeframe?: number | undefined;
  subscribed_staff?: string | undefined;
  requires_assignment?: number | undefined;
};

/** @internal */
export const QueueCreate$outboundSchema: z.ZodType<
  QueueCreate$Outbound,
  z.ZodTypeDef,
  QueueCreate
> = z.object({
  uuid: z.string().optional(),
  name: z.string().optional(),
  defaultTimeframe: z.number().int().optional(),
  subscribedStaff: z.string().optional(),
  requiresAssignment: QueueCreateRequiresAssignment$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    defaultTimeframe: "default_timeframe",
    subscribedStaff: "subscribed_staff",
    requiresAssignment: "requires_assignment",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace QueueCreate$ {
  /** @deprecated use `QueueCreate$inboundSchema` instead. */
  export const inboundSchema = QueueCreate$inboundSchema;
  /** @deprecated use `QueueCreate$outboundSchema` instead. */
  export const outboundSchema = QueueCreate$outboundSchema;
  /** @deprecated use `QueueCreate$Outbound` instead. */
  export type Outbound = QueueCreate$Outbound;
}

export function queueCreateToJSON(queueCreate: QueueCreate): string {
  return JSON.stringify(QueueCreate$outboundSchema.parse(queueCreate));
}

export function queueCreateFromJSON(
  jsonString: string,
): SafeParseResult<QueueCreate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => QueueCreate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'QueueCreate' from JSON`,
  );
}
