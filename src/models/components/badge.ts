/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Record active/deleted flag.
 *
 * @remarks
 *
 * Valid values are [0,1]
 */
export const BadgeActive = {
  Zero: 0,
  One: 1,
} as const;
/**
 * Record active/deleted flag.
 *
 * @remarks
 *
 * Valid values are [0,1]
 */
export type BadgeActive = ClosedEnum<typeof BadgeActive>;

export type Badge = {
  /**
   * Record UUID key
   */
  uuid?: string | undefined;
  /**
   * Record active/deleted flag.
   *
   * @remarks
   *
   * Valid values are [0,1]
   */
  active?: BadgeActive | undefined;
  /**
   * Record last modified timestamp
   */
  editDate?: string | undefined;
  /**
   * Badge Name
   */
  name: string;
  automaticallyAllocated?: string | undefined;
  fileName?: string | undefined;
  regardingFormUuid?: string | undefined;
  regardingAssetTypeUuid?: string | undefined;
};

export type BadgeInput = {
  /**
   * Record UUID key
   */
  uuid?: string | undefined;
  /**
   * Record active/deleted flag.
   *
   * @remarks
   *
   * Valid values are [0,1]
   */
  active?: BadgeActive | undefined;
  /**
   * Badge Name
   */
  name: string;
  automaticallyAllocated?: string | undefined;
  fileName?: string | undefined;
  regardingFormUuid?: string | undefined;
  regardingAssetTypeUuid?: string | undefined;
};

/** @internal */
export const BadgeActive$inboundSchema: z.ZodNativeEnum<typeof BadgeActive> = z
  .nativeEnum(BadgeActive);

/** @internal */
export const BadgeActive$outboundSchema: z.ZodNativeEnum<typeof BadgeActive> =
  BadgeActive$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BadgeActive$ {
  /** @deprecated use `BadgeActive$inboundSchema` instead. */
  export const inboundSchema = BadgeActive$inboundSchema;
  /** @deprecated use `BadgeActive$outboundSchema` instead. */
  export const outboundSchema = BadgeActive$outboundSchema;
}

/** @internal */
export const Badge$inboundSchema: z.ZodType<Badge, z.ZodTypeDef, unknown> = z
  .object({
    uuid: z.string().optional(),
    active: BadgeActive$inboundSchema.default(1),
    edit_date: z.string().optional(),
    name: z.string(),
    automatically_allocated: z.string().optional(),
    file_name: z.string().optional(),
    regarding_form_uuid: z.string().optional(),
    regarding_asset_type_uuid: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      "edit_date": "editDate",
      "automatically_allocated": "automaticallyAllocated",
      "file_name": "fileName",
      "regarding_form_uuid": "regardingFormUuid",
      "regarding_asset_type_uuid": "regardingAssetTypeUuid",
    });
  });

/** @internal */
export type Badge$Outbound = {
  uuid?: string | undefined;
  active: number;
  edit_date?: string | undefined;
  name: string;
  automatically_allocated?: string | undefined;
  file_name?: string | undefined;
  regarding_form_uuid?: string | undefined;
  regarding_asset_type_uuid?: string | undefined;
};

/** @internal */
export const Badge$outboundSchema: z.ZodType<
  Badge$Outbound,
  z.ZodTypeDef,
  Badge
> = z.object({
  uuid: z.string().optional(),
  active: BadgeActive$outboundSchema.default(1),
  editDate: z.string().optional(),
  name: z.string(),
  automaticallyAllocated: z.string().optional(),
  fileName: z.string().optional(),
  regardingFormUuid: z.string().optional(),
  regardingAssetTypeUuid: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    editDate: "edit_date",
    automaticallyAllocated: "automatically_allocated",
    fileName: "file_name",
    regardingFormUuid: "regarding_form_uuid",
    regardingAssetTypeUuid: "regarding_asset_type_uuid",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Badge$ {
  /** @deprecated use `Badge$inboundSchema` instead. */
  export const inboundSchema = Badge$inboundSchema;
  /** @deprecated use `Badge$outboundSchema` instead. */
  export const outboundSchema = Badge$outboundSchema;
  /** @deprecated use `Badge$Outbound` instead. */
  export type Outbound = Badge$Outbound;
}

export function badgeToJSON(badge: Badge): string {
  return JSON.stringify(Badge$outboundSchema.parse(badge));
}

export function badgeFromJSON(
  jsonString: string,
): SafeParseResult<Badge, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Badge$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Badge' from JSON`,
  );
}

/** @internal */
export const BadgeInput$inboundSchema: z.ZodType<
  BadgeInput,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string().optional(),
  active: BadgeActive$inboundSchema.default(1),
  name: z.string(),
  automatically_allocated: z.string().optional(),
  file_name: z.string().optional(),
  regarding_form_uuid: z.string().optional(),
  regarding_asset_type_uuid: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "automatically_allocated": "automaticallyAllocated",
    "file_name": "fileName",
    "regarding_form_uuid": "regardingFormUuid",
    "regarding_asset_type_uuid": "regardingAssetTypeUuid",
  });
});

/** @internal */
export type BadgeInput$Outbound = {
  uuid?: string | undefined;
  active: number;
  name: string;
  automatically_allocated?: string | undefined;
  file_name?: string | undefined;
  regarding_form_uuid?: string | undefined;
  regarding_asset_type_uuid?: string | undefined;
};

/** @internal */
export const BadgeInput$outboundSchema: z.ZodType<
  BadgeInput$Outbound,
  z.ZodTypeDef,
  BadgeInput
> = z.object({
  uuid: z.string().optional(),
  active: BadgeActive$outboundSchema.default(1),
  name: z.string(),
  automaticallyAllocated: z.string().optional(),
  fileName: z.string().optional(),
  regardingFormUuid: z.string().optional(),
  regardingAssetTypeUuid: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    automaticallyAllocated: "automatically_allocated",
    fileName: "file_name",
    regardingFormUuid: "regarding_form_uuid",
    regardingAssetTypeUuid: "regarding_asset_type_uuid",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BadgeInput$ {
  /** @deprecated use `BadgeInput$inboundSchema` instead. */
  export const inboundSchema = BadgeInput$inboundSchema;
  /** @deprecated use `BadgeInput$outboundSchema` instead. */
  export const outboundSchema = BadgeInput$outboundSchema;
  /** @deprecated use `BadgeInput$Outbound` instead. */
  export type Outbound = BadgeInput$Outbound;
}

export function badgeInputToJSON(badgeInput: BadgeInput): string {
  return JSON.stringify(BadgeInput$outboundSchema.parse(badgeInput));
}

export function badgeInputFromJSON(
  jsonString: string,
): SafeParseResult<BadgeInput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BadgeInput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BadgeInput' from JSON`,
  );
}
