/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Record active/deleted flag.
 *
 * @remarks
 *
 * Valid values are [0,1]
 */
export const NoteActive = {
  Zero: 0,
  One: 1,
} as const;
/**
 * Record active/deleted flag.
 *
 * @remarks
 *
 * Valid values are [0,1]
 */
export type NoteActive = ClosedEnum<typeof NoteActive>;

export type Note = {
  /**
   * Record UUID key
   */
  uuid?: string | undefined;
  /**
   * Record active/deleted flag.
   *
   * @remarks
   *
   * Valid values are [0,1]
   */
  active?: NoteActive | undefined;
  /**
   * Record last modified timestamp
   */
  editDate?: string | undefined;
  relatedObject?: string | undefined;
  relatedObjectUuid?: string | undefined;
  note?: string | undefined;
  actionRequired?: string | undefined;
  actionCompletedByStaffUuid?: string | undefined;
  /**
   * Staff Member who last modified record
   */
  editByStaffUuid?: string | undefined;
  /**
   * Record creation timestamp
   */
  createDate?: string | undefined;
};

export type NoteInput = {
  /**
   * Record UUID key
   */
  uuid?: string | undefined;
  /**
   * Record active/deleted flag.
   *
   * @remarks
   *
   * Valid values are [0,1]
   */
  active?: NoteActive | undefined;
  relatedObject?: string | undefined;
  relatedObjectUuid?: string | undefined;
  note?: string | undefined;
  actionRequired?: string | undefined;
  actionCompletedByStaffUuid?: string | undefined;
  /**
   * Record creation timestamp
   */
  createDate?: string | undefined;
};

/** @internal */
export const NoteActive$inboundSchema: z.ZodNativeEnum<typeof NoteActive> = z
  .nativeEnum(NoteActive);

/** @internal */
export const NoteActive$outboundSchema: z.ZodNativeEnum<typeof NoteActive> =
  NoteActive$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NoteActive$ {
  /** @deprecated use `NoteActive$inboundSchema` instead. */
  export const inboundSchema = NoteActive$inboundSchema;
  /** @deprecated use `NoteActive$outboundSchema` instead. */
  export const outboundSchema = NoteActive$outboundSchema;
}

/** @internal */
export const Note$inboundSchema: z.ZodType<Note, z.ZodTypeDef, unknown> = z
  .object({
    uuid: z.string().optional(),
    active: NoteActive$inboundSchema.default(1),
    edit_date: z.string().optional(),
    related_object: z.string().optional(),
    related_object_uuid: z.string().optional(),
    note: z.string().optional(),
    action_required: z.string().optional(),
    action_completed_by_staff_uuid: z.string().optional(),
    edit_by_staff_uuid: z.string().optional(),
    create_date: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      "edit_date": "editDate",
      "related_object": "relatedObject",
      "related_object_uuid": "relatedObjectUuid",
      "action_required": "actionRequired",
      "action_completed_by_staff_uuid": "actionCompletedByStaffUuid",
      "edit_by_staff_uuid": "editByStaffUuid",
      "create_date": "createDate",
    });
  });

/** @internal */
export type Note$Outbound = {
  uuid?: string | undefined;
  active: number;
  edit_date?: string | undefined;
  related_object?: string | undefined;
  related_object_uuid?: string | undefined;
  note?: string | undefined;
  action_required?: string | undefined;
  action_completed_by_staff_uuid?: string | undefined;
  edit_by_staff_uuid?: string | undefined;
  create_date?: string | undefined;
};

/** @internal */
export const Note$outboundSchema: z.ZodType<Note$Outbound, z.ZodTypeDef, Note> =
  z.object({
    uuid: z.string().optional(),
    active: NoteActive$outboundSchema.default(1),
    editDate: z.string().optional(),
    relatedObject: z.string().optional(),
    relatedObjectUuid: z.string().optional(),
    note: z.string().optional(),
    actionRequired: z.string().optional(),
    actionCompletedByStaffUuid: z.string().optional(),
    editByStaffUuid: z.string().optional(),
    createDate: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      editDate: "edit_date",
      relatedObject: "related_object",
      relatedObjectUuid: "related_object_uuid",
      actionRequired: "action_required",
      actionCompletedByStaffUuid: "action_completed_by_staff_uuid",
      editByStaffUuid: "edit_by_staff_uuid",
      createDate: "create_date",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Note$ {
  /** @deprecated use `Note$inboundSchema` instead. */
  export const inboundSchema = Note$inboundSchema;
  /** @deprecated use `Note$outboundSchema` instead. */
  export const outboundSchema = Note$outboundSchema;
  /** @deprecated use `Note$Outbound` instead. */
  export type Outbound = Note$Outbound;
}

export function noteToJSON(note: Note): string {
  return JSON.stringify(Note$outboundSchema.parse(note));
}

export function noteFromJSON(
  jsonString: string,
): SafeParseResult<Note, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Note$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Note' from JSON`,
  );
}

/** @internal */
export const NoteInput$inboundSchema: z.ZodType<
  NoteInput,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string().optional(),
  active: NoteActive$inboundSchema.default(1),
  related_object: z.string().optional(),
  related_object_uuid: z.string().optional(),
  note: z.string().optional(),
  action_required: z.string().optional(),
  action_completed_by_staff_uuid: z.string().optional(),
  create_date: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "related_object": "relatedObject",
    "related_object_uuid": "relatedObjectUuid",
    "action_required": "actionRequired",
    "action_completed_by_staff_uuid": "actionCompletedByStaffUuid",
    "create_date": "createDate",
  });
});

/** @internal */
export type NoteInput$Outbound = {
  uuid?: string | undefined;
  active: number;
  related_object?: string | undefined;
  related_object_uuid?: string | undefined;
  note?: string | undefined;
  action_required?: string | undefined;
  action_completed_by_staff_uuid?: string | undefined;
  create_date?: string | undefined;
};

/** @internal */
export const NoteInput$outboundSchema: z.ZodType<
  NoteInput$Outbound,
  z.ZodTypeDef,
  NoteInput
> = z.object({
  uuid: z.string().optional(),
  active: NoteActive$outboundSchema.default(1),
  relatedObject: z.string().optional(),
  relatedObjectUuid: z.string().optional(),
  note: z.string().optional(),
  actionRequired: z.string().optional(),
  actionCompletedByStaffUuid: z.string().optional(),
  createDate: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    relatedObject: "related_object",
    relatedObjectUuid: "related_object_uuid",
    actionRequired: "action_required",
    actionCompletedByStaffUuid: "action_completed_by_staff_uuid",
    createDate: "create_date",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NoteInput$ {
  /** @deprecated use `NoteInput$inboundSchema` instead. */
  export const inboundSchema = NoteInput$inboundSchema;
  /** @deprecated use `NoteInput$outboundSchema` instead. */
  export const outboundSchema = NoteInput$outboundSchema;
  /** @deprecated use `NoteInput$Outbound` instead. */
  export type Outbound = NoteInput$Outbound;
}

export function noteInputToJSON(noteInput: NoteInput): string {
  return JSON.stringify(NoteInput$outboundSchema.parse(noteInput));
}

export function noteInputFromJSON(
  jsonString: string,
): SafeParseResult<NoteInput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => NoteInput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NoteInput' from JSON`,
  );
}
