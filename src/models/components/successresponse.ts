/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type SuccessResponse = {
  success?: boolean | undefined;
  message?: string | undefined;
};

/** @internal */
export const SuccessResponse$inboundSchema: z.ZodType<
  SuccessResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  success: z.boolean().optional(),
  message: z.string().optional(),
});

/** @internal */
export type SuccessResponse$Outbound = {
  success?: boolean | undefined;
  message?: string | undefined;
};

/** @internal */
export const SuccessResponse$outboundSchema: z.ZodType<
  SuccessResponse$Outbound,
  z.ZodTypeDef,
  SuccessResponse
> = z.object({
  success: z.boolean().optional(),
  message: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SuccessResponse$ {
  /** @deprecated use `SuccessResponse$inboundSchema` instead. */
  export const inboundSchema = SuccessResponse$inboundSchema;
  /** @deprecated use `SuccessResponse$outboundSchema` instead. */
  export const outboundSchema = SuccessResponse$outboundSchema;
  /** @deprecated use `SuccessResponse$Outbound` instead. */
  export type Outbound = SuccessResponse$Outbound;
}

export function successResponseToJSON(
  successResponse: SuccessResponse,
): string {
  return JSON.stringify(SuccessResponse$outboundSchema.parse(successResponse));
}

export function successResponseFromJSON(
  jsonString: string,
): SafeParseResult<SuccessResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SuccessResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SuccessResponse' from JSON`,
  );
}
