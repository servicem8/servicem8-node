/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Record active/deleted flag.  Valid values are [0,1]
 */
export const SmsTemplateActive = {
  Zero: 0,
  One: 1,
} as const;
/**
 * Record active/deleted flag.  Valid values are [0,1]
 */
export type SmsTemplateActive = ClosedEnum<typeof SmsTemplateActive>;

/** @internal */
export const SmsTemplateActive$inboundSchema: z.ZodNativeEnum<
  typeof SmsTemplateActive
> = z.nativeEnum(SmsTemplateActive);

/** @internal */
export const SmsTemplateActive$outboundSchema: z.ZodNativeEnum<
  typeof SmsTemplateActive
> = SmsTemplateActive$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SmsTemplateActive$ {
  /** @deprecated use `SmsTemplateActive$inboundSchema` instead. */
  export const inboundSchema = SmsTemplateActive$inboundSchema;
  /** @deprecated use `SmsTemplateActive$outboundSchema` instead. */
  export const outboundSchema = SmsTemplateActive$outboundSchema;
}

export type SmsTemplate = {
  /**
   * Unique identifier for this record
   */
  uuid?: string | undefined;
  /**
   * Record active/deleted flag.  Valid values are [0,1]
   */
  active?: SmsTemplateActive | undefined;
  /**
   * Timestamp at which record was last modified
   */
  editDate?: any | undefined;
  name: string;
  message?: string | undefined;
};

export type SmsTemplateInput = {
  /**
   * Unique identifier for this record
   */
  uuid?: string | undefined;
  /**
   * Record active/deleted flag.  Valid values are [0,1]
   */
  active?: SmsTemplateActive | undefined;
  name: string;
  message?: string | undefined;
};

/** @internal */
export const SmsTemplate$inboundSchema: z.ZodType<
  SmsTemplate,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string().optional(),
  active: SmsTemplateActive$inboundSchema.default(1),
  edit_date: z.any().optional(),
  name: z.string(),
  message: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "edit_date": "editDate",
  });
});

/** @internal */
export type SmsTemplate$Outbound = {
  uuid?: string | undefined;
  active: number;
  edit_date?: any | undefined;
  name: string;
  message?: string | undefined;
};

/** @internal */
export const SmsTemplate$outboundSchema: z.ZodType<
  SmsTemplate$Outbound,
  z.ZodTypeDef,
  SmsTemplate
> = z.object({
  uuid: z.string().optional(),
  active: SmsTemplateActive$outboundSchema.default(1),
  editDate: z.any().optional(),
  name: z.string(),
  message: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    editDate: "edit_date",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SmsTemplate$ {
  /** @deprecated use `SmsTemplate$inboundSchema` instead. */
  export const inboundSchema = SmsTemplate$inboundSchema;
  /** @deprecated use `SmsTemplate$outboundSchema` instead. */
  export const outboundSchema = SmsTemplate$outboundSchema;
  /** @deprecated use `SmsTemplate$Outbound` instead. */
  export type Outbound = SmsTemplate$Outbound;
}

export function smsTemplateToJSON(smsTemplate: SmsTemplate): string {
  return JSON.stringify(SmsTemplate$outboundSchema.parse(smsTemplate));
}

export function smsTemplateFromJSON(
  jsonString: string,
): SafeParseResult<SmsTemplate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SmsTemplate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SmsTemplate' from JSON`,
  );
}

/** @internal */
export const SmsTemplateInput$inboundSchema: z.ZodType<
  SmsTemplateInput,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string().optional(),
  active: SmsTemplateActive$inboundSchema.default(1),
  name: z.string(),
  message: z.string().optional(),
});

/** @internal */
export type SmsTemplateInput$Outbound = {
  uuid?: string | undefined;
  active: number;
  name: string;
  message?: string | undefined;
};

/** @internal */
export const SmsTemplateInput$outboundSchema: z.ZodType<
  SmsTemplateInput$Outbound,
  z.ZodTypeDef,
  SmsTemplateInput
> = z.object({
  uuid: z.string().optional(),
  active: SmsTemplateActive$outboundSchema.default(1),
  name: z.string(),
  message: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SmsTemplateInput$ {
  /** @deprecated use `SmsTemplateInput$inboundSchema` instead. */
  export const inboundSchema = SmsTemplateInput$inboundSchema;
  /** @deprecated use `SmsTemplateInput$outboundSchema` instead. */
  export const outboundSchema = SmsTemplateInput$outboundSchema;
  /** @deprecated use `SmsTemplateInput$Outbound` instead. */
  export type Outbound = SmsTemplateInput$Outbound;
}

export function smsTemplateInputToJSON(
  smsTemplateInput: SmsTemplateInput,
): string {
  return JSON.stringify(
    SmsTemplateInput$outboundSchema.parse(smsTemplateInput),
  );
}

export function smsTemplateInputFromJSON(
  jsonString: string,
): SafeParseResult<SmsTemplateInput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SmsTemplateInput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SmsTemplateInput' from JSON`,
  );
}
