/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { clientsCreateClients } from "../funcs/clientsCreateClients.js";
import { clientsDeleteClients } from "../funcs/clientsDeleteClients.js";
import { clientsGetClients } from "../funcs/clientsGetClients.js";
import { clientsListClients } from "../funcs/clientsListClients.js";
import { clientsUpdateClients } from "../funcs/clientsUpdateClients.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Clients extends ClientSDK {
  /**
   * List all Clients
   *
   * @remarks
   *
   * #### Filtering
   * This endpoint supports result filtering. For more information on how to filter this request, [go here](/docs/filtering).
   *
   * #### OAuth Scope
   * This endpoint requires the following OAuth scope **read_customers**.
   */
  async listClients(
    options?: RequestOptions,
  ): Promise<operations.ListClientsResponse> {
    return unwrapAsync(clientsListClients(
      this,
      options,
    ));
  }

  /**
   * Create a new Client
   *
   * @remarks
   *
   * #### OAuth Scope
   * This endpoint requires the following OAuth scope **manage_customers**.
   *
   * #### Record UUID
   * UUID is optional for record creation. If no UUID is supplied, a UUID will be automatically generated for the new record and returned in the `x-record-uuid` response header.
   */
  async createClients(
    request: components.CompanyInput,
    options?: RequestOptions,
  ): Promise<operations.CreateClientsResponse> {
    return unwrapAsync(clientsCreateClients(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve a Client
   *
   * @remarks
   *
   * #### OAuth Scope
   * This endpoint requires the following OAuth scope **read_customers**.
   */
  async getClients(
    request: operations.GetClientsRequest,
    options?: RequestOptions,
  ): Promise<operations.GetClientsResponse> {
    return unwrapAsync(clientsGetClients(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a Client
   *
   * @remarks
   *
   * #### OAuth Scope
   * This endpoint requires the following OAuth scope **manage_customers**.
   */
  async updateClients(
    request: operations.UpdateClientsRequest,
    options?: RequestOptions,
  ): Promise<operations.UpdateClientsResponse> {
    return unwrapAsync(clientsUpdateClients(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a Client
   *
   * @remarks
   *
   * In ServiceM8, deleting a record sets its `active` field to `0`. Inactive records are still accessible on the API, but are hidden in the UI. Inactive records can be restored by setting their `active` field to `1`.
   *
   * #### OAuth Scope
   * This endpoint requires the following OAuth scope **manage_customers**.
   */
  async deleteClients(
    request: operations.DeleteClientsRequest,
    options?: RequestOptions,
  ): Promise<operations.DeleteClientsResponse> {
    return unwrapAsync(clientsDeleteClients(
      this,
      request,
      options,
    ));
  }
}
