/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { formFieldsCreateFormFields } from "../funcs/formFieldsCreateFormFields.js";
import { formFieldsDeleteFormFields } from "../funcs/formFieldsDeleteFormFields.js";
import { formFieldsGetFormFields } from "../funcs/formFieldsGetFormFields.js";
import { formFieldsListFormFields } from "../funcs/formFieldsListFormFields.js";
import { formFieldsUpdateFormFields } from "../funcs/formFieldsUpdateFormFields.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class FormFields extends ClientSDK {
  /**
   * List all Form Fields
   *
   * @remarks
   *
   * #### Filtering
   * This endpoint supports result filtering. For more information on how to filter this request, [go here](/docs/filtering).
   *
   * #### OAuth Scope
   * This endpoint requires the following OAuth scope **read_forms**.
   */
  async listFormFields(
    options?: RequestOptions,
  ): Promise<Array<components.FormField>> {
    return unwrapAsync(formFieldsListFormFields(
      this,
      options,
    ));
  }

  /**
   * Create a new Form Field
   *
   * @remarks
   *
   * #### OAuth Scope
   * This endpoint requires the following OAuth scope **manage_forms**.
   *
   * #### Record UUID
   * UUID is optional for record creation. If no UUID is supplied, a UUID will be automatically generated for the new record and returned in the `x-record-uuid` response header.
   */
  async createFormFields(
    request: components.FormFieldInput,
    options?: RequestOptions,
  ): Promise<operations.CreateFormFieldsResponse> {
    return unwrapAsync(formFieldsCreateFormFields(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve a Form Field
   *
   * @remarks
   *
   * #### OAuth Scope
   * This endpoint requires the following OAuth scope **read_forms**.
   */
  async getFormFields(
    request: operations.GetFormFieldsRequest,
    options?: RequestOptions,
  ): Promise<components.FormField> {
    return unwrapAsync(formFieldsGetFormFields(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a Form Field
   *
   * @remarks
   *
   * #### OAuth Scope
   * This endpoint requires the following OAuth scope **manage_forms**.
   */
  async updateFormFields(
    request: operations.UpdateFormFieldsRequest,
    options?: RequestOptions,
  ): Promise<components.Result> {
    return unwrapAsync(formFieldsUpdateFormFields(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a Form Field
   *
   * @remarks
   *
   * In ServiceM8, deleting a record sets its `active` field to `0`. Inactive records are still accessible on the API, but are hidden in the UI. Inactive records can be restored by setting their `active` field to `1`.
   *
   * #### OAuth Scope
   * This endpoint requires the following OAuth scope **manage_forms**.
   */
  async deleteFormFields(
    request: operations.DeleteFormFieldsRequest,
    options?: RequestOptions,
  ): Promise<components.Result> {
    return unwrapAsync(formFieldsDeleteFormFields(
      this,
      request,
      options,
    ));
  }
}
