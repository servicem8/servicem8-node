/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { tasksCreateTasks } from "../funcs/tasksCreateTasks.js";
import { tasksDeleteTasks } from "../funcs/tasksDeleteTasks.js";
import { tasksGetTasks } from "../funcs/tasksGetTasks.js";
import { tasksListTasks } from "../funcs/tasksListTasks.js";
import { tasksUpdateTasks } from "../funcs/tasksUpdateTasks.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Tasks extends ClientSDK {
  /**
   * List all Tasks
   *
   * @remarks
   *
   * #### Filtering
   * This endpoint supports result filtering. For more information on how to filter this request, [go here](/docs/filtering).
   *
   * #### OAuth Scope
   * This endpoint requires the following OAuth scope **read_tasks**.
   */
  async listTasks(
    options?: RequestOptions,
  ): Promise<operations.ListTasksResponse> {
    return unwrapAsync(tasksListTasks(
      this,
      options,
    ));
  }

  /**
   * Create a new Task
   *
   * @remarks
   *
   * #### OAuth Scope
   * This endpoint requires the following OAuth scope **manage_tasks**.
   *
   * #### Record UUID
   * UUID is optional for record creation. If no UUID is supplied, a UUID will be automatically generated for the new record and returned in the response header as x-record-uuid.
   */
  async createTasks(
    request: components.TaskInput,
    options?: RequestOptions,
  ): Promise<operations.CreateTasksResponse> {
    return unwrapAsync(tasksCreateTasks(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve a Task
   *
   * @remarks
   *
   * #### OAuth Scope
   * This endpoint requires the following OAuth scope **read_tasks**.
   */
  async getTasks(
    request: operations.GetTasksRequest,
    options?: RequestOptions,
  ): Promise<operations.GetTasksResponse> {
    return unwrapAsync(tasksGetTasks(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a Task
   *
   * @remarks
   *
   * #### OAuth Scope
   * This endpoint requires the following OAuth scope **manage_tasks**.
   */
  async updateTasks(
    request: operations.UpdateTasksRequest,
    options?: RequestOptions,
  ): Promise<operations.UpdateTasksResponse> {
    return unwrapAsync(tasksUpdateTasks(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a Task
   *
   * @remarks
   *
   * In ServiceM8, records are never deleted, but are archived. Archived records will remain accessible via the API as (active = 0), however will no longer be visible in UI. Archived records can be restored to active by setting the record active field to 1.
   *
   * #### OAuth Scope
   * This endpoint requires the following OAuth scope **manage_tasks**.
   */
  async deleteTasks(
    request: operations.DeleteTasksRequest,
    options?: RequestOptions,
  ): Promise<operations.DeleteTasksResponse> {
    return unwrapAsync(tasksDeleteTasks(
      this,
      request,
      options,
    ));
  }
}
