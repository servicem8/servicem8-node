/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { vendorsGetVendors } from "../funcs/vendorsGetVendors.js";
import { vendorsListVendors } from "../funcs/vendorsListVendors.js";
import { vendorsUpdateVendors } from "../funcs/vendorsUpdateVendors.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Vendors extends ClientSDK {
  /**
   * List all Vendors
   *
   * @remarks
   * Vendor account information
   *
   * #### Filtering
   * This endpoint supports result filtering. For more information on how to filter this request, [go here](/docs/filtering).
   *
   * #### OAuth Scope
   * This endpoint requires the following OAuth scope **vendor**.
   */
  async listVendors(
    options?: RequestOptions,
  ): Promise<operations.ListVendorsResponse> {
    return unwrapAsync(vendorsListVendors(
      this,
      options,
    ));
  }

  /**
   * Retrieve a Vendor
   *
   * @remarks
   * Vendor account information
   *
   * #### OAuth Scope
   * This endpoint requires the following OAuth scope **vendor**.
   */
  async getVendors(
    request: operations.GetVendorsRequest,
    options?: RequestOptions,
  ): Promise<operations.GetVendorsResponse> {
    return unwrapAsync(vendorsGetVendors(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a Vendor
   *
   * @remarks
   * Vendor account information
   */
  async updateVendors(
    request: operations.UpdateVendorsRequest,
    options?: RequestOptions,
  ): Promise<operations.UpdateVendorsResponse> {
    return unwrapAsync(vendorsUpdateVendors(
      this,
      request,
      options,
    ));
  }
}
