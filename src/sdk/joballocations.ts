/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { jobAllocationsCreateJobAllocations } from "../funcs/jobAllocationsCreateJobAllocations.js";
import { jobAllocationsDeleteJobAllocations } from "../funcs/jobAllocationsDeleteJobAllocations.js";
import { jobAllocationsGetJobAllocations } from "../funcs/jobAllocationsGetJobAllocations.js";
import { jobAllocationsListJobAllocations } from "../funcs/jobAllocationsListJobAllocations.js";
import { jobAllocationsUpdateJobAllocations } from "../funcs/jobAllocationsUpdateJobAllocations.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class JobAllocations extends ClientSDK {
  /**
   * List all Job Allocations
   *
   * @remarks
   *
   * #### Filtering
   * This endpoint supports result filtering. For more information on how to filter this request, [go here](/docs/filtering).
   *
   * #### OAuth Scope
   * This endpoint requires the following OAuth scope **read_schedule**.
   */
  async listJobAllocations(
    options?: RequestOptions,
  ): Promise<operations.ListJobAllocationsResponse> {
    return unwrapAsync(jobAllocationsListJobAllocations(
      this,
      options,
    ));
  }

  /**
   * Create a new Job Allocation
   *
   * @remarks
   *
   * #### OAuth Scope
   * This endpoint requires the following OAuth scope **manage_schedule**.
   *
   * #### Record UUID
   * UUID is optional for record creation. If no UUID is supplied, a UUID will be automatically generated for the new record and returned in the response header as x-record-uuid.
   */
  async createJobAllocations(
    request: components.JobAllocationInput,
    options?: RequestOptions,
  ): Promise<operations.CreateJobAllocationsResponse> {
    return unwrapAsync(jobAllocationsCreateJobAllocations(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve a Job Allocation
   *
   * @remarks
   *
   * #### OAuth Scope
   * This endpoint requires the following OAuth scope **read_schedule**.
   */
  async getJobAllocations(
    request: operations.GetJobAllocationsRequest,
    options?: RequestOptions,
  ): Promise<operations.GetJobAllocationsResponse> {
    return unwrapAsync(jobAllocationsGetJobAllocations(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a Job Allocation
   */
  async updateJobAllocations(
    request: operations.UpdateJobAllocationsRequest,
    options?: RequestOptions,
  ): Promise<operations.UpdateJobAllocationsResponse> {
    return unwrapAsync(jobAllocationsUpdateJobAllocations(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a Job Allocation
   *
   * @remarks
   *
   * In ServiceM8, records are never deleted, but are archived. Archived records will remain accessible via the API as (active = 0), however will no longer be visible in UI. Archived records can be restored to active by setting the record active field to 1.
   */
  async deleteJobAllocations(
    request: operations.DeleteJobAllocationsRequest,
    options?: RequestOptions,
  ): Promise<operations.DeleteJobAllocationsResponse> {
    return unwrapAsync(jobAllocationsDeleteJobAllocations(
      this,
      request,
      options,
    ));
  }
}
