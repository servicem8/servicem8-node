/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { jobQueuesCreateJobQueues } from "../funcs/jobQueuesCreateJobQueues.js";
import { jobQueuesDeleteJobQueues } from "../funcs/jobQueuesDeleteJobQueues.js";
import { jobQueuesGetJobQueues } from "../funcs/jobQueuesGetJobQueues.js";
import { jobQueuesListJobQueues } from "../funcs/jobQueuesListJobQueues.js";
import { jobQueuesUpdateJobQueues } from "../funcs/jobQueuesUpdateJobQueues.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class JobQueues extends ClientSDK {
  /**
   * List all Job Queues
   *
   * @remarks
   *
   * #### Filtering
   * This endpoint supports result filtering. For more information on how to filter this request, [go here](/docs/filtering).
   *
   * #### OAuth Scope
   * This endpoint requires the following OAuth scope **read_job_queues**.
   */
  async listJobQueues(
    options?: RequestOptions,
  ): Promise<operations.ListJobQueuesResponse> {
    return unwrapAsync(jobQueuesListJobQueues(
      this,
      options,
    ));
  }

  /**
   * Create a new Job Queue
   *
   * @remarks
   *
   * #### OAuth Scope
   * This endpoint requires the following OAuth scope **manage_job_queues**.
   *
   * #### Record UUID
   * UUID is optional for record creation. If no UUID is supplied, a UUID will be automatically generated for the new record and returned in the `x-record-uuid` response header.
   */
  async createJobQueues(
    request: components.QueueInput,
    options?: RequestOptions,
  ): Promise<operations.CreateJobQueuesResponse> {
    return unwrapAsync(jobQueuesCreateJobQueues(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve a Job Queue
   *
   * @remarks
   *
   * #### OAuth Scope
   * This endpoint requires the following OAuth scope **read_job_queues**.
   */
  async getJobQueues(
    request: operations.GetJobQueuesRequest,
    options?: RequestOptions,
  ): Promise<operations.GetJobQueuesResponse> {
    return unwrapAsync(jobQueuesGetJobQueues(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a Job Queue
   *
   * @remarks
   *
   * #### OAuth Scope
   * This endpoint requires the following OAuth scope **manage_job_queues**.
   */
  async updateJobQueues(
    request: operations.UpdateJobQueuesRequest,
    options?: RequestOptions,
  ): Promise<operations.UpdateJobQueuesResponse> {
    return unwrapAsync(jobQueuesUpdateJobQueues(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a Job Queue
   *
   * @remarks
   *
   * In ServiceM8, deleting a record sets its `active` field to `0`. Inactive records are still accessible on the API, but are hidden in the UI. Inactive records can be restored by setting their `active` field to `1`.
   *
   * #### OAuth Scope
   * This endpoint requires the following OAuth scope **manage_job_queues**.
   */
  async deleteJobQueues(
    request: operations.DeleteJobQueuesRequest,
    options?: RequestOptions,
  ): Promise<operations.DeleteJobQueuesResponse> {
    return unwrapAsync(jobQueuesDeleteJobQueues(
      this,
      request,
      options,
    ));
  }
}
