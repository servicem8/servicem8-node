/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { jobMaterialsCreateJobMaterials } from "../funcs/jobMaterialsCreateJobMaterials.js";
import { jobMaterialsDeleteJobMaterials } from "../funcs/jobMaterialsDeleteJobMaterials.js";
import { jobMaterialsGetJobMaterials } from "../funcs/jobMaterialsGetJobMaterials.js";
import { jobMaterialsListJobMaterials } from "../funcs/jobMaterialsListJobMaterials.js";
import { jobMaterialsUpdateJobMaterials } from "../funcs/jobMaterialsUpdateJobMaterials.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class JobMaterials extends ClientSDK {
  /**
   * List all Job Materials
   *
   * @remarks
   *
   * #### Filtering
   * This endpoint supports result filtering. For more information on how to filter this request, [go here](/docs/filtering).
   *
   * #### OAuth Scope
   * This endpoint requires the following OAuth scope **read_job_materials**.
   */
  async listJobMaterials(
    options?: RequestOptions,
  ): Promise<Array<components.JobMaterial>> {
    return unwrapAsync(jobMaterialsListJobMaterials(
      this,
      options,
    ));
  }

  /**
   * Create a new Job Material
   *
   * @remarks
   *
   * #### OAuth Scope
   * This endpoint requires the following OAuth scope **manage_job_materials**.
   *
   * #### Record UUID
   * UUID is optional for record creation. If no UUID is supplied, a UUID will be automatically generated for the new record and returned in the `x-record-uuid` response header.
   */
  async createJobMaterials(
    request: components.JobMaterialInput,
    options?: RequestOptions,
  ): Promise<operations.CreateJobMaterialsResponse> {
    return unwrapAsync(jobMaterialsCreateJobMaterials(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve a Job Material
   *
   * @remarks
   *
   * #### OAuth Scope
   * This endpoint requires the following OAuth scope **read_job_materials**.
   */
  async getJobMaterials(
    request: operations.GetJobMaterialsRequest,
    options?: RequestOptions,
  ): Promise<components.JobMaterial> {
    return unwrapAsync(jobMaterialsGetJobMaterials(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a Job Material
   *
   * @remarks
   *
   * #### OAuth Scope
   * This endpoint requires the following OAuth scope **manage_job_materials**.
   */
  async updateJobMaterials(
    request: operations.UpdateJobMaterialsRequest,
    options?: RequestOptions,
  ): Promise<components.Result> {
    return unwrapAsync(jobMaterialsUpdateJobMaterials(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a Job Material
   *
   * @remarks
   *
   * In ServiceM8, deleting a record sets its `active` field to `0`. Inactive records are still accessible on the API, but are hidden in the UI. Inactive records can be restored by setting their `active` field to `1`.
   *
   * #### OAuth Scope
   * This endpoint requires the following OAuth scope **manage_job_materials**.
   */
  async deleteJobMaterials(
    request: operations.DeleteJobMaterialsRequest,
    options?: RequestOptions,
  ): Promise<components.Result> {
    return unwrapAsync(jobMaterialsDeleteJobMaterials(
      this,
      request,
      options,
    ));
  }
}
