/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { suppliersCreateSuppliers } from "../funcs/suppliersCreateSuppliers.js";
import { suppliersDeleteSuppliers } from "../funcs/suppliersDeleteSuppliers.js";
import { suppliersGetSuppliers } from "../funcs/suppliersGetSuppliers.js";
import { suppliersListSuppliers } from "../funcs/suppliersListSuppliers.js";
import { suppliersUpdateSuppliers } from "../funcs/suppliersUpdateSuppliers.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Suppliers extends ClientSDK {
  /**
   * List all Suppliers
   *
   * @remarks
   *
   * #### Filtering
   * This endpoint supports result filtering. For more information on how to filter this request, [go here](/docs/filtering).
   *
   * #### OAuth Scope
   * This endpoint requires the following OAuth scope **read_suppliers**.
   */
  async listSuppliers(
    options?: RequestOptions,
  ): Promise<Array<components.Supplier>> {
    return unwrapAsync(suppliersListSuppliers(
      this,
      options,
    ));
  }

  /**
   * Create a new Supplier
   *
   * @remarks
   *
   * #### OAuth Scope
   * This endpoint requires the following OAuth scope **manage_suppliers**.
   *
   * #### Record UUID
   * UUID is optional for record creation. If no UUID is supplied, a UUID will be automatically generated for the new record and returned in the `x-record-uuid` response header.
   */
  async createSuppliers(
    request: components.SupplierCreate,
    options?: RequestOptions,
  ): Promise<operations.CreateSuppliersResponse> {
    return unwrapAsync(suppliersCreateSuppliers(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve a Supplier
   *
   * @remarks
   *
   * #### OAuth Scope
   * This endpoint requires the following OAuth scope **read_suppliers**.
   */
  async getSuppliers(
    request: operations.GetSuppliersRequest,
    options?: RequestOptions,
  ): Promise<components.Supplier> {
    return unwrapAsync(suppliersGetSuppliers(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a Supplier
   *
   * @remarks
   *
   * #### OAuth Scope
   * This endpoint requires the following OAuth scope **manage_suppliers**.
   */
  async updateSuppliers(
    request: operations.UpdateSuppliersRequest,
    options?: RequestOptions,
  ): Promise<components.Result> {
    return unwrapAsync(suppliersUpdateSuppliers(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a Supplier
   *
   * @remarks
   *
   * In ServiceM8, deleting a record sets its `active` field to `0`. Inactive records are still accessible on the API, but are hidden in the UI. Inactive records can be restored by setting their `active` field to `1`.
   *
   * #### OAuth Scope
   * This endpoint requires the following OAuth scope **manage_suppliers**.
   */
  async deleteSuppliers(
    request: operations.DeleteSuppliersRequest,
    options?: RequestOptions,
  ): Promise<components.Result> {
    return unwrapAsync(suppliersDeleteSuppliers(
      this,
      request,
      options,
    ));
  }
}
