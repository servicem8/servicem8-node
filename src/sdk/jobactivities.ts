/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { jobActivitiesCreateJobActivities } from "../funcs/jobActivitiesCreateJobActivities.js";
import { jobActivitiesDeleteJobActivities } from "../funcs/jobActivitiesDeleteJobActivities.js";
import { jobActivitiesGetJobActivities } from "../funcs/jobActivitiesGetJobActivities.js";
import { jobActivitiesListJobActivities } from "../funcs/jobActivitiesListJobActivities.js";
import { jobActivitiesUpdateJobActivities } from "../funcs/jobActivitiesUpdateJobActivities.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class JobActivities extends ClientSDK {
  /**
   * List all Job Activities
   *
   * @remarks
   *
   * #### Filtering
   * This endpoint supports result filtering. For more information on how to filter this request, [go here](/docs/filtering).
   *
   * #### OAuth Scope
   * This endpoint requires the following OAuth scope **read_schedule**.
   */
  async listJobActivities(
    options?: RequestOptions,
  ): Promise<Array<components.JobActivity>> {
    return unwrapAsync(jobActivitiesListJobActivities(
      this,
      options,
    ));
  }

  /**
   * Create a new Job Activity
   *
   * @remarks
   *
   * #### OAuth Scope
   * This endpoint requires the following OAuth scope **manage_schedule**.
   *
   * #### Record UUID
   * UUID is optional for record creation. If no UUID is supplied, a UUID will be automatically generated for the new record and returned in the `x-record-uuid` response header.
   */
  async createJobActivities(
    request: components.JobActivityInput,
    options?: RequestOptions,
  ): Promise<operations.CreateJobActivitiesResponse> {
    return unwrapAsync(jobActivitiesCreateJobActivities(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve a Job Activity
   *
   * @remarks
   *
   * #### OAuth Scope
   * This endpoint requires the following OAuth scope **read_schedule**.
   */
  async getJobActivities(
    request: operations.GetJobActivitiesRequest,
    options?: RequestOptions,
  ): Promise<components.JobActivity> {
    return unwrapAsync(jobActivitiesGetJobActivities(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a Job Activity
   *
   * @remarks
   *
   * #### OAuth Scope
   * This endpoint requires the following OAuth scope **manage_schedule**.
   */
  async updateJobActivities(
    request: operations.UpdateJobActivitiesRequest,
    options?: RequestOptions,
  ): Promise<components.Result> {
    return unwrapAsync(jobActivitiesUpdateJobActivities(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a Job Activity
   *
   * @remarks
   *
   * In ServiceM8, deleting a record sets its `active` field to `0`. Inactive records are still accessible on the API, but are hidden in the UI. Inactive records can be restored by setting their `active` field to `1`.
   *
   * #### OAuth Scope
   * This endpoint requires the following OAuth scope **manage_schedule**.
   */
  async deleteJobActivities(
    request: operations.DeleteJobActivitiesRequest,
    options?: RequestOptions,
  ): Promise<components.Result> {
    return unwrapAsync(jobActivitiesDeleteJobActivities(
      this,
      request,
      options,
    ));
  }
}
