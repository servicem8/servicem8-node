/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { bundlesCreateBundles } from "../funcs/bundlesCreateBundles.js";
import { bundlesDeleteBundles } from "../funcs/bundlesDeleteBundles.js";
import { bundlesGetBundles } from "../funcs/bundlesGetBundles.js";
import { bundlesListBundles } from "../funcs/bundlesListBundles.js";
import { bundlesUpdateBundles } from "../funcs/bundlesUpdateBundles.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Bundles extends ClientSDK {
  /**
   * List all Bundles
   *
   * @remarks
   *
   * #### Filtering
   * This endpoint supports result filtering. For more information on how to filter this request, [go here](/docs/filtering).
   *
   * #### OAuth Scope
   * This endpoint requires the following OAuth scope **read_inventory**.
   */
  async listBundles(
    options?: RequestOptions,
  ): Promise<operations.ListBundlesResponse> {
    return unwrapAsync(bundlesListBundles(
      this,
      options,
    ));
  }

  /**
   * Create a new Bundle
   *
   * @remarks
   *
   * #### OAuth Scope
   * This endpoint requires the following OAuth scope **manage_inventory**.
   *
   * #### Record UUID
   * UUID is optional for record creation. If no UUID is supplied, a UUID will be automatically generated for the new record and returned in the `x-record-uuid` response header.
   */
  async createBundles(
    request: components.MaterialBundleInput,
    options?: RequestOptions,
  ): Promise<operations.CreateBundlesResponse> {
    return unwrapAsync(bundlesCreateBundles(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve a Bundle
   *
   * @remarks
   *
   * #### OAuth Scope
   * This endpoint requires the following OAuth scope **read_inventory**.
   */
  async getBundles(
    request: operations.GetBundlesRequest,
    options?: RequestOptions,
  ): Promise<operations.GetBundlesResponse> {
    return unwrapAsync(bundlesGetBundles(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a Bundle
   *
   * @remarks
   *
   * #### OAuth Scope
   * This endpoint requires the following OAuth scope **manage_inventory**.
   */
  async updateBundles(
    request: operations.UpdateBundlesRequest,
    options?: RequestOptions,
  ): Promise<operations.UpdateBundlesResponse> {
    return unwrapAsync(bundlesUpdateBundles(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a Bundle
   *
   * @remarks
   *
   * In ServiceM8, deleting a record sets its `active` field to `0`. Inactive records are still accessible on the API, but are hidden in the UI. Inactive records can be restored by setting their `active` field to `1`.
   *
   * #### OAuth Scope
   * This endpoint requires the following OAuth scope **manage_inventory**.
   */
  async deleteBundles(
    request: operations.DeleteBundlesRequest,
    options?: RequestOptions,
  ): Promise<operations.DeleteBundlesResponse> {
    return unwrapAsync(bundlesDeleteBundles(
      this,
      request,
      options,
    ));
  }
}
