/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { feedbackCreateFeedback } from "../funcs/feedbackCreateFeedback.js";
import { feedbackDeleteFeedback } from "../funcs/feedbackDeleteFeedback.js";
import { feedbackGetFeedback } from "../funcs/feedbackGetFeedback.js";
import { feedbackListFeedback } from "../funcs/feedbackListFeedback.js";
import { feedbackUpdateFeedback } from "../funcs/feedbackUpdateFeedback.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Feedback extends ClientSDK {
  /**
   * List all Feedback
   *
   * @remarks
   *
   * #### Filtering
   * This endpoint supports result filtering. For more information on how to filter this request, [go here](/docs/filtering).
   *
   * #### OAuth Scope
   * This endpoint requires the following OAuth scope **read_feedback**.
   */
  async listFeedback(
    options?: RequestOptions,
  ): Promise<operations.ListFeedbackResponse> {
    return unwrapAsync(feedbackListFeedback(
      this,
      options,
    ));
  }

  /**
   * Create a new Feedback
   *
   * @remarks
   *
   * #### OAuth Scope
   * This endpoint requires the following OAuth scope **manage_feedback**.
   *
   * #### Record UUID
   * UUID is optional for record creation. If no UUID is supplied, a UUID will be automatically generated for the new record and returned in the `x-record-uuid` response header.
   */
  async createFeedback(
    request: components.FeedbackInput,
    options?: RequestOptions,
  ): Promise<operations.CreateFeedbackResponse> {
    return unwrapAsync(feedbackCreateFeedback(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve a Feedback
   *
   * @remarks
   *
   * #### OAuth Scope
   * This endpoint requires the following OAuth scope **read_feedback**.
   */
  async getFeedback(
    request: operations.GetFeedbackRequest,
    options?: RequestOptions,
  ): Promise<operations.GetFeedbackResponse> {
    return unwrapAsync(feedbackGetFeedback(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a Feedback
   *
   * @remarks
   *
   * #### OAuth Scope
   * This endpoint requires the following OAuth scope **manage_feedback**.
   */
  async updateFeedback(
    request: operations.UpdateFeedbackRequest,
    options?: RequestOptions,
  ): Promise<operations.UpdateFeedbackResponse> {
    return unwrapAsync(feedbackUpdateFeedback(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a Feedback
   *
   * @remarks
   *
   * In ServiceM8, deleting a record sets its `active` field to `0`. Inactive records are still accessible on the API, but are hidden in the UI. Inactive records can be restored by setting their `active` field to `1`.
   *
   * #### OAuth Scope
   * This endpoint requires the following OAuth scope **manage_feedback**.
   */
  async deleteFeedback(
    request: operations.DeleteFeedbackRequest,
    options?: RequestOptions,
  ): Promise<operations.DeleteFeedbackResponse> {
    return unwrapAsync(feedbackDeleteFeedback(
      this,
      request,
      options,
    ));
  }
}
