/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { securityRolesCreateSecurityRoles } from "../funcs/securityRolesCreateSecurityRoles.js";
import { securityRolesDeleteSecurityRoles } from "../funcs/securityRolesDeleteSecurityRoles.js";
import { securityRolesGetSecurityRoles } from "../funcs/securityRolesGetSecurityRoles.js";
import { securityRolesListSecurityRoles } from "../funcs/securityRolesListSecurityRoles.js";
import { securityRolesUpdateSecurityRoles } from "../funcs/securityRolesUpdateSecurityRoles.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class SecurityRoles extends ClientSDK {
  /**
   * List all Security Roles
   *
   * @remarks
   *
   * #### Filtering
   * This endpoint supports result filtering. For more information on how to filter this request, [go here](/docs/filtering).
   */
  async listSecurityRoles(
    options?: RequestOptions,
  ): Promise<operations.ListSecurityRolesResponse> {
    return unwrapAsync(securityRolesListSecurityRoles(
      this,
      options,
    ));
  }

  /**
   * Create a new Security Role
   *
   * @remarks
   *
   * #### Record UUID
   * UUID is optional for record creation. If no UUID is supplied, a UUID will be automatically generated for the new record and returned in the response header as x-record-uuid.
   */
  async createSecurityRoles(
    request: components.SecurityRoleInput,
    options?: RequestOptions,
  ): Promise<operations.CreateSecurityRolesResponse> {
    return unwrapAsync(securityRolesCreateSecurityRoles(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve a Security Role
   */
  async getSecurityRoles(
    request: operations.GetSecurityRolesRequest,
    options?: RequestOptions,
  ): Promise<operations.GetSecurityRolesResponse> {
    return unwrapAsync(securityRolesGetSecurityRoles(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a Security Role
   */
  async updateSecurityRoles(
    request: operations.UpdateSecurityRolesRequest,
    options?: RequestOptions,
  ): Promise<operations.UpdateSecurityRolesResponse> {
    return unwrapAsync(securityRolesUpdateSecurityRoles(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a Security Role
   *
   * @remarks
   *
   * In ServiceM8, records are never deleted, but are archived. Archived records will remain accessible via the API as (active = 0), however will no longer be visible in UI. Archived records can be restored to active by setting the record active field to 1.
   */
  async deleteSecurityRoles(
    request: operations.DeleteSecurityRolesRequest,
    options?: RequestOptions,
  ): Promise<operations.DeleteSecurityRolesResponse> {
    return unwrapAsync(securityRolesDeleteSecurityRoles(
      this,
      request,
      options,
    ));
  }
}
