/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { inboxAddNoteToInboxMessage } from "../funcs/inboxAddNoteToInboxMessage.js";
import { inboxArchiveInboxMessage } from "../funcs/inboxArchiveInboxMessage.js";
import { inboxAttachInboxMessageToJob } from "../funcs/inboxAttachInboxMessageToJob.js";
import { inboxConvertInboxMessageToJob } from "../funcs/inboxConvertInboxMessageToJob.js";
import { inboxCreateInboxMessage } from "../funcs/inboxCreateInboxMessage.js";
import { inboxGetInboxMessage } from "../funcs/inboxGetInboxMessage.js";
import { inboxListInboxMessages } from "../funcs/inboxListInboxMessages.js";
import { inboxMarkInboxMessageAsRead } from "../funcs/inboxMarkInboxMessageAsRead.js";
import { inboxSnoozeInboxMessage } from "../funcs/inboxSnoozeInboxMessage.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Inbox extends ClientSDK {
  /**
   * List inbox messages
   *
   * @remarks
   * Retrieves a paginated list of inbox messages with optional filtering
   */
  async listInboxMessages(
    request: operations.ListInboxMessagesRequest,
    options?: RequestOptions,
  ): Promise<components.InboxMessagesResponse> {
    return unwrapAsync(inboxListInboxMessages(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a new inbox message
   *
   * @remarks
   * Creates a new inbox message that will appear in the inbox
   */
  async createInboxMessage(
    request: components.CreateInboxMessageRequest,
    options?: RequestOptions,
  ): Promise<components.InboxMessageDetail> {
    return unwrapAsync(inboxCreateInboxMessage(
      this,
      request,
      options,
    ));
  }

  /**
   * Get inbox message details
   *
   * @remarks
   * Retrieves detailed information about a specific inbox message including attachments and conversation history
   */
  async getInboxMessage(
    request: operations.GetInboxMessageRequest,
    options?: RequestOptions,
  ): Promise<components.InboxMessageDetail> {
    return unwrapAsync(inboxGetInboxMessage(
      this,
      request,
      options,
    ));
  }

  /**
   * Mark message as read
   *
   * @remarks
   * Marks an inbox message as read
   */
  async markInboxMessageAsRead(
    request: operations.MarkInboxMessageAsReadRequest,
    options?: RequestOptions,
  ): Promise<components.SuccessResponse> {
    return unwrapAsync(inboxMarkInboxMessageAsRead(
      this,
      request,
      options,
    ));
  }

  /**
   * Archive or unarchive message
   *
   * @remarks
   * Archives or unarchives an inbox message
   */
  async archiveInboxMessage(
    request: operations.ArchiveInboxMessageRequest,
    options?: RequestOptions,
  ): Promise<components.SuccessResponse> {
    return unwrapAsync(inboxArchiveInboxMessage(
      this,
      request,
      options,
    ));
  }

  /**
   * Snooze or unsnooze message
   *
   * @remarks
   * Snoozes a message until a specified date/time or unsnoozes it
   */
  async snoozeInboxMessage(
    request: operations.SnoozeInboxMessageRequest,
    options?: RequestOptions,
  ): Promise<components.SuccessResponse> {
    return unwrapAsync(inboxSnoozeInboxMessage(
      this,
      request,
      options,
    ));
  }

  /**
   * Convert message to job
   *
   * @remarks
   * Converts an inbox message into a new job, optionally using a job template
   */
  async convertInboxMessageToJob(
    request: operations.ConvertInboxMessageToJobRequest,
    options?: RequestOptions,
  ): Promise<components.ConvertToJobResponse> {
    return unwrapAsync(inboxConvertInboxMessageToJob(
      this,
      request,
      options,
    ));
  }

  /**
   * Attach message to existing job
   *
   * @remarks
   * Attaches an inbox message to an existing job
   */
  async attachInboxMessageToJob(
    request: operations.AttachInboxMessageToJobRequest,
    options?: RequestOptions,
  ): Promise<components.AttachToJobResponse> {
    return unwrapAsync(inboxAttachInboxMessageToJob(
      this,
      request,
      options,
    ));
  }

  /**
   * Add note to message
   *
   * @remarks
   * Adds a note to an inbox message
   */
  async addNoteToInboxMessage(
    request: operations.AddNoteToInboxMessageRequest,
    options?: RequestOptions,
  ): Promise<components.SuccessResponse> {
    return unwrapAsync(inboxAddNoteToInboxMessage(
      this,
      request,
      options,
    ));
  }
}
