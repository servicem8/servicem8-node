/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { searchGeneralSearch } from "../funcs/searchGeneralSearch.js";
import { searchJobEmbeddingSearch } from "../funcs/searchJobEmbeddingSearch.js";
import { searchObjectSearch } from "../funcs/searchObjectSearch.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Search extends ClientSDK {
  /**
   * Search across multiple object types
   *
   * @remarks
   * Performs a text search across jobs, companies, and materials. Returns combined results sorted by relevance.
   */
  async generalSearch(
    request: operations.GeneralSearchRequest,
    options?: RequestOptions,
  ): Promise<components.SearchResponse> {
    return unwrapAsync(searchGeneralSearch(
      this,
      request,
      options,
    ));
  }

  /**
   * Search within a specific object type
   *
   * @remarks
   * Performs a text search within a specific object type. Supported types: job, company, material, knowledgearticle, attachment, formresponse, asset, materialbundle
   */
  async objectSearch(
    request: operations.ObjectSearchRequest,
    options?: RequestOptions,
  ): Promise<components.ObjectSearchResponse> {
    return unwrapAsync(searchObjectSearch(
      this,
      request,
      options,
    ));
  }

  /**
   * Semantic search for jobs
   *
   * @remarks
   * Performs semantic/embedding-based search on job content. This uses AI to find jobs with similar meaning, not just exact text matches.
   */
  async jobEmbeddingSearch(
    request: operations.JobEmbeddingSearchRequest,
    options?: RequestOptions,
  ): Promise<components.EmbeddingSearchResponse> {
    return unwrapAsync(searchJobEmbeddingSearch(
      this,
      request,
      options,
    ));
  }
}
