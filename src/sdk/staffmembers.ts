/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { staffMembersCreateStaffMembers } from "../funcs/staffMembersCreateStaffMembers.js";
import { staffMembersDeleteStaffMembers } from "../funcs/staffMembersDeleteStaffMembers.js";
import { staffMembersGetStaffMembers } from "../funcs/staffMembersGetStaffMembers.js";
import { staffMembersListStaffMembers } from "../funcs/staffMembersListStaffMembers.js";
import { staffMembersUpdateStaffMembers } from "../funcs/staffMembersUpdateStaffMembers.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class StaffMembers extends ClientSDK {
  /**
   * List all Staff Members
   *
   * @remarks
   *
   * #### Filtering
   * This endpoint supports result filtering. For more information on how to filter this request, [go here](/docs/filtering).
   *
   * #### OAuth Scope
   * This endpoint requires the following OAuth scope **read_staff**.
   */
  async listStaffMembers(
    options?: RequestOptions,
  ): Promise<operations.ListStaffMembersResponse> {
    return unwrapAsync(staffMembersListStaffMembers(
      this,
      options,
    ));
  }

  /**
   * Create a new Staff Member
   *
   * @remarks
   *
   * #### OAuth Scope
   * This endpoint requires the following OAuth scope **manage_staff**.
   *
   * #### Record UUID
   * UUID is optional for record creation. If no UUID is supplied, a UUID will be automatically generated for the new record and returned in the response header as x-record-uuid.
   */
  async createStaffMembers(
    request: components.StaffInput,
    options?: RequestOptions,
  ): Promise<operations.CreateStaffMembersResponse> {
    return unwrapAsync(staffMembersCreateStaffMembers(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve a Staff Member
   *
   * @remarks
   *
   * #### OAuth Scope
   * This endpoint requires the following OAuth scope **read_staff**.
   */
  async getStaffMembers(
    request: operations.GetStaffMembersRequest,
    options?: RequestOptions,
  ): Promise<operations.GetStaffMembersResponse> {
    return unwrapAsync(staffMembersGetStaffMembers(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a Staff Member
   *
   * @remarks
   *
   * #### OAuth Scope
   * This endpoint requires the following OAuth scope **manage_staff**.
   */
  async updateStaffMembers(
    request: operations.UpdateStaffMembersRequest,
    options?: RequestOptions,
  ): Promise<operations.UpdateStaffMembersResponse> {
    return unwrapAsync(staffMembersUpdateStaffMembers(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a Staff Member
   *
   * @remarks
   *
   * In ServiceM8, records are never deleted, but are archived. Archived records will remain accessible via the API as (active = 0), however will no longer be visible in UI. Archived records can be restored to active by setting the record active field to 1.
   *
   * #### OAuth Scope
   * This endpoint requires the following OAuth scope **manage_staff**.
   */
  async deleteStaffMembers(
    request: operations.DeleteStaffMembersRequest,
    options?: RequestOptions,
  ): Promise<operations.DeleteStaffMembersResponse> {
    return unwrapAsync(staffMembersDeleteStaffMembers(
      this,
      request,
      options,
    ));
  }
}
