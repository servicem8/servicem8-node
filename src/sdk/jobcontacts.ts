/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { jobContactsCreateJobContacts } from "../funcs/jobContactsCreateJobContacts.js";
import { jobContactsDeleteJobContacts } from "../funcs/jobContactsDeleteJobContacts.js";
import { jobContactsGetJobContacts } from "../funcs/jobContactsGetJobContacts.js";
import { jobContactsListJobContacts } from "../funcs/jobContactsListJobContacts.js";
import { jobContactsUpdateJobContacts } from "../funcs/jobContactsUpdateJobContacts.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class JobContacts extends ClientSDK {
  /**
   * List all Job Contacts
   *
   * @remarks
   *
   * #### Filtering
   * This endpoint supports result filtering. For more information on how to filter this request, [go here](/docs/filtering).
   *
   * #### OAuth Scope
   * This endpoint requires the following OAuth scope **read_job_contacts**.
   */
  async listJobContacts(
    security: operations.ListJobContactsSecurity,
    options?: RequestOptions,
  ): Promise<operations.ListJobContactsResponse> {
    return unwrapAsync(jobContactsListJobContacts(
      this,
      security,
      options,
    ));
  }

  /**
   * Create a new Job Contact
   *
   * @remarks
   *
   * #### OAuth Scope
   * This endpoint requires the following OAuth scope **manage_job_contacts**.
   *
   * #### Record UUID
   * UUID is optional for record creation. If no UUID is supplied, a UUID will be automatically generated for the new record and returned in the `x-record-uuid` response header.
   */
  async createJobContacts(
    security: operations.CreateJobContactsSecurity,
    request: components.JobContactInput,
    options?: RequestOptions,
  ): Promise<operations.CreateJobContactsResponse> {
    return unwrapAsync(jobContactsCreateJobContacts(
      this,
      security,
      request,
      options,
    ));
  }

  /**
   * Retrieve a Job Contact
   *
   * @remarks
   *
   * #### OAuth Scope
   * This endpoint requires the following OAuth scope **read_job_contacts**.
   */
  async getJobContacts(
    security: operations.GetJobContactsSecurity,
    request: operations.GetJobContactsRequest,
    options?: RequestOptions,
  ): Promise<operations.GetJobContactsResponse> {
    return unwrapAsync(jobContactsGetJobContacts(
      this,
      security,
      request,
      options,
    ));
  }

  /**
   * Update a Job Contact
   *
   * @remarks
   *
   * #### OAuth Scope
   * This endpoint requires the following OAuth scope **manage_job_contacts**.
   */
  async updateJobContacts(
    security: operations.UpdateJobContactsSecurity,
    request: operations.UpdateJobContactsRequest,
    options?: RequestOptions,
  ): Promise<operations.UpdateJobContactsResponse> {
    return unwrapAsync(jobContactsUpdateJobContacts(
      this,
      security,
      request,
      options,
    ));
  }

  /**
   * Delete a Job Contact
   *
   * @remarks
   *
   * In ServiceM8, deleting a record sets its `active` field to `0`. Inactive records are still accessible on the API, but are hidden in the UI. Inactive records can be restored by setting their `active` field to `1`.
   *
   * #### OAuth Scope
   * This endpoint requires the following OAuth scope **manage_job_contacts**.
   */
  async deleteJobContacts(
    security: operations.DeleteJobContactsSecurity,
    request: operations.DeleteJobContactsRequest,
    options?: RequestOptions,
  ): Promise<operations.DeleteJobContactsResponse> {
    return unwrapAsync(jobContactsDeleteJobContacts(
      this,
      security,
      request,
      options,
    ));
  }
}
