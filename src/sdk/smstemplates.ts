/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { smsTemplatesCreateSMSTemplates } from "../funcs/smsTemplatesCreateSMSTemplates.js";
import { smsTemplatesDeleteSMSTemplates } from "../funcs/smsTemplatesDeleteSMSTemplates.js";
import { smsTemplatesGetSMSTemplates } from "../funcs/smsTemplatesGetSMSTemplates.js";
import { smsTemplatesListSMSTemplates } from "../funcs/smsTemplatesListSMSTemplates.js";
import { smsTemplatesUpdateSMSTemplates } from "../funcs/smsTemplatesUpdateSMSTemplates.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class SMSTemplates extends ClientSDK {
  /**
   * List all SMS Templates
   *
   * @remarks
   *
   * #### Filtering
   * This endpoint supports result filtering. For more information on how to filter this request, [go here](/docs/filtering).
   *
   * #### OAuth Scope
   * This endpoint requires the following OAuth scope **manage_templates**.
   */
  async listSMSTemplates(
    options?: RequestOptions,
  ): Promise<Array<components.SmsTemplate>> {
    return unwrapAsync(smsTemplatesListSMSTemplates(
      this,
      options,
    ));
  }

  /**
   * Create a new SMS Template
   *
   * @remarks
   *
   * #### OAuth Scope
   * This endpoint requires the following OAuth scope **manage_templates**.
   *
   * #### Record UUID
   * UUID is optional for record creation. If no UUID is supplied, a UUID will be automatically generated for the new record and returned in the `x-record-uuid` response header.
   */
  async createSMSTemplates(
    request: components.SmsTemplateInput,
    options?: RequestOptions,
  ): Promise<operations.CreateSMSTemplatesResponse> {
    return unwrapAsync(smsTemplatesCreateSMSTemplates(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve a SMS Template
   *
   * @remarks
   *
   * #### OAuth Scope
   * This endpoint requires the following OAuth scope **manage_templates**.
   */
  async getSMSTemplates(
    request: operations.GetSMSTemplatesRequest,
    options?: RequestOptions,
  ): Promise<components.SmsTemplate> {
    return unwrapAsync(smsTemplatesGetSMSTemplates(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a SMS Template
   *
   * @remarks
   *
   * #### OAuth Scope
   * This endpoint requires the following OAuth scope **manage_templates**.
   */
  async updateSMSTemplates(
    request: operations.UpdateSMSTemplatesRequest,
    options?: RequestOptions,
  ): Promise<components.Result> {
    return unwrapAsync(smsTemplatesUpdateSMSTemplates(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a SMS Template
   *
   * @remarks
   *
   * In ServiceM8, deleting a record sets its `active` field to `0`. Inactive records are still accessible on the API, but are hidden in the UI. Inactive records can be restored by setting their `active` field to `1`.
   *
   * #### OAuth Scope
   * This endpoint requires the following OAuth scope **manage_templates**.
   */
  async deleteSMSTemplates(
    request: operations.DeleteSMSTemplatesRequest,
    options?: RequestOptions,
  ): Promise<components.Result> {
    return unwrapAsync(smsTemplatesDeleteSMSTemplates(
      this,
      request,
      options,
    ));
  }
}
