/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { staffMessagesCreateStaffMessages } from "../funcs/staffMessagesCreateStaffMessages.js";
import { staffMessagesDeleteStaffMessages } from "../funcs/staffMessagesDeleteStaffMessages.js";
import { staffMessagesGetStaffMessages } from "../funcs/staffMessagesGetStaffMessages.js";
import { staffMessagesListStaffMessages } from "../funcs/staffMessagesListStaffMessages.js";
import { staffMessagesUpdateStaffMessages } from "../funcs/staffMessagesUpdateStaffMessages.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class StaffMessages extends ClientSDK {
  /**
   * List all Staff Messages
   *
   * @remarks
   *
   * #### Filtering
   * This endpoint supports result filtering. For more information on how to filter this request, [go here](/docs/filtering).
   *
   * #### OAuth Scope
   * This endpoint requires the following OAuth scope **read_messages**.
   */
  async listStaffMessages(
    options?: RequestOptions,
  ): Promise<Array<components.StaffMessage>> {
    return unwrapAsync(staffMessagesListStaffMessages(
      this,
      options,
    ));
  }

  /**
   * Create a new Staff Message
   *
   * @remarks
   *
   * #### OAuth Scope
   * This endpoint requires the following OAuth scope **publish_messages**.
   *
   * #### Record UUID
   * UUID is optional for record creation. If no UUID is supplied, a UUID will be automatically generated for the new record and returned in the `x-record-uuid` response header.
   */
  async createStaffMessages(
    request: components.StaffMessageInput,
    options?: RequestOptions,
  ): Promise<operations.CreateStaffMessagesResponse> {
    return unwrapAsync(staffMessagesCreateStaffMessages(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve a Staff Message
   *
   * @remarks
   *
   * #### OAuth Scope
   * This endpoint requires the following OAuth scope **read_messages**.
   */
  async getStaffMessages(
    request: operations.GetStaffMessagesRequest,
    options?: RequestOptions,
  ): Promise<components.StaffMessage> {
    return unwrapAsync(staffMessagesGetStaffMessages(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a Staff Message
   *
   * @remarks
   *
   * #### OAuth Scope
   * This endpoint requires the following OAuth scope **publish_messages**.
   */
  async updateStaffMessages(
    request: operations.UpdateStaffMessagesRequest,
    options?: RequestOptions,
  ): Promise<components.Result> {
    return unwrapAsync(staffMessagesUpdateStaffMessages(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a Staff Message
   *
   * @remarks
   *
   * In ServiceM8, deleting a record sets its `active` field to `0`. Inactive records are still accessible on the API, but are hidden in the UI. Inactive records can be restored by setting their `active` field to `1`.
   *
   * #### OAuth Scope
   * This endpoint requires the following OAuth scope **publish_messages**.
   */
  async deleteStaffMessages(
    request: operations.DeleteStaffMessagesRequest,
    options?: RequestOptions,
  ): Promise<components.Result> {
    return unwrapAsync(staffMessagesDeleteStaffMessages(
      this,
      request,
      options,
    ));
  }
}
