/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { locationsCreateLocations } from "../funcs/locationsCreateLocations.js";
import { locationsDeleteLocations } from "../funcs/locationsDeleteLocations.js";
import { locationsGetLocations } from "../funcs/locationsGetLocations.js";
import { locationsListLocations } from "../funcs/locationsListLocations.js";
import { locationsUpdateLocations } from "../funcs/locationsUpdateLocations.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Locations extends ClientSDK {
  /**
   * List all Locations
   *
   * @remarks
   *
   * #### Filtering
   * This endpoint supports result filtering. For more information on how to filter this request, [go here](/docs/filtering).
   *
   * #### OAuth Scope
   * This endpoint requires the following OAuth scope **read_locations**.
   */
  async listLocations(
    options?: RequestOptions,
  ): Promise<Array<components.Location>> {
    return unwrapAsync(locationsListLocations(
      this,
      options,
    ));
  }

  /**
   * Create a new Location
   *
   * @remarks
   *
   * #### OAuth Scope
   * This endpoint requires the following OAuth scope **manage_locations**.
   *
   * #### Record UUID
   * UUID is optional for record creation. If no UUID is supplied, a UUID will be automatically generated for the new record and returned in the `x-record-uuid` response header.
   */
  async createLocations(
    request: components.LocationCreate,
    options?: RequestOptions,
  ): Promise<operations.CreateLocationsResponse> {
    return unwrapAsync(locationsCreateLocations(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve a Location
   *
   * @remarks
   *
   * #### OAuth Scope
   * This endpoint requires the following OAuth scope **read_locations**.
   */
  async getLocations(
    request: operations.GetLocationsRequest,
    options?: RequestOptions,
  ): Promise<components.Location> {
    return unwrapAsync(locationsGetLocations(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a Location
   *
   * @remarks
   *
   * #### OAuth Scope
   * This endpoint requires the following OAuth scope **manage_locations**.
   */
  async updateLocations(
    request: operations.UpdateLocationsRequest,
    options?: RequestOptions,
  ): Promise<components.Result> {
    return unwrapAsync(locationsUpdateLocations(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a Location
   *
   * @remarks
   *
   * In ServiceM8, deleting a record sets its `active` field to `0`. Inactive records are still accessible on the API, but are hidden in the UI. Inactive records can be restored by setting their `active` field to `1`.
   *
   * #### OAuth Scope
   * This endpoint requires the following OAuth scope **manage_locations**.
   */
  async deleteLocations(
    request: operations.DeleteLocationsRequest,
    options?: RequestOptions,
  ): Promise<components.Result> {
    return unwrapAsync(locationsDeleteLocations(
      this,
      request,
      options,
    ));
  }
}
