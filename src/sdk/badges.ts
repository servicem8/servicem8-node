/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { badgesCreateBadges } from "../funcs/badgesCreateBadges.js";
import { badgesDeleteBadges } from "../funcs/badgesDeleteBadges.js";
import { badgesGetBadges } from "../funcs/badgesGetBadges.js";
import { badgesListBadges } from "../funcs/badgesListBadges.js";
import { badgesUpdateBadges } from "../funcs/badgesUpdateBadges.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Badges extends ClientSDK {
  /**
   * List all Badges
   *
   * @remarks
   *
   * #### Filtering
   * This endpoint supports result filtering. For more information on how to filter this request, [go here](/docs/filtering).
   *
   * #### OAuth Scope
   * This endpoint requires the following OAuth scope **manage_badges**.
   */
  async listBadges(
    security: operations.ListBadgesSecurity,
    options?: RequestOptions,
  ): Promise<operations.ListBadgesResponse> {
    return unwrapAsync(badgesListBadges(
      this,
      security,
      options,
    ));
  }

  /**
   * Create a new Badge
   *
   * @remarks
   *
   * #### OAuth Scope
   * This endpoint requires the following OAuth scope **manage_badges**.
   *
   * #### Record UUID
   * UUID is optional for record creation. If no UUID is supplied, a UUID will be automatically generated for the new record and returned in the `x-record-uuid` response header.
   */
  async createBadges(
    security: operations.CreateBadgesSecurity,
    request: components.BadgeInput,
    options?: RequestOptions,
  ): Promise<operations.CreateBadgesResponse> {
    return unwrapAsync(badgesCreateBadges(
      this,
      security,
      request,
      options,
    ));
  }

  /**
   * Retrieve a Badge
   *
   * @remarks
   *
   * #### OAuth Scope
   * This endpoint requires the following OAuth scope **manage_badges**.
   */
  async getBadges(
    security: operations.GetBadgesSecurity,
    request: operations.GetBadgesRequest,
    options?: RequestOptions,
  ): Promise<operations.GetBadgesResponse> {
    return unwrapAsync(badgesGetBadges(
      this,
      security,
      request,
      options,
    ));
  }

  /**
   * Update a Badge
   */
  async updateBadges(
    security: operations.UpdateBadgesSecurity,
    request: operations.UpdateBadgesRequest,
    options?: RequestOptions,
  ): Promise<operations.UpdateBadgesResponse> {
    return unwrapAsync(badgesUpdateBadges(
      this,
      security,
      request,
      options,
    ));
  }

  /**
   * Delete a Badge
   *
   * @remarks
   *
   * In ServiceM8, deleting a record sets its `active` field to `0`. Inactive records are still accessible on the API, but are hidden in the UI. Inactive records can be restored by setting their `active` field to `1`.
   */
  async deleteBadges(
    security: operations.DeleteBadgesSecurity,
    request: operations.DeleteBadgesRequest,
    options?: RequestOptions,
  ): Promise<operations.DeleteBadgesResponse> {
    return unwrapAsync(badgesDeleteBadges(
      this,
      security,
      request,
      options,
    ));
  }
}
