/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { jobPaymentsCreateJobPayments } from "../funcs/jobPaymentsCreateJobPayments.js";
import { jobPaymentsDeleteJobPayments } from "../funcs/jobPaymentsDeleteJobPayments.js";
import { jobPaymentsGetJobPayments } from "../funcs/jobPaymentsGetJobPayments.js";
import { jobPaymentsListJobPayments } from "../funcs/jobPaymentsListJobPayments.js";
import { jobPaymentsUpdateJobPayments } from "../funcs/jobPaymentsUpdateJobPayments.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class JobPayments extends ClientSDK {
  /**
   * List all Job Payments
   *
   * @remarks
   *
   * #### Filtering
   * This endpoint supports result filtering. For more information on how to filter this request, [go here](/docs/filtering).
   */
  async listJobPayments(
    security: operations.ListJobPaymentsSecurity,
    options?: RequestOptions,
  ): Promise<operations.ListJobPaymentsResponse> {
    return unwrapAsync(jobPaymentsListJobPayments(
      this,
      security,
      options,
    ));
  }

  /**
   * Create a new Job Payment
   *
   * @remarks
   *
   * #### Record UUID
   * UUID is optional for record creation. If no UUID is supplied, a UUID will be automatically generated for the new record and returned in the `x-record-uuid` response header.
   */
  async createJobPayments(
    security: operations.CreateJobPaymentsSecurity,
    request: components.JobPaymentInput,
    options?: RequestOptions,
  ): Promise<operations.CreateJobPaymentsResponse> {
    return unwrapAsync(jobPaymentsCreateJobPayments(
      this,
      security,
      request,
      options,
    ));
  }

  /**
   * Retrieve a Job Payment
   */
  async getJobPayments(
    security: operations.GetJobPaymentsSecurity,
    request: operations.GetJobPaymentsRequest,
    options?: RequestOptions,
  ): Promise<operations.GetJobPaymentsResponse> {
    return unwrapAsync(jobPaymentsGetJobPayments(
      this,
      security,
      request,
      options,
    ));
  }

  /**
   * Update a Job Payment
   */
  async updateJobPayments(
    security: operations.UpdateJobPaymentsSecurity,
    request: operations.UpdateJobPaymentsRequest,
    options?: RequestOptions,
  ): Promise<operations.UpdateJobPaymentsResponse> {
    return unwrapAsync(jobPaymentsUpdateJobPayments(
      this,
      security,
      request,
      options,
    ));
  }

  /**
   * Delete a Job Payment
   *
   * @remarks
   *
   * In ServiceM8, deleting a record sets its `active` field to `0`. Inactive records are still accessible on the API, but are hidden in the UI. Inactive records can be restored by setting their `active` field to `1`.
   */
  async deleteJobPayments(
    security: operations.DeleteJobPaymentsSecurity,
    request: operations.DeleteJobPaymentsRequest,
    options?: RequestOptions,
  ): Promise<operations.DeleteJobPaymentsResponse> {
    return unwrapAsync(jobPaymentsDeleteJobPayments(
      this,
      security,
      request,
      options,
    ));
  }
}
