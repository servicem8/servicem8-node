/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { taxRatesCreateTaxRates } from "../funcs/taxRatesCreateTaxRates.js";
import { taxRatesDeleteTaxRates } from "../funcs/taxRatesDeleteTaxRates.js";
import { taxRatesGetTaxRates } from "../funcs/taxRatesGetTaxRates.js";
import { taxRatesListTaxRates } from "../funcs/taxRatesListTaxRates.js";
import { taxRatesUpdateTaxRates } from "../funcs/taxRatesUpdateTaxRates.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class TaxRates extends ClientSDK {
  /**
   * List all Tax Rates
   *
   * @remarks
   *
   * #### Filtering
   * This endpoint supports result filtering. For more information on how to filter this request, [go here](/docs/filtering).
   */
  async listTaxRates(
    options?: RequestOptions,
  ): Promise<operations.ListTaxRatesResponse> {
    return unwrapAsync(taxRatesListTaxRates(
      this,
      options,
    ));
  }

  /**
   * Create a new Tax Rate
   *
   * @remarks
   *
   * #### Record UUID
   * UUID is optional for record creation. If no UUID is supplied, a UUID will be automatically generated for the new record and returned in the response header as x-record-uuid.
   */
  async createTaxRates(
    request: components.TaxRateInput,
    options?: RequestOptions,
  ): Promise<operations.CreateTaxRatesResponse> {
    return unwrapAsync(taxRatesCreateTaxRates(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve a Tax Rate
   */
  async getTaxRates(
    request: operations.GetTaxRatesRequest,
    options?: RequestOptions,
  ): Promise<operations.GetTaxRatesResponse> {
    return unwrapAsync(taxRatesGetTaxRates(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a Tax Rate
   */
  async updateTaxRates(
    request: operations.UpdateTaxRatesRequest,
    options?: RequestOptions,
  ): Promise<operations.UpdateTaxRatesResponse> {
    return unwrapAsync(taxRatesUpdateTaxRates(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a Tax Rate
   *
   * @remarks
   *
   * In ServiceM8, records are never deleted, but are archived. Archived records will remain accessible via the API as (active = 0), however will no longer be visible in UI. Archived records can be restored to active by setting the record active field to 1.
   */
  async deleteTaxRates(
    request: operations.DeleteTaxRatesRequest,
    options?: RequestOptions,
  ): Promise<operations.DeleteTaxRatesResponse> {
    return unwrapAsync(taxRatesDeleteTaxRates(
      this,
      request,
      options,
    ));
  }
}
