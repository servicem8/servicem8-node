/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { notesCreateNotes } from "../funcs/notesCreateNotes.js";
import { notesDeleteNotes } from "../funcs/notesDeleteNotes.js";
import { notesGetNotes } from "../funcs/notesGetNotes.js";
import { notesListNotes } from "../funcs/notesListNotes.js";
import { notesUpdateNotes } from "../funcs/notesUpdateNotes.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Notes extends ClientSDK {
  /**
   * List all Notes
   *
   * @remarks
   *
   * #### Filtering
   * This endpoint supports result filtering. For more information on how to filter this request, [go here](/docs/filtering).
   */
  async listNotes(
    options?: RequestOptions,
  ): Promise<operations.ListNotesResponse> {
    return unwrapAsync(notesListNotes(
      this,
      options,
    ));
  }

  /**
   * Create a new Note
   *
   * @remarks
   *
   * #### Record UUID
   * UUID is optional for record creation. If no UUID is supplied, a UUID will be automatically generated for the new record and returned in the response header as x-record-uuid.
   */
  async createNotes(
    request: components.NoteInput,
    options?: RequestOptions,
  ): Promise<operations.CreateNotesResponse> {
    return unwrapAsync(notesCreateNotes(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve a Note
   */
  async getNotes(
    request: operations.GetNotesRequest,
    options?: RequestOptions,
  ): Promise<operations.GetNotesResponse> {
    return unwrapAsync(notesGetNotes(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a Note
   */
  async updateNotes(
    request: operations.UpdateNotesRequest,
    options?: RequestOptions,
  ): Promise<operations.UpdateNotesResponse> {
    return unwrapAsync(notesUpdateNotes(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a Note
   *
   * @remarks
   *
   * In ServiceM8, records are never deleted, but are archived. Archived records will remain accessible via the API as (active = 0), however will no longer be visible in UI. Archived records can be restored to active by setting the record active field to 1.
   */
  async deleteNotes(
    request: operations.DeleteNotesRequest,
    options?: RequestOptions,
  ): Promise<operations.DeleteNotesResponse> {
    return unwrapAsync(notesDeleteNotes(
      this,
      request,
      options,
    ));
  }
}
