/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { companyContactsCreateCompanyContacts } from "../funcs/companyContactsCreateCompanyContacts.js";
import { companyContactsDeleteCompanyContacts } from "../funcs/companyContactsDeleteCompanyContacts.js";
import { companyContactsGetCompanyContacts } from "../funcs/companyContactsGetCompanyContacts.js";
import { companyContactsListCompanyContacts } from "../funcs/companyContactsListCompanyContacts.js";
import { companyContactsUpdateCompanyContacts } from "../funcs/companyContactsUpdateCompanyContacts.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class CompanyContacts extends ClientSDK {
  /**
   * List all Company Contacts
   *
   * @remarks
   *
   * #### Filtering
   * This endpoint supports result filtering. For more information on how to filter this request, [go here](/docs/filtering).
   *
   * #### OAuth Scope
   * This endpoint requires the following OAuth scope **read_customer_contacts**.
   */
  async listCompanyContacts(
    options?: RequestOptions,
  ): Promise<Array<components.CompanyContact>> {
    return unwrapAsync(companyContactsListCompanyContacts(
      this,
      options,
    ));
  }

  /**
   * Create a new Company Contact
   *
   * @remarks
   *
   * #### OAuth Scope
   * This endpoint requires the following OAuth scope **manage_customer_contacts**.
   *
   * #### Record UUID
   * UUID is optional for record creation. If no UUID is supplied, a UUID will be automatically generated for the new record and returned in the `x-record-uuid` response header.
   */
  async createCompanyContacts(
    request: components.CompanyContactInput,
    options?: RequestOptions,
  ): Promise<operations.CreateCompanyContactsResponse> {
    return unwrapAsync(companyContactsCreateCompanyContacts(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve a Company Contact
   *
   * @remarks
   *
   * #### OAuth Scope
   * This endpoint requires the following OAuth scope **read_customer_contacts**.
   */
  async getCompanyContacts(
    request: operations.GetCompanyContactsRequest,
    options?: RequestOptions,
  ): Promise<components.CompanyContact> {
    return unwrapAsync(companyContactsGetCompanyContacts(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a Company Contact
   *
   * @remarks
   *
   * #### OAuth Scope
   * This endpoint requires the following OAuth scope **manage_customer_contacts**.
   */
  async updateCompanyContacts(
    request: operations.UpdateCompanyContactsRequest,
    options?: RequestOptions,
  ): Promise<components.Result> {
    return unwrapAsync(companyContactsUpdateCompanyContacts(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a Company Contact
   *
   * @remarks
   *
   * In ServiceM8, deleting a record sets its `active` field to `0`. Inactive records are still accessible on the API, but are hidden in the UI. Inactive records can be restored by setting their `active` field to `1`.
   *
   * #### OAuth Scope
   * This endpoint requires the following OAuth scope **manage_customer_contacts**.
   */
  async deleteCompanyContacts(
    request: operations.DeleteCompanyContactsRequest,
    options?: RequestOptions,
  ): Promise<components.Result> {
    return unwrapAsync(companyContactsDeleteCompanyContacts(
      this,
      request,
      options,
    ));
  }
}
