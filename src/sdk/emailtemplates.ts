/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { emailTemplatesCreateEmailTemplates } from "../funcs/emailTemplatesCreateEmailTemplates.js";
import { emailTemplatesDeleteEmailTemplates } from "../funcs/emailTemplatesDeleteEmailTemplates.js";
import { emailTemplatesGetEmailTemplates } from "../funcs/emailTemplatesGetEmailTemplates.js";
import { emailTemplatesListEmailTemplates } from "../funcs/emailTemplatesListEmailTemplates.js";
import { emailTemplatesUpdateEmailTemplates } from "../funcs/emailTemplatesUpdateEmailTemplates.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class EmailTemplates extends ClientSDK {
  /**
   * List all Email Templates
   *
   * @remarks
   *
   * #### Filtering
   * This endpoint supports result filtering. For more information on how to filter this request, [go here](/docs/filtering).
   */
  async listEmailTemplates(
    security: operations.ListEmailTemplatesSecurity,
    options?: RequestOptions,
  ): Promise<operations.ListEmailTemplatesResponse> {
    return unwrapAsync(emailTemplatesListEmailTemplates(
      this,
      security,
      options,
    ));
  }

  /**
   * Create a new Email Template
   *
   * @remarks
   *
   * #### Record UUID
   * UUID is optional for record creation. If no UUID is supplied, a UUID will be automatically generated for the new record and returned in the `x-record-uuid` response header.
   */
  async createEmailTemplates(
    security: operations.CreateEmailTemplatesSecurity,
    request: components.EmailTemplateInput,
    options?: RequestOptions,
  ): Promise<operations.CreateEmailTemplatesResponse> {
    return unwrapAsync(emailTemplatesCreateEmailTemplates(
      this,
      security,
      request,
      options,
    ));
  }

  /**
   * Retrieve an Email Template
   */
  async getEmailTemplates(
    security: operations.GetEmailTemplatesSecurity,
    request: operations.GetEmailTemplatesRequest,
    options?: RequestOptions,
  ): Promise<operations.GetEmailTemplatesResponse> {
    return unwrapAsync(emailTemplatesGetEmailTemplates(
      this,
      security,
      request,
      options,
    ));
  }

  /**
   * Update an Email Template
   */
  async updateEmailTemplates(
    security: operations.UpdateEmailTemplatesSecurity,
    request: operations.UpdateEmailTemplatesRequest,
    options?: RequestOptions,
  ): Promise<operations.UpdateEmailTemplatesResponse> {
    return unwrapAsync(emailTemplatesUpdateEmailTemplates(
      this,
      security,
      request,
      options,
    ));
  }

  /**
   * Delete an Email Template
   *
   * @remarks
   *
   * In ServiceM8, deleting a record sets its `active` field to `0`. Inactive records are still accessible on the API, but are hidden in the UI. Inactive records can be restored by setting their `active` field to `1`.
   */
  async deleteEmailTemplates(
    security: operations.DeleteEmailTemplatesSecurity,
    request: operations.DeleteEmailTemplatesRequest,
    options?: RequestOptions,
  ): Promise<operations.DeleteEmailTemplatesResponse> {
    return unwrapAsync(emailTemplatesDeleteEmailTemplates(
      this,
      security,
      request,
      options,
    ));
  }
}
