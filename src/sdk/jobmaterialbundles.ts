/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { jobMaterialBundlesCreateJobMaterialBundles } from "../funcs/jobMaterialBundlesCreateJobMaterialBundles.js";
import { jobMaterialBundlesDeleteJobMaterialBundles } from "../funcs/jobMaterialBundlesDeleteJobMaterialBundles.js";
import { jobMaterialBundlesGetJobMaterialBundles } from "../funcs/jobMaterialBundlesGetJobMaterialBundles.js";
import { jobMaterialBundlesListJobMaterialBundles } from "../funcs/jobMaterialBundlesListJobMaterialBundles.js";
import { jobMaterialBundlesUpdateJobMaterialBundles } from "../funcs/jobMaterialBundlesUpdateJobMaterialBundles.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class JobMaterialBundles extends ClientSDK {
  /**
   * List all Job Material Bundles
   *
   * @remarks
   *
   * #### Filtering
   * This endpoint supports result filtering. For more information on how to filter this request, [go here](/docs/filtering).
   */
  async listJobMaterialBundles(
    security: operations.ListJobMaterialBundlesSecurity,
    options?: RequestOptions,
  ): Promise<operations.ListJobMaterialBundlesResponse> {
    return unwrapAsync(jobMaterialBundlesListJobMaterialBundles(
      this,
      security,
      options,
    ));
  }

  /**
   * Create a new Job Material Bundle
   *
   * @remarks
   *
   * #### Record UUID
   * UUID is optional for record creation. If no UUID is supplied, a UUID will be automatically generated for the new record and returned in the `x-record-uuid` response header.
   */
  async createJobMaterialBundles(
    security: operations.CreateJobMaterialBundlesSecurity,
    request: components.JobMaterialBundleInput,
    options?: RequestOptions,
  ): Promise<operations.CreateJobMaterialBundlesResponse> {
    return unwrapAsync(jobMaterialBundlesCreateJobMaterialBundles(
      this,
      security,
      request,
      options,
    ));
  }

  /**
   * Retrieve a Job Material Bundle
   */
  async getJobMaterialBundles(
    security: operations.GetJobMaterialBundlesSecurity,
    request: operations.GetJobMaterialBundlesRequest,
    options?: RequestOptions,
  ): Promise<operations.GetJobMaterialBundlesResponse> {
    return unwrapAsync(jobMaterialBundlesGetJobMaterialBundles(
      this,
      security,
      request,
      options,
    ));
  }

  /**
   * Update a Job Material Bundle
   */
  async updateJobMaterialBundles(
    security: operations.UpdateJobMaterialBundlesSecurity,
    request: operations.UpdateJobMaterialBundlesRequest,
    options?: RequestOptions,
  ): Promise<operations.UpdateJobMaterialBundlesResponse> {
    return unwrapAsync(jobMaterialBundlesUpdateJobMaterialBundles(
      this,
      security,
      request,
      options,
    ));
  }

  /**
   * Delete a Job Material Bundle
   *
   * @remarks
   *
   * In ServiceM8, deleting a record sets its `active` field to `0`. Inactive records are still accessible on the API, but are hidden in the UI. Inactive records can be restored by setting their `active` field to `1`.
   */
  async deleteJobMaterialBundles(
    security: operations.DeleteJobMaterialBundlesSecurity,
    request: operations.DeleteJobMaterialBundlesRequest,
    options?: RequestOptions,
  ): Promise<operations.DeleteJobMaterialBundlesResponse> {
    return unwrapAsync(jobMaterialBundlesDeleteJobMaterialBundles(
      this,
      security,
      request,
      options,
    ));
  }
}
