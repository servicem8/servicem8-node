/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { formResponsesCreateFormResponses } from "../funcs/formResponsesCreateFormResponses.js";
import { formResponsesDeleteFormResponses } from "../funcs/formResponsesDeleteFormResponses.js";
import { formResponsesGetFormResponses } from "../funcs/formResponsesGetFormResponses.js";
import { formResponsesListFormResponses } from "../funcs/formResponsesListFormResponses.js";
import { formResponsesUpdateFormResponses } from "../funcs/formResponsesUpdateFormResponses.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class FormResponses extends ClientSDK {
  /**
   * List all Form Responses
   *
   * @remarks
   *
   * #### Filtering
   * This endpoint supports result filtering. For more information on how to filter this request, [go here](/docs/filtering).
   *
   * #### OAuth Scope
   * This endpoint requires the following OAuth scope **read_forms**.
   */
  async listFormResponses(
    options?: RequestOptions,
  ): Promise<Array<components.FormResponse>> {
    return unwrapAsync(formResponsesListFormResponses(
      this,
      options,
    ));
  }

  /**
   * Create a new Form Response
   *
   * @remarks
   *
   * #### OAuth Scope
   * This endpoint requires the following OAuth scope **manage_forms**.
   *
   * #### Record UUID
   * UUID is optional for record creation. If no UUID is supplied, a UUID will be automatically generated for the new record and returned in the `x-record-uuid` response header.
   */
  async createFormResponses(
    request: components.FormResponseCreate,
    options?: RequestOptions,
  ): Promise<operations.CreateFormResponsesResponse> {
    return unwrapAsync(formResponsesCreateFormResponses(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve a Form Response
   *
   * @remarks
   *
   * #### OAuth Scope
   * This endpoint requires the following OAuth scope **read_forms**.
   */
  async getFormResponses(
    request: operations.GetFormResponsesRequest,
    options?: RequestOptions,
  ): Promise<components.FormResponse> {
    return unwrapAsync(formResponsesGetFormResponses(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a Form Response
   *
   * @remarks
   *
   * #### OAuth Scope
   * This endpoint requires the following OAuth scope **manage_forms**.
   */
  async updateFormResponses(
    request: operations.UpdateFormResponsesRequest,
    options?: RequestOptions,
  ): Promise<components.Result> {
    return unwrapAsync(formResponsesUpdateFormResponses(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a Form Response
   *
   * @remarks
   *
   * In ServiceM8, deleting a record sets its `active` field to `0`. Inactive records are still accessible on the API, but are hidden in the UI. Inactive records can be restored by setting their `active` field to `1`.
   *
   * #### OAuth Scope
   * This endpoint requires the following OAuth scope **manage_forms**.
   */
  async deleteFormResponses(
    request: operations.DeleteFormResponsesRequest,
    options?: RequestOptions,
  ): Promise<components.Result> {
    return unwrapAsync(formResponsesDeleteFormResponses(
      this,
      request,
      options,
    ));
  }
}
