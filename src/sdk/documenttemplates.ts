/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { documentTemplatesCreateDocumentTemplates } from "../funcs/documentTemplatesCreateDocumentTemplates.js";
import { documentTemplatesDeleteDocumentTemplates } from "../funcs/documentTemplatesDeleteDocumentTemplates.js";
import { documentTemplatesGetDocumentTemplates } from "../funcs/documentTemplatesGetDocumentTemplates.js";
import { documentTemplatesListDocumentTemplates } from "../funcs/documentTemplatesListDocumentTemplates.js";
import { documentTemplatesUpdateDocumentTemplates } from "../funcs/documentTemplatesUpdateDocumentTemplates.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class DocumentTemplates extends ClientSDK {
  /**
   * List all Document Templates
   *
   * @remarks
   *
   * #### Filtering
   * This endpoint supports result filtering. For more information on how to filter this request, [go here](/docs/filtering).
   *
   * #### OAuth Scope
   * This endpoint requires the following OAuth scope **manage_templates**.
   */
  async listDocumentTemplates(
    options?: RequestOptions,
  ): Promise<Array<components.DocumentTemplate>> {
    return unwrapAsync(documentTemplatesListDocumentTemplates(
      this,
      options,
    ));
  }

  /**
   * Create a new Document Template
   *
   * @remarks
   *
   * #### OAuth Scope
   * This endpoint requires the following OAuth scope **manage_templates**.
   *
   * #### Record UUID
   * UUID is optional for record creation. If no UUID is supplied, a UUID will be automatically generated for the new record and returned in the `x-record-uuid` response header.
   */
  async createDocumentTemplates(
    request: components.DocumentTemplateCreate,
    options?: RequestOptions,
  ): Promise<operations.CreateDocumentTemplatesResponse> {
    return unwrapAsync(documentTemplatesCreateDocumentTemplates(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve a Document Template
   *
   * @remarks
   *
   * #### OAuth Scope
   * This endpoint requires the following OAuth scope **manage_templates**.
   */
  async getDocumentTemplates(
    request: operations.GetDocumentTemplatesRequest,
    options?: RequestOptions,
  ): Promise<components.DocumentTemplate> {
    return unwrapAsync(documentTemplatesGetDocumentTemplates(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a Document Template
   *
   * @remarks
   *
   * #### OAuth Scope
   * This endpoint requires the following OAuth scope **manage_templates**.
   */
  async updateDocumentTemplates(
    request: operations.UpdateDocumentTemplatesRequest,
    options?: RequestOptions,
  ): Promise<components.Result> {
    return unwrapAsync(documentTemplatesUpdateDocumentTemplates(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a Document Template
   *
   * @remarks
   *
   * In ServiceM8, deleting a record sets its `active` field to `0`. Inactive records are still accessible on the API, but are hidden in the UI. Inactive records can be restored by setting their `active` field to `1`.
   *
   * #### OAuth Scope
   * This endpoint requires the following OAuth scope **manage_templates**.
   */
  async deleteDocumentTemplates(
    request: operations.DeleteDocumentTemplatesRequest,
    options?: RequestOptions,
  ): Promise<components.Result> {
    return unwrapAsync(documentTemplatesDeleteDocumentTemplates(
      this,
      request,
      options,
    ));
  }
}
