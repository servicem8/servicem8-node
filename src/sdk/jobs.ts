/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { jobsCreateJobs } from "../funcs/jobsCreateJobs.js";
import { jobsDeleteJobs } from "../funcs/jobsDeleteJobs.js";
import { jobsGetJobs } from "../funcs/jobsGetJobs.js";
import { jobsListJobs } from "../funcs/jobsListJobs.js";
import { jobsUpdateJobs } from "../funcs/jobsUpdateJobs.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Jobs extends ClientSDK {
  /**
   * List all Jobs
   *
   * @remarks
   *
   * #### Filtering
   * This endpoint supports result filtering. For more information on how to filter this request, [go here](/docs/filtering).
   *
   * #### OAuth Scope
   * This endpoint requires the following OAuth scope **read_jobs**.
   */
  async listJobs(
    security: operations.ListJobsSecurity,
    options?: RequestOptions,
  ): Promise<operations.ListJobsResponse> {
    return unwrapAsync(jobsListJobs(
      this,
      security,
      options,
    ));
  }

  /**
   * Create a new Job
   *
   * @remarks
   *
   * #### OAuth Scope
   * This endpoint requires the following OAuth scope **create_jobs**.
   *
   * #### Record UUID
   * UUID is optional for record creation. If no UUID is supplied, a UUID will be automatically generated for the new record and returned in the `x-record-uuid` response header.
   */
  async createJobs(
    security: operations.CreateJobsSecurity,
    request: components.JobInput,
    options?: RequestOptions,
  ): Promise<operations.CreateJobsResponse> {
    return unwrapAsync(jobsCreateJobs(
      this,
      security,
      request,
      options,
    ));
  }

  /**
   * Retrieve a Job
   *
   * @remarks
   *
   * #### OAuth Scope
   * This endpoint requires the following OAuth scope **read_jobs**.
   */
  async getJobs(
    security: operations.GetJobsSecurity,
    request: operations.GetJobsRequest,
    options?: RequestOptions,
  ): Promise<operations.GetJobsResponse> {
    return unwrapAsync(jobsGetJobs(
      this,
      security,
      request,
      options,
    ));
  }

  /**
   * Update a Job
   *
   * @remarks
   *
   * #### OAuth Scope
   * This endpoint requires the following OAuth scope **manage_jobs**.
   */
  async updateJobs(
    security: operations.UpdateJobsSecurity,
    request: operations.UpdateJobsRequest,
    options?: RequestOptions,
  ): Promise<operations.UpdateJobsResponse> {
    return unwrapAsync(jobsUpdateJobs(
      this,
      security,
      request,
      options,
    ));
  }

  /**
   * Delete a Job
   *
   * @remarks
   *
   * In ServiceM8, deleting a record sets its `active` field to `0`. Inactive records are still accessible on the API, but are hidden in the UI. Inactive records can be restored by setting their `active` field to `1`.
   *
   * #### OAuth Scope
   * This endpoint requires the following OAuth scope **manage_jobs**.
   */
  async deleteJobs(
    security: operations.DeleteJobsSecurity,
    request: operations.DeleteJobsRequest,
    options?: RequestOptions,
  ): Promise<operations.DeleteJobsResponse> {
    return unwrapAsync(jobsDeleteJobs(
      this,
      security,
      request,
      options,
    ));
  }
}
